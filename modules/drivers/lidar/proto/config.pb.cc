// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/drivers/lidar/proto/config.proto

#include "modules/drivers/lidar/proto/config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace apollo {
namespace drivers {
namespace lidar {
constexpr config::config(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hesai_(nullptr)
  , robosense_(nullptr)
  , velodyne_(nullptr)
  , brand_(0)
{}
struct configDefaultTypeInternal {
  constexpr configDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~configDefaultTypeInternal() {}
  union {
    config _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT configDefaultTypeInternal _config_default_instance_;
}  // namespace lidar
}  // namespace drivers
}  // namespace apollo
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fdrivers_2flidar_2fproto_2fconfig_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_modules_2fdrivers_2flidar_2fproto_2fconfig_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fdrivers_2flidar_2fproto_2fconfig_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fdrivers_2flidar_2fproto_2fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::lidar::config, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::lidar::config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::lidar::config, brand_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::lidar::config, hesai_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::lidar::config, robosense_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::lidar::config, velodyne_),
  3,
  0,
  1,
  2,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, -1, sizeof(::apollo::drivers::lidar::config)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::drivers::lidar::_config_default_instance_),
};

const char descriptor_table_protodef_modules_2fdrivers_2flidar_2fproto_2fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n(modules/drivers/lidar/proto/config.pro"
  "to\022\024apollo.drivers.lidar\032.modules/driver"
  "s/lidar/proto/hesai_config.proto\0321module"
  "s/drivers/lidar/proto/velodyne_config.pr"
  "oto\0321modules/drivers/lidar/proto/lidar_p"
  "arameter.proto\0322modules/drivers/lidar/pr"
  "oto/robosense_config.proto\"\335\001\n\006config\022>\n"
  "\005brand\030\001 \001(\0162/.apollo.drivers.lidar.Lida"
  "rParameter.LidarBrand\022+\n\005hesai\030\002 \001(\0132\034.a"
  "pollo.drivers.hesai.Config\0223\n\trobosense\030"
  "\003 \001(\0132 .apollo.drivers.robosense.Config\022"
  "1\n\010velodyne\030\004 \001(\0132\037.apollo.drivers.velod"
  "yne.Config"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fdrivers_2flidar_2fproto_2fconfig_2eproto_deps[4] = {
  &::descriptor_table_modules_2fdrivers_2flidar_2fproto_2fhesai_5fconfig_2eproto,
  &::descriptor_table_modules_2fdrivers_2flidar_2fproto_2flidar_5fparameter_2eproto,
  &::descriptor_table_modules_2fdrivers_2flidar_2fproto_2frobosense_5fconfig_2eproto,
  &::descriptor_table_modules_2fdrivers_2flidar_2fproto_2fvelodyne_5fconfig_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fdrivers_2flidar_2fproto_2fconfig_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fdrivers_2flidar_2fproto_2fconfig_2eproto = {
  false, false, 490, descriptor_table_protodef_modules_2fdrivers_2flidar_2fproto_2fconfig_2eproto, "modules/drivers/lidar/proto/config.proto", 
  &descriptor_table_modules_2fdrivers_2flidar_2fproto_2fconfig_2eproto_once, descriptor_table_modules_2fdrivers_2flidar_2fproto_2fconfig_2eproto_deps, 4, 1,
  schemas, file_default_instances, TableStruct_modules_2fdrivers_2flidar_2fproto_2fconfig_2eproto::offsets,
  file_level_metadata_modules_2fdrivers_2flidar_2fproto_2fconfig_2eproto, file_level_enum_descriptors_modules_2fdrivers_2flidar_2fproto_2fconfig_2eproto, file_level_service_descriptors_modules_2fdrivers_2flidar_2fproto_2fconfig_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_modules_2fdrivers_2flidar_2fproto_2fconfig_2eproto_getter() {
  return &descriptor_table_modules_2fdrivers_2flidar_2fproto_2fconfig_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_modules_2fdrivers_2flidar_2fproto_2fconfig_2eproto(&descriptor_table_modules_2fdrivers_2flidar_2fproto_2fconfig_2eproto);
namespace apollo {
namespace drivers {
namespace lidar {

// ===================================================================

class config::_Internal {
 public:
  using HasBits = decltype(std::declval<config>()._has_bits_);
  static void set_has_brand(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::apollo::drivers::hesai::Config& hesai(const config* msg);
  static void set_has_hesai(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::drivers::robosense::Config& robosense(const config* msg);
  static void set_has_robosense(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::drivers::velodyne::Config& velodyne(const config* msg);
  static void set_has_velodyne(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::apollo::drivers::hesai::Config&
config::_Internal::hesai(const config* msg) {
  return *msg->hesai_;
}
const ::apollo::drivers::robosense::Config&
config::_Internal::robosense(const config* msg) {
  return *msg->robosense_;
}
const ::apollo::drivers::velodyne::Config&
config::_Internal::velodyne(const config* msg) {
  return *msg->velodyne_;
}
void config::clear_hesai() {
  if (hesai_ != nullptr) hesai_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void config::clear_robosense() {
  if (robosense_ != nullptr) robosense_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void config::clear_velodyne() {
  if (velodyne_ != nullptr) velodyne_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
config::config(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.drivers.lidar.config)
}
config::config(const config& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hesai()) {
    hesai_ = new ::apollo::drivers::hesai::Config(*from.hesai_);
  } else {
    hesai_ = nullptr;
  }
  if (from._internal_has_robosense()) {
    robosense_ = new ::apollo::drivers::robosense::Config(*from.robosense_);
  } else {
    robosense_ = nullptr;
  }
  if (from._internal_has_velodyne()) {
    velodyne_ = new ::apollo::drivers::velodyne::Config(*from.velodyne_);
  } else {
    velodyne_ = nullptr;
  }
  brand_ = from.brand_;
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.lidar.config)
}

void config::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&hesai_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&brand_) -
    reinterpret_cast<char*>(&hesai_)) + sizeof(brand_));
}

config::~config() {
  // @@protoc_insertion_point(destructor:apollo.drivers.lidar.config)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void config::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete hesai_;
  if (this != internal_default_instance()) delete robosense_;
  if (this != internal_default_instance()) delete velodyne_;
}

void config::ArenaDtor(void* object) {
  config* _this = reinterpret_cast< config* >(object);
  (void)_this;
}
void config::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void config::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void config::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.lidar.config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(hesai_ != nullptr);
      hesai_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(robosense_ != nullptr);
      robosense_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(velodyne_ != nullptr);
      velodyne_->Clear();
    }
  }
  brand_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* config::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.drivers.lidar.LidarParameter.LidarBrand brand = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::lidar::LidarParameter_LidarBrand_IsValid(val))) {
            _internal_set_brand(static_cast<::apollo::drivers::lidar::LidarParameter_LidarBrand>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.drivers.hesai.Config hesai = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_hesai(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.drivers.robosense.Config robosense = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_robosense(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.drivers.velodyne.Config velodyne = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_velodyne(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* config::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.lidar.config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.drivers.lidar.LidarParameter.LidarBrand brand = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_brand(), target);
  }

  // optional .apollo.drivers.hesai.Config hesai = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::hesai(this), target, stream);
  }

  // optional .apollo.drivers.robosense.Config robosense = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::robosense(this), target, stream);
  }

  // optional .apollo.drivers.velodyne.Config velodyne = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::velodyne(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.lidar.config)
  return target;
}

size_t config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.lidar.config)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .apollo.drivers.hesai.Config hesai = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *hesai_);
    }

    // optional .apollo.drivers.robosense.Config robosense = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *robosense_);
    }

    // optional .apollo.drivers.velodyne.Config velodyne = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *velodyne_);
    }

    // optional .apollo.drivers.lidar.LidarParameter.LidarBrand brand = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_brand());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData config::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    config::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*config::GetClassData() const { return &_class_data_; }

void config::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<config *>(to)->MergeFrom(
      static_cast<const config &>(from));
}


void config::MergeFrom(const config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.lidar.config)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_hesai()->::apollo::drivers::hesai::Config::MergeFrom(from._internal_hesai());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_robosense()->::apollo::drivers::robosense::Config::MergeFrom(from._internal_robosense());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_velodyne()->::apollo::drivers::velodyne::Config::MergeFrom(from._internal_velodyne());
    }
    if (cached_has_bits & 0x00000008u) {
      brand_ = from.brand_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void config::CopyFrom(const config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.lidar.config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool config::IsInitialized() const {
  return true;
}

void config::InternalSwap(config* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(config, brand_)
      + sizeof(config::brand_)
      - PROTOBUF_FIELD_OFFSET(config, hesai_)>(
          reinterpret_cast<char*>(&hesai_),
          reinterpret_cast<char*>(&other->hesai_));
}

::PROTOBUF_NAMESPACE_ID::Metadata config::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fdrivers_2flidar_2fproto_2fconfig_2eproto_getter, &descriptor_table_modules_2fdrivers_2flidar_2fproto_2fconfig_2eproto_once,
      file_level_metadata_modules_2fdrivers_2flidar_2fproto_2fconfig_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace lidar
}  // namespace drivers
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::drivers::lidar::config* Arena::CreateMaybeMessage< ::apollo::drivers::lidar::config >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::drivers::lidar::config >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
