// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/drivers/lidar/proto/robosense.proto

#include "modules/drivers/lidar/proto/robosense.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace apollo {
namespace drivers {
namespace robosense {
constexpr RobosenseScanPacket::RobosenseScanPacket(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , stamp_(uint64_t{0u}){}
struct RobosenseScanPacketDefaultTypeInternal {
  constexpr RobosenseScanPacketDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RobosenseScanPacketDefaultTypeInternal() {}
  union {
    RobosenseScanPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RobosenseScanPacketDefaultTypeInternal _RobosenseScanPacket_default_instance_;
constexpr RobosenseScan::RobosenseScan(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : firing_pkts_()
  , model_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , header_(nullptr)
  , basetime_(uint64_t{0u}){}
struct RobosenseScanDefaultTypeInternal {
  constexpr RobosenseScanDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RobosenseScanDefaultTypeInternal() {}
  union {
    RobosenseScan _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RobosenseScanDefaultTypeInternal _RobosenseScan_default_instance_;
}  // namespace robosense
}  // namespace drivers
}  // namespace apollo
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fdrivers_2flidar_2fproto_2frobosense_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_modules_2fdrivers_2flidar_2fproto_2frobosense_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fdrivers_2flidar_2fproto_2frobosense_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fdrivers_2flidar_2fproto_2frobosense_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::robosense::RobosenseScanPacket, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::robosense::RobosenseScanPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::robosense::RobosenseScanPacket, stamp_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::robosense::RobosenseScanPacket, data_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::robosense::RobosenseScan, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::robosense::RobosenseScan, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::robosense::RobosenseScan, header_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::robosense::RobosenseScan, model_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::robosense::RobosenseScan, firing_pkts_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::robosense::RobosenseScan, basetime_),
  1,
  0,
  ~0u,
  2,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::apollo::drivers::robosense::RobosenseScanPacket)},
  { 10, 20, -1, sizeof(::apollo::drivers::robosense::RobosenseScan)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::drivers::robosense::_RobosenseScanPacket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::drivers::robosense::_RobosenseScan_default_instance_),
};

const char descriptor_table_protodef_modules_2fdrivers_2flidar_2fproto_2frobosense_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n+modules/drivers/lidar/proto/robosense."
  "proto\022\030apollo.drivers.robosense\032!modules"
  "/common/proto/header.proto\"2\n\023RobosenseS"
  "canPacket\022\r\n\005stamp\030\001 \001(\004\022\014\n\004data\030\002 \001(\014\"\236"
  "\001\n\rRobosenseScan\022%\n\006header\030\001 \001(\0132\025.apoll"
  "o.common.Header\022\r\n\005model\030\002 \001(\t\022B\n\013firing"
  "_pkts\030\003 \003(\0132-.apollo.drivers.robosense.R"
  "obosenseScanPacket\022\023\n\010basetime\030\004 \001(\004:\0010"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fdrivers_2flidar_2fproto_2frobosense_2eproto_deps[1] = {
  &::descriptor_table_modules_2fcommon_2fproto_2fheader_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fdrivers_2flidar_2fproto_2frobosense_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fdrivers_2flidar_2fproto_2frobosense_2eproto = {
  false, false, 319, descriptor_table_protodef_modules_2fdrivers_2flidar_2fproto_2frobosense_2eproto, "modules/drivers/lidar/proto/robosense.proto", 
  &descriptor_table_modules_2fdrivers_2flidar_2fproto_2frobosense_2eproto_once, descriptor_table_modules_2fdrivers_2flidar_2fproto_2frobosense_2eproto_deps, 1, 2,
  schemas, file_default_instances, TableStruct_modules_2fdrivers_2flidar_2fproto_2frobosense_2eproto::offsets,
  file_level_metadata_modules_2fdrivers_2flidar_2fproto_2frobosense_2eproto, file_level_enum_descriptors_modules_2fdrivers_2flidar_2fproto_2frobosense_2eproto, file_level_service_descriptors_modules_2fdrivers_2flidar_2fproto_2frobosense_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_modules_2fdrivers_2flidar_2fproto_2frobosense_2eproto_getter() {
  return &descriptor_table_modules_2fdrivers_2flidar_2fproto_2frobosense_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_modules_2fdrivers_2flidar_2fproto_2frobosense_2eproto(&descriptor_table_modules_2fdrivers_2flidar_2fproto_2frobosense_2eproto);
namespace apollo {
namespace drivers {
namespace robosense {

// ===================================================================

class RobosenseScanPacket::_Internal {
 public:
  using HasBits = decltype(std::declval<RobosenseScanPacket>()._has_bits_);
  static void set_has_stamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RobosenseScanPacket::RobosenseScanPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.drivers.robosense.RobosenseScanPacket)
}
RobosenseScanPacket::RobosenseScanPacket(const RobosenseScanPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_data()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArenaForAllocation());
  }
  stamp_ = from.stamp_;
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.robosense.RobosenseScanPacket)
}

void RobosenseScanPacket::SharedCtor() {
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
stamp_ = uint64_t{0u};
}

RobosenseScanPacket::~RobosenseScanPacket() {
  // @@protoc_insertion_point(destructor:apollo.drivers.robosense.RobosenseScanPacket)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RobosenseScanPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RobosenseScanPacket::ArenaDtor(void* object) {
  RobosenseScanPacket* _this = reinterpret_cast< RobosenseScanPacket* >(object);
  (void)_this;
}
void RobosenseScanPacket::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RobosenseScanPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RobosenseScanPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.robosense.RobosenseScanPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    data_.ClearNonDefaultToEmpty();
  }
  stamp_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RobosenseScanPacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 stamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_stamp(&has_bits);
          stamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RobosenseScanPacket::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.robosense.RobosenseScanPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 stamp = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_stamp(), target);
  }

  // optional bytes data = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.robosense.RobosenseScanPacket)
  return target;
}

size_t RobosenseScanPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.robosense.RobosenseScanPacket)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes data = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_data());
    }

    // optional uint64 stamp = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_stamp());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RobosenseScanPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RobosenseScanPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RobosenseScanPacket::GetClassData() const { return &_class_data_; }

void RobosenseScanPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RobosenseScanPacket *>(to)->MergeFrom(
      static_cast<const RobosenseScanPacket &>(from));
}


void RobosenseScanPacket::MergeFrom(const RobosenseScanPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.robosense.RobosenseScanPacket)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_data(from._internal_data());
    }
    if (cached_has_bits & 0x00000002u) {
      stamp_ = from.stamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RobosenseScanPacket::CopyFrom(const RobosenseScanPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.robosense.RobosenseScanPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobosenseScanPacket::IsInitialized() const {
  return true;
}

void RobosenseScanPacket::InternalSwap(RobosenseScanPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &data_, lhs_arena,
      &other->data_, rhs_arena
  );
  swap(stamp_, other->stamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RobosenseScanPacket::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fdrivers_2flidar_2fproto_2frobosense_2eproto_getter, &descriptor_table_modules_2fdrivers_2flidar_2fproto_2frobosense_2eproto_once,
      file_level_metadata_modules_2fdrivers_2flidar_2fproto_2frobosense_2eproto[0]);
}

// ===================================================================

class RobosenseScan::_Internal {
 public:
  using HasBits = decltype(std::declval<RobosenseScan>()._has_bits_);
  static const ::apollo::common::Header& header(const RobosenseScan* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_model(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_basetime(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::apollo::common::Header&
RobosenseScan::_Internal::header(const RobosenseScan* msg) {
  return *msg->header_;
}
void RobosenseScan::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
RobosenseScan::RobosenseScan(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  firing_pkts_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.drivers.robosense.RobosenseScan)
}
RobosenseScan::RobosenseScan(const RobosenseScan& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      firing_pkts_(from.firing_pkts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_model()) {
    model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_model(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_header()) {
    header_ = new ::apollo::common::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  basetime_ = from.basetime_;
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.robosense.RobosenseScan)
}

void RobosenseScan::SharedCtor() {
model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&basetime_) -
    reinterpret_cast<char*>(&header_)) + sizeof(basetime_));
}

RobosenseScan::~RobosenseScan() {
  // @@protoc_insertion_point(destructor:apollo.drivers.robosense.RobosenseScan)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RobosenseScan::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  model_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void RobosenseScan::ArenaDtor(void* object) {
  RobosenseScan* _this = reinterpret_cast< RobosenseScan* >(object);
  (void)_this;
}
void RobosenseScan::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RobosenseScan::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RobosenseScan::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.robosense.RobosenseScan)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  firing_pkts_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      model_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(header_ != nullptr);
      header_->Clear();
    }
  }
  basetime_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RobosenseScan::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string model = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_model();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.drivers.robosense.RobosenseScan.model");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.drivers.robosense.RobosenseScanPacket firing_pkts = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_firing_pkts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint64 basetime = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_basetime(&has_bits);
          basetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RobosenseScan::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.robosense.RobosenseScan)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // optional string model = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_model().data(), static_cast<int>(this->_internal_model().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.drivers.robosense.RobosenseScan.model");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model(), target);
  }

  // repeated .apollo.drivers.robosense.RobosenseScanPacket firing_pkts = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_firing_pkts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_firing_pkts(i), target, stream);
  }

  // optional uint64 basetime = 4 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_basetime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.robosense.RobosenseScan)
  return target;
}

size_t RobosenseScan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.robosense.RobosenseScan)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.drivers.robosense.RobosenseScanPacket firing_pkts = 3;
  total_size += 1UL * this->_internal_firing_pkts_size();
  for (const auto& msg : this->firing_pkts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string model = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_model());
    }

    // optional .apollo.common.Header header = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional uint64 basetime = 4 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_basetime());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RobosenseScan::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RobosenseScan::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RobosenseScan::GetClassData() const { return &_class_data_; }

void RobosenseScan::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RobosenseScan *>(to)->MergeFrom(
      static_cast<const RobosenseScan &>(from));
}


void RobosenseScan::MergeFrom(const RobosenseScan& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.robosense.RobosenseScan)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  firing_pkts_.MergeFrom(from.firing_pkts_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_model(from._internal_model());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_header()->::apollo::common::Header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000004u) {
      basetime_ = from.basetime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RobosenseScan::CopyFrom(const RobosenseScan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.robosense.RobosenseScan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobosenseScan::IsInitialized() const {
  return true;
}

void RobosenseScan::InternalSwap(RobosenseScan* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  firing_pkts_.InternalSwap(&other->firing_pkts_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &model_, lhs_arena,
      &other->model_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RobosenseScan, basetime_)
      + sizeof(RobosenseScan::basetime_)
      - PROTOBUF_FIELD_OFFSET(RobosenseScan, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RobosenseScan::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fdrivers_2flidar_2fproto_2frobosense_2eproto_getter, &descriptor_table_modules_2fdrivers_2flidar_2fproto_2frobosense_2eproto_once,
      file_level_metadata_modules_2fdrivers_2flidar_2fproto_2frobosense_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace robosense
}  // namespace drivers
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::drivers::robosense::RobosenseScanPacket* Arena::CreateMaybeMessage< ::apollo::drivers::robosense::RobosenseScanPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::drivers::robosense::RobosenseScanPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::drivers::robosense::RobosenseScan* Arena::CreateMaybeMessage< ::apollo::drivers::robosense::RobosenseScan >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::drivers::robosense::RobosenseScan >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
