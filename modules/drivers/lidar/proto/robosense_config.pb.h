// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/drivers/lidar/proto/robosense_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fdrivers_2flidar_2fproto_2frobosense_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fdrivers_2flidar_2fproto_2frobosense_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fdrivers_2flidar_2fproto_2frobosense_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fdrivers_2flidar_2fproto_2frobosense_5fconfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fdrivers_2flidar_2fproto_2frobosense_5fconfig_2eproto;
namespace apollo {
namespace drivers {
namespace robosense {
class Config;
struct ConfigDefaultTypeInternal;
extern ConfigDefaultTypeInternal _Config_default_instance_;
}  // namespace robosense
}  // namespace drivers
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::drivers::robosense::Config* Arena::CreateMaybeMessage<::apollo::drivers::robosense::Config>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace drivers {
namespace robosense {

// ===================================================================

class Config final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.robosense.Config) */ {
 public:
  inline Config() : Config(nullptr) {}
  ~Config() override;
  explicit constexpr Config(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Config(const Config& from);
  Config(Config&& from) noexcept
    : Config() {
    *this = ::std::move(from);
  }

  inline Config& operator=(const Config& from) {
    CopyFrom(from);
    return *this;
  }
  inline Config& operator=(Config&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Config& default_instance() {
    return *internal_default_instance();
  }
  static inline const Config* internal_default_instance() {
    return reinterpret_cast<const Config*>(
               &_Config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Config& a, Config& b) {
    a.Swap(&b);
  }
  inline void Swap(Config* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Config* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Config* New() const final {
    return new Config();
  }

  Config* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Config>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Config& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Config& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Config* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.drivers.robosense.Config";
  }
  protected:
  explicit Config(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelFieldNumber = 1,
    kFrameIdFieldNumber = 2,
    kIpFieldNumber = 3,
    kPointcloudChannelFieldNumber = 13,
    kScanChannelFieldNumber = 14,
    kCalibrationFileFieldNumber = 15,
    kMsopPortFieldNumber = 4,
    kDifopPortFieldNumber = 5,
    kEchoModeFieldNumber = 6,
    kStartAngleFieldNumber = 8,
    kEndAngleFieldNumber = 9,
    kMinDistanceFieldNumber = 10,
    kMaxDistanceFieldNumber = 11,
    kCutAngleFieldNumber = 12,
    kUseLidarClockFieldNumber = 16,
  };
  // optional string model = 1;
  bool has_model() const;
  private:
  bool _internal_has_model() const;
  public:
  void clear_model();
  const std::string& model() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model();
  PROTOBUF_MUST_USE_RESULT std::string* release_model();
  void set_allocated_model(std::string* model);
  private:
  const std::string& _internal_model() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model(const std::string& value);
  std::string* _internal_mutable_model();
  public:

  // optional string frame_id = 2;
  bool has_frame_id() const;
  private:
  bool _internal_has_frame_id() const;
  public:
  void clear_frame_id();
  const std::string& frame_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_frame_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_frame_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_frame_id();
  void set_allocated_frame_id(std::string* frame_id);
  private:
  const std::string& _internal_frame_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_frame_id(const std::string& value);
  std::string* _internal_mutable_frame_id();
  public:

  // optional string ip = 3;
  bool has_ip() const;
  private:
  bool _internal_has_ip() const;
  public:
  void clear_ip();
  const std::string& ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip();
  PROTOBUF_MUST_USE_RESULT std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // optional string pointcloud_channel = 13;
  bool has_pointcloud_channel() const;
  private:
  bool _internal_has_pointcloud_channel() const;
  public:
  void clear_pointcloud_channel();
  const std::string& pointcloud_channel() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pointcloud_channel(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pointcloud_channel();
  PROTOBUF_MUST_USE_RESULT std::string* release_pointcloud_channel();
  void set_allocated_pointcloud_channel(std::string* pointcloud_channel);
  private:
  const std::string& _internal_pointcloud_channel() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pointcloud_channel(const std::string& value);
  std::string* _internal_mutable_pointcloud_channel();
  public:

  // optional string scan_channel = 14;
  bool has_scan_channel() const;
  private:
  bool _internal_has_scan_channel() const;
  public:
  void clear_scan_channel();
  const std::string& scan_channel() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_scan_channel(ArgT0&& arg0, ArgT... args);
  std::string* mutable_scan_channel();
  PROTOBUF_MUST_USE_RESULT std::string* release_scan_channel();
  void set_allocated_scan_channel(std::string* scan_channel);
  private:
  const std::string& _internal_scan_channel() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_scan_channel(const std::string& value);
  std::string* _internal_mutable_scan_channel();
  public:

  // optional string calibration_file = 15;
  bool has_calibration_file() const;
  private:
  bool _internal_has_calibration_file() const;
  public:
  void clear_calibration_file();
  const std::string& calibration_file() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_calibration_file(ArgT0&& arg0, ArgT... args);
  std::string* mutable_calibration_file();
  PROTOBUF_MUST_USE_RESULT std::string* release_calibration_file();
  void set_allocated_calibration_file(std::string* calibration_file);
  private:
  const std::string& _internal_calibration_file() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_calibration_file(const std::string& value);
  std::string* _internal_mutable_calibration_file();
  public:

  // optional uint32 msop_port = 4;
  bool has_msop_port() const;
  private:
  bool _internal_has_msop_port() const;
  public:
  void clear_msop_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 msop_port() const;
  void set_msop_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_msop_port() const;
  void _internal_set_msop_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 difop_port = 5;
  bool has_difop_port() const;
  private:
  bool _internal_has_difop_port() const;
  public:
  void clear_difop_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 difop_port() const;
  void set_difop_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_difop_port() const;
  void _internal_set_difop_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 echo_mode = 6;
  bool has_echo_mode() const;
  private:
  bool _internal_has_echo_mode() const;
  public:
  void clear_echo_mode();
  ::PROTOBUF_NAMESPACE_ID::uint32 echo_mode() const;
  void set_echo_mode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_echo_mode() const;
  void _internal_set_echo_mode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 start_angle = 8;
  bool has_start_angle() const;
  private:
  bool _internal_has_start_angle() const;
  public:
  void clear_start_angle();
  ::PROTOBUF_NAMESPACE_ID::uint32 start_angle() const;
  void set_start_angle(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_start_angle() const;
  void _internal_set_start_angle(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 end_angle = 9;
  bool has_end_angle() const;
  private:
  bool _internal_has_end_angle() const;
  public:
  void clear_end_angle();
  ::PROTOBUF_NAMESPACE_ID::uint32 end_angle() const;
  void set_end_angle(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_end_angle() const;
  void _internal_set_end_angle(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 min_distance = 10;
  bool has_min_distance() const;
  private:
  bool _internal_has_min_distance() const;
  public:
  void clear_min_distance();
  ::PROTOBUF_NAMESPACE_ID::uint32 min_distance() const;
  void set_min_distance(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_min_distance() const;
  void _internal_set_min_distance(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 max_distance = 11;
  bool has_max_distance() const;
  private:
  bool _internal_has_max_distance() const;
  public:
  void clear_max_distance();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_distance() const;
  void set_max_distance(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_distance() const;
  void _internal_set_max_distance(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 cut_angle = 12;
  bool has_cut_angle() const;
  private:
  bool _internal_has_cut_angle() const;
  public:
  void clear_cut_angle();
  ::PROTOBUF_NAMESPACE_ID::uint32 cut_angle() const;
  void set_cut_angle(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cut_angle() const;
  void _internal_set_cut_angle(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool use_lidar_clock = 16;
  bool has_use_lidar_clock() const;
  private:
  bool _internal_has_use_lidar_clock() const;
  public:
  void clear_use_lidar_clock();
  bool use_lidar_clock() const;
  void set_use_lidar_clock(bool value);
  private:
  bool _internal_use_lidar_clock() const;
  void _internal_set_use_lidar_clock(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.drivers.robosense.Config)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr frame_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pointcloud_channel_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scan_channel_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr calibration_file_;
  ::PROTOBUF_NAMESPACE_ID::uint32 msop_port_;
  ::PROTOBUF_NAMESPACE_ID::uint32 difop_port_;
  ::PROTOBUF_NAMESPACE_ID::uint32 echo_mode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 start_angle_;
  ::PROTOBUF_NAMESPACE_ID::uint32 end_angle_;
  ::PROTOBUF_NAMESPACE_ID::uint32 min_distance_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_distance_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cut_angle_;
  bool use_lidar_clock_;
  friend struct ::TableStruct_modules_2fdrivers_2flidar_2fproto_2frobosense_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Config

// optional string model = 1;
inline bool Config::_internal_has_model() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Config::has_model() const {
  return _internal_has_model();
}
inline void Config::clear_model() {
  model_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Config::model() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.robosense.Config.model)
  return _internal_model();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Config::set_model(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.drivers.robosense.Config.model)
}
inline std::string* Config::mutable_model() {
  std::string* _s = _internal_mutable_model();
  // @@protoc_insertion_point(field_mutable:apollo.drivers.robosense.Config.model)
  return _s;
}
inline const std::string& Config::_internal_model() const {
  return model_.Get();
}
inline void Config::_internal_set_model(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Config::_internal_mutable_model() {
  _has_bits_[0] |= 0x00000001u;
  return model_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Config::release_model() {
  // @@protoc_insertion_point(field_release:apollo.drivers.robosense.Config.model)
  if (!_internal_has_model()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return model_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Config::set_allocated_model(std::string* model) {
  if (model != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  model_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.robosense.Config.model)
}

// optional string frame_id = 2;
inline bool Config::_internal_has_frame_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Config::has_frame_id() const {
  return _internal_has_frame_id();
}
inline void Config::clear_frame_id() {
  frame_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Config::frame_id() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.robosense.Config.frame_id)
  return _internal_frame_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Config::set_frame_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 frame_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.drivers.robosense.Config.frame_id)
}
inline std::string* Config::mutable_frame_id() {
  std::string* _s = _internal_mutable_frame_id();
  // @@protoc_insertion_point(field_mutable:apollo.drivers.robosense.Config.frame_id)
  return _s;
}
inline const std::string& Config::_internal_frame_id() const {
  return frame_id_.Get();
}
inline void Config::_internal_set_frame_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  frame_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Config::_internal_mutable_frame_id() {
  _has_bits_[0] |= 0x00000002u;
  return frame_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Config::release_frame_id() {
  // @@protoc_insertion_point(field_release:apollo.drivers.robosense.Config.frame_id)
  if (!_internal_has_frame_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return frame_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Config::set_allocated_frame_id(std::string* frame_id) {
  if (frame_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  frame_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), frame_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.robosense.Config.frame_id)
}

// optional string ip = 3;
inline bool Config::_internal_has_ip() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Config::has_ip() const {
  return _internal_has_ip();
}
inline void Config::clear_ip() {
  ip_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Config::ip() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.robosense.Config.ip)
  return _internal_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Config::set_ip(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.drivers.robosense.Config.ip)
}
inline std::string* Config::mutable_ip() {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:apollo.drivers.robosense.Config.ip)
  return _s;
}
inline const std::string& Config::_internal_ip() const {
  return ip_.Get();
}
inline void Config::_internal_set_ip(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Config::_internal_mutable_ip() {
  _has_bits_[0] |= 0x00000004u;
  return ip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Config::release_ip() {
  // @@protoc_insertion_point(field_release:apollo.drivers.robosense.Config.ip)
  if (!_internal_has_ip()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return ip_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Config::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.robosense.Config.ip)
}

// optional uint32 msop_port = 4;
inline bool Config::_internal_has_msop_port() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Config::has_msop_port() const {
  return _internal_has_msop_port();
}
inline void Config::clear_msop_port() {
  msop_port_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Config::_internal_msop_port() const {
  return msop_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Config::msop_port() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.robosense.Config.msop_port)
  return _internal_msop_port();
}
inline void Config::_internal_set_msop_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  msop_port_ = value;
}
inline void Config::set_msop_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_msop_port(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.robosense.Config.msop_port)
}

// optional uint32 difop_port = 5;
inline bool Config::_internal_has_difop_port() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Config::has_difop_port() const {
  return _internal_has_difop_port();
}
inline void Config::clear_difop_port() {
  difop_port_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Config::_internal_difop_port() const {
  return difop_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Config::difop_port() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.robosense.Config.difop_port)
  return _internal_difop_port();
}
inline void Config::_internal_set_difop_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  difop_port_ = value;
}
inline void Config::set_difop_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_difop_port(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.robosense.Config.difop_port)
}

// optional uint32 echo_mode = 6;
inline bool Config::_internal_has_echo_mode() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Config::has_echo_mode() const {
  return _internal_has_echo_mode();
}
inline void Config::clear_echo_mode() {
  echo_mode_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Config::_internal_echo_mode() const {
  return echo_mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Config::echo_mode() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.robosense.Config.echo_mode)
  return _internal_echo_mode();
}
inline void Config::_internal_set_echo_mode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  echo_mode_ = value;
}
inline void Config::set_echo_mode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_echo_mode(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.robosense.Config.echo_mode)
}

// optional uint32 start_angle = 8;
inline bool Config::_internal_has_start_angle() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Config::has_start_angle() const {
  return _internal_has_start_angle();
}
inline void Config::clear_start_angle() {
  start_angle_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Config::_internal_start_angle() const {
  return start_angle_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Config::start_angle() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.robosense.Config.start_angle)
  return _internal_start_angle();
}
inline void Config::_internal_set_start_angle(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  start_angle_ = value;
}
inline void Config::set_start_angle(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_start_angle(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.robosense.Config.start_angle)
}

// optional uint32 end_angle = 9;
inline bool Config::_internal_has_end_angle() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Config::has_end_angle() const {
  return _internal_has_end_angle();
}
inline void Config::clear_end_angle() {
  end_angle_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Config::_internal_end_angle() const {
  return end_angle_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Config::end_angle() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.robosense.Config.end_angle)
  return _internal_end_angle();
}
inline void Config::_internal_set_end_angle(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  end_angle_ = value;
}
inline void Config::set_end_angle(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_end_angle(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.robosense.Config.end_angle)
}

// optional uint32 min_distance = 10;
inline bool Config::_internal_has_min_distance() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool Config::has_min_distance() const {
  return _internal_has_min_distance();
}
inline void Config::clear_min_distance() {
  min_distance_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Config::_internal_min_distance() const {
  return min_distance_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Config::min_distance() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.robosense.Config.min_distance)
  return _internal_min_distance();
}
inline void Config::_internal_set_min_distance(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  min_distance_ = value;
}
inline void Config::set_min_distance(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_min_distance(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.robosense.Config.min_distance)
}

// optional uint32 max_distance = 11;
inline bool Config::_internal_has_max_distance() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool Config::has_max_distance() const {
  return _internal_has_max_distance();
}
inline void Config::clear_max_distance() {
  max_distance_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Config::_internal_max_distance() const {
  return max_distance_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Config::max_distance() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.robosense.Config.max_distance)
  return _internal_max_distance();
}
inline void Config::_internal_set_max_distance(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  max_distance_ = value;
}
inline void Config::set_max_distance(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_distance(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.robosense.Config.max_distance)
}

// optional uint32 cut_angle = 12;
inline bool Config::_internal_has_cut_angle() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool Config::has_cut_angle() const {
  return _internal_has_cut_angle();
}
inline void Config::clear_cut_angle() {
  cut_angle_ = 0u;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Config::_internal_cut_angle() const {
  return cut_angle_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Config::cut_angle() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.robosense.Config.cut_angle)
  return _internal_cut_angle();
}
inline void Config::_internal_set_cut_angle(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00002000u;
  cut_angle_ = value;
}
inline void Config::set_cut_angle(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cut_angle(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.robosense.Config.cut_angle)
}

// optional string pointcloud_channel = 13;
inline bool Config::_internal_has_pointcloud_channel() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Config::has_pointcloud_channel() const {
  return _internal_has_pointcloud_channel();
}
inline void Config::clear_pointcloud_channel() {
  pointcloud_channel_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Config::pointcloud_channel() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.robosense.Config.pointcloud_channel)
  return _internal_pointcloud_channel();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Config::set_pointcloud_channel(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 pointcloud_channel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.drivers.robosense.Config.pointcloud_channel)
}
inline std::string* Config::mutable_pointcloud_channel() {
  std::string* _s = _internal_mutable_pointcloud_channel();
  // @@protoc_insertion_point(field_mutable:apollo.drivers.robosense.Config.pointcloud_channel)
  return _s;
}
inline const std::string& Config::_internal_pointcloud_channel() const {
  return pointcloud_channel_.Get();
}
inline void Config::_internal_set_pointcloud_channel(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  pointcloud_channel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Config::_internal_mutable_pointcloud_channel() {
  _has_bits_[0] |= 0x00000008u;
  return pointcloud_channel_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Config::release_pointcloud_channel() {
  // @@protoc_insertion_point(field_release:apollo.drivers.robosense.Config.pointcloud_channel)
  if (!_internal_has_pointcloud_channel()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return pointcloud_channel_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Config::set_allocated_pointcloud_channel(std::string* pointcloud_channel) {
  if (pointcloud_channel != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  pointcloud_channel_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pointcloud_channel,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.robosense.Config.pointcloud_channel)
}

// optional string scan_channel = 14;
inline bool Config::_internal_has_scan_channel() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Config::has_scan_channel() const {
  return _internal_has_scan_channel();
}
inline void Config::clear_scan_channel() {
  scan_channel_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& Config::scan_channel() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.robosense.Config.scan_channel)
  return _internal_scan_channel();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Config::set_scan_channel(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000010u;
 scan_channel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.drivers.robosense.Config.scan_channel)
}
inline std::string* Config::mutable_scan_channel() {
  std::string* _s = _internal_mutable_scan_channel();
  // @@protoc_insertion_point(field_mutable:apollo.drivers.robosense.Config.scan_channel)
  return _s;
}
inline const std::string& Config::_internal_scan_channel() const {
  return scan_channel_.Get();
}
inline void Config::_internal_set_scan_channel(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  scan_channel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Config::_internal_mutable_scan_channel() {
  _has_bits_[0] |= 0x00000010u;
  return scan_channel_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Config::release_scan_channel() {
  // @@protoc_insertion_point(field_release:apollo.drivers.robosense.Config.scan_channel)
  if (!_internal_has_scan_channel()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return scan_channel_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Config::set_allocated_scan_channel(std::string* scan_channel) {
  if (scan_channel != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  scan_channel_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scan_channel,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.robosense.Config.scan_channel)
}

// optional string calibration_file = 15;
inline bool Config::_internal_has_calibration_file() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Config::has_calibration_file() const {
  return _internal_has_calibration_file();
}
inline void Config::clear_calibration_file() {
  calibration_file_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& Config::calibration_file() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.robosense.Config.calibration_file)
  return _internal_calibration_file();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Config::set_calibration_file(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000020u;
 calibration_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.drivers.robosense.Config.calibration_file)
}
inline std::string* Config::mutable_calibration_file() {
  std::string* _s = _internal_mutable_calibration_file();
  // @@protoc_insertion_point(field_mutable:apollo.drivers.robosense.Config.calibration_file)
  return _s;
}
inline const std::string& Config::_internal_calibration_file() const {
  return calibration_file_.Get();
}
inline void Config::_internal_set_calibration_file(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  calibration_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Config::_internal_mutable_calibration_file() {
  _has_bits_[0] |= 0x00000020u;
  return calibration_file_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Config::release_calibration_file() {
  // @@protoc_insertion_point(field_release:apollo.drivers.robosense.Config.calibration_file)
  if (!_internal_has_calibration_file()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return calibration_file_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Config::set_allocated_calibration_file(std::string* calibration_file) {
  if (calibration_file != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  calibration_file_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), calibration_file,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.robosense.Config.calibration_file)
}

// optional bool use_lidar_clock = 16;
inline bool Config::_internal_has_use_lidar_clock() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool Config::has_use_lidar_clock() const {
  return _internal_has_use_lidar_clock();
}
inline void Config::clear_use_lidar_clock() {
  use_lidar_clock_ = false;
  _has_bits_[0] &= ~0x00004000u;
}
inline bool Config::_internal_use_lidar_clock() const {
  return use_lidar_clock_;
}
inline bool Config::use_lidar_clock() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.robosense.Config.use_lidar_clock)
  return _internal_use_lidar_clock();
}
inline void Config::_internal_set_use_lidar_clock(bool value) {
  _has_bits_[0] |= 0x00004000u;
  use_lidar_clock_ = value;
}
inline void Config::set_use_lidar_clock(bool value) {
  _internal_set_use_lidar_clock(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.robosense.Config.use_lidar_clock)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace robosense
}  // namespace drivers
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fdrivers_2flidar_2fproto_2frobosense_5fconfig_2eproto
