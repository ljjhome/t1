// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/drivers/lidar/proto/robosense_config.proto

#include "modules/drivers/lidar/proto/robosense_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace apollo {
namespace drivers {
namespace robosense {
constexpr Config::Config(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : model_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , frame_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ip_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pointcloud_channel_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , scan_channel_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , calibration_file_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , msop_port_(0u)
  , difop_port_(0u)
  , echo_mode_(0u)
  , start_angle_(0u)
  , end_angle_(0u)
  , min_distance_(0u)
  , max_distance_(0u)
  , cut_angle_(0u)
  , use_lidar_clock_(false){}
struct ConfigDefaultTypeInternal {
  constexpr ConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConfigDefaultTypeInternal() {}
  union {
    Config _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConfigDefaultTypeInternal _Config_default_instance_;
}  // namespace robosense
}  // namespace drivers
}  // namespace apollo
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fdrivers_2flidar_2fproto_2frobosense_5fconfig_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_modules_2fdrivers_2flidar_2fproto_2frobosense_5fconfig_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fdrivers_2flidar_2fproto_2frobosense_5fconfig_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fdrivers_2flidar_2fproto_2frobosense_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::robosense::Config, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::robosense::Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::robosense::Config, model_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::robosense::Config, frame_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::robosense::Config, ip_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::robosense::Config, msop_port_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::robosense::Config, difop_port_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::robosense::Config, echo_mode_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::robosense::Config, start_angle_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::robosense::Config, end_angle_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::robosense::Config, min_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::robosense::Config, max_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::robosense::Config, cut_angle_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::robosense::Config, pointcloud_channel_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::robosense::Config, scan_channel_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::robosense::Config, calibration_file_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::robosense::Config, use_lidar_clock_),
  0,
  1,
  2,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  3,
  4,
  5,
  14,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 21, -1, sizeof(::apollo::drivers::robosense::Config)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::drivers::robosense::_Config_default_instance_),
};

const char descriptor_table_protodef_modules_2fdrivers_2flidar_2fproto_2frobosense_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n2modules/drivers/lidar/proto/robosense_"
  "config.proto\022\030apollo.drivers.robosense\"\273"
  "\002\n\006Config\022\r\n\005model\030\001 \001(\t\022\020\n\010frame_id\030\002 \001"
  "(\t\022\n\n\002ip\030\003 \001(\t\022\021\n\tmsop_port\030\004 \001(\r\022\022\n\ndif"
  "op_port\030\005 \001(\r\022\021\n\techo_mode\030\006 \001(\r\022\023\n\013star"
  "t_angle\030\010 \001(\r\022\021\n\tend_angle\030\t \001(\r\022\024\n\014min_"
  "distance\030\n \001(\r\022\024\n\014max_distance\030\013 \001(\r\022\021\n\t"
  "cut_angle\030\014 \001(\r\022\032\n\022pointcloud_channel\030\r "
  "\001(\t\022\024\n\014scan_channel\030\016 \001(\t\022\030\n\020calibration"
  "_file\030\017 \001(\t\022\027\n\017use_lidar_clock\030\020 \001(\010"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fdrivers_2flidar_2fproto_2frobosense_5fconfig_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fdrivers_2flidar_2fproto_2frobosense_5fconfig_2eproto = {
  false, false, 396, descriptor_table_protodef_modules_2fdrivers_2flidar_2fproto_2frobosense_5fconfig_2eproto, "modules/drivers/lidar/proto/robosense_config.proto", 
  &descriptor_table_modules_2fdrivers_2flidar_2fproto_2frobosense_5fconfig_2eproto_once, nullptr, 0, 1,
  schemas, file_default_instances, TableStruct_modules_2fdrivers_2flidar_2fproto_2frobosense_5fconfig_2eproto::offsets,
  file_level_metadata_modules_2fdrivers_2flidar_2fproto_2frobosense_5fconfig_2eproto, file_level_enum_descriptors_modules_2fdrivers_2flidar_2fproto_2frobosense_5fconfig_2eproto, file_level_service_descriptors_modules_2fdrivers_2flidar_2fproto_2frobosense_5fconfig_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_modules_2fdrivers_2flidar_2fproto_2frobosense_5fconfig_2eproto_getter() {
  return &descriptor_table_modules_2fdrivers_2flidar_2fproto_2frobosense_5fconfig_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_modules_2fdrivers_2flidar_2fproto_2frobosense_5fconfig_2eproto(&descriptor_table_modules_2fdrivers_2flidar_2fproto_2frobosense_5fconfig_2eproto);
namespace apollo {
namespace drivers {
namespace robosense {

// ===================================================================

class Config::_Internal {
 public:
  using HasBits = decltype(std::declval<Config>()._has_bits_);
  static void set_has_model(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_frame_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_msop_port(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_difop_port(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_echo_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_start_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_end_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_min_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_max_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_cut_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_pointcloud_channel(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_scan_channel(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_calibration_file(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_use_lidar_clock(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
};

Config::Config(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.drivers.robosense.Config)
}
Config::Config(const Config& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_model()) {
    model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_model(), 
      GetArenaForAllocation());
  }
  frame_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_frame_id()) {
    frame_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_frame_id(), 
      GetArenaForAllocation());
  }
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ip()) {
    ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ip(), 
      GetArenaForAllocation());
  }
  pointcloud_channel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_pointcloud_channel()) {
    pointcloud_channel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pointcloud_channel(), 
      GetArenaForAllocation());
  }
  scan_channel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_scan_channel()) {
    scan_channel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_scan_channel(), 
      GetArenaForAllocation());
  }
  calibration_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_calibration_file()) {
    calibration_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_calibration_file(), 
      GetArenaForAllocation());
  }
  ::memcpy(&msop_port_, &from.msop_port_,
    static_cast<size_t>(reinterpret_cast<char*>(&use_lidar_clock_) -
    reinterpret_cast<char*>(&msop_port_)) + sizeof(use_lidar_clock_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.robosense.Config)
}

void Config::SharedCtor() {
model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
frame_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
pointcloud_channel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
scan_channel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
calibration_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&msop_port_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&use_lidar_clock_) -
    reinterpret_cast<char*>(&msop_port_)) + sizeof(use_lidar_clock_));
}

Config::~Config() {
  // @@protoc_insertion_point(destructor:apollo.drivers.robosense.Config)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Config::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  model_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  frame_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pointcloud_channel_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  scan_channel_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  calibration_file_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Config::ArenaDtor(void* object) {
  Config* _this = reinterpret_cast< Config* >(object);
  (void)_this;
}
void Config::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Config::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Config::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.robosense.Config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      model_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      frame_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      ip_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      pointcloud_channel_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      scan_channel_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      calibration_file_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&msop_port_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&difop_port_) -
        reinterpret_cast<char*>(&msop_port_)) + sizeof(difop_port_));
  }
  if (cached_has_bits & 0x00007f00u) {
    ::memset(&echo_mode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&use_lidar_clock_) -
        reinterpret_cast<char*>(&echo_mode_)) + sizeof(use_lidar_clock_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Config::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string model = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_model();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.drivers.robosense.Config.model");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string frame_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_frame_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.drivers.robosense.Config.frame_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string ip = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.drivers.robosense.Config.ip");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 msop_port = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_msop_port(&has_bits);
          msop_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 difop_port = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_difop_port(&has_bits);
          difop_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 echo_mode = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_echo_mode(&has_bits);
          echo_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 start_angle = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_start_angle(&has_bits);
          start_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 end_angle = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_end_angle(&has_bits);
          end_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 min_distance = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_min_distance(&has_bits);
          min_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 max_distance = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_max_distance(&has_bits);
          max_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 cut_angle = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_cut_angle(&has_bits);
          cut_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string pointcloud_channel = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_pointcloud_channel();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.drivers.robosense.Config.pointcloud_channel");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string scan_channel = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_scan_channel();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.drivers.robosense.Config.scan_channel");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string calibration_file = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_calibration_file();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.drivers.robosense.Config.calibration_file");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool use_lidar_clock = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_use_lidar_clock(&has_bits);
          use_lidar_clock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Config::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.robosense.Config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string model = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_model().data(), static_cast<int>(this->_internal_model().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.drivers.robosense.Config.model");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_model(), target);
  }

  // optional string frame_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_frame_id().data(), static_cast<int>(this->_internal_frame_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.drivers.robosense.Config.frame_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_frame_id(), target);
  }

  // optional string ip = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.drivers.robosense.Config.ip");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_ip(), target);
  }

  // optional uint32 msop_port = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_msop_port(), target);
  }

  // optional uint32 difop_port = 5;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_difop_port(), target);
  }

  // optional uint32 echo_mode = 6;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_echo_mode(), target);
  }

  // optional uint32 start_angle = 8;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_start_angle(), target);
  }

  // optional uint32 end_angle = 9;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_end_angle(), target);
  }

  // optional uint32 min_distance = 10;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_min_distance(), target);
  }

  // optional uint32 max_distance = 11;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_max_distance(), target);
  }

  // optional uint32 cut_angle = 12;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_cut_angle(), target);
  }

  // optional string pointcloud_channel = 13;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_pointcloud_channel().data(), static_cast<int>(this->_internal_pointcloud_channel().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.drivers.robosense.Config.pointcloud_channel");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_pointcloud_channel(), target);
  }

  // optional string scan_channel = 14;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_scan_channel().data(), static_cast<int>(this->_internal_scan_channel().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.drivers.robosense.Config.scan_channel");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_scan_channel(), target);
  }

  // optional string calibration_file = 15;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_calibration_file().data(), static_cast<int>(this->_internal_calibration_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.drivers.robosense.Config.calibration_file");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_calibration_file(), target);
  }

  // optional bool use_lidar_clock = 16;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_use_lidar_clock(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.robosense.Config)
  return target;
}

size_t Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.robosense.Config)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string model = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_model());
    }

    // optional string frame_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_frame_id());
    }

    // optional string ip = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ip());
    }

    // optional string pointcloud_channel = 13;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_pointcloud_channel());
    }

    // optional string scan_channel = 14;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_scan_channel());
    }

    // optional string calibration_file = 15;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_calibration_file());
    }

    // optional uint32 msop_port = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_msop_port());
    }

    // optional uint32 difop_port = 5;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_difop_port());
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional uint32 echo_mode = 6;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_echo_mode());
    }

    // optional uint32 start_angle = 8;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_start_angle());
    }

    // optional uint32 end_angle = 9;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_end_angle());
    }

    // optional uint32 min_distance = 10;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_min_distance());
    }

    // optional uint32 max_distance = 11;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_max_distance());
    }

    // optional uint32 cut_angle = 12;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_cut_angle());
    }

    // optional bool use_lidar_clock = 16;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Config::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Config::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Config::GetClassData() const { return &_class_data_; }

void Config::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Config *>(to)->MergeFrom(
      static_cast<const Config &>(from));
}


void Config::MergeFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.robosense.Config)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_model(from._internal_model());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_frame_id(from._internal_frame_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_ip(from._internal_ip());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_pointcloud_channel(from._internal_pointcloud_channel());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_scan_channel(from._internal_scan_channel());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_calibration_file(from._internal_calibration_file());
    }
    if (cached_has_bits & 0x00000040u) {
      msop_port_ = from.msop_port_;
    }
    if (cached_has_bits & 0x00000080u) {
      difop_port_ = from.difop_port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      echo_mode_ = from.echo_mode_;
    }
    if (cached_has_bits & 0x00000200u) {
      start_angle_ = from.start_angle_;
    }
    if (cached_has_bits & 0x00000400u) {
      end_angle_ = from.end_angle_;
    }
    if (cached_has_bits & 0x00000800u) {
      min_distance_ = from.min_distance_;
    }
    if (cached_has_bits & 0x00001000u) {
      max_distance_ = from.max_distance_;
    }
    if (cached_has_bits & 0x00002000u) {
      cut_angle_ = from.cut_angle_;
    }
    if (cached_has_bits & 0x00004000u) {
      use_lidar_clock_ = from.use_lidar_clock_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Config::CopyFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.robosense.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Config::IsInitialized() const {
  return true;
}

void Config::InternalSwap(Config* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &model_, lhs_arena,
      &other->model_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &frame_id_, lhs_arena,
      &other->frame_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ip_, lhs_arena,
      &other->ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &pointcloud_channel_, lhs_arena,
      &other->pointcloud_channel_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &scan_channel_, lhs_arena,
      &other->scan_channel_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &calibration_file_, lhs_arena,
      &other->calibration_file_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Config, use_lidar_clock_)
      + sizeof(Config::use_lidar_clock_)
      - PROTOBUF_FIELD_OFFSET(Config, msop_port_)>(
          reinterpret_cast<char*>(&msop_port_),
          reinterpret_cast<char*>(&other->msop_port_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Config::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fdrivers_2flidar_2fproto_2frobosense_5fconfig_2eproto_getter, &descriptor_table_modules_2fdrivers_2flidar_2fproto_2frobosense_5fconfig_2eproto_once,
      file_level_metadata_modules_2fdrivers_2flidar_2fproto_2frobosense_5fconfig_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace robosense
}  // namespace drivers
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::drivers::robosense::Config* Arena::CreateMaybeMessage< ::apollo::drivers::robosense::Config >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::drivers::robosense::Config >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
