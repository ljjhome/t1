// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/drivers/proto/radar.proto

#include "modules/drivers/proto/radar.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace apollo {
namespace drivers {
constexpr RadarObstacle::RadarObstacle(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : relative_position_(nullptr)
  , relative_velocity_(nullptr)
  , absolute_position_(nullptr)
  , absolute_velocity_(nullptr)
  , id_(0)
  , moving_status_(0)

  , rcs_(0)
  , width_(0)
  , length_(0)
  , height_(0)
  , theta_(0)
  , count_(0)
  , moving_frames_count_(0)
  , status_(0)
{}
struct RadarObstacleDefaultTypeInternal {
  constexpr RadarObstacleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RadarObstacleDefaultTypeInternal() {}
  union {
    RadarObstacle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RadarObstacleDefaultTypeInternal _RadarObstacle_default_instance_;
constexpr RadarObstacles_RadarObstacleEntry_DoNotUse::RadarObstacles_RadarObstacleEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct RadarObstacles_RadarObstacleEntry_DoNotUseDefaultTypeInternal {
  constexpr RadarObstacles_RadarObstacleEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RadarObstacles_RadarObstacleEntry_DoNotUseDefaultTypeInternal() {}
  union {
    RadarObstacles_RadarObstacleEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RadarObstacles_RadarObstacleEntry_DoNotUseDefaultTypeInternal _RadarObstacles_RadarObstacleEntry_DoNotUse_default_instance_;
constexpr RadarObstacles::RadarObstacles(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : radar_obstacle_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , header_(nullptr)
  , error_code_(0)
{}
struct RadarObstaclesDefaultTypeInternal {
  constexpr RadarObstaclesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RadarObstaclesDefaultTypeInternal() {}
  union {
    RadarObstacles _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RadarObstaclesDefaultTypeInternal _RadarObstacles_default_instance_;
}  // namespace drivers
}  // namespace apollo
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fdrivers_2fproto_2fradar_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_modules_2fdrivers_2fproto_2fradar_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fdrivers_2fproto_2fradar_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fdrivers_2fproto_2fradar_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::RadarObstacle, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::RadarObstacle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::RadarObstacle, id_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::RadarObstacle, relative_position_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::RadarObstacle, relative_velocity_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::RadarObstacle, rcs_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::RadarObstacle, moving_status_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::RadarObstacle, width_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::RadarObstacle, length_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::RadarObstacle, height_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::RadarObstacle, theta_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::RadarObstacle, absolute_position_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::RadarObstacle, absolute_velocity_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::RadarObstacle, count_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::RadarObstacle, moving_frames_count_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::RadarObstacle, status_),
  4,
  0,
  1,
  6,
  5,
  7,
  8,
  9,
  10,
  2,
  3,
  11,
  12,
  13,
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::RadarObstacles_RadarObstacleEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::RadarObstacles_RadarObstacleEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::RadarObstacles_RadarObstacleEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::RadarObstacles_RadarObstacleEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::RadarObstacles, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::RadarObstacles, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::RadarObstacles, radar_obstacle_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::RadarObstacles, header_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::RadarObstacles, error_code_),
  ~0u,
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 20, -1, sizeof(::apollo::drivers::RadarObstacle)},
  { 34, 42, -1, sizeof(::apollo::drivers::RadarObstacles_RadarObstacleEntry_DoNotUse)},
  { 44, 53, -1, sizeof(::apollo::drivers::RadarObstacles)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::drivers::_RadarObstacle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::drivers::_RadarObstacles_RadarObstacleEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::drivers::_RadarObstacles_default_instance_),
};

const char descriptor_table_protodef_modules_2fdrivers_2fproto_2fradar_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n!modules/drivers/proto/radar.proto\022\016apo"
  "llo.drivers\032%modules/common/proto/error_"
  "code.proto\032!modules/common/proto/header."
  "proto\032#modules/common/proto/geometry.pro"
  "to\"\314\005\n\rRadarObstacle\022\n\n\002id\030\001 \001(\005\0221\n\021rela"
  "tive_position\030\002 \001(\0132\026.apollo.common.Poin"
  "t2D\0221\n\021relative_velocity\030\003 \001(\0132\026.apollo."
  "common.Point2D\022\013\n\003rcs\030\004 \001(\001\022A\n\rmoving_st"
  "atus\030\005 \001(\0162*.apollo.drivers.RadarObstacl"
  "e.MovingStatus\022\r\n\005width\030\006 \001(\001\022\016\n\006length\030"
  "\007 \001(\001\022\016\n\006height\030\010 \001(\001\022\r\n\005theta\030\t \001(\001\0221\n\021"
  "absolute_position\030\n \001(\0132\026.apollo.common."
  "Point2D\0221\n\021absolute_velocity\030\013 \001(\0132\026.apo"
  "llo.common.Point2D\022\r\n\005count\030\014 \001(\005\022\033\n\023mov"
  "ing_frames_count\030\r \001(\005\0224\n\006status\030\016 \001(\0162$"
  ".apollo.drivers.RadarObstacle.Status\"\256\001\n"
  "\006Status\022\r\n\tNO_TARGET\020\000\022\016\n\nNEW_TARGET\020\001\022\026"
  "\n\022NEW_UPDATED_TARGET\020\002\022\022\n\016UPDATED_TARGET"
  "\020\003\022\022\n\016COASTED_TARGET\020\004\022\021\n\rMERGED_TARGET\020"
  "\005\022\032\n\026INVALID_COASTED_TARGET\020\006\022\026\n\022NEW_COA"
  "STED_TARGET\020\007\"B\n\014MovingStatus\022\016\n\nSTATION"
  "ARY\020\000\022\013\n\007NEARING\020\001\022\013\n\007AWAYING\020\002\022\010\n\004NONE\020"
  "\003\"\211\002\n\016RadarObstacles\022I\n\016radar_obstacle\030\001"
  " \003(\01321.apollo.drivers.RadarObstacles.Rad"
  "arObstacleEntry\022%\n\006header\030\002 \001(\0132\025.apollo"
  ".common.Header\0220\n\nerror_code\030\003 \001(\0162\030.apo"
  "llo.common.ErrorCode:\002OK\032S\n\022RadarObstacl"
  "eEntry\022\013\n\003key\030\001 \001(\005\022,\n\005value\030\002 \001(\0132\035.apo"
  "llo.drivers.RadarObstacle:\0028\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fdrivers_2fproto_2fradar_2eproto_deps[3] = {
  &::descriptor_table_modules_2fcommon_2fproto_2ferror_5fcode_2eproto,
  &::descriptor_table_modules_2fcommon_2fproto_2fgeometry_2eproto,
  &::descriptor_table_modules_2fcommon_2fproto_2fheader_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fdrivers_2fproto_2fradar_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fdrivers_2fproto_2fradar_2eproto = {
  false, false, 1149, descriptor_table_protodef_modules_2fdrivers_2fproto_2fradar_2eproto, "modules/drivers/proto/radar.proto", 
  &descriptor_table_modules_2fdrivers_2fproto_2fradar_2eproto_once, descriptor_table_modules_2fdrivers_2fproto_2fradar_2eproto_deps, 3, 3,
  schemas, file_default_instances, TableStruct_modules_2fdrivers_2fproto_2fradar_2eproto::offsets,
  file_level_metadata_modules_2fdrivers_2fproto_2fradar_2eproto, file_level_enum_descriptors_modules_2fdrivers_2fproto_2fradar_2eproto, file_level_service_descriptors_modules_2fdrivers_2fproto_2fradar_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_modules_2fdrivers_2fproto_2fradar_2eproto_getter() {
  return &descriptor_table_modules_2fdrivers_2fproto_2fradar_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_modules_2fdrivers_2fproto_2fradar_2eproto(&descriptor_table_modules_2fdrivers_2fproto_2fradar_2eproto);
namespace apollo {
namespace drivers {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RadarObstacle_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdrivers_2fproto_2fradar_2eproto);
  return file_level_enum_descriptors_modules_2fdrivers_2fproto_2fradar_2eproto[0];
}
bool RadarObstacle_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr RadarObstacle_Status RadarObstacle::NO_TARGET;
constexpr RadarObstacle_Status RadarObstacle::NEW_TARGET;
constexpr RadarObstacle_Status RadarObstacle::NEW_UPDATED_TARGET;
constexpr RadarObstacle_Status RadarObstacle::UPDATED_TARGET;
constexpr RadarObstacle_Status RadarObstacle::COASTED_TARGET;
constexpr RadarObstacle_Status RadarObstacle::MERGED_TARGET;
constexpr RadarObstacle_Status RadarObstacle::INVALID_COASTED_TARGET;
constexpr RadarObstacle_Status RadarObstacle::NEW_COASTED_TARGET;
constexpr RadarObstacle_Status RadarObstacle::Status_MIN;
constexpr RadarObstacle_Status RadarObstacle::Status_MAX;
constexpr int RadarObstacle::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RadarObstacle_MovingStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdrivers_2fproto_2fradar_2eproto);
  return file_level_enum_descriptors_modules_2fdrivers_2fproto_2fradar_2eproto[1];
}
bool RadarObstacle_MovingStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr RadarObstacle_MovingStatus RadarObstacle::STATIONARY;
constexpr RadarObstacle_MovingStatus RadarObstacle::NEARING;
constexpr RadarObstacle_MovingStatus RadarObstacle::AWAYING;
constexpr RadarObstacle_MovingStatus RadarObstacle::NONE;
constexpr RadarObstacle_MovingStatus RadarObstacle::MovingStatus_MIN;
constexpr RadarObstacle_MovingStatus RadarObstacle::MovingStatus_MAX;
constexpr int RadarObstacle::MovingStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class RadarObstacle::_Internal {
 public:
  using HasBits = decltype(std::declval<RadarObstacle>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::apollo::common::Point2D& relative_position(const RadarObstacle* msg);
  static void set_has_relative_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::common::Point2D& relative_velocity(const RadarObstacle* msg);
  static void set_has_relative_velocity(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_rcs(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_moving_status(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_length(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_theta(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::apollo::common::Point2D& absolute_position(const RadarObstacle* msg);
  static void set_has_absolute_position(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::common::Point2D& absolute_velocity(const RadarObstacle* msg);
  static void set_has_absolute_velocity(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_moving_frames_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
};

const ::apollo::common::Point2D&
RadarObstacle::_Internal::relative_position(const RadarObstacle* msg) {
  return *msg->relative_position_;
}
const ::apollo::common::Point2D&
RadarObstacle::_Internal::relative_velocity(const RadarObstacle* msg) {
  return *msg->relative_velocity_;
}
const ::apollo::common::Point2D&
RadarObstacle::_Internal::absolute_position(const RadarObstacle* msg) {
  return *msg->absolute_position_;
}
const ::apollo::common::Point2D&
RadarObstacle::_Internal::absolute_velocity(const RadarObstacle* msg) {
  return *msg->absolute_velocity_;
}
void RadarObstacle::clear_relative_position() {
  if (relative_position_ != nullptr) relative_position_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void RadarObstacle::clear_relative_velocity() {
  if (relative_velocity_ != nullptr) relative_velocity_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void RadarObstacle::clear_absolute_position() {
  if (absolute_position_ != nullptr) absolute_position_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void RadarObstacle::clear_absolute_velocity() {
  if (absolute_velocity_ != nullptr) absolute_velocity_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
RadarObstacle::RadarObstacle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.drivers.RadarObstacle)
}
RadarObstacle::RadarObstacle(const RadarObstacle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_relative_position()) {
    relative_position_ = new ::apollo::common::Point2D(*from.relative_position_);
  } else {
    relative_position_ = nullptr;
  }
  if (from._internal_has_relative_velocity()) {
    relative_velocity_ = new ::apollo::common::Point2D(*from.relative_velocity_);
  } else {
    relative_velocity_ = nullptr;
  }
  if (from._internal_has_absolute_position()) {
    absolute_position_ = new ::apollo::common::Point2D(*from.absolute_position_);
  } else {
    absolute_position_ = nullptr;
  }
  if (from._internal_has_absolute_velocity()) {
    absolute_velocity_ = new ::apollo::common::Point2D(*from.absolute_velocity_);
  } else {
    absolute_velocity_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&id_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.RadarObstacle)
}

void RadarObstacle::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&relative_position_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&relative_position_)) + sizeof(status_));
}

RadarObstacle::~RadarObstacle() {
  // @@protoc_insertion_point(destructor:apollo.drivers.RadarObstacle)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RadarObstacle::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete relative_position_;
  if (this != internal_default_instance()) delete relative_velocity_;
  if (this != internal_default_instance()) delete absolute_position_;
  if (this != internal_default_instance()) delete absolute_velocity_;
}

void RadarObstacle::ArenaDtor(void* object) {
  RadarObstacle* _this = reinterpret_cast< RadarObstacle* >(object);
  (void)_this;
}
void RadarObstacle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RadarObstacle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RadarObstacle::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.RadarObstacle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(relative_position_ != nullptr);
      relative_position_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(relative_velocity_ != nullptr);
      relative_velocity_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(absolute_position_ != nullptr);
      absolute_position_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(absolute_velocity_ != nullptr);
      absolute_velocity_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&width_) -
        reinterpret_cast<char*>(&id_)) + sizeof(width_));
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&length_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&status_) -
        reinterpret_cast<char*>(&length_)) + sizeof(status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RadarObstacle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.Point2D relative_position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_relative_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.Point2D relative_velocity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_relative_velocity(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double rcs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_rcs(&has_bits);
          rcs_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.drivers.RadarObstacle.MovingStatus moving_status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::RadarObstacle_MovingStatus_IsValid(val))) {
            _internal_set_moving_status(static_cast<::apollo::drivers::RadarObstacle_MovingStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional double width = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double length = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_length(&has_bits);
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double height = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double theta = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_theta(&has_bits);
          theta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.Point2D absolute_position = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_absolute_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.Point2D absolute_velocity = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_absolute_velocity(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 count = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 moving_frames_count = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_moving_frames_count(&has_bits);
          moving_frames_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.drivers.RadarObstacle.Status status = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::RadarObstacle_Status_IsValid(val))) {
            _internal_set_status(static_cast<::apollo::drivers::RadarObstacle_Status>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(14, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RadarObstacle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.RadarObstacle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // optional .apollo.common.Point2D relative_position = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::relative_position(this), target, stream);
  }

  // optional .apollo.common.Point2D relative_velocity = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::relative_velocity(this), target, stream);
  }

  // optional double rcs = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_rcs(), target);
  }

  // optional .apollo.drivers.RadarObstacle.MovingStatus moving_status = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_moving_status(), target);
  }

  // optional double width = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_width(), target);
  }

  // optional double length = 7;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_length(), target);
  }

  // optional double height = 8;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_height(), target);
  }

  // optional double theta = 9;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_theta(), target);
  }

  // optional .apollo.common.Point2D absolute_position = 10;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::absolute_position(this), target, stream);
  }

  // optional .apollo.common.Point2D absolute_velocity = 11;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::absolute_velocity(this), target, stream);
  }

  // optional int32 count = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_count(), target);
  }

  // optional int32 moving_frames_count = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_moving_frames_count(), target);
  }

  // optional .apollo.drivers.RadarObstacle.Status status = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      14, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.RadarObstacle)
  return target;
}

size_t RadarObstacle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.RadarObstacle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.common.Point2D relative_position = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *relative_position_);
    }

    // optional .apollo.common.Point2D relative_velocity = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *relative_velocity_);
    }

    // optional .apollo.common.Point2D absolute_position = 10;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *absolute_position_);
    }

    // optional .apollo.common.Point2D absolute_velocity = 11;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *absolute_velocity_);
    }

    // optional int32 id = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_id());
    }

    // optional .apollo.drivers.RadarObstacle.MovingStatus moving_status = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_moving_status());
    }

    // optional double rcs = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double width = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional double length = 7;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double height = 8;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double theta = 9;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional int32 count = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_count());
    }

    // optional int32 moving_frames_count = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_moving_frames_count());
    }

    // optional .apollo.drivers.RadarObstacle.Status status = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RadarObstacle::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RadarObstacle::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RadarObstacle::GetClassData() const { return &_class_data_; }

void RadarObstacle::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RadarObstacle *>(to)->MergeFrom(
      static_cast<const RadarObstacle &>(from));
}


void RadarObstacle::MergeFrom(const RadarObstacle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.RadarObstacle)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_relative_position()->::apollo::common::Point2D::MergeFrom(from._internal_relative_position());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_relative_velocity()->::apollo::common::Point2D::MergeFrom(from._internal_relative_velocity());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_absolute_position()->::apollo::common::Point2D::MergeFrom(from._internal_absolute_position());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_absolute_velocity()->::apollo::common::Point2D::MergeFrom(from._internal_absolute_velocity());
    }
    if (cached_has_bits & 0x00000010u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000020u) {
      moving_status_ = from.moving_status_;
    }
    if (cached_has_bits & 0x00000040u) {
      rcs_ = from.rcs_;
    }
    if (cached_has_bits & 0x00000080u) {
      width_ = from.width_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      length_ = from.length_;
    }
    if (cached_has_bits & 0x00000200u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000400u) {
      theta_ = from.theta_;
    }
    if (cached_has_bits & 0x00000800u) {
      count_ = from.count_;
    }
    if (cached_has_bits & 0x00001000u) {
      moving_frames_count_ = from.moving_frames_count_;
    }
    if (cached_has_bits & 0x00002000u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RadarObstacle::CopyFrom(const RadarObstacle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.RadarObstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadarObstacle::IsInitialized() const {
  return true;
}

void RadarObstacle::InternalSwap(RadarObstacle* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RadarObstacle, status_)
      + sizeof(RadarObstacle::status_)
      - PROTOBUF_FIELD_OFFSET(RadarObstacle, relative_position_)>(
          reinterpret_cast<char*>(&relative_position_),
          reinterpret_cast<char*>(&other->relative_position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RadarObstacle::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fdrivers_2fproto_2fradar_2eproto_getter, &descriptor_table_modules_2fdrivers_2fproto_2fradar_2eproto_once,
      file_level_metadata_modules_2fdrivers_2fproto_2fradar_2eproto[0]);
}

// ===================================================================

RadarObstacles_RadarObstacleEntry_DoNotUse::RadarObstacles_RadarObstacleEntry_DoNotUse() {}
RadarObstacles_RadarObstacleEntry_DoNotUse::RadarObstacles_RadarObstacleEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void RadarObstacles_RadarObstacleEntry_DoNotUse::MergeFrom(const RadarObstacles_RadarObstacleEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata RadarObstacles_RadarObstacleEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fdrivers_2fproto_2fradar_2eproto_getter, &descriptor_table_modules_2fdrivers_2fproto_2fradar_2eproto_once,
      file_level_metadata_modules_2fdrivers_2fproto_2fradar_2eproto[1]);
}

// ===================================================================

class RadarObstacles::_Internal {
 public:
  using HasBits = decltype(std::declval<RadarObstacles>()._has_bits_);
  static const ::apollo::common::Header& header(const RadarObstacles* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_error_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::common::Header&
RadarObstacles::_Internal::header(const RadarObstacles* msg) {
  return *msg->header_;
}
void RadarObstacles::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
RadarObstacles::RadarObstacles(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  radar_obstacle_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.drivers.RadarObstacles)
}
RadarObstacles::RadarObstacles(const RadarObstacles& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  radar_obstacle_.MergeFrom(from.radar_obstacle_);
  if (from._internal_has_header()) {
    header_ = new ::apollo::common::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  error_code_ = from.error_code_;
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.RadarObstacles)
}

void RadarObstacles::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&error_code_) -
    reinterpret_cast<char*>(&header_)) + sizeof(error_code_));
}

RadarObstacles::~RadarObstacles() {
  // @@protoc_insertion_point(destructor:apollo.drivers.RadarObstacles)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RadarObstacles::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void RadarObstacles::ArenaDtor(void* object) {
  RadarObstacles* _this = reinterpret_cast< RadarObstacles* >(object);
  (void)_this;
  _this->radar_obstacle_. ~MapField();
}
inline void RadarObstacles::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &RadarObstacles::ArenaDtor);
  }
}
void RadarObstacles::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RadarObstacles::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.RadarObstacles)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  radar_obstacle_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != nullptr);
    header_->Clear();
  }
  error_code_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RadarObstacles::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<int32, .apollo.drivers.RadarObstacle> radar_obstacle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&radar_obstacle_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.Header header = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.ErrorCode error_code = 3 [default = OK];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::common::ErrorCode_IsValid(val))) {
            _internal_set_error_code(static_cast<::apollo::common::ErrorCode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RadarObstacles::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.RadarObstacles)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, .apollo.drivers.RadarObstacle> radar_obstacle = 1;
  if (!this->_internal_radar_obstacle().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::apollo::drivers::RadarObstacle >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_radar_obstacle().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_radar_obstacle().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::apollo::drivers::RadarObstacle >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::apollo::drivers::RadarObstacle >::const_iterator
          it = this->_internal_radar_obstacle().begin();
          it != this->_internal_radar_obstacle().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = RadarObstacles_RadarObstacleEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::apollo::drivers::RadarObstacle >::const_iterator
          it = this->_internal_radar_obstacle().begin();
          it != this->_internal_radar_obstacle().end(); ++it) {
        target = RadarObstacles_RadarObstacleEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
      }
    }
  }

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::header(this), target, stream);
  }

  // optional .apollo.common.ErrorCode error_code = 3 [default = OK];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_error_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.RadarObstacles)
  return target;
}

size_t RadarObstacles::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.RadarObstacles)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, .apollo.drivers.RadarObstacle> radar_obstacle = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_radar_obstacle_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::apollo::drivers::RadarObstacle >::const_iterator
      it = this->_internal_radar_obstacle().begin();
      it != this->_internal_radar_obstacle().end(); ++it) {
    total_size += RadarObstacles_RadarObstacleEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.common.Header header = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional .apollo.common.ErrorCode error_code = 3 [default = OK];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_error_code());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RadarObstacles::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RadarObstacles::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RadarObstacles::GetClassData() const { return &_class_data_; }

void RadarObstacles::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RadarObstacles *>(to)->MergeFrom(
      static_cast<const RadarObstacles &>(from));
}


void RadarObstacles::MergeFrom(const RadarObstacles& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.RadarObstacles)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  radar_obstacle_.MergeFrom(from.radar_obstacle_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::apollo::common::Header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      error_code_ = from.error_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RadarObstacles::CopyFrom(const RadarObstacles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.RadarObstacles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadarObstacles::IsInitialized() const {
  return true;
}

void RadarObstacles::InternalSwap(RadarObstacles* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  radar_obstacle_.InternalSwap(&other->radar_obstacle_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RadarObstacles, error_code_)
      + sizeof(RadarObstacles::error_code_)
      - PROTOBUF_FIELD_OFFSET(RadarObstacles, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RadarObstacles::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fdrivers_2fproto_2fradar_2eproto_getter, &descriptor_table_modules_2fdrivers_2fproto_2fradar_2eproto_once,
      file_level_metadata_modules_2fdrivers_2fproto_2fradar_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace drivers
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::drivers::RadarObstacle* Arena::CreateMaybeMessage< ::apollo::drivers::RadarObstacle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::drivers::RadarObstacle >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::drivers::RadarObstacles_RadarObstacleEntry_DoNotUse* Arena::CreateMaybeMessage< ::apollo::drivers::RadarObstacles_RadarObstacleEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::drivers::RadarObstacles_RadarObstacleEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::drivers::RadarObstacles* Arena::CreateMaybeMessage< ::apollo::drivers::RadarObstacles >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::drivers::RadarObstacles >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
