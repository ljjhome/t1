// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/drivers/proto/mobileye.proto

#include "modules/drivers/proto/mobileye.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace apollo {
namespace drivers {
constexpr Lka_768::Lka_768(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : lane_type_(0)
  , quality_(0)
  , position_(0)
  , curvature_(0)
  , curvature_derivative_(0)
  , width_right_marking_(0)
  , model_degree_(0){}
struct Lka_768DefaultTypeInternal {
  constexpr Lka_768DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Lka_768DefaultTypeInternal() {}
  union {
    Lka_768 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Lka_768DefaultTypeInternal _Lka_768_default_instance_;
constexpr Num_76b::Num_76b(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : num_of_next_lane_mark_reported_(0){}
struct Num_76bDefaultTypeInternal {
  constexpr Num_76bDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Num_76bDefaultTypeInternal() {}
  union {
    Num_76b _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Num_76bDefaultTypeInternal _Num_76b_default_instance_;
constexpr Aftermarket_669::Aftermarket_669(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : lane_conf_left_(0)
  , lane_type_left_(0)
  , distance_to_lane_l_(0)
  , ldw_availability_left_(false)
  , ldw_availability_right_(false)
  , lane_conf_right_(0)
  , distance_to_lane_r_(0)
  , lane_type_right_(0){}
struct Aftermarket_669DefaultTypeInternal {
  constexpr Aftermarket_669DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Aftermarket_669DefaultTypeInternal() {}
  union {
    Aftermarket_669 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Aftermarket_669DefaultTypeInternal _Aftermarket_669_default_instance_;
constexpr Lka_769::Lka_769(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : heading_angle_(0)
  , view_range_(0)
  , view_range_availability_(false){}
struct Lka_769DefaultTypeInternal {
  constexpr Lka_769DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Lka_769DefaultTypeInternal() {}
  union {
    Lka_769 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Lka_769DefaultTypeInternal _Lka_769_default_instance_;
constexpr Reference_76a::Reference_76a(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ref_point_1_position_(0)
  , ref_point_1_distance_(0)
  , ref_point_2_position_(0)
  , ref_point_2_distance_(0)
  , ref_point_1_validity_(false)
  , ref_point_2_validity_(false){}
struct Reference_76aDefaultTypeInternal {
  constexpr Reference_76aDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Reference_76aDefaultTypeInternal() {}
  union {
    Reference_76a _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Reference_76aDefaultTypeInternal _Reference_76a_default_instance_;
constexpr Details_738::Details_738(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : num_obstacles_(0)
  , timestamp_(0)
  , application_version_(0)
  , active_version_number_section_(0)
  , left_close_rang_cut_in_(false)
  , right_close_rang_cut_in_(false)
  , close_car_(false)
  , go_(0)
  , protocol_version_(0)
  , failsafe_(0)
  , reserved_10_(0){}
struct Details_738DefaultTypeInternal {
  constexpr Details_738DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Details_738DefaultTypeInternal() {}
  union {
    Details_738 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Details_738DefaultTypeInternal _Details_738_default_instance_;
constexpr Next_76c::Next_76c(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : lane_type_(0)
  , quality_(0)
  , position_(0)
  , curvature_(0)
  , curvature_derivative_(0)
  , lane_mark_width_(0)
  , model_degree_(0){}
struct Next_76cDefaultTypeInternal {
  constexpr Next_76cDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Next_76cDefaultTypeInternal() {}
  union {
    Next_76c _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Next_76cDefaultTypeInternal _Next_76c_default_instance_;
constexpr Details_737::Details_737(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : lane_curvature_(0)
  , lane_heading_(0)
  , yaw_angle_(0)
  , pitch_angle_(0)
  , ca_construction_area_(false)
  , right_ldw_availability_(false)
  , left_ldw_availability_(false)
  , reserved_1_(false){}
struct Details_737DefaultTypeInternal {
  constexpr Details_737DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Details_737DefaultTypeInternal() {}
  union {
    Details_737 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Details_737DefaultTypeInternal _Details_737_default_instance_;
constexpr Lka_767::Lka_767(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : heading_angle_(0)
  , view_range_(0)
  , view_range_availability_(false){}
struct Lka_767DefaultTypeInternal {
  constexpr Lka_767DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Lka_767DefaultTypeInternal() {}
  union {
    Lka_767 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Lka_767DefaultTypeInternal _Lka_767_default_instance_;
constexpr Lka_766::Lka_766(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : lane_type_(0)
  , quality_(0)
  , position_(0)
  , curvature_(0)
  , curvature_derivative_(0)
  , width_left_marking_(0)
  , model_degree_(0){}
struct Lka_766DefaultTypeInternal {
  constexpr Lka_766DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Lka_766DefaultTypeInternal() {}
  union {
    Lka_766 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Lka_766DefaultTypeInternal _Lka_766_default_instance_;
constexpr Next_76d::Next_76d(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : heading_angle_(0)
  , view_range_(0)
  , view_range_availability_(false){}
struct Next_76dDefaultTypeInternal {
  constexpr Next_76dDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Next_76dDefaultTypeInternal() {}
  union {
    Next_76d _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Next_76dDefaultTypeInternal _Next_76d_default_instance_;
constexpr Details_739::Details_739(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : obstacle_pos_x_(0)
  , obstacle_id_(0)
  , reseved_2_(0)
  , obstacle_pos_y_(0)
  , blinker_info_(0)
  , cut_in_and_out_(0)
  , obstacle_rel_vel_x_(0)
  , obstacle_type_(0)
  , obstacle_status_(0)
  , reserved_3_(false)
  , obstacle_brake_lights_(false)
  , reserved_4_(0)
  , obstacle_valid_(0){}
struct Details_739DefaultTypeInternal {
  constexpr Details_739DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Details_739DefaultTypeInternal() {}
  union {
    Details_739 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Details_739DefaultTypeInternal _Details_739_default_instance_;
constexpr Details_73a::Details_73a(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : obstacle_length_(0)
  , obstacle_width_(0)
  , obstacle_age_(0)
  , obstacle_lane_(0)
  , radar_pos_x_(0)
  , radar_vel_x_(0)
  , cipv_flag_(false)
  , reserved_5_(false)
  , reserved_6_(false)
  , reserved_7_(false)
  , radar_match_confidence_(0)
  , matched_radar_id_(0){}
struct Details_73aDefaultTypeInternal {
  constexpr Details_73aDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Details_73aDefaultTypeInternal() {}
  union {
    Details_73a _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Details_73aDefaultTypeInternal _Details_73a_default_instance_;
constexpr Details_73b::Details_73b(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : obstacle_angle_rate_(0)
  , obstacle_scale_change_(0)
  , object_accel_x_(0)
  , reserved_8_(0)
  , obstacle_replaced_(false)
  , obstacle_angle_(0)
  , reserved_9_(0){}
struct Details_73bDefaultTypeInternal {
  constexpr Details_73bDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Details_73bDefaultTypeInternal() {}
  union {
    Details_73b _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Details_73bDefaultTypeInternal _Details_73b_default_instance_;
constexpr Mobileye::Mobileye(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : details_739_()
  , details_73a_()
  , details_73b_()
  , next_76c_()
  , next_76d_()
  , header_(nullptr)
  , aftermarket_669_(nullptr)
  , details_737_(nullptr)
  , details_738_(nullptr)
  , lka_766_(nullptr)
  , lka_767_(nullptr)
  , lka_768_(nullptr)
  , lka_769_(nullptr)
  , reference_76a_(nullptr)
  , num_76b_(nullptr){}
struct MobileyeDefaultTypeInternal {
  constexpr MobileyeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MobileyeDefaultTypeInternal() {}
  union {
    Mobileye _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MobileyeDefaultTypeInternal _Mobileye_default_instance_;
}  // namespace drivers
}  // namespace apollo
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fdrivers_2fproto_2fmobileye_2eproto[15];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_modules_2fdrivers_2fproto_2fmobileye_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fdrivers_2fproto_2fmobileye_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fdrivers_2fproto_2fmobileye_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Lka_768, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Lka_768, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Lka_768, lane_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Lka_768, quality_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Lka_768, model_degree_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Lka_768, position_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Lka_768, curvature_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Lka_768, curvature_derivative_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Lka_768, width_right_marking_),
  0,
  1,
  6,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Num_76b, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Num_76b, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Num_76b, num_of_next_lane_mark_reported_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Aftermarket_669, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Aftermarket_669, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Aftermarket_669, lane_conf_left_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Aftermarket_669, ldw_availability_left_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Aftermarket_669, lane_type_left_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Aftermarket_669, distance_to_lane_l_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Aftermarket_669, lane_conf_right_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Aftermarket_669, ldw_availability_right_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Aftermarket_669, lane_type_right_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Aftermarket_669, distance_to_lane_r_),
  0,
  3,
  1,
  2,
  5,
  4,
  7,
  6,
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Lka_769, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Lka_769, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Lka_769, heading_angle_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Lka_769, view_range_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Lka_769, view_range_availability_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Reference_76a, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Reference_76a, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Reference_76a, ref_point_1_position_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Reference_76a, ref_point_1_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Reference_76a, ref_point_1_validity_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Reference_76a, ref_point_2_position_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Reference_76a, ref_point_2_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Reference_76a, ref_point_2_validity_),
  0,
  1,
  4,
  2,
  3,
  5,
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Details_738, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Details_738, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Details_738, num_obstacles_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Details_738, timestamp_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Details_738, application_version_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Details_738, active_version_number_section_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Details_738, left_close_rang_cut_in_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Details_738, right_close_rang_cut_in_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Details_738, go_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Details_738, protocol_version_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Details_738, close_car_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Details_738, failsafe_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Details_738, reserved_10_),
  0,
  1,
  2,
  3,
  4,
  5,
  7,
  8,
  6,
  9,
  10,
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Next_76c, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Next_76c, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Next_76c, lane_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Next_76c, quality_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Next_76c, model_degree_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Next_76c, position_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Next_76c, curvature_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Next_76c, curvature_derivative_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Next_76c, lane_mark_width_),
  0,
  1,
  6,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Details_737, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Details_737, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Details_737, lane_curvature_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Details_737, lane_heading_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Details_737, ca_construction_area_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Details_737, right_ldw_availability_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Details_737, left_ldw_availability_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Details_737, reserved_1_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Details_737, yaw_angle_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Details_737, pitch_angle_),
  0,
  1,
  4,
  5,
  6,
  7,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Lka_767, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Lka_767, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Lka_767, heading_angle_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Lka_767, view_range_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Lka_767, view_range_availability_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Lka_766, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Lka_766, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Lka_766, lane_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Lka_766, quality_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Lka_766, model_degree_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Lka_766, position_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Lka_766, curvature_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Lka_766, curvature_derivative_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Lka_766, width_left_marking_),
  0,
  1,
  6,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Next_76d, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Next_76d, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Next_76d, heading_angle_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Next_76d, view_range_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Next_76d, view_range_availability_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Details_739, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Details_739, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Details_739, obstacle_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Details_739, obstacle_pos_x_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Details_739, reseved_2_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Details_739, obstacle_pos_y_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Details_739, blinker_info_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Details_739, cut_in_and_out_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Details_739, obstacle_rel_vel_x_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Details_739, obstacle_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Details_739, reserved_3_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Details_739, obstacle_status_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Details_739, obstacle_brake_lights_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Details_739, reserved_4_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Details_739, obstacle_valid_),
  1,
  0,
  2,
  3,
  4,
  5,
  6,
  7,
  9,
  8,
  10,
  11,
  12,
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Details_73a, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Details_73a, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Details_73a, obstacle_length_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Details_73a, obstacle_width_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Details_73a, obstacle_age_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Details_73a, obstacle_lane_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Details_73a, cipv_flag_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Details_73a, reserved_5_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Details_73a, radar_pos_x_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Details_73a, radar_vel_x_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Details_73a, radar_match_confidence_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Details_73a, reserved_6_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Details_73a, matched_radar_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Details_73a, reserved_7_),
  0,
  1,
  2,
  3,
  6,
  7,
  4,
  5,
  10,
  8,
  11,
  9,
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Details_73b, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Details_73b, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Details_73b, obstacle_angle_rate_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Details_73b, obstacle_scale_change_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Details_73b, object_accel_x_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Details_73b, reserved_8_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Details_73b, obstacle_replaced_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Details_73b, reserved_9_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Details_73b, obstacle_angle_),
  0,
  1,
  2,
  3,
  4,
  6,
  5,
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Mobileye, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Mobileye, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Mobileye, header_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Mobileye, aftermarket_669_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Mobileye, details_737_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Mobileye, details_738_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Mobileye, details_739_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Mobileye, details_73a_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Mobileye, details_73b_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Mobileye, lka_766_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Mobileye, lka_767_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Mobileye, lka_768_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Mobileye, lka_769_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Mobileye, reference_76a_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Mobileye, num_76b_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Mobileye, next_76c_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Mobileye, next_76d_),
  0,
  1,
  2,
  3,
  ~0u,
  ~0u,
  ~0u,
  4,
  5,
  6,
  7,
  8,
  9,
  ~0u,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 13, -1, sizeof(::apollo::drivers::Lka_768)},
  { 20, 27, -1, sizeof(::apollo::drivers::Num_76b)},
  { 28, 42, -1, sizeof(::apollo::drivers::Aftermarket_669)},
  { 50, 59, -1, sizeof(::apollo::drivers::Lka_769)},
  { 62, 74, -1, sizeof(::apollo::drivers::Reference_76a)},
  { 80, 97, -1, sizeof(::apollo::drivers::Details_738)},
  { 108, 121, -1, sizeof(::apollo::drivers::Next_76c)},
  { 128, 142, -1, sizeof(::apollo::drivers::Details_737)},
  { 150, 159, -1, sizeof(::apollo::drivers::Lka_767)},
  { 162, 175, -1, sizeof(::apollo::drivers::Lka_766)},
  { 182, 191, -1, sizeof(::apollo::drivers::Next_76d)},
  { 194, 213, -1, sizeof(::apollo::drivers::Details_739)},
  { 226, 244, -1, sizeof(::apollo::drivers::Details_73a)},
  { 256, 269, -1, sizeof(::apollo::drivers::Details_73b)},
  { 276, 297, -1, sizeof(::apollo::drivers::Mobileye)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::drivers::_Lka_768_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::drivers::_Num_76b_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::drivers::_Aftermarket_669_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::drivers::_Lka_769_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::drivers::_Reference_76a_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::drivers::_Details_738_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::drivers::_Next_76c_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::drivers::_Details_737_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::drivers::_Lka_767_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::drivers::_Lka_766_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::drivers::_Next_76d_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::drivers::_Details_739_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::drivers::_Details_73a_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::drivers::_Details_73b_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::drivers::_Mobileye_default_instance_),
};

const char descriptor_table_protodef_modules_2fdrivers_2fproto_2fmobileye_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n$modules/drivers/proto/mobileye.proto\022\016"
  "apollo.drivers\032!modules/common/proto/hea"
  "der.proto\"\243\001\n\007Lka_768\022\021\n\tlane_type\030\001 \001(\005"
  "\022\017\n\007quality\030\002 \001(\005\022\024\n\014model_degree\030\003 \001(\005\022"
  "\020\n\010position\030\004 \001(\001\022\021\n\tcurvature\030\005 \001(\001\022\034\n\024"
  "curvature_derivative\030\006 \001(\001\022\033\n\023width_righ"
  "t_marking\030\007 \001(\001\"1\n\007Num_76b\022&\n\036num_of_nex"
  "t_lane_mark_reported\030\001 \001(\005\"\352\001\n\017Aftermark"
  "et_669\022\026\n\016lane_conf_left\030\001 \001(\005\022\035\n\025ldw_av"
  "ailability_left\030\002 \001(\010\022\026\n\016lane_type_left\030"
  "\003 \001(\005\022\032\n\022distance_to_lane_l\030\004 \001(\001\022\027\n\017lan"
  "e_conf_right\030\005 \001(\005\022\036\n\026ldw_availability_r"
  "ight\030\006 \001(\010\022\027\n\017lane_type_right\030\007 \001(\005\022\032\n\022d"
  "istance_to_lane_r\030\010 \001(\001\"U\n\007Lka_769\022\025\n\rhe"
  "ading_angle\030\001 \001(\001\022\022\n\nview_range\030\002 \001(\001\022\037\n"
  "\027view_range_availability\030\003 \001(\010\"\303\001\n\rRefer"
  "ence_76a\022\034\n\024ref_point_1_position\030\001 \001(\001\022\034"
  "\n\024ref_point_1_distance\030\002 \001(\001\022\034\n\024ref_poin"
  "t_1_validity\030\003 \001(\010\022\034\n\024ref_point_2_positi"
  "on\030\004 \001(\001\022\034\n\024ref_point_2_distance\030\005 \001(\001\022\034"
  "\n\024ref_point_2_validity\030\006 \001(\010\"\234\002\n\013Details"
  "_738\022\025\n\rnum_obstacles\030\001 \001(\005\022\021\n\ttimestamp"
  "\030\002 \001(\005\022\033\n\023application_version\030\003 \001(\005\022%\n\035a"
  "ctive_version_number_section\030\004 \001(\005\022\036\n\026le"
  "ft_close_rang_cut_in\030\005 \001(\010\022\037\n\027right_clos"
  "e_rang_cut_in\030\006 \001(\010\022\n\n\002go\030\007 \001(\005\022\030\n\020proto"
  "col_version\030\010 \001(\005\022\021\n\tclose_car\030\t \001(\010\022\020\n\010"
  "failsafe\030\n \001(\005\022\023\n\013reserved_10\030\013 \001(\005\"\240\001\n\010"
  "Next_76c\022\021\n\tlane_type\030\001 \001(\005\022\017\n\007quality\030\002"
  " \001(\005\022\024\n\014model_degree\030\003 \001(\005\022\020\n\010position\030\004"
  " \001(\001\022\021\n\tcurvature\030\005 \001(\001\022\034\n\024curvature_der"
  "ivative\030\006 \001(\001\022\027\n\017lane_mark_width\030\007 \001(\001\"\324"
  "\001\n\013Details_737\022\026\n\016lane_curvature\030\001 \001(\001\022\024"
  "\n\014lane_heading\030\002 \001(\001\022\034\n\024ca_construction_"
  "area\030\003 \001(\010\022\036\n\026right_ldw_availability\030\004 \001"
  "(\010\022\035\n\025left_ldw_availability\030\005 \001(\010\022\022\n\nres"
  "erved_1\030\006 \001(\010\022\021\n\tyaw_angle\030\007 \001(\001\022\023\n\013pitc"
  "h_angle\030\010 \001(\001\"U\n\007Lka_767\022\025\n\rheading_angl"
  "e\030\001 \001(\001\022\022\n\nview_range\030\002 \001(\001\022\037\n\027view_rang"
  "e_availability\030\003 \001(\010\"\242\001\n\007Lka_766\022\021\n\tlane"
  "_type\030\001 \001(\005\022\017\n\007quality\030\002 \001(\005\022\024\n\014model_de"
  "gree\030\003 \001(\005\022\020\n\010position\030\004 \001(\001\022\021\n\tcurvatur"
  "e\030\005 \001(\001\022\034\n\024curvature_derivative\030\006 \001(\001\022\032\n"
  "\022width_left_marking\030\007 \001(\001\"V\n\010Next_76d\022\025\n"
  "\rheading_angle\030\001 \001(\001\022\022\n\nview_range\030\002 \001(\001"
  "\022\037\n\027view_range_availability\030\003 \001(\010\"\276\002\n\013De"
  "tails_739\022\023\n\013obstacle_id\030\001 \001(\005\022\026\n\016obstac"
  "le_pos_x\030\002 \001(\001\022\021\n\treseved_2\030\003 \001(\005\022\026\n\016obs"
  "tacle_pos_y\030\004 \001(\001\022\024\n\014blinker_info\030\005 \001(\005\022"
  "\026\n\016cut_in_and_out\030\006 \001(\005\022\032\n\022obstacle_rel_"
  "vel_x\030\007 \001(\001\022\025\n\robstacle_type\030\010 \001(\005\022\022\n\nre"
  "served_3\030\t \001(\010\022\027\n\017obstacle_status\030\n \001(\005\022"
  "\035\n\025obstacle_brake_lights\030\013 \001(\010\022\022\n\nreserv"
  "ed_4\030\014 \001(\005\022\026\n\016obstacle_valid\030\r \001(\005\"\236\002\n\013D"
  "etails_73a\022\027\n\017obstacle_length\030\001 \001(\001\022\026\n\016o"
  "bstacle_width\030\002 \001(\001\022\024\n\014obstacle_age\030\003 \001("
  "\005\022\025\n\robstacle_lane\030\004 \001(\005\022\021\n\tcipv_flag\030\005 "
  "\001(\010\022\022\n\nreserved_5\030\006 \001(\010\022\023\n\013radar_pos_x\030\007"
  " \001(\001\022\023\n\013radar_vel_x\030\010 \001(\001\022\036\n\026radar_match"
  "_confidence\030\t \001(\005\022\022\n\nreserved_6\030\n \001(\010\022\030\n"
  "\020matched_radar_id\030\013 \001(\005\022\022\n\nreserved_7\030\014 "
  "\001(\010\"\274\001\n\013Details_73b\022\033\n\023obstacle_angle_ra"
  "te\030\001 \001(\001\022\035\n\025obstacle_scale_change\030\002 \001(\001\022"
  "\026\n\016object_accel_x\030\003 \001(\001\022\022\n\nreserved_8\030\004 "
  "\001(\005\022\031\n\021obstacle_replaced\030\005 \001(\010\022\022\n\nreserv"
  "ed_9\030\006 \001(\005\022\026\n\016obstacle_angle\030\007 \001(\001\"\305\005\n\010M"
  "obileye\022%\n\006header\030\001 \001(\0132\025.apollo.common."
  "Header\0228\n\017aftermarket_669\030\002 \001(\0132\037.apollo"
  ".drivers.Aftermarket_669\0220\n\013details_737\030"
  "\003 \001(\0132\033.apollo.drivers.Details_737\0220\n\013de"
  "tails_738\030\004 \001(\0132\033.apollo.drivers.Details"
  "_738\0220\n\013details_739\030\005 \003(\0132\033.apollo.drive"
  "rs.Details_739\0220\n\013details_73a\030\006 \003(\0132\033.ap"
  "ollo.drivers.Details_73a\0220\n\013details_73b\030"
  "\007 \003(\0132\033.apollo.drivers.Details_73b\022(\n\007lk"
  "a_766\030\010 \001(\0132\027.apollo.drivers.Lka_766\022(\n\007"
  "lka_767\030\t \001(\0132\027.apollo.drivers.Lka_767\022("
  "\n\007lka_768\030\n \001(\0132\027.apollo.drivers.Lka_768"
  "\022(\n\007lka_769\030\013 \001(\0132\027.apollo.drivers.Lka_7"
  "69\0224\n\rreference_76a\030\014 \001(\0132\035.apollo.drive"
  "rs.Reference_76a\022(\n\007num_76b\030\r \001(\0132\027.apol"
  "lo.drivers.Num_76b\022*\n\010next_76c\030\016 \003(\0132\030.a"
  "pollo.drivers.Next_76c\022*\n\010next_76d\030\017 \003(\013"
  "2\030.apollo.drivers.Next_76d"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fdrivers_2fproto_2fmobileye_2eproto_deps[1] = {
  &::descriptor_table_modules_2fcommon_2fproto_2fheader_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fdrivers_2fproto_2fmobileye_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fdrivers_2fproto_2fmobileye_2eproto = {
  false, false, 3346, descriptor_table_protodef_modules_2fdrivers_2fproto_2fmobileye_2eproto, "modules/drivers/proto/mobileye.proto", 
  &descriptor_table_modules_2fdrivers_2fproto_2fmobileye_2eproto_once, descriptor_table_modules_2fdrivers_2fproto_2fmobileye_2eproto_deps, 1, 15,
  schemas, file_default_instances, TableStruct_modules_2fdrivers_2fproto_2fmobileye_2eproto::offsets,
  file_level_metadata_modules_2fdrivers_2fproto_2fmobileye_2eproto, file_level_enum_descriptors_modules_2fdrivers_2fproto_2fmobileye_2eproto, file_level_service_descriptors_modules_2fdrivers_2fproto_2fmobileye_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_modules_2fdrivers_2fproto_2fmobileye_2eproto_getter() {
  return &descriptor_table_modules_2fdrivers_2fproto_2fmobileye_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_modules_2fdrivers_2fproto_2fmobileye_2eproto(&descriptor_table_modules_2fdrivers_2fproto_2fmobileye_2eproto);
namespace apollo {
namespace drivers {

// ===================================================================

class Lka_768::_Internal {
 public:
  using HasBits = decltype(std::declval<Lka_768>()._has_bits_);
  static void set_has_lane_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_quality(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_model_degree(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_curvature(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_curvature_derivative(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_width_right_marking(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

Lka_768::Lka_768(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.drivers.Lka_768)
}
Lka_768::Lka_768(const Lka_768& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&lane_type_, &from.lane_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&model_degree_) -
    reinterpret_cast<char*>(&lane_type_)) + sizeof(model_degree_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.Lka_768)
}

void Lka_768::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&lane_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&model_degree_) -
    reinterpret_cast<char*>(&lane_type_)) + sizeof(model_degree_));
}

Lka_768::~Lka_768() {
  // @@protoc_insertion_point(destructor:apollo.drivers.Lka_768)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Lka_768::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Lka_768::ArenaDtor(void* object) {
  Lka_768* _this = reinterpret_cast< Lka_768* >(object);
  (void)_this;
}
void Lka_768::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Lka_768::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Lka_768::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.Lka_768)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&lane_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&model_degree_) -
        reinterpret_cast<char*>(&lane_type_)) + sizeof(model_degree_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Lka_768::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 lane_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_lane_type(&has_bits);
          lane_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 quality = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_quality(&has_bits);
          quality_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 model_degree = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_model_degree(&has_bits);
          model_degree_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double position = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_position(&has_bits);
          position_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double curvature = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_curvature(&has_bits);
          curvature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double curvature_derivative = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_curvature_derivative(&has_bits);
          curvature_derivative_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double width_right_marking = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_width_right_marking(&has_bits);
          width_right_marking_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Lka_768::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.Lka_768)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 lane_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_lane_type(), target);
  }

  // optional int32 quality = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_quality(), target);
  }

  // optional int32 model_degree = 3;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_model_degree(), target);
  }

  // optional double position = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_position(), target);
  }

  // optional double curvature = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_curvature(), target);
  }

  // optional double curvature_derivative = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_curvature_derivative(), target);
  }

  // optional double width_right_marking = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_width_right_marking(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.Lka_768)
  return target;
}

size_t Lka_768::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.Lka_768)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional int32 lane_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_lane_type());
    }

    // optional int32 quality = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_quality());
    }

    // optional double position = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double curvature = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double curvature_derivative = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double width_right_marking = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional int32 model_degree = 3;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_model_degree());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Lka_768::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Lka_768::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Lka_768::GetClassData() const { return &_class_data_; }

void Lka_768::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Lka_768 *>(to)->MergeFrom(
      static_cast<const Lka_768 &>(from));
}


void Lka_768::MergeFrom(const Lka_768& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.Lka_768)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      lane_type_ = from.lane_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      quality_ = from.quality_;
    }
    if (cached_has_bits & 0x00000004u) {
      position_ = from.position_;
    }
    if (cached_has_bits & 0x00000008u) {
      curvature_ = from.curvature_;
    }
    if (cached_has_bits & 0x00000010u) {
      curvature_derivative_ = from.curvature_derivative_;
    }
    if (cached_has_bits & 0x00000020u) {
      width_right_marking_ = from.width_right_marking_;
    }
    if (cached_has_bits & 0x00000040u) {
      model_degree_ = from.model_degree_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Lka_768::CopyFrom(const Lka_768& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.Lka_768)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lka_768::IsInitialized() const {
  return true;
}

void Lka_768::InternalSwap(Lka_768* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Lka_768, model_degree_)
      + sizeof(Lka_768::model_degree_)
      - PROTOBUF_FIELD_OFFSET(Lka_768, lane_type_)>(
          reinterpret_cast<char*>(&lane_type_),
          reinterpret_cast<char*>(&other->lane_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Lka_768::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fdrivers_2fproto_2fmobileye_2eproto_getter, &descriptor_table_modules_2fdrivers_2fproto_2fmobileye_2eproto_once,
      file_level_metadata_modules_2fdrivers_2fproto_2fmobileye_2eproto[0]);
}

// ===================================================================

class Num_76b::_Internal {
 public:
  using HasBits = decltype(std::declval<Num_76b>()._has_bits_);
  static void set_has_num_of_next_lane_mark_reported(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Num_76b::Num_76b(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.drivers.Num_76b)
}
Num_76b::Num_76b(const Num_76b& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  num_of_next_lane_mark_reported_ = from.num_of_next_lane_mark_reported_;
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.Num_76b)
}

void Num_76b::SharedCtor() {
num_of_next_lane_mark_reported_ = 0;
}

Num_76b::~Num_76b() {
  // @@protoc_insertion_point(destructor:apollo.drivers.Num_76b)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Num_76b::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Num_76b::ArenaDtor(void* object) {
  Num_76b* _this = reinterpret_cast< Num_76b* >(object);
  (void)_this;
}
void Num_76b::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Num_76b::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Num_76b::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.Num_76b)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  num_of_next_lane_mark_reported_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Num_76b::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 num_of_next_lane_mark_reported = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_num_of_next_lane_mark_reported(&has_bits);
          num_of_next_lane_mark_reported_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Num_76b::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.Num_76b)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 num_of_next_lane_mark_reported = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_num_of_next_lane_mark_reported(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.Num_76b)
  return target;
}

size_t Num_76b::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.Num_76b)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 num_of_next_lane_mark_reported = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_num_of_next_lane_mark_reported());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Num_76b::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Num_76b::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Num_76b::GetClassData() const { return &_class_data_; }

void Num_76b::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Num_76b *>(to)->MergeFrom(
      static_cast<const Num_76b &>(from));
}


void Num_76b::MergeFrom(const Num_76b& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.Num_76b)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_num_of_next_lane_mark_reported()) {
    _internal_set_num_of_next_lane_mark_reported(from._internal_num_of_next_lane_mark_reported());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Num_76b::CopyFrom(const Num_76b& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.Num_76b)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Num_76b::IsInitialized() const {
  return true;
}

void Num_76b::InternalSwap(Num_76b* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(num_of_next_lane_mark_reported_, other->num_of_next_lane_mark_reported_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Num_76b::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fdrivers_2fproto_2fmobileye_2eproto_getter, &descriptor_table_modules_2fdrivers_2fproto_2fmobileye_2eproto_once,
      file_level_metadata_modules_2fdrivers_2fproto_2fmobileye_2eproto[1]);
}

// ===================================================================

class Aftermarket_669::_Internal {
 public:
  using HasBits = decltype(std::declval<Aftermarket_669>()._has_bits_);
  static void set_has_lane_conf_left(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ldw_availability_left(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_lane_type_left(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_distance_to_lane_l(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_lane_conf_right(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_ldw_availability_right(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_lane_type_right(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_distance_to_lane_r(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

Aftermarket_669::Aftermarket_669(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.drivers.Aftermarket_669)
}
Aftermarket_669::Aftermarket_669(const Aftermarket_669& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&lane_conf_left_, &from.lane_conf_left_,
    static_cast<size_t>(reinterpret_cast<char*>(&lane_type_right_) -
    reinterpret_cast<char*>(&lane_conf_left_)) + sizeof(lane_type_right_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.Aftermarket_669)
}

void Aftermarket_669::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&lane_conf_left_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&lane_type_right_) -
    reinterpret_cast<char*>(&lane_conf_left_)) + sizeof(lane_type_right_));
}

Aftermarket_669::~Aftermarket_669() {
  // @@protoc_insertion_point(destructor:apollo.drivers.Aftermarket_669)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Aftermarket_669::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Aftermarket_669::ArenaDtor(void* object) {
  Aftermarket_669* _this = reinterpret_cast< Aftermarket_669* >(object);
  (void)_this;
}
void Aftermarket_669::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Aftermarket_669::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Aftermarket_669::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.Aftermarket_669)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&lane_conf_left_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lane_type_right_) -
        reinterpret_cast<char*>(&lane_conf_left_)) + sizeof(lane_type_right_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Aftermarket_669::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 lane_conf_left = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_lane_conf_left(&has_bits);
          lane_conf_left_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool ldw_availability_left = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_ldw_availability_left(&has_bits);
          ldw_availability_left_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 lane_type_left = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_lane_type_left(&has_bits);
          lane_type_left_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double distance_to_lane_l = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_distance_to_lane_l(&has_bits);
          distance_to_lane_l_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional int32 lane_conf_right = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_lane_conf_right(&has_bits);
          lane_conf_right_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool ldw_availability_right = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_ldw_availability_right(&has_bits);
          ldw_availability_right_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 lane_type_right = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_lane_type_right(&has_bits);
          lane_type_right_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double distance_to_lane_r = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_distance_to_lane_r(&has_bits);
          distance_to_lane_r_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Aftermarket_669::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.Aftermarket_669)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 lane_conf_left = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_lane_conf_left(), target);
  }

  // optional bool ldw_availability_left = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_ldw_availability_left(), target);
  }

  // optional int32 lane_type_left = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_lane_type_left(), target);
  }

  // optional double distance_to_lane_l = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_distance_to_lane_l(), target);
  }

  // optional int32 lane_conf_right = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_lane_conf_right(), target);
  }

  // optional bool ldw_availability_right = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_ldw_availability_right(), target);
  }

  // optional int32 lane_type_right = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_lane_type_right(), target);
  }

  // optional double distance_to_lane_r = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_distance_to_lane_r(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.Aftermarket_669)
  return target;
}

size_t Aftermarket_669::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.Aftermarket_669)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 lane_conf_left = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_lane_conf_left());
    }

    // optional int32 lane_type_left = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_lane_type_left());
    }

    // optional double distance_to_lane_l = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional bool ldw_availability_left = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool ldw_availability_right = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional int32 lane_conf_right = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_lane_conf_right());
    }

    // optional double distance_to_lane_r = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional int32 lane_type_right = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_lane_type_right());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Aftermarket_669::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Aftermarket_669::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Aftermarket_669::GetClassData() const { return &_class_data_; }

void Aftermarket_669::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Aftermarket_669 *>(to)->MergeFrom(
      static_cast<const Aftermarket_669 &>(from));
}


void Aftermarket_669::MergeFrom(const Aftermarket_669& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.Aftermarket_669)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      lane_conf_left_ = from.lane_conf_left_;
    }
    if (cached_has_bits & 0x00000002u) {
      lane_type_left_ = from.lane_type_left_;
    }
    if (cached_has_bits & 0x00000004u) {
      distance_to_lane_l_ = from.distance_to_lane_l_;
    }
    if (cached_has_bits & 0x00000008u) {
      ldw_availability_left_ = from.ldw_availability_left_;
    }
    if (cached_has_bits & 0x00000010u) {
      ldw_availability_right_ = from.ldw_availability_right_;
    }
    if (cached_has_bits & 0x00000020u) {
      lane_conf_right_ = from.lane_conf_right_;
    }
    if (cached_has_bits & 0x00000040u) {
      distance_to_lane_r_ = from.distance_to_lane_r_;
    }
    if (cached_has_bits & 0x00000080u) {
      lane_type_right_ = from.lane_type_right_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Aftermarket_669::CopyFrom(const Aftermarket_669& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.Aftermarket_669)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Aftermarket_669::IsInitialized() const {
  return true;
}

void Aftermarket_669::InternalSwap(Aftermarket_669* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Aftermarket_669, lane_type_right_)
      + sizeof(Aftermarket_669::lane_type_right_)
      - PROTOBUF_FIELD_OFFSET(Aftermarket_669, lane_conf_left_)>(
          reinterpret_cast<char*>(&lane_conf_left_),
          reinterpret_cast<char*>(&other->lane_conf_left_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Aftermarket_669::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fdrivers_2fproto_2fmobileye_2eproto_getter, &descriptor_table_modules_2fdrivers_2fproto_2fmobileye_2eproto_once,
      file_level_metadata_modules_2fdrivers_2fproto_2fmobileye_2eproto[2]);
}

// ===================================================================

class Lka_769::_Internal {
 public:
  using HasBits = decltype(std::declval<Lka_769>()._has_bits_);
  static void set_has_heading_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_view_range(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_view_range_availability(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Lka_769::Lka_769(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.drivers.Lka_769)
}
Lka_769::Lka_769(const Lka_769& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&heading_angle_, &from.heading_angle_,
    static_cast<size_t>(reinterpret_cast<char*>(&view_range_availability_) -
    reinterpret_cast<char*>(&heading_angle_)) + sizeof(view_range_availability_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.Lka_769)
}

void Lka_769::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&heading_angle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&view_range_availability_) -
    reinterpret_cast<char*>(&heading_angle_)) + sizeof(view_range_availability_));
}

Lka_769::~Lka_769() {
  // @@protoc_insertion_point(destructor:apollo.drivers.Lka_769)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Lka_769::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Lka_769::ArenaDtor(void* object) {
  Lka_769* _this = reinterpret_cast< Lka_769* >(object);
  (void)_this;
}
void Lka_769::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Lka_769::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Lka_769::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.Lka_769)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&heading_angle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&view_range_availability_) -
        reinterpret_cast<char*>(&heading_angle_)) + sizeof(view_range_availability_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Lka_769::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double heading_angle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_heading_angle(&has_bits);
          heading_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double view_range = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_view_range(&has_bits);
          view_range_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool view_range_availability = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_view_range_availability(&has_bits);
          view_range_availability_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Lka_769::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.Lka_769)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double heading_angle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_heading_angle(), target);
  }

  // optional double view_range = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_view_range(), target);
  }

  // optional bool view_range_availability = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_view_range_availability(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.Lka_769)
  return target;
}

size_t Lka_769::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.Lka_769)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional double heading_angle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double view_range = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional bool view_range_availability = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Lka_769::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Lka_769::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Lka_769::GetClassData() const { return &_class_data_; }

void Lka_769::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Lka_769 *>(to)->MergeFrom(
      static_cast<const Lka_769 &>(from));
}


void Lka_769::MergeFrom(const Lka_769& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.Lka_769)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      heading_angle_ = from.heading_angle_;
    }
    if (cached_has_bits & 0x00000002u) {
      view_range_ = from.view_range_;
    }
    if (cached_has_bits & 0x00000004u) {
      view_range_availability_ = from.view_range_availability_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Lka_769::CopyFrom(const Lka_769& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.Lka_769)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lka_769::IsInitialized() const {
  return true;
}

void Lka_769::InternalSwap(Lka_769* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Lka_769, view_range_availability_)
      + sizeof(Lka_769::view_range_availability_)
      - PROTOBUF_FIELD_OFFSET(Lka_769, heading_angle_)>(
          reinterpret_cast<char*>(&heading_angle_),
          reinterpret_cast<char*>(&other->heading_angle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Lka_769::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fdrivers_2fproto_2fmobileye_2eproto_getter, &descriptor_table_modules_2fdrivers_2fproto_2fmobileye_2eproto_once,
      file_level_metadata_modules_2fdrivers_2fproto_2fmobileye_2eproto[3]);
}

// ===================================================================

class Reference_76a::_Internal {
 public:
  using HasBits = decltype(std::declval<Reference_76a>()._has_bits_);
  static void set_has_ref_point_1_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ref_point_1_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ref_point_1_validity(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_ref_point_2_position(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ref_point_2_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ref_point_2_validity(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

Reference_76a::Reference_76a(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.drivers.Reference_76a)
}
Reference_76a::Reference_76a(const Reference_76a& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ref_point_1_position_, &from.ref_point_1_position_,
    static_cast<size_t>(reinterpret_cast<char*>(&ref_point_2_validity_) -
    reinterpret_cast<char*>(&ref_point_1_position_)) + sizeof(ref_point_2_validity_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.Reference_76a)
}

void Reference_76a::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ref_point_1_position_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ref_point_2_validity_) -
    reinterpret_cast<char*>(&ref_point_1_position_)) + sizeof(ref_point_2_validity_));
}

Reference_76a::~Reference_76a() {
  // @@protoc_insertion_point(destructor:apollo.drivers.Reference_76a)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Reference_76a::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Reference_76a::ArenaDtor(void* object) {
  Reference_76a* _this = reinterpret_cast< Reference_76a* >(object);
  (void)_this;
}
void Reference_76a::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Reference_76a::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Reference_76a::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.Reference_76a)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&ref_point_1_position_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ref_point_2_validity_) -
        reinterpret_cast<char*>(&ref_point_1_position_)) + sizeof(ref_point_2_validity_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Reference_76a::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double ref_point_1_position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_ref_point_1_position(&has_bits);
          ref_point_1_position_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double ref_point_1_distance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_ref_point_1_distance(&has_bits);
          ref_point_1_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool ref_point_1_validity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_ref_point_1_validity(&has_bits);
          ref_point_1_validity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double ref_point_2_position = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_ref_point_2_position(&has_bits);
          ref_point_2_position_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double ref_point_2_distance = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_ref_point_2_distance(&has_bits);
          ref_point_2_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool ref_point_2_validity = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_ref_point_2_validity(&has_bits);
          ref_point_2_validity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Reference_76a::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.Reference_76a)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double ref_point_1_position = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_ref_point_1_position(), target);
  }

  // optional double ref_point_1_distance = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_ref_point_1_distance(), target);
  }

  // optional bool ref_point_1_validity = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_ref_point_1_validity(), target);
  }

  // optional double ref_point_2_position = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_ref_point_2_position(), target);
  }

  // optional double ref_point_2_distance = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_ref_point_2_distance(), target);
  }

  // optional bool ref_point_2_validity = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_ref_point_2_validity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.Reference_76a)
  return target;
}

size_t Reference_76a::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.Reference_76a)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional double ref_point_1_position = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double ref_point_1_distance = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double ref_point_2_position = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double ref_point_2_distance = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional bool ref_point_1_validity = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool ref_point_2_validity = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Reference_76a::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Reference_76a::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Reference_76a::GetClassData() const { return &_class_data_; }

void Reference_76a::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Reference_76a *>(to)->MergeFrom(
      static_cast<const Reference_76a &>(from));
}


void Reference_76a::MergeFrom(const Reference_76a& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.Reference_76a)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      ref_point_1_position_ = from.ref_point_1_position_;
    }
    if (cached_has_bits & 0x00000002u) {
      ref_point_1_distance_ = from.ref_point_1_distance_;
    }
    if (cached_has_bits & 0x00000004u) {
      ref_point_2_position_ = from.ref_point_2_position_;
    }
    if (cached_has_bits & 0x00000008u) {
      ref_point_2_distance_ = from.ref_point_2_distance_;
    }
    if (cached_has_bits & 0x00000010u) {
      ref_point_1_validity_ = from.ref_point_1_validity_;
    }
    if (cached_has_bits & 0x00000020u) {
      ref_point_2_validity_ = from.ref_point_2_validity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Reference_76a::CopyFrom(const Reference_76a& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.Reference_76a)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Reference_76a::IsInitialized() const {
  return true;
}

void Reference_76a::InternalSwap(Reference_76a* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Reference_76a, ref_point_2_validity_)
      + sizeof(Reference_76a::ref_point_2_validity_)
      - PROTOBUF_FIELD_OFFSET(Reference_76a, ref_point_1_position_)>(
          reinterpret_cast<char*>(&ref_point_1_position_),
          reinterpret_cast<char*>(&other->ref_point_1_position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Reference_76a::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fdrivers_2fproto_2fmobileye_2eproto_getter, &descriptor_table_modules_2fdrivers_2fproto_2fmobileye_2eproto_once,
      file_level_metadata_modules_2fdrivers_2fproto_2fmobileye_2eproto[4]);
}

// ===================================================================

class Details_738::_Internal {
 public:
  using HasBits = decltype(std::declval<Details_738>()._has_bits_);
  static void set_has_num_obstacles(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_application_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_active_version_number_section(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_left_close_rang_cut_in(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_right_close_rang_cut_in(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_go(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_protocol_version(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_close_car(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_failsafe(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_reserved_10(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

Details_738::Details_738(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.drivers.Details_738)
}
Details_738::Details_738(const Details_738& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&num_obstacles_, &from.num_obstacles_,
    static_cast<size_t>(reinterpret_cast<char*>(&reserved_10_) -
    reinterpret_cast<char*>(&num_obstacles_)) + sizeof(reserved_10_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.Details_738)
}

void Details_738::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&num_obstacles_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&reserved_10_) -
    reinterpret_cast<char*>(&num_obstacles_)) + sizeof(reserved_10_));
}

Details_738::~Details_738() {
  // @@protoc_insertion_point(destructor:apollo.drivers.Details_738)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Details_738::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Details_738::ArenaDtor(void* object) {
  Details_738* _this = reinterpret_cast< Details_738* >(object);
  (void)_this;
}
void Details_738::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Details_738::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Details_738::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.Details_738)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&num_obstacles_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&go_) -
        reinterpret_cast<char*>(&num_obstacles_)) + sizeof(go_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&protocol_version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&reserved_10_) -
        reinterpret_cast<char*>(&protocol_version_)) + sizeof(reserved_10_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Details_738::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 num_obstacles = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_num_obstacles(&has_bits);
          num_obstacles_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 application_version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_application_version(&has_bits);
          application_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 active_version_number_section = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_active_version_number_section(&has_bits);
          active_version_number_section_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool left_close_rang_cut_in = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_left_close_rang_cut_in(&has_bits);
          left_close_rang_cut_in_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool right_close_rang_cut_in = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_right_close_rang_cut_in(&has_bits);
          right_close_rang_cut_in_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 go = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_go(&has_bits);
          go_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 protocol_version = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_protocol_version(&has_bits);
          protocol_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool close_car = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_close_car(&has_bits);
          close_car_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 failsafe = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_failsafe(&has_bits);
          failsafe_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 reserved_10 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_reserved_10(&has_bits);
          reserved_10_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Details_738::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.Details_738)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 num_obstacles = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_num_obstacles(), target);
  }

  // optional int32 timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_timestamp(), target);
  }

  // optional int32 application_version = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_application_version(), target);
  }

  // optional int32 active_version_number_section = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_active_version_number_section(), target);
  }

  // optional bool left_close_rang_cut_in = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_left_close_rang_cut_in(), target);
  }

  // optional bool right_close_rang_cut_in = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_right_close_rang_cut_in(), target);
  }

  // optional int32 go = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_go(), target);
  }

  // optional int32 protocol_version = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_protocol_version(), target);
  }

  // optional bool close_car = 9;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_close_car(), target);
  }

  // optional int32 failsafe = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_failsafe(), target);
  }

  // optional int32 reserved_10 = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_reserved_10(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.Details_738)
  return target;
}

size_t Details_738::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.Details_738)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 num_obstacles = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_num_obstacles());
    }

    // optional int32 timestamp = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_timestamp());
    }

    // optional int32 application_version = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_application_version());
    }

    // optional int32 active_version_number_section = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_active_version_number_section());
    }

    // optional bool left_close_rang_cut_in = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool right_close_rang_cut_in = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool close_car = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional int32 go = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_go());
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional int32 protocol_version = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_protocol_version());
    }

    // optional int32 failsafe = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_failsafe());
    }

    // optional int32 reserved_10 = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_reserved_10());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Details_738::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Details_738::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Details_738::GetClassData() const { return &_class_data_; }

void Details_738::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Details_738 *>(to)->MergeFrom(
      static_cast<const Details_738 &>(from));
}


void Details_738::MergeFrom(const Details_738& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.Details_738)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      num_obstacles_ = from.num_obstacles_;
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      application_version_ = from.application_version_;
    }
    if (cached_has_bits & 0x00000008u) {
      active_version_number_section_ = from.active_version_number_section_;
    }
    if (cached_has_bits & 0x00000010u) {
      left_close_rang_cut_in_ = from.left_close_rang_cut_in_;
    }
    if (cached_has_bits & 0x00000020u) {
      right_close_rang_cut_in_ = from.right_close_rang_cut_in_;
    }
    if (cached_has_bits & 0x00000040u) {
      close_car_ = from.close_car_;
    }
    if (cached_has_bits & 0x00000080u) {
      go_ = from.go_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      protocol_version_ = from.protocol_version_;
    }
    if (cached_has_bits & 0x00000200u) {
      failsafe_ = from.failsafe_;
    }
    if (cached_has_bits & 0x00000400u) {
      reserved_10_ = from.reserved_10_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Details_738::CopyFrom(const Details_738& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.Details_738)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Details_738::IsInitialized() const {
  return true;
}

void Details_738::InternalSwap(Details_738* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Details_738, reserved_10_)
      + sizeof(Details_738::reserved_10_)
      - PROTOBUF_FIELD_OFFSET(Details_738, num_obstacles_)>(
          reinterpret_cast<char*>(&num_obstacles_),
          reinterpret_cast<char*>(&other->num_obstacles_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Details_738::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fdrivers_2fproto_2fmobileye_2eproto_getter, &descriptor_table_modules_2fdrivers_2fproto_2fmobileye_2eproto_once,
      file_level_metadata_modules_2fdrivers_2fproto_2fmobileye_2eproto[5]);
}

// ===================================================================

class Next_76c::_Internal {
 public:
  using HasBits = decltype(std::declval<Next_76c>()._has_bits_);
  static void set_has_lane_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_quality(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_model_degree(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_curvature(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_curvature_derivative(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_lane_mark_width(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

Next_76c::Next_76c(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.drivers.Next_76c)
}
Next_76c::Next_76c(const Next_76c& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&lane_type_, &from.lane_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&model_degree_) -
    reinterpret_cast<char*>(&lane_type_)) + sizeof(model_degree_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.Next_76c)
}

void Next_76c::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&lane_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&model_degree_) -
    reinterpret_cast<char*>(&lane_type_)) + sizeof(model_degree_));
}

Next_76c::~Next_76c() {
  // @@protoc_insertion_point(destructor:apollo.drivers.Next_76c)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Next_76c::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Next_76c::ArenaDtor(void* object) {
  Next_76c* _this = reinterpret_cast< Next_76c* >(object);
  (void)_this;
}
void Next_76c::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Next_76c::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Next_76c::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.Next_76c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&lane_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&model_degree_) -
        reinterpret_cast<char*>(&lane_type_)) + sizeof(model_degree_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Next_76c::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 lane_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_lane_type(&has_bits);
          lane_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 quality = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_quality(&has_bits);
          quality_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 model_degree = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_model_degree(&has_bits);
          model_degree_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double position = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_position(&has_bits);
          position_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double curvature = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_curvature(&has_bits);
          curvature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double curvature_derivative = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_curvature_derivative(&has_bits);
          curvature_derivative_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double lane_mark_width = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_lane_mark_width(&has_bits);
          lane_mark_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Next_76c::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.Next_76c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 lane_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_lane_type(), target);
  }

  // optional int32 quality = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_quality(), target);
  }

  // optional int32 model_degree = 3;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_model_degree(), target);
  }

  // optional double position = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_position(), target);
  }

  // optional double curvature = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_curvature(), target);
  }

  // optional double curvature_derivative = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_curvature_derivative(), target);
  }

  // optional double lane_mark_width = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_lane_mark_width(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.Next_76c)
  return target;
}

size_t Next_76c::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.Next_76c)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional int32 lane_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_lane_type());
    }

    // optional int32 quality = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_quality());
    }

    // optional double position = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double curvature = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double curvature_derivative = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double lane_mark_width = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional int32 model_degree = 3;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_model_degree());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Next_76c::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Next_76c::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Next_76c::GetClassData() const { return &_class_data_; }

void Next_76c::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Next_76c *>(to)->MergeFrom(
      static_cast<const Next_76c &>(from));
}


void Next_76c::MergeFrom(const Next_76c& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.Next_76c)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      lane_type_ = from.lane_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      quality_ = from.quality_;
    }
    if (cached_has_bits & 0x00000004u) {
      position_ = from.position_;
    }
    if (cached_has_bits & 0x00000008u) {
      curvature_ = from.curvature_;
    }
    if (cached_has_bits & 0x00000010u) {
      curvature_derivative_ = from.curvature_derivative_;
    }
    if (cached_has_bits & 0x00000020u) {
      lane_mark_width_ = from.lane_mark_width_;
    }
    if (cached_has_bits & 0x00000040u) {
      model_degree_ = from.model_degree_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Next_76c::CopyFrom(const Next_76c& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.Next_76c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Next_76c::IsInitialized() const {
  return true;
}

void Next_76c::InternalSwap(Next_76c* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Next_76c, model_degree_)
      + sizeof(Next_76c::model_degree_)
      - PROTOBUF_FIELD_OFFSET(Next_76c, lane_type_)>(
          reinterpret_cast<char*>(&lane_type_),
          reinterpret_cast<char*>(&other->lane_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Next_76c::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fdrivers_2fproto_2fmobileye_2eproto_getter, &descriptor_table_modules_2fdrivers_2fproto_2fmobileye_2eproto_once,
      file_level_metadata_modules_2fdrivers_2fproto_2fmobileye_2eproto[6]);
}

// ===================================================================

class Details_737::_Internal {
 public:
  using HasBits = decltype(std::declval<Details_737>()._has_bits_);
  static void set_has_lane_curvature(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_lane_heading(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ca_construction_area(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_right_ldw_availability(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_left_ldw_availability(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_reserved_1(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_yaw_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_pitch_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

Details_737::Details_737(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.drivers.Details_737)
}
Details_737::Details_737(const Details_737& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&lane_curvature_, &from.lane_curvature_,
    static_cast<size_t>(reinterpret_cast<char*>(&reserved_1_) -
    reinterpret_cast<char*>(&lane_curvature_)) + sizeof(reserved_1_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.Details_737)
}

void Details_737::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&lane_curvature_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&reserved_1_) -
    reinterpret_cast<char*>(&lane_curvature_)) + sizeof(reserved_1_));
}

Details_737::~Details_737() {
  // @@protoc_insertion_point(destructor:apollo.drivers.Details_737)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Details_737::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Details_737::ArenaDtor(void* object) {
  Details_737* _this = reinterpret_cast< Details_737* >(object);
  (void)_this;
}
void Details_737::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Details_737::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Details_737::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.Details_737)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&lane_curvature_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&reserved_1_) -
        reinterpret_cast<char*>(&lane_curvature_)) + sizeof(reserved_1_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Details_737::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double lane_curvature = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_lane_curvature(&has_bits);
          lane_curvature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double lane_heading = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_lane_heading(&has_bits);
          lane_heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool ca_construction_area = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_ca_construction_area(&has_bits);
          ca_construction_area_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool right_ldw_availability = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_right_ldw_availability(&has_bits);
          right_ldw_availability_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool left_ldw_availability = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_left_ldw_availability(&has_bits);
          left_ldw_availability_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool reserved_1 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_reserved_1(&has_bits);
          reserved_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double yaw_angle = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_yaw_angle(&has_bits);
          yaw_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double pitch_angle = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_pitch_angle(&has_bits);
          pitch_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Details_737::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.Details_737)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double lane_curvature = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_lane_curvature(), target);
  }

  // optional double lane_heading = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_lane_heading(), target);
  }

  // optional bool ca_construction_area = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_ca_construction_area(), target);
  }

  // optional bool right_ldw_availability = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_right_ldw_availability(), target);
  }

  // optional bool left_ldw_availability = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_left_ldw_availability(), target);
  }

  // optional bool reserved_1 = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_reserved_1(), target);
  }

  // optional double yaw_angle = 7;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_yaw_angle(), target);
  }

  // optional double pitch_angle = 8;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_pitch_angle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.Details_737)
  return target;
}

size_t Details_737::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.Details_737)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional double lane_curvature = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double lane_heading = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double yaw_angle = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double pitch_angle = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional bool ca_construction_area = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool right_ldw_availability = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool left_ldw_availability = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool reserved_1 = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Details_737::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Details_737::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Details_737::GetClassData() const { return &_class_data_; }

void Details_737::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Details_737 *>(to)->MergeFrom(
      static_cast<const Details_737 &>(from));
}


void Details_737::MergeFrom(const Details_737& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.Details_737)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      lane_curvature_ = from.lane_curvature_;
    }
    if (cached_has_bits & 0x00000002u) {
      lane_heading_ = from.lane_heading_;
    }
    if (cached_has_bits & 0x00000004u) {
      yaw_angle_ = from.yaw_angle_;
    }
    if (cached_has_bits & 0x00000008u) {
      pitch_angle_ = from.pitch_angle_;
    }
    if (cached_has_bits & 0x00000010u) {
      ca_construction_area_ = from.ca_construction_area_;
    }
    if (cached_has_bits & 0x00000020u) {
      right_ldw_availability_ = from.right_ldw_availability_;
    }
    if (cached_has_bits & 0x00000040u) {
      left_ldw_availability_ = from.left_ldw_availability_;
    }
    if (cached_has_bits & 0x00000080u) {
      reserved_1_ = from.reserved_1_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Details_737::CopyFrom(const Details_737& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.Details_737)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Details_737::IsInitialized() const {
  return true;
}

void Details_737::InternalSwap(Details_737* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Details_737, reserved_1_)
      + sizeof(Details_737::reserved_1_)
      - PROTOBUF_FIELD_OFFSET(Details_737, lane_curvature_)>(
          reinterpret_cast<char*>(&lane_curvature_),
          reinterpret_cast<char*>(&other->lane_curvature_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Details_737::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fdrivers_2fproto_2fmobileye_2eproto_getter, &descriptor_table_modules_2fdrivers_2fproto_2fmobileye_2eproto_once,
      file_level_metadata_modules_2fdrivers_2fproto_2fmobileye_2eproto[7]);
}

// ===================================================================

class Lka_767::_Internal {
 public:
  using HasBits = decltype(std::declval<Lka_767>()._has_bits_);
  static void set_has_heading_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_view_range(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_view_range_availability(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Lka_767::Lka_767(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.drivers.Lka_767)
}
Lka_767::Lka_767(const Lka_767& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&heading_angle_, &from.heading_angle_,
    static_cast<size_t>(reinterpret_cast<char*>(&view_range_availability_) -
    reinterpret_cast<char*>(&heading_angle_)) + sizeof(view_range_availability_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.Lka_767)
}

void Lka_767::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&heading_angle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&view_range_availability_) -
    reinterpret_cast<char*>(&heading_angle_)) + sizeof(view_range_availability_));
}

Lka_767::~Lka_767() {
  // @@protoc_insertion_point(destructor:apollo.drivers.Lka_767)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Lka_767::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Lka_767::ArenaDtor(void* object) {
  Lka_767* _this = reinterpret_cast< Lka_767* >(object);
  (void)_this;
}
void Lka_767::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Lka_767::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Lka_767::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.Lka_767)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&heading_angle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&view_range_availability_) -
        reinterpret_cast<char*>(&heading_angle_)) + sizeof(view_range_availability_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Lka_767::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double heading_angle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_heading_angle(&has_bits);
          heading_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double view_range = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_view_range(&has_bits);
          view_range_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool view_range_availability = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_view_range_availability(&has_bits);
          view_range_availability_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Lka_767::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.Lka_767)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double heading_angle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_heading_angle(), target);
  }

  // optional double view_range = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_view_range(), target);
  }

  // optional bool view_range_availability = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_view_range_availability(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.Lka_767)
  return target;
}

size_t Lka_767::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.Lka_767)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional double heading_angle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double view_range = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional bool view_range_availability = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Lka_767::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Lka_767::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Lka_767::GetClassData() const { return &_class_data_; }

void Lka_767::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Lka_767 *>(to)->MergeFrom(
      static_cast<const Lka_767 &>(from));
}


void Lka_767::MergeFrom(const Lka_767& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.Lka_767)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      heading_angle_ = from.heading_angle_;
    }
    if (cached_has_bits & 0x00000002u) {
      view_range_ = from.view_range_;
    }
    if (cached_has_bits & 0x00000004u) {
      view_range_availability_ = from.view_range_availability_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Lka_767::CopyFrom(const Lka_767& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.Lka_767)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lka_767::IsInitialized() const {
  return true;
}

void Lka_767::InternalSwap(Lka_767* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Lka_767, view_range_availability_)
      + sizeof(Lka_767::view_range_availability_)
      - PROTOBUF_FIELD_OFFSET(Lka_767, heading_angle_)>(
          reinterpret_cast<char*>(&heading_angle_),
          reinterpret_cast<char*>(&other->heading_angle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Lka_767::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fdrivers_2fproto_2fmobileye_2eproto_getter, &descriptor_table_modules_2fdrivers_2fproto_2fmobileye_2eproto_once,
      file_level_metadata_modules_2fdrivers_2fproto_2fmobileye_2eproto[8]);
}

// ===================================================================

class Lka_766::_Internal {
 public:
  using HasBits = decltype(std::declval<Lka_766>()._has_bits_);
  static void set_has_lane_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_quality(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_model_degree(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_curvature(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_curvature_derivative(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_width_left_marking(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

Lka_766::Lka_766(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.drivers.Lka_766)
}
Lka_766::Lka_766(const Lka_766& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&lane_type_, &from.lane_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&model_degree_) -
    reinterpret_cast<char*>(&lane_type_)) + sizeof(model_degree_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.Lka_766)
}

void Lka_766::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&lane_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&model_degree_) -
    reinterpret_cast<char*>(&lane_type_)) + sizeof(model_degree_));
}

Lka_766::~Lka_766() {
  // @@protoc_insertion_point(destructor:apollo.drivers.Lka_766)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Lka_766::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Lka_766::ArenaDtor(void* object) {
  Lka_766* _this = reinterpret_cast< Lka_766* >(object);
  (void)_this;
}
void Lka_766::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Lka_766::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Lka_766::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.Lka_766)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&lane_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&model_degree_) -
        reinterpret_cast<char*>(&lane_type_)) + sizeof(model_degree_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Lka_766::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 lane_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_lane_type(&has_bits);
          lane_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 quality = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_quality(&has_bits);
          quality_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 model_degree = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_model_degree(&has_bits);
          model_degree_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double position = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_position(&has_bits);
          position_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double curvature = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_curvature(&has_bits);
          curvature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double curvature_derivative = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_curvature_derivative(&has_bits);
          curvature_derivative_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double width_left_marking = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_width_left_marking(&has_bits);
          width_left_marking_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Lka_766::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.Lka_766)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 lane_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_lane_type(), target);
  }

  // optional int32 quality = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_quality(), target);
  }

  // optional int32 model_degree = 3;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_model_degree(), target);
  }

  // optional double position = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_position(), target);
  }

  // optional double curvature = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_curvature(), target);
  }

  // optional double curvature_derivative = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_curvature_derivative(), target);
  }

  // optional double width_left_marking = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_width_left_marking(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.Lka_766)
  return target;
}

size_t Lka_766::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.Lka_766)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional int32 lane_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_lane_type());
    }

    // optional int32 quality = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_quality());
    }

    // optional double position = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double curvature = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double curvature_derivative = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double width_left_marking = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional int32 model_degree = 3;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_model_degree());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Lka_766::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Lka_766::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Lka_766::GetClassData() const { return &_class_data_; }

void Lka_766::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Lka_766 *>(to)->MergeFrom(
      static_cast<const Lka_766 &>(from));
}


void Lka_766::MergeFrom(const Lka_766& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.Lka_766)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      lane_type_ = from.lane_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      quality_ = from.quality_;
    }
    if (cached_has_bits & 0x00000004u) {
      position_ = from.position_;
    }
    if (cached_has_bits & 0x00000008u) {
      curvature_ = from.curvature_;
    }
    if (cached_has_bits & 0x00000010u) {
      curvature_derivative_ = from.curvature_derivative_;
    }
    if (cached_has_bits & 0x00000020u) {
      width_left_marking_ = from.width_left_marking_;
    }
    if (cached_has_bits & 0x00000040u) {
      model_degree_ = from.model_degree_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Lka_766::CopyFrom(const Lka_766& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.Lka_766)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lka_766::IsInitialized() const {
  return true;
}

void Lka_766::InternalSwap(Lka_766* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Lka_766, model_degree_)
      + sizeof(Lka_766::model_degree_)
      - PROTOBUF_FIELD_OFFSET(Lka_766, lane_type_)>(
          reinterpret_cast<char*>(&lane_type_),
          reinterpret_cast<char*>(&other->lane_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Lka_766::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fdrivers_2fproto_2fmobileye_2eproto_getter, &descriptor_table_modules_2fdrivers_2fproto_2fmobileye_2eproto_once,
      file_level_metadata_modules_2fdrivers_2fproto_2fmobileye_2eproto[9]);
}

// ===================================================================

class Next_76d::_Internal {
 public:
  using HasBits = decltype(std::declval<Next_76d>()._has_bits_);
  static void set_has_heading_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_view_range(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_view_range_availability(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Next_76d::Next_76d(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.drivers.Next_76d)
}
Next_76d::Next_76d(const Next_76d& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&heading_angle_, &from.heading_angle_,
    static_cast<size_t>(reinterpret_cast<char*>(&view_range_availability_) -
    reinterpret_cast<char*>(&heading_angle_)) + sizeof(view_range_availability_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.Next_76d)
}

void Next_76d::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&heading_angle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&view_range_availability_) -
    reinterpret_cast<char*>(&heading_angle_)) + sizeof(view_range_availability_));
}

Next_76d::~Next_76d() {
  // @@protoc_insertion_point(destructor:apollo.drivers.Next_76d)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Next_76d::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Next_76d::ArenaDtor(void* object) {
  Next_76d* _this = reinterpret_cast< Next_76d* >(object);
  (void)_this;
}
void Next_76d::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Next_76d::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Next_76d::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.Next_76d)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&heading_angle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&view_range_availability_) -
        reinterpret_cast<char*>(&heading_angle_)) + sizeof(view_range_availability_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Next_76d::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double heading_angle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_heading_angle(&has_bits);
          heading_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double view_range = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_view_range(&has_bits);
          view_range_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool view_range_availability = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_view_range_availability(&has_bits);
          view_range_availability_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Next_76d::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.Next_76d)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double heading_angle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_heading_angle(), target);
  }

  // optional double view_range = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_view_range(), target);
  }

  // optional bool view_range_availability = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_view_range_availability(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.Next_76d)
  return target;
}

size_t Next_76d::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.Next_76d)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional double heading_angle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double view_range = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional bool view_range_availability = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Next_76d::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Next_76d::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Next_76d::GetClassData() const { return &_class_data_; }

void Next_76d::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Next_76d *>(to)->MergeFrom(
      static_cast<const Next_76d &>(from));
}


void Next_76d::MergeFrom(const Next_76d& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.Next_76d)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      heading_angle_ = from.heading_angle_;
    }
    if (cached_has_bits & 0x00000002u) {
      view_range_ = from.view_range_;
    }
    if (cached_has_bits & 0x00000004u) {
      view_range_availability_ = from.view_range_availability_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Next_76d::CopyFrom(const Next_76d& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.Next_76d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Next_76d::IsInitialized() const {
  return true;
}

void Next_76d::InternalSwap(Next_76d* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Next_76d, view_range_availability_)
      + sizeof(Next_76d::view_range_availability_)
      - PROTOBUF_FIELD_OFFSET(Next_76d, heading_angle_)>(
          reinterpret_cast<char*>(&heading_angle_),
          reinterpret_cast<char*>(&other->heading_angle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Next_76d::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fdrivers_2fproto_2fmobileye_2eproto_getter, &descriptor_table_modules_2fdrivers_2fproto_2fmobileye_2eproto_once,
      file_level_metadata_modules_2fdrivers_2fproto_2fmobileye_2eproto[10]);
}

// ===================================================================

class Details_739::_Internal {
 public:
  using HasBits = decltype(std::declval<Details_739>()._has_bits_);
  static void set_has_obstacle_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_obstacle_pos_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_reseved_2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_obstacle_pos_y(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_blinker_info(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_cut_in_and_out(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_obstacle_rel_vel_x(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_obstacle_type(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_reserved_3(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_obstacle_status(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_obstacle_brake_lights(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_reserved_4(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_obstacle_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
};

Details_739::Details_739(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.drivers.Details_739)
}
Details_739::Details_739(const Details_739& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&obstacle_pos_x_, &from.obstacle_pos_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&obstacle_valid_) -
    reinterpret_cast<char*>(&obstacle_pos_x_)) + sizeof(obstacle_valid_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.Details_739)
}

void Details_739::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&obstacle_pos_x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&obstacle_valid_) -
    reinterpret_cast<char*>(&obstacle_pos_x_)) + sizeof(obstacle_valid_));
}

Details_739::~Details_739() {
  // @@protoc_insertion_point(destructor:apollo.drivers.Details_739)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Details_739::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Details_739::ArenaDtor(void* object) {
  Details_739* _this = reinterpret_cast< Details_739* >(object);
  (void)_this;
}
void Details_739::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Details_739::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Details_739::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.Details_739)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&obstacle_pos_x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&obstacle_type_) -
        reinterpret_cast<char*>(&obstacle_pos_x_)) + sizeof(obstacle_type_));
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&obstacle_status_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&obstacle_valid_) -
        reinterpret_cast<char*>(&obstacle_status_)) + sizeof(obstacle_valid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Details_739::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 obstacle_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_obstacle_id(&has_bits);
          obstacle_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double obstacle_pos_x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_obstacle_pos_x(&has_bits);
          obstacle_pos_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional int32 reseved_2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_reseved_2(&has_bits);
          reseved_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double obstacle_pos_y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_obstacle_pos_y(&has_bits);
          obstacle_pos_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional int32 blinker_info = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_blinker_info(&has_bits);
          blinker_info_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 cut_in_and_out = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_cut_in_and_out(&has_bits);
          cut_in_and_out_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double obstacle_rel_vel_x = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_obstacle_rel_vel_x(&has_bits);
          obstacle_rel_vel_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional int32 obstacle_type = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_obstacle_type(&has_bits);
          obstacle_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool reserved_3 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_reserved_3(&has_bits);
          reserved_3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 obstacle_status = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_obstacle_status(&has_bits);
          obstacle_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool obstacle_brake_lights = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_obstacle_brake_lights(&has_bits);
          obstacle_brake_lights_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 reserved_4 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_reserved_4(&has_bits);
          reserved_4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 obstacle_valid = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_obstacle_valid(&has_bits);
          obstacle_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Details_739::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.Details_739)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 obstacle_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_obstacle_id(), target);
  }

  // optional double obstacle_pos_x = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_obstacle_pos_x(), target);
  }

  // optional int32 reseved_2 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_reseved_2(), target);
  }

  // optional double obstacle_pos_y = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_obstacle_pos_y(), target);
  }

  // optional int32 blinker_info = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_blinker_info(), target);
  }

  // optional int32 cut_in_and_out = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_cut_in_and_out(), target);
  }

  // optional double obstacle_rel_vel_x = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_obstacle_rel_vel_x(), target);
  }

  // optional int32 obstacle_type = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_obstacle_type(), target);
  }

  // optional bool reserved_3 = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_reserved_3(), target);
  }

  // optional int32 obstacle_status = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_obstacle_status(), target);
  }

  // optional bool obstacle_brake_lights = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_obstacle_brake_lights(), target);
  }

  // optional int32 reserved_4 = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_reserved_4(), target);
  }

  // optional int32 obstacle_valid = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_obstacle_valid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.Details_739)
  return target;
}

size_t Details_739::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.Details_739)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional double obstacle_pos_x = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional int32 obstacle_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_obstacle_id());
    }

    // optional int32 reseved_2 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_reseved_2());
    }

    // optional double obstacle_pos_y = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional int32 blinker_info = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_blinker_info());
    }

    // optional int32 cut_in_and_out = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_cut_in_and_out());
    }

    // optional double obstacle_rel_vel_x = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional int32 obstacle_type = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_obstacle_type());
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional int32 obstacle_status = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_obstacle_status());
    }

    // optional bool reserved_3 = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool obstacle_brake_lights = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional int32 reserved_4 = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_reserved_4());
    }

    // optional int32 obstacle_valid = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_obstacle_valid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Details_739::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Details_739::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Details_739::GetClassData() const { return &_class_data_; }

void Details_739::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Details_739 *>(to)->MergeFrom(
      static_cast<const Details_739 &>(from));
}


void Details_739::MergeFrom(const Details_739& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.Details_739)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      obstacle_pos_x_ = from.obstacle_pos_x_;
    }
    if (cached_has_bits & 0x00000002u) {
      obstacle_id_ = from.obstacle_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      reseved_2_ = from.reseved_2_;
    }
    if (cached_has_bits & 0x00000008u) {
      obstacle_pos_y_ = from.obstacle_pos_y_;
    }
    if (cached_has_bits & 0x00000010u) {
      blinker_info_ = from.blinker_info_;
    }
    if (cached_has_bits & 0x00000020u) {
      cut_in_and_out_ = from.cut_in_and_out_;
    }
    if (cached_has_bits & 0x00000040u) {
      obstacle_rel_vel_x_ = from.obstacle_rel_vel_x_;
    }
    if (cached_has_bits & 0x00000080u) {
      obstacle_type_ = from.obstacle_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      obstacle_status_ = from.obstacle_status_;
    }
    if (cached_has_bits & 0x00000200u) {
      reserved_3_ = from.reserved_3_;
    }
    if (cached_has_bits & 0x00000400u) {
      obstacle_brake_lights_ = from.obstacle_brake_lights_;
    }
    if (cached_has_bits & 0x00000800u) {
      reserved_4_ = from.reserved_4_;
    }
    if (cached_has_bits & 0x00001000u) {
      obstacle_valid_ = from.obstacle_valid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Details_739::CopyFrom(const Details_739& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.Details_739)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Details_739::IsInitialized() const {
  return true;
}

void Details_739::InternalSwap(Details_739* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Details_739, obstacle_valid_)
      + sizeof(Details_739::obstacle_valid_)
      - PROTOBUF_FIELD_OFFSET(Details_739, obstacle_pos_x_)>(
          reinterpret_cast<char*>(&obstacle_pos_x_),
          reinterpret_cast<char*>(&other->obstacle_pos_x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Details_739::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fdrivers_2fproto_2fmobileye_2eproto_getter, &descriptor_table_modules_2fdrivers_2fproto_2fmobileye_2eproto_once,
      file_level_metadata_modules_2fdrivers_2fproto_2fmobileye_2eproto[11]);
}

// ===================================================================

class Details_73a::_Internal {
 public:
  using HasBits = decltype(std::declval<Details_73a>()._has_bits_);
  static void set_has_obstacle_length(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_obstacle_width(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_obstacle_age(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_obstacle_lane(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_cipv_flag(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_reserved_5(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_radar_pos_x(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_radar_vel_x(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_radar_match_confidence(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_reserved_6(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_matched_radar_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_reserved_7(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

Details_73a::Details_73a(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.drivers.Details_73a)
}
Details_73a::Details_73a(const Details_73a& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&obstacle_length_, &from.obstacle_length_,
    static_cast<size_t>(reinterpret_cast<char*>(&matched_radar_id_) -
    reinterpret_cast<char*>(&obstacle_length_)) + sizeof(matched_radar_id_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.Details_73a)
}

void Details_73a::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&obstacle_length_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&matched_radar_id_) -
    reinterpret_cast<char*>(&obstacle_length_)) + sizeof(matched_radar_id_));
}

Details_73a::~Details_73a() {
  // @@protoc_insertion_point(destructor:apollo.drivers.Details_73a)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Details_73a::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Details_73a::ArenaDtor(void* object) {
  Details_73a* _this = reinterpret_cast< Details_73a* >(object);
  (void)_this;
}
void Details_73a::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Details_73a::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Details_73a::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.Details_73a)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&obstacle_length_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&reserved_5_) -
        reinterpret_cast<char*>(&obstacle_length_)) + sizeof(reserved_5_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&reserved_6_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&matched_radar_id_) -
        reinterpret_cast<char*>(&reserved_6_)) + sizeof(matched_radar_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Details_73a::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double obstacle_length = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_obstacle_length(&has_bits);
          obstacle_length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double obstacle_width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_obstacle_width(&has_bits);
          obstacle_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional int32 obstacle_age = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_obstacle_age(&has_bits);
          obstacle_age_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 obstacle_lane = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_obstacle_lane(&has_bits);
          obstacle_lane_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool cipv_flag = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_cipv_flag(&has_bits);
          cipv_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool reserved_5 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_reserved_5(&has_bits);
          reserved_5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double radar_pos_x = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_radar_pos_x(&has_bits);
          radar_pos_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double radar_vel_x = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_radar_vel_x(&has_bits);
          radar_vel_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional int32 radar_match_confidence = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_radar_match_confidence(&has_bits);
          radar_match_confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool reserved_6 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_reserved_6(&has_bits);
          reserved_6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 matched_radar_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_matched_radar_id(&has_bits);
          matched_radar_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool reserved_7 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_reserved_7(&has_bits);
          reserved_7_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Details_73a::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.Details_73a)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double obstacle_length = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_obstacle_length(), target);
  }

  // optional double obstacle_width = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_obstacle_width(), target);
  }

  // optional int32 obstacle_age = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_obstacle_age(), target);
  }

  // optional int32 obstacle_lane = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_obstacle_lane(), target);
  }

  // optional bool cipv_flag = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_cipv_flag(), target);
  }

  // optional bool reserved_5 = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_reserved_5(), target);
  }

  // optional double radar_pos_x = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_radar_pos_x(), target);
  }

  // optional double radar_vel_x = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_radar_vel_x(), target);
  }

  // optional int32 radar_match_confidence = 9;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_radar_match_confidence(), target);
  }

  // optional bool reserved_6 = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_reserved_6(), target);
  }

  // optional int32 matched_radar_id = 11;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_matched_radar_id(), target);
  }

  // optional bool reserved_7 = 12;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_reserved_7(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.Details_73a)
  return target;
}

size_t Details_73a::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.Details_73a)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional double obstacle_length = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double obstacle_width = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional int32 obstacle_age = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_obstacle_age());
    }

    // optional int32 obstacle_lane = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_obstacle_lane());
    }

    // optional double radar_pos_x = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double radar_vel_x = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional bool cipv_flag = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool reserved_5 = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional bool reserved_6 = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool reserved_7 = 12;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional int32 radar_match_confidence = 9;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_radar_match_confidence());
    }

    // optional int32 matched_radar_id = 11;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_matched_radar_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Details_73a::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Details_73a::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Details_73a::GetClassData() const { return &_class_data_; }

void Details_73a::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Details_73a *>(to)->MergeFrom(
      static_cast<const Details_73a &>(from));
}


void Details_73a::MergeFrom(const Details_73a& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.Details_73a)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      obstacle_length_ = from.obstacle_length_;
    }
    if (cached_has_bits & 0x00000002u) {
      obstacle_width_ = from.obstacle_width_;
    }
    if (cached_has_bits & 0x00000004u) {
      obstacle_age_ = from.obstacle_age_;
    }
    if (cached_has_bits & 0x00000008u) {
      obstacle_lane_ = from.obstacle_lane_;
    }
    if (cached_has_bits & 0x00000010u) {
      radar_pos_x_ = from.radar_pos_x_;
    }
    if (cached_has_bits & 0x00000020u) {
      radar_vel_x_ = from.radar_vel_x_;
    }
    if (cached_has_bits & 0x00000040u) {
      cipv_flag_ = from.cipv_flag_;
    }
    if (cached_has_bits & 0x00000080u) {
      reserved_5_ = from.reserved_5_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      reserved_6_ = from.reserved_6_;
    }
    if (cached_has_bits & 0x00000200u) {
      reserved_7_ = from.reserved_7_;
    }
    if (cached_has_bits & 0x00000400u) {
      radar_match_confidence_ = from.radar_match_confidence_;
    }
    if (cached_has_bits & 0x00000800u) {
      matched_radar_id_ = from.matched_radar_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Details_73a::CopyFrom(const Details_73a& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.Details_73a)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Details_73a::IsInitialized() const {
  return true;
}

void Details_73a::InternalSwap(Details_73a* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Details_73a, matched_radar_id_)
      + sizeof(Details_73a::matched_radar_id_)
      - PROTOBUF_FIELD_OFFSET(Details_73a, obstacle_length_)>(
          reinterpret_cast<char*>(&obstacle_length_),
          reinterpret_cast<char*>(&other->obstacle_length_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Details_73a::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fdrivers_2fproto_2fmobileye_2eproto_getter, &descriptor_table_modules_2fdrivers_2fproto_2fmobileye_2eproto_once,
      file_level_metadata_modules_2fdrivers_2fproto_2fmobileye_2eproto[12]);
}

// ===================================================================

class Details_73b::_Internal {
 public:
  using HasBits = decltype(std::declval<Details_73b>()._has_bits_);
  static void set_has_obstacle_angle_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_obstacle_scale_change(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_object_accel_x(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_reserved_8(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_obstacle_replaced(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_reserved_9(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_obstacle_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

Details_73b::Details_73b(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.drivers.Details_73b)
}
Details_73b::Details_73b(const Details_73b& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&obstacle_angle_rate_, &from.obstacle_angle_rate_,
    static_cast<size_t>(reinterpret_cast<char*>(&reserved_9_) -
    reinterpret_cast<char*>(&obstacle_angle_rate_)) + sizeof(reserved_9_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.Details_73b)
}

void Details_73b::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&obstacle_angle_rate_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&reserved_9_) -
    reinterpret_cast<char*>(&obstacle_angle_rate_)) + sizeof(reserved_9_));
}

Details_73b::~Details_73b() {
  // @@protoc_insertion_point(destructor:apollo.drivers.Details_73b)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Details_73b::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Details_73b::ArenaDtor(void* object) {
  Details_73b* _this = reinterpret_cast< Details_73b* >(object);
  (void)_this;
}
void Details_73b::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Details_73b::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Details_73b::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.Details_73b)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&obstacle_angle_rate_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&reserved_9_) -
        reinterpret_cast<char*>(&obstacle_angle_rate_)) + sizeof(reserved_9_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Details_73b::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double obstacle_angle_rate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_obstacle_angle_rate(&has_bits);
          obstacle_angle_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double obstacle_scale_change = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_obstacle_scale_change(&has_bits);
          obstacle_scale_change_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double object_accel_x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_object_accel_x(&has_bits);
          object_accel_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional int32 reserved_8 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_reserved_8(&has_bits);
          reserved_8_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool obstacle_replaced = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_obstacle_replaced(&has_bits);
          obstacle_replaced_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 reserved_9 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_reserved_9(&has_bits);
          reserved_9_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double obstacle_angle = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_obstacle_angle(&has_bits);
          obstacle_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Details_73b::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.Details_73b)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double obstacle_angle_rate = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_obstacle_angle_rate(), target);
  }

  // optional double obstacle_scale_change = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_obstacle_scale_change(), target);
  }

  // optional double object_accel_x = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_object_accel_x(), target);
  }

  // optional int32 reserved_8 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_reserved_8(), target);
  }

  // optional bool obstacle_replaced = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_obstacle_replaced(), target);
  }

  // optional int32 reserved_9 = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_reserved_9(), target);
  }

  // optional double obstacle_angle = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_obstacle_angle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.Details_73b)
  return target;
}

size_t Details_73b::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.Details_73b)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional double obstacle_angle_rate = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double obstacle_scale_change = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double object_accel_x = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional int32 reserved_8 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_reserved_8());
    }

    // optional bool obstacle_replaced = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional double obstacle_angle = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional int32 reserved_9 = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_reserved_9());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Details_73b::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Details_73b::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Details_73b::GetClassData() const { return &_class_data_; }

void Details_73b::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Details_73b *>(to)->MergeFrom(
      static_cast<const Details_73b &>(from));
}


void Details_73b::MergeFrom(const Details_73b& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.Details_73b)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      obstacle_angle_rate_ = from.obstacle_angle_rate_;
    }
    if (cached_has_bits & 0x00000002u) {
      obstacle_scale_change_ = from.obstacle_scale_change_;
    }
    if (cached_has_bits & 0x00000004u) {
      object_accel_x_ = from.object_accel_x_;
    }
    if (cached_has_bits & 0x00000008u) {
      reserved_8_ = from.reserved_8_;
    }
    if (cached_has_bits & 0x00000010u) {
      obstacle_replaced_ = from.obstacle_replaced_;
    }
    if (cached_has_bits & 0x00000020u) {
      obstacle_angle_ = from.obstacle_angle_;
    }
    if (cached_has_bits & 0x00000040u) {
      reserved_9_ = from.reserved_9_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Details_73b::CopyFrom(const Details_73b& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.Details_73b)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Details_73b::IsInitialized() const {
  return true;
}

void Details_73b::InternalSwap(Details_73b* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Details_73b, reserved_9_)
      + sizeof(Details_73b::reserved_9_)
      - PROTOBUF_FIELD_OFFSET(Details_73b, obstacle_angle_rate_)>(
          reinterpret_cast<char*>(&obstacle_angle_rate_),
          reinterpret_cast<char*>(&other->obstacle_angle_rate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Details_73b::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fdrivers_2fproto_2fmobileye_2eproto_getter, &descriptor_table_modules_2fdrivers_2fproto_2fmobileye_2eproto_once,
      file_level_metadata_modules_2fdrivers_2fproto_2fmobileye_2eproto[13]);
}

// ===================================================================

class Mobileye::_Internal {
 public:
  using HasBits = decltype(std::declval<Mobileye>()._has_bits_);
  static const ::apollo::common::Header& header(const Mobileye* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::drivers::Aftermarket_669& aftermarket_669(const Mobileye* msg);
  static void set_has_aftermarket_669(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::drivers::Details_737& details_737(const Mobileye* msg);
  static void set_has_details_737(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::drivers::Details_738& details_738(const Mobileye* msg);
  static void set_has_details_738(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::apollo::drivers::Lka_766& lka_766(const Mobileye* msg);
  static void set_has_lka_766(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::apollo::drivers::Lka_767& lka_767(const Mobileye* msg);
  static void set_has_lka_767(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::apollo::drivers::Lka_768& lka_768(const Mobileye* msg);
  static void set_has_lka_768(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::apollo::drivers::Lka_769& lka_769(const Mobileye* msg);
  static void set_has_lka_769(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::apollo::drivers::Reference_76a& reference_76a(const Mobileye* msg);
  static void set_has_reference_76a(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::apollo::drivers::Num_76b& num_76b(const Mobileye* msg);
  static void set_has_num_76b(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

const ::apollo::common::Header&
Mobileye::_Internal::header(const Mobileye* msg) {
  return *msg->header_;
}
const ::apollo::drivers::Aftermarket_669&
Mobileye::_Internal::aftermarket_669(const Mobileye* msg) {
  return *msg->aftermarket_669_;
}
const ::apollo::drivers::Details_737&
Mobileye::_Internal::details_737(const Mobileye* msg) {
  return *msg->details_737_;
}
const ::apollo::drivers::Details_738&
Mobileye::_Internal::details_738(const Mobileye* msg) {
  return *msg->details_738_;
}
const ::apollo::drivers::Lka_766&
Mobileye::_Internal::lka_766(const Mobileye* msg) {
  return *msg->lka_766_;
}
const ::apollo::drivers::Lka_767&
Mobileye::_Internal::lka_767(const Mobileye* msg) {
  return *msg->lka_767_;
}
const ::apollo::drivers::Lka_768&
Mobileye::_Internal::lka_768(const Mobileye* msg) {
  return *msg->lka_768_;
}
const ::apollo::drivers::Lka_769&
Mobileye::_Internal::lka_769(const Mobileye* msg) {
  return *msg->lka_769_;
}
const ::apollo::drivers::Reference_76a&
Mobileye::_Internal::reference_76a(const Mobileye* msg) {
  return *msg->reference_76a_;
}
const ::apollo::drivers::Num_76b&
Mobileye::_Internal::num_76b(const Mobileye* msg) {
  return *msg->num_76b_;
}
void Mobileye::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
Mobileye::Mobileye(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  details_739_(arena),
  details_73a_(arena),
  details_73b_(arena),
  next_76c_(arena),
  next_76d_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.drivers.Mobileye)
}
Mobileye::Mobileye(const Mobileye& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      details_739_(from.details_739_),
      details_73a_(from.details_73a_),
      details_73b_(from.details_73b_),
      next_76c_(from.next_76c_),
      next_76d_(from.next_76d_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::apollo::common::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_aftermarket_669()) {
    aftermarket_669_ = new ::apollo::drivers::Aftermarket_669(*from.aftermarket_669_);
  } else {
    aftermarket_669_ = nullptr;
  }
  if (from._internal_has_details_737()) {
    details_737_ = new ::apollo::drivers::Details_737(*from.details_737_);
  } else {
    details_737_ = nullptr;
  }
  if (from._internal_has_details_738()) {
    details_738_ = new ::apollo::drivers::Details_738(*from.details_738_);
  } else {
    details_738_ = nullptr;
  }
  if (from._internal_has_lka_766()) {
    lka_766_ = new ::apollo::drivers::Lka_766(*from.lka_766_);
  } else {
    lka_766_ = nullptr;
  }
  if (from._internal_has_lka_767()) {
    lka_767_ = new ::apollo::drivers::Lka_767(*from.lka_767_);
  } else {
    lka_767_ = nullptr;
  }
  if (from._internal_has_lka_768()) {
    lka_768_ = new ::apollo::drivers::Lka_768(*from.lka_768_);
  } else {
    lka_768_ = nullptr;
  }
  if (from._internal_has_lka_769()) {
    lka_769_ = new ::apollo::drivers::Lka_769(*from.lka_769_);
  } else {
    lka_769_ = nullptr;
  }
  if (from._internal_has_reference_76a()) {
    reference_76a_ = new ::apollo::drivers::Reference_76a(*from.reference_76a_);
  } else {
    reference_76a_ = nullptr;
  }
  if (from._internal_has_num_76b()) {
    num_76b_ = new ::apollo::drivers::Num_76b(*from.num_76b_);
  } else {
    num_76b_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.Mobileye)
}

void Mobileye::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&num_76b_) -
    reinterpret_cast<char*>(&header_)) + sizeof(num_76b_));
}

Mobileye::~Mobileye() {
  // @@protoc_insertion_point(destructor:apollo.drivers.Mobileye)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Mobileye::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete aftermarket_669_;
  if (this != internal_default_instance()) delete details_737_;
  if (this != internal_default_instance()) delete details_738_;
  if (this != internal_default_instance()) delete lka_766_;
  if (this != internal_default_instance()) delete lka_767_;
  if (this != internal_default_instance()) delete lka_768_;
  if (this != internal_default_instance()) delete lka_769_;
  if (this != internal_default_instance()) delete reference_76a_;
  if (this != internal_default_instance()) delete num_76b_;
}

void Mobileye::ArenaDtor(void* object) {
  Mobileye* _this = reinterpret_cast< Mobileye* >(object);
  (void)_this;
}
void Mobileye::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Mobileye::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Mobileye::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.Mobileye)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  details_739_.Clear();
  details_73a_.Clear();
  details_73b_.Clear();
  next_76c_.Clear();
  next_76d_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(header_ != nullptr);
      header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(aftermarket_669_ != nullptr);
      aftermarket_669_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(details_737_ != nullptr);
      details_737_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(details_738_ != nullptr);
      details_738_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(lka_766_ != nullptr);
      lka_766_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(lka_767_ != nullptr);
      lka_767_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(lka_768_ != nullptr);
      lka_768_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(lka_769_ != nullptr);
      lka_769_->Clear();
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(reference_76a_ != nullptr);
      reference_76a_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(num_76b_ != nullptr);
      num_76b_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Mobileye::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.drivers.Aftermarket_669 aftermarket_669 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_aftermarket_669(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.drivers.Details_737 details_737 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_details_737(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.drivers.Details_738 details_738 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_details_738(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.drivers.Details_739 details_739 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_details_739(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.drivers.Details_73a details_73a = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_details_73a(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.drivers.Details_73b details_73b = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_details_73b(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.drivers.Lka_766 lka_766 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_lka_766(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.drivers.Lka_767 lka_767 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_lka_767(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.drivers.Lka_768 lka_768 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_lka_768(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.drivers.Lka_769 lka_769 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_lka_769(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.drivers.Reference_76a reference_76a = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_reference_76a(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.drivers.Num_76b num_76b = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_num_76b(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.drivers.Next_76c next_76c = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_next_76c(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.drivers.Next_76d next_76d = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_next_76d(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Mobileye::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.Mobileye)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // optional .apollo.drivers.Aftermarket_669 aftermarket_669 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::aftermarket_669(this), target, stream);
  }

  // optional .apollo.drivers.Details_737 details_737 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::details_737(this), target, stream);
  }

  // optional .apollo.drivers.Details_738 details_738 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::details_738(this), target, stream);
  }

  // repeated .apollo.drivers.Details_739 details_739 = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_details_739_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_details_739(i), target, stream);
  }

  // repeated .apollo.drivers.Details_73a details_73a = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_details_73a_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_details_73a(i), target, stream);
  }

  // repeated .apollo.drivers.Details_73b details_73b = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_details_73b_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_details_73b(i), target, stream);
  }

  // optional .apollo.drivers.Lka_766 lka_766 = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::lka_766(this), target, stream);
  }

  // optional .apollo.drivers.Lka_767 lka_767 = 9;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::lka_767(this), target, stream);
  }

  // optional .apollo.drivers.Lka_768 lka_768 = 10;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::lka_768(this), target, stream);
  }

  // optional .apollo.drivers.Lka_769 lka_769 = 11;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::lka_769(this), target, stream);
  }

  // optional .apollo.drivers.Reference_76a reference_76a = 12;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::reference_76a(this), target, stream);
  }

  // optional .apollo.drivers.Num_76b num_76b = 13;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::num_76b(this), target, stream);
  }

  // repeated .apollo.drivers.Next_76c next_76c = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_next_76c_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, this->_internal_next_76c(i), target, stream);
  }

  // repeated .apollo.drivers.Next_76d next_76d = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_next_76d_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, this->_internal_next_76d(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.Mobileye)
  return target;
}

size_t Mobileye::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.Mobileye)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.drivers.Details_739 details_739 = 5;
  total_size += 1UL * this->_internal_details_739_size();
  for (const auto& msg : this->details_739_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.drivers.Details_73a details_73a = 6;
  total_size += 1UL * this->_internal_details_73a_size();
  for (const auto& msg : this->details_73a_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.drivers.Details_73b details_73b = 7;
  total_size += 1UL * this->_internal_details_73b_size();
  for (const auto& msg : this->details_73b_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.drivers.Next_76c next_76c = 14;
  total_size += 1UL * this->_internal_next_76c_size();
  for (const auto& msg : this->next_76c_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.drivers.Next_76d next_76d = 15;
  total_size += 1UL * this->_internal_next_76d_size();
  for (const auto& msg : this->next_76d_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.common.Header header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional .apollo.drivers.Aftermarket_669 aftermarket_669 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *aftermarket_669_);
    }

    // optional .apollo.drivers.Details_737 details_737 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *details_737_);
    }

    // optional .apollo.drivers.Details_738 details_738 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *details_738_);
    }

    // optional .apollo.drivers.Lka_766 lka_766 = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *lka_766_);
    }

    // optional .apollo.drivers.Lka_767 lka_767 = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *lka_767_);
    }

    // optional .apollo.drivers.Lka_768 lka_768 = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *lka_768_);
    }

    // optional .apollo.drivers.Lka_769 lka_769 = 11;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *lka_769_);
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional .apollo.drivers.Reference_76a reference_76a = 12;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *reference_76a_);
    }

    // optional .apollo.drivers.Num_76b num_76b = 13;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *num_76b_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Mobileye::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Mobileye::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Mobileye::GetClassData() const { return &_class_data_; }

void Mobileye::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Mobileye *>(to)->MergeFrom(
      static_cast<const Mobileye &>(from));
}


void Mobileye::MergeFrom(const Mobileye& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.Mobileye)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  details_739_.MergeFrom(from.details_739_);
  details_73a_.MergeFrom(from.details_73a_);
  details_73b_.MergeFrom(from.details_73b_);
  next_76c_.MergeFrom(from.next_76c_);
  next_76d_.MergeFrom(from.next_76d_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::apollo::common::Header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_aftermarket_669()->::apollo::drivers::Aftermarket_669::MergeFrom(from._internal_aftermarket_669());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_details_737()->::apollo::drivers::Details_737::MergeFrom(from._internal_details_737());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_details_738()->::apollo::drivers::Details_738::MergeFrom(from._internal_details_738());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_lka_766()->::apollo::drivers::Lka_766::MergeFrom(from._internal_lka_766());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_lka_767()->::apollo::drivers::Lka_767::MergeFrom(from._internal_lka_767());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_lka_768()->::apollo::drivers::Lka_768::MergeFrom(from._internal_lka_768());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_lka_769()->::apollo::drivers::Lka_769::MergeFrom(from._internal_lka_769());
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_reference_76a()->::apollo::drivers::Reference_76a::MergeFrom(from._internal_reference_76a());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_num_76b()->::apollo::drivers::Num_76b::MergeFrom(from._internal_num_76b());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Mobileye::CopyFrom(const Mobileye& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.Mobileye)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mobileye::IsInitialized() const {
  return true;
}

void Mobileye::InternalSwap(Mobileye* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  details_739_.InternalSwap(&other->details_739_);
  details_73a_.InternalSwap(&other->details_73a_);
  details_73b_.InternalSwap(&other->details_73b_);
  next_76c_.InternalSwap(&other->next_76c_);
  next_76d_.InternalSwap(&other->next_76d_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Mobileye, num_76b_)
      + sizeof(Mobileye::num_76b_)
      - PROTOBUF_FIELD_OFFSET(Mobileye, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Mobileye::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fdrivers_2fproto_2fmobileye_2eproto_getter, &descriptor_table_modules_2fdrivers_2fproto_2fmobileye_2eproto_once,
      file_level_metadata_modules_2fdrivers_2fproto_2fmobileye_2eproto[14]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace drivers
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::drivers::Lka_768* Arena::CreateMaybeMessage< ::apollo::drivers::Lka_768 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::drivers::Lka_768 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::drivers::Num_76b* Arena::CreateMaybeMessage< ::apollo::drivers::Num_76b >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::drivers::Num_76b >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::drivers::Aftermarket_669* Arena::CreateMaybeMessage< ::apollo::drivers::Aftermarket_669 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::drivers::Aftermarket_669 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::drivers::Lka_769* Arena::CreateMaybeMessage< ::apollo::drivers::Lka_769 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::drivers::Lka_769 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::drivers::Reference_76a* Arena::CreateMaybeMessage< ::apollo::drivers::Reference_76a >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::drivers::Reference_76a >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::drivers::Details_738* Arena::CreateMaybeMessage< ::apollo::drivers::Details_738 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::drivers::Details_738 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::drivers::Next_76c* Arena::CreateMaybeMessage< ::apollo::drivers::Next_76c >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::drivers::Next_76c >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::drivers::Details_737* Arena::CreateMaybeMessage< ::apollo::drivers::Details_737 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::drivers::Details_737 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::drivers::Lka_767* Arena::CreateMaybeMessage< ::apollo::drivers::Lka_767 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::drivers::Lka_767 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::drivers::Lka_766* Arena::CreateMaybeMessage< ::apollo::drivers::Lka_766 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::drivers::Lka_766 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::drivers::Next_76d* Arena::CreateMaybeMessage< ::apollo::drivers::Next_76d >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::drivers::Next_76d >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::drivers::Details_739* Arena::CreateMaybeMessage< ::apollo::drivers::Details_739 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::drivers::Details_739 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::drivers::Details_73a* Arena::CreateMaybeMessage< ::apollo::drivers::Details_73a >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::drivers::Details_73a >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::drivers::Details_73b* Arena::CreateMaybeMessage< ::apollo::drivers::Details_73b >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::drivers::Details_73b >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::drivers::Mobileye* Arena::CreateMaybeMessage< ::apollo::drivers::Mobileye >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::drivers::Mobileye >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
