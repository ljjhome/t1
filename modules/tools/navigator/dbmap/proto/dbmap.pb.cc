// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/tools/navigator/dbmap/proto/dbmap.proto

#include "modules/tools/navigator/dbmap/proto/dbmap.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace apollo {
namespace dbmap {
constexpr DBPoint::DBPoint(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0)
  , z_(0)
  , s_(0)
  , heading_(0){}
struct DBPointDefaultTypeInternal {
  constexpr DBPointDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DBPointDefaultTypeInternal() {}
  union {
    DBPoint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DBPointDefaultTypeInternal _DBPoint_default_instance_;
constexpr DBLine::DBLine(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : point_(){}
struct DBLineDefaultTypeInternal {
  constexpr DBLineDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DBLineDefaultTypeInternal() {}
  union {
    DBLine _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DBLineDefaultTypeInternal _DBLine_default_instance_;
constexpr DBNeighbourSegment::DBNeighbourSegment(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : path_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , start_s_(0)
  , end_s_(0)
  , path_start_s_(0)
  , path_end_s_(0){}
struct DBNeighbourSegmentDefaultTypeInternal {
  constexpr DBNeighbourSegmentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DBNeighbourSegmentDefaultTypeInternal() {}
  union {
    DBNeighbourSegment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DBNeighbourSegmentDefaultTypeInternal _DBNeighbourSegment_default_instance_;
constexpr DBNeighbourPath::DBNeighbourPath(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : segment_(){}
struct DBNeighbourPathDefaultTypeInternal {
  constexpr DBNeighbourPathDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DBNeighbourPathDefaultTypeInternal() {}
  union {
    DBNeighbourPath _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DBNeighbourPathDefaultTypeInternal _DBNeighbourPath_default_instance_;
constexpr DBPath::DBPath(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : path_()
  , left_bounday_()
  , right_bounday_()
  , left_path_()
  , right_path_()
  , duplicate_path_()
  , id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DBPathDefaultTypeInternal {
  constexpr DBPathDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DBPathDefaultTypeInternal() {}
  union {
    DBPath _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DBPathDefaultTypeInternal _DBPath_default_instance_;
constexpr DBMap::DBMap(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : paths_(){}
struct DBMapDefaultTypeInternal {
  constexpr DBMapDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DBMapDefaultTypeInternal() {}
  union {
    DBMap _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DBMapDefaultTypeInternal _DBMap_default_instance_;
}  // namespace dbmap
}  // namespace apollo
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::dbmap::DBPoint, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dbmap::DBPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::dbmap::DBPoint, x_),
  PROTOBUF_FIELD_OFFSET(::apollo::dbmap::DBPoint, y_),
  PROTOBUF_FIELD_OFFSET(::apollo::dbmap::DBPoint, z_),
  PROTOBUF_FIELD_OFFSET(::apollo::dbmap::DBPoint, s_),
  PROTOBUF_FIELD_OFFSET(::apollo::dbmap::DBPoint, heading_),
  0,
  1,
  2,
  3,
  4,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::dbmap::DBLine, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::dbmap::DBLine, point_),
  PROTOBUF_FIELD_OFFSET(::apollo::dbmap::DBNeighbourSegment, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dbmap::DBNeighbourSegment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::dbmap::DBNeighbourSegment, start_s_),
  PROTOBUF_FIELD_OFFSET(::apollo::dbmap::DBNeighbourSegment, end_s_),
  PROTOBUF_FIELD_OFFSET(::apollo::dbmap::DBNeighbourSegment, path_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::dbmap::DBNeighbourSegment, path_start_s_),
  PROTOBUF_FIELD_OFFSET(::apollo::dbmap::DBNeighbourSegment, path_end_s_),
  1,
  2,
  0,
  3,
  4,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::dbmap::DBNeighbourPath, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::dbmap::DBNeighbourPath, segment_),
  PROTOBUF_FIELD_OFFSET(::apollo::dbmap::DBPath, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dbmap::DBPath, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::dbmap::DBPath, id_),
  PROTOBUF_FIELD_OFFSET(::apollo::dbmap::DBPath, path_),
  PROTOBUF_FIELD_OFFSET(::apollo::dbmap::DBPath, left_bounday_),
  PROTOBUF_FIELD_OFFSET(::apollo::dbmap::DBPath, right_bounday_),
  PROTOBUF_FIELD_OFFSET(::apollo::dbmap::DBPath, left_path_),
  PROTOBUF_FIELD_OFFSET(::apollo::dbmap::DBPath, right_path_),
  PROTOBUF_FIELD_OFFSET(::apollo::dbmap::DBPath, duplicate_path_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::dbmap::DBMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::dbmap::DBMap, paths_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, -1, sizeof(::apollo::dbmap::DBPoint)},
  { 16, -1, -1, sizeof(::apollo::dbmap::DBLine)},
  { 23, 34, -1, sizeof(::apollo::dbmap::DBNeighbourSegment)},
  { 39, -1, -1, sizeof(::apollo::dbmap::DBNeighbourPath)},
  { 46, 59, -1, sizeof(::apollo::dbmap::DBPath)},
  { 66, -1, -1, sizeof(::apollo::dbmap::DBMap)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::dbmap::_DBPoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::dbmap::_DBLine_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::dbmap::_DBNeighbourSegment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::dbmap::_DBNeighbourPath_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::dbmap::_DBPath_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::dbmap::_DBMap_default_instance_),
};

const char descriptor_table_protodef_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n/modules/tools/navigator/dbmap/proto/db"
  "map.proto\022\014apollo.dbmap\"F\n\007DBPoint\022\t\n\001x\030"
  "\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001\022\t\n\001s\030\004 \001(\001\022\017"
  "\n\007heading\030\005 \001(\001\".\n\006DBLine\022$\n\005point\030\001 \003(\013"
  "2\025.apollo.dbmap.DBPoint\"o\n\022DBNeighbourSe"
  "gment\022\017\n\007start_s\030\001 \001(\001\022\r\n\005end_s\030\002 \001(\001\022\017\n"
  "\007path_id\030\003 \001(\t\022\024\n\014path_start_s\030\004 \001(\001\022\022\n\n"
  "path_end_s\030\005 \001(\001\"D\n\017DBNeighbourPath\0221\n\007s"
  "egment\030\001 \003(\0132 .apollo.dbmap.DBNeighbourS"
  "egment\"\255\002\n\006DBPath\022\n\n\002id\030\001 \001(\t\022\"\n\004path\030\002 "
  "\003(\0132\024.apollo.dbmap.DBLine\022*\n\014left_bounda"
  "y\030\003 \003(\0132\024.apollo.dbmap.DBLine\022+\n\rright_b"
  "ounday\030\004 \003(\0132\024.apollo.dbmap.DBLine\0220\n\tle"
  "ft_path\030\005 \003(\0132\035.apollo.dbmap.DBNeighbour"
  "Path\0221\n\nright_path\030\006 \003(\0132\035.apollo.dbmap."
  "DBNeighbourPath\0225\n\016duplicate_path\030\007 \003(\0132"
  "\035.apollo.dbmap.DBNeighbourPath\",\n\005DBMap\022"
  "#\n\005paths\030\001 \003(\0132\024.apollo.dbmap.DBPath"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto = {
  false, false, 716, descriptor_table_protodef_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto, "modules/tools/navigator/dbmap/proto/dbmap.proto", 
  &descriptor_table_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto_once, nullptr, 0, 6,
  schemas, file_default_instances, TableStruct_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto::offsets,
  file_level_metadata_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto, file_level_enum_descriptors_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto, file_level_service_descriptors_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto_getter() {
  return &descriptor_table_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto(&descriptor_table_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto);
namespace apollo {
namespace dbmap {

// ===================================================================

class DBPoint::_Internal {
 public:
  using HasBits = decltype(std::declval<DBPoint>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_s(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_heading(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

DBPoint::DBPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.dbmap.DBPoint)
}
DBPoint::DBPoint(const DBPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&heading_) -
    reinterpret_cast<char*>(&x_)) + sizeof(heading_));
  // @@protoc_insertion_point(copy_constructor:apollo.dbmap.DBPoint)
}

void DBPoint::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&heading_) -
    reinterpret_cast<char*>(&x_)) + sizeof(heading_));
}

DBPoint::~DBPoint() {
  // @@protoc_insertion_point(destructor:apollo.dbmap.DBPoint)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DBPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DBPoint::ArenaDtor(void* object) {
  DBPoint* _this = reinterpret_cast< DBPoint* >(object);
  (void)_this;
}
void DBPoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DBPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DBPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dbmap.DBPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&heading_) -
        reinterpret_cast<char*>(&x_)) + sizeof(heading_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DBPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_z(&has_bits);
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double s = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_s(&has_bits);
          s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double heading = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_heading(&has_bits);
          heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DBPoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dbmap.DBPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // optional double y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  // optional double z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_z(), target);
  }

  // optional double s = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_s(), target);
  }

  // optional double heading = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_heading(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dbmap.DBPoint)
  return target;
}

size_t DBPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dbmap.DBPoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional double x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double z = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double s = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double heading = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DBPoint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DBPoint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DBPoint::GetClassData() const { return &_class_data_; }

void DBPoint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DBPoint *>(to)->MergeFrom(
      static_cast<const DBPoint &>(from));
}


void DBPoint::MergeFrom(const DBPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dbmap.DBPoint)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      z_ = from.z_;
    }
    if (cached_has_bits & 0x00000008u) {
      s_ = from.s_;
    }
    if (cached_has_bits & 0x00000010u) {
      heading_ = from.heading_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DBPoint::CopyFrom(const DBPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dbmap.DBPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBPoint::IsInitialized() const {
  return true;
}

void DBPoint::InternalSwap(DBPoint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DBPoint, heading_)
      + sizeof(DBPoint::heading_)
      - PROTOBUF_FIELD_OFFSET(DBPoint, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DBPoint::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto_getter, &descriptor_table_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto_once,
      file_level_metadata_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto[0]);
}

// ===================================================================

class DBLine::_Internal {
 public:
};

DBLine::DBLine(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  point_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.dbmap.DBLine)
}
DBLine::DBLine(const DBLine& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      point_(from.point_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.dbmap.DBLine)
}

void DBLine::SharedCtor() {
}

DBLine::~DBLine() {
  // @@protoc_insertion_point(destructor:apollo.dbmap.DBLine)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DBLine::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DBLine::ArenaDtor(void* object) {
  DBLine* _this = reinterpret_cast< DBLine* >(object);
  (void)_this;
}
void DBLine::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DBLine::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DBLine::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dbmap.DBLine)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  point_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DBLine::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .apollo.dbmap.DBPoint point = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_point(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DBLine::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dbmap.DBLine)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.dbmap.DBPoint point = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_point_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_point(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dbmap.DBLine)
  return target;
}

size_t DBLine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dbmap.DBLine)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.dbmap.DBPoint point = 1;
  total_size += 1UL * this->_internal_point_size();
  for (const auto& msg : this->point_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DBLine::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DBLine::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DBLine::GetClassData() const { return &_class_data_; }

void DBLine::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DBLine *>(to)->MergeFrom(
      static_cast<const DBLine &>(from));
}


void DBLine::MergeFrom(const DBLine& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dbmap.DBLine)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  point_.MergeFrom(from.point_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DBLine::CopyFrom(const DBLine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dbmap.DBLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBLine::IsInitialized() const {
  return true;
}

void DBLine::InternalSwap(DBLine* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  point_.InternalSwap(&other->point_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DBLine::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto_getter, &descriptor_table_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto_once,
      file_level_metadata_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto[1]);
}

// ===================================================================

class DBNeighbourSegment::_Internal {
 public:
  using HasBits = decltype(std::declval<DBNeighbourSegment>()._has_bits_);
  static void set_has_start_s(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_end_s(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_path_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_path_start_s(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_path_end_s(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

DBNeighbourSegment::DBNeighbourSegment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.dbmap.DBNeighbourSegment)
}
DBNeighbourSegment::DBNeighbourSegment(const DBNeighbourSegment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  path_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_path_id()) {
    path_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_path_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&start_s_, &from.start_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&path_end_s_) -
    reinterpret_cast<char*>(&start_s_)) + sizeof(path_end_s_));
  // @@protoc_insertion_point(copy_constructor:apollo.dbmap.DBNeighbourSegment)
}

void DBNeighbourSegment::SharedCtor() {
path_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&start_s_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&path_end_s_) -
    reinterpret_cast<char*>(&start_s_)) + sizeof(path_end_s_));
}

DBNeighbourSegment::~DBNeighbourSegment() {
  // @@protoc_insertion_point(destructor:apollo.dbmap.DBNeighbourSegment)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DBNeighbourSegment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  path_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DBNeighbourSegment::ArenaDtor(void* object) {
  DBNeighbourSegment* _this = reinterpret_cast< DBNeighbourSegment* >(object);
  (void)_this;
}
void DBNeighbourSegment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DBNeighbourSegment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DBNeighbourSegment::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dbmap.DBNeighbourSegment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    path_id_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&start_s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&path_end_s_) -
        reinterpret_cast<char*>(&start_s_)) + sizeof(path_end_s_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DBNeighbourSegment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double start_s = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_start_s(&has_bits);
          start_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double end_s = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_end_s(&has_bits);
          end_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional string path_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_path_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.dbmap.DBNeighbourSegment.path_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double path_start_s = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_path_start_s(&has_bits);
          path_start_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double path_end_s = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_path_end_s(&has_bits);
          path_end_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DBNeighbourSegment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dbmap.DBNeighbourSegment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double start_s = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_start_s(), target);
  }

  // optional double end_s = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_end_s(), target);
  }

  // optional string path_id = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_path_id().data(), static_cast<int>(this->_internal_path_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dbmap.DBNeighbourSegment.path_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_path_id(), target);
  }

  // optional double path_start_s = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_path_start_s(), target);
  }

  // optional double path_end_s = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_path_end_s(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dbmap.DBNeighbourSegment)
  return target;
}

size_t DBNeighbourSegment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dbmap.DBNeighbourSegment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string path_id = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_path_id());
    }

    // optional double start_s = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double end_s = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double path_start_s = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double path_end_s = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DBNeighbourSegment::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DBNeighbourSegment::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DBNeighbourSegment::GetClassData() const { return &_class_data_; }

void DBNeighbourSegment::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DBNeighbourSegment *>(to)->MergeFrom(
      static_cast<const DBNeighbourSegment &>(from));
}


void DBNeighbourSegment::MergeFrom(const DBNeighbourSegment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dbmap.DBNeighbourSegment)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_path_id(from._internal_path_id());
    }
    if (cached_has_bits & 0x00000002u) {
      start_s_ = from.start_s_;
    }
    if (cached_has_bits & 0x00000004u) {
      end_s_ = from.end_s_;
    }
    if (cached_has_bits & 0x00000008u) {
      path_start_s_ = from.path_start_s_;
    }
    if (cached_has_bits & 0x00000010u) {
      path_end_s_ = from.path_end_s_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DBNeighbourSegment::CopyFrom(const DBNeighbourSegment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dbmap.DBNeighbourSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBNeighbourSegment::IsInitialized() const {
  return true;
}

void DBNeighbourSegment::InternalSwap(DBNeighbourSegment* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &path_id_, lhs_arena,
      &other->path_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DBNeighbourSegment, path_end_s_)
      + sizeof(DBNeighbourSegment::path_end_s_)
      - PROTOBUF_FIELD_OFFSET(DBNeighbourSegment, start_s_)>(
          reinterpret_cast<char*>(&start_s_),
          reinterpret_cast<char*>(&other->start_s_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DBNeighbourSegment::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto_getter, &descriptor_table_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto_once,
      file_level_metadata_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto[2]);
}

// ===================================================================

class DBNeighbourPath::_Internal {
 public:
};

DBNeighbourPath::DBNeighbourPath(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  segment_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.dbmap.DBNeighbourPath)
}
DBNeighbourPath::DBNeighbourPath(const DBNeighbourPath& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      segment_(from.segment_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.dbmap.DBNeighbourPath)
}

void DBNeighbourPath::SharedCtor() {
}

DBNeighbourPath::~DBNeighbourPath() {
  // @@protoc_insertion_point(destructor:apollo.dbmap.DBNeighbourPath)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DBNeighbourPath::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DBNeighbourPath::ArenaDtor(void* object) {
  DBNeighbourPath* _this = reinterpret_cast< DBNeighbourPath* >(object);
  (void)_this;
}
void DBNeighbourPath::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DBNeighbourPath::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DBNeighbourPath::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dbmap.DBNeighbourPath)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  segment_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DBNeighbourPath::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .apollo.dbmap.DBNeighbourSegment segment = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_segment(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DBNeighbourPath::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dbmap.DBNeighbourPath)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.dbmap.DBNeighbourSegment segment = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_segment_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_segment(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dbmap.DBNeighbourPath)
  return target;
}

size_t DBNeighbourPath::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dbmap.DBNeighbourPath)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.dbmap.DBNeighbourSegment segment = 1;
  total_size += 1UL * this->_internal_segment_size();
  for (const auto& msg : this->segment_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DBNeighbourPath::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DBNeighbourPath::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DBNeighbourPath::GetClassData() const { return &_class_data_; }

void DBNeighbourPath::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DBNeighbourPath *>(to)->MergeFrom(
      static_cast<const DBNeighbourPath &>(from));
}


void DBNeighbourPath::MergeFrom(const DBNeighbourPath& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dbmap.DBNeighbourPath)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  segment_.MergeFrom(from.segment_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DBNeighbourPath::CopyFrom(const DBNeighbourPath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dbmap.DBNeighbourPath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBNeighbourPath::IsInitialized() const {
  return true;
}

void DBNeighbourPath::InternalSwap(DBNeighbourPath* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  segment_.InternalSwap(&other->segment_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DBNeighbourPath::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto_getter, &descriptor_table_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto_once,
      file_level_metadata_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto[3]);
}

// ===================================================================

class DBPath::_Internal {
 public:
  using HasBits = decltype(std::declval<DBPath>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DBPath::DBPath(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  path_(arena),
  left_bounday_(arena),
  right_bounday_(arena),
  left_path_(arena),
  right_path_(arena),
  duplicate_path_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.dbmap.DBPath)
}
DBPath::DBPath(const DBPath& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      path_(from.path_),
      left_bounday_(from.left_bounday_),
      right_bounday_(from.right_bounday_),
      left_path_(from.left_path_),
      right_path_(from.right_path_),
      duplicate_path_(from.duplicate_path_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_id()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:apollo.dbmap.DBPath)
}

void DBPath::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DBPath::~DBPath() {
  // @@protoc_insertion_point(destructor:apollo.dbmap.DBPath)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DBPath::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DBPath::ArenaDtor(void* object) {
  DBPath* _this = reinterpret_cast< DBPath* >(object);
  (void)_this;
}
void DBPath::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DBPath::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DBPath::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dbmap.DBPath)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.Clear();
  left_bounday_.Clear();
  right_bounday_.Clear();
  left_path_.Clear();
  right_path_.Clear();
  duplicate_path_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    id_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DBPath::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.dbmap.DBPath.id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.dbmap.DBLine path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_path(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.dbmap.DBLine left_bounday = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_left_bounday(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.dbmap.DBLine right_bounday = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_right_bounday(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.dbmap.DBNeighbourPath left_path = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_left_path(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.dbmap.DBNeighbourPath right_path = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_right_path(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.dbmap.DBNeighbourPath duplicate_path = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_duplicate_path(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DBPath::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dbmap.DBPath)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dbmap.DBPath.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // repeated .apollo.dbmap.DBLine path = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_path_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_path(i), target, stream);
  }

  // repeated .apollo.dbmap.DBLine left_bounday = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_left_bounday_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_left_bounday(i), target, stream);
  }

  // repeated .apollo.dbmap.DBLine right_bounday = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_right_bounday_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_right_bounday(i), target, stream);
  }

  // repeated .apollo.dbmap.DBNeighbourPath left_path = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_left_path_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_left_path(i), target, stream);
  }

  // repeated .apollo.dbmap.DBNeighbourPath right_path = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_right_path_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_right_path(i), target, stream);
  }

  // repeated .apollo.dbmap.DBNeighbourPath duplicate_path = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_duplicate_path_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_duplicate_path(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dbmap.DBPath)
  return target;
}

size_t DBPath::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dbmap.DBPath)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.dbmap.DBLine path = 2;
  total_size += 1UL * this->_internal_path_size();
  for (const auto& msg : this->path_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.dbmap.DBLine left_bounday = 3;
  total_size += 1UL * this->_internal_left_bounday_size();
  for (const auto& msg : this->left_bounday_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.dbmap.DBLine right_bounday = 4;
  total_size += 1UL * this->_internal_right_bounday_size();
  for (const auto& msg : this->right_bounday_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.dbmap.DBNeighbourPath left_path = 5;
  total_size += 1UL * this->_internal_left_path_size();
  for (const auto& msg : this->left_path_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.dbmap.DBNeighbourPath right_path = 6;
  total_size += 1UL * this->_internal_right_path_size();
  for (const auto& msg : this->right_path_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.dbmap.DBNeighbourPath duplicate_path = 7;
  total_size += 1UL * this->_internal_duplicate_path_size();
  for (const auto& msg : this->duplicate_path_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DBPath::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DBPath::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DBPath::GetClassData() const { return &_class_data_; }

void DBPath::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DBPath *>(to)->MergeFrom(
      static_cast<const DBPath &>(from));
}


void DBPath::MergeFrom(const DBPath& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dbmap.DBPath)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  path_.MergeFrom(from.path_);
  left_bounday_.MergeFrom(from.left_bounday_);
  right_bounday_.MergeFrom(from.right_bounday_);
  left_path_.MergeFrom(from.left_path_);
  right_path_.MergeFrom(from.right_path_);
  duplicate_path_.MergeFrom(from.duplicate_path_);
  if (from._internal_has_id()) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DBPath::CopyFrom(const DBPath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dbmap.DBPath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBPath::IsInitialized() const {
  return true;
}

void DBPath::InternalSwap(DBPath* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  path_.InternalSwap(&other->path_);
  left_bounday_.InternalSwap(&other->left_bounday_);
  right_bounday_.InternalSwap(&other->right_bounday_);
  left_path_.InternalSwap(&other->left_path_);
  right_path_.InternalSwap(&other->right_path_);
  duplicate_path_.InternalSwap(&other->duplicate_path_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DBPath::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto_getter, &descriptor_table_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto_once,
      file_level_metadata_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto[4]);
}

// ===================================================================

class DBMap::_Internal {
 public:
};

DBMap::DBMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  paths_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.dbmap.DBMap)
}
DBMap::DBMap(const DBMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      paths_(from.paths_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.dbmap.DBMap)
}

void DBMap::SharedCtor() {
}

DBMap::~DBMap() {
  // @@protoc_insertion_point(destructor:apollo.dbmap.DBMap)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DBMap::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DBMap::ArenaDtor(void* object) {
  DBMap* _this = reinterpret_cast< DBMap* >(object);
  (void)_this;
}
void DBMap::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DBMap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DBMap::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dbmap.DBMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  paths_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DBMap::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .apollo.dbmap.DBPath paths = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_paths(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DBMap::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dbmap.DBMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.dbmap.DBPath paths = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_paths_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_paths(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dbmap.DBMap)
  return target;
}

size_t DBMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dbmap.DBMap)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.dbmap.DBPath paths = 1;
  total_size += 1UL * this->_internal_paths_size();
  for (const auto& msg : this->paths_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DBMap::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DBMap::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DBMap::GetClassData() const { return &_class_data_; }

void DBMap::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DBMap *>(to)->MergeFrom(
      static_cast<const DBMap &>(from));
}


void DBMap::MergeFrom(const DBMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dbmap.DBMap)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  paths_.MergeFrom(from.paths_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DBMap::CopyFrom(const DBMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dbmap.DBMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBMap::IsInitialized() const {
  return true;
}

void DBMap::InternalSwap(DBMap* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  paths_.InternalSwap(&other->paths_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DBMap::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto_getter, &descriptor_table_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto_once,
      file_level_metadata_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace dbmap
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::dbmap::DBPoint* Arena::CreateMaybeMessage< ::apollo::dbmap::DBPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::dbmap::DBPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dbmap::DBLine* Arena::CreateMaybeMessage< ::apollo::dbmap::DBLine >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::dbmap::DBLine >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dbmap::DBNeighbourSegment* Arena::CreateMaybeMessage< ::apollo::dbmap::DBNeighbourSegment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::dbmap::DBNeighbourSegment >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dbmap::DBNeighbourPath* Arena::CreateMaybeMessage< ::apollo::dbmap::DBNeighbourPath >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::dbmap::DBNeighbourPath >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dbmap::DBPath* Arena::CreateMaybeMessage< ::apollo::dbmap::DBPath >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::dbmap::DBPath >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dbmap::DBMap* Arena::CreateMaybeMessage< ::apollo::dbmap::DBMap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::dbmap::DBMap >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
