// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/tools/sensor_calibration/proto/extractor_config.proto

#include "modules/tools/sensor_calibration/proto/extractor_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr IoConfig::IoConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : task_name_(nullptr)
  , output_path_(nullptr)
  , start_timestamp_(nullptr)
  , end_timestamp_(nullptr)
  , main_sensor_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct IoConfigDefaultTypeInternal {
  constexpr IoConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IoConfigDefaultTypeInternal() {}
  union {
    IoConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IoConfigDefaultTypeInternal _IoConfig_default_instance_;
constexpr ChannelConfig::ChannelConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , extraction_rate_(1u){}
struct ChannelConfigDefaultTypeInternal {
  constexpr ChannelConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChannelConfigDefaultTypeInternal() {}
  union {
    ChannelConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChannelConfigDefaultTypeInternal _ChannelConfig_default_instance_;
constexpr Channels::Channels(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : channel_(){}
struct ChannelsDefaultTypeInternal {
  constexpr ChannelsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChannelsDefaultTypeInternal() {}
  union {
    Channels _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChannelsDefaultTypeInternal _Channels_default_instance_;
constexpr Records::Records(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : record_path_(){}
struct RecordsDefaultTypeInternal {
  constexpr RecordsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RecordsDefaultTypeInternal() {}
  union {
    Records _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RecordsDefaultTypeInternal _Records_default_instance_;
constexpr DataExtractionConfig::DataExtractionConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : io_config_(nullptr)
  , channels_(nullptr)
  , records_(nullptr){}
struct DataExtractionConfigDefaultTypeInternal {
  constexpr DataExtractionConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DataExtractionConfigDefaultTypeInternal() {}
  union {
    DataExtractionConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DataExtractionConfigDefaultTypeInternal _DataExtractionConfig_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::IoConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::IoConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::IoConfig, task_name_),
  PROTOBUF_FIELD_OFFSET(::IoConfig, output_path_),
  PROTOBUF_FIELD_OFFSET(::IoConfig, start_timestamp_),
  PROTOBUF_FIELD_OFFSET(::IoConfig, end_timestamp_),
  PROTOBUF_FIELD_OFFSET(::IoConfig, main_sensor_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::ChannelConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ChannelConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChannelConfig, description_),
  PROTOBUF_FIELD_OFFSET(::ChannelConfig, name_),
  PROTOBUF_FIELD_OFFSET(::ChannelConfig, extraction_rate_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Channels, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Channels, channel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Records, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Records, record_path_),
  PROTOBUF_FIELD_OFFSET(::DataExtractionConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::DataExtractionConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DataExtractionConfig, io_config_),
  PROTOBUF_FIELD_OFFSET(::DataExtractionConfig, channels_),
  PROTOBUF_FIELD_OFFSET(::DataExtractionConfig, records_),
  0,
  1,
  2,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, -1, sizeof(::IoConfig)},
  { 16, 25, -1, sizeof(::ChannelConfig)},
  { 28, -1, -1, sizeof(::Channels)},
  { 35, -1, -1, sizeof(::Records)},
  { 42, 51, -1, sizeof(::DataExtractionConfig)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_IoConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ChannelConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Channels_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Records_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DataExtractionConfig_default_instance_),
};

const char descriptor_table_protodef_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n=modules/tools/sensor_calibration/proto"
  "/extractor_config.proto\"\242\001\n\010IoConfig\022\026\n\t"
  "task_name\030\001 \002(\t:\003tmp\022#\n\013output_path\030\002 \002("
  "\t:\016extracted_data\022\"\n\017start_timestamp\030\003 \001"
  "(\t:\tFLOAT_MIN\022 \n\rend_timestamp\030\004 \001(\t:\tFL"
  "OAT_MAX\022\023\n\013main_sensor\030\005 \001(\t\"P\n\rChannelC"
  "onfig\022\025\n\013description\030\001 \001(\t:\000\022\014\n\004name\030\002 \002"
  "(\t\022\032\n\017extraction_rate\030\003 \002(\r:\0011\"+\n\010Channe"
  "ls\022\037\n\007channel\030\001 \003(\0132\016.ChannelConfig\"\036\n\007R"
  "ecords\022\023\n\013record_path\030\001 \003(\t\"l\n\024DataExtra"
  "ctionConfig\022\034\n\tio_config\030\001 \002(\0132\t.IoConfi"
  "g\022\033\n\010channels\030\002 \002(\0132\t.Channels\022\031\n\007record"
  "s\030\003 \002(\0132\010.Records"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto = {
  false, false, 497, descriptor_table_protodef_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto, "modules/tools/sensor_calibration/proto/extractor_config.proto", 
  &descriptor_table_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto_once, nullptr, 0, 5,
  schemas, file_default_instances, TableStruct_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto::offsets,
  file_level_metadata_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto, file_level_enum_descriptors_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto, file_level_service_descriptors_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto_getter() {
  return &descriptor_table_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto(&descriptor_table_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto);

// ===================================================================

class IoConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<IoConfig>()._has_bits_);
  static void set_has_task_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_output_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_start_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_end_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_main_sensor(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::PROTOBUF_NAMESPACE_ID::internal::LazyString IoConfig::_i_give_permission_to_break_this_code_default_task_name_{{{"tmp", 3}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString IoConfig::_i_give_permission_to_break_this_code_default_output_path_{{{"extracted_data", 14}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString IoConfig::_i_give_permission_to_break_this_code_default_start_timestamp_{{{"FLOAT_MIN", 9}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString IoConfig::_i_give_permission_to_break_this_code_default_end_timestamp_{{{"FLOAT_MAX", 9}}, {nullptr}};
IoConfig::IoConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:IoConfig)
}
IoConfig::IoConfig(const IoConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  task_name_.UnsafeSetDefault(nullptr);
  if (from._internal_has_task_name()) {
    task_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_task_name(), 
      GetArenaForAllocation());
  }
  output_path_.UnsafeSetDefault(nullptr);
  if (from._internal_has_output_path()) {
    output_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_output_path(), 
      GetArenaForAllocation());
  }
  start_timestamp_.UnsafeSetDefault(nullptr);
  if (from._internal_has_start_timestamp()) {
    start_timestamp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_start_timestamp(), 
      GetArenaForAllocation());
  }
  end_timestamp_.UnsafeSetDefault(nullptr);
  if (from._internal_has_end_timestamp()) {
    end_timestamp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_end_timestamp(), 
      GetArenaForAllocation());
  }
  main_sensor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_main_sensor()) {
    main_sensor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_main_sensor(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:IoConfig)
}

void IoConfig::SharedCtor() {
task_name_.UnsafeSetDefault(nullptr);
output_path_.UnsafeSetDefault(nullptr);
start_timestamp_.UnsafeSetDefault(nullptr);
end_timestamp_.UnsafeSetDefault(nullptr);
main_sensor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

IoConfig::~IoConfig() {
  // @@protoc_insertion_point(destructor:IoConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void IoConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  task_name_.DestroyNoArena(nullptr);
  output_path_.DestroyNoArena(nullptr);
  start_timestamp_.DestroyNoArena(nullptr);
  end_timestamp_.DestroyNoArena(nullptr);
  main_sensor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IoConfig::ArenaDtor(void* object) {
  IoConfig* _this = reinterpret_cast< IoConfig* >(object);
  (void)_this;
}
void IoConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IoConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IoConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:IoConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      task_name_.ClearToDefault(::IoConfig::_i_give_permission_to_break_this_code_default_task_name_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000002u) {
      output_path_.ClearToDefault(::IoConfig::_i_give_permission_to_break_this_code_default_output_path_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000004u) {
      start_timestamp_.ClearToDefault(::IoConfig::_i_give_permission_to_break_this_code_default_start_timestamp_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000008u) {
      end_timestamp_.ClearToDefault(::IoConfig::_i_give_permission_to_break_this_code_default_end_timestamp_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000010u) {
      main_sensor_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IoConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string task_name = 1 [default = "tmp"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_task_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "IoConfig.task_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string output_path = 2 [default = "extracted_data"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_output_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "IoConfig.output_path");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string start_timestamp = 3 [default = "FLOAT_MIN"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_start_timestamp();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "IoConfig.start_timestamp");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string end_timestamp = 4 [default = "FLOAT_MAX"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_end_timestamp();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "IoConfig.end_timestamp");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string main_sensor = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_main_sensor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "IoConfig.main_sensor");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IoConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IoConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string task_name = 1 [default = "tmp"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_task_name().data(), static_cast<int>(this->_internal_task_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "IoConfig.task_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_task_name(), target);
  }

  // required string output_path = 2 [default = "extracted_data"];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_output_path().data(), static_cast<int>(this->_internal_output_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "IoConfig.output_path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_output_path(), target);
  }

  // optional string start_timestamp = 3 [default = "FLOAT_MIN"];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_start_timestamp().data(), static_cast<int>(this->_internal_start_timestamp().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "IoConfig.start_timestamp");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_start_timestamp(), target);
  }

  // optional string end_timestamp = 4 [default = "FLOAT_MAX"];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_end_timestamp().data(), static_cast<int>(this->_internal_end_timestamp().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "IoConfig.end_timestamp");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_end_timestamp(), target);
  }

  // optional string main_sensor = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_main_sensor().data(), static_cast<int>(this->_internal_main_sensor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "IoConfig.main_sensor");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_main_sensor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IoConfig)
  return target;
}

size_t IoConfig::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:IoConfig)
  size_t total_size = 0;

  if (_internal_has_task_name()) {
    // required string task_name = 1 [default = "tmp"];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_task_name());
  }

  if (_internal_has_output_path()) {
    // required string output_path = 2 [default = "extracted_data"];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_output_path());
  }

  return total_size;
}
size_t IoConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IoConfig)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string task_name = 1 [default = "tmp"];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_task_name());

    // required string output_path = 2 [default = "extracted_data"];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_output_path());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001cu) {
    // optional string start_timestamp = 3 [default = "FLOAT_MIN"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_start_timestamp());
    }

    // optional string end_timestamp = 4 [default = "FLOAT_MAX"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_end_timestamp());
    }

    // optional string main_sensor = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_main_sensor());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IoConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IoConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IoConfig::GetClassData() const { return &_class_data_; }

void IoConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IoConfig *>(to)->MergeFrom(
      static_cast<const IoConfig &>(from));
}


void IoConfig::MergeFrom(const IoConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IoConfig)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_task_name(from._internal_task_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_output_path(from._internal_output_path());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_start_timestamp(from._internal_start_timestamp());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_end_timestamp(from._internal_end_timestamp());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_main_sensor(from._internal_main_sensor());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IoConfig::CopyFrom(const IoConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IoConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IoConfig::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void IoConfig::InternalSwap(IoConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      nullptr,
      &task_name_, lhs_arena,
      &other->task_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      nullptr,
      &output_path_, lhs_arena,
      &other->output_path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      nullptr,
      &start_timestamp_, lhs_arena,
      &other->start_timestamp_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      nullptr,
      &end_timestamp_, lhs_arena,
      &other->end_timestamp_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &main_sensor_, lhs_arena,
      &other->main_sensor_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata IoConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto_getter, &descriptor_table_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto_once,
      file_level_metadata_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto[0]);
}

// ===================================================================

class ChannelConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<ChannelConfig>()._has_bits_);
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_extraction_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000006) ^ 0x00000006) != 0;
  }
};

ChannelConfig::ChannelConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ChannelConfig)
}
ChannelConfig::ChannelConfig(const ChannelConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_description()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArenaForAllocation());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  extraction_rate_ = from.extraction_rate_;
  // @@protoc_insertion_point(copy_constructor:ChannelConfig)
}

void ChannelConfig::SharedCtor() {
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
extraction_rate_ = 1u;
}

ChannelConfig::~ChannelConfig() {
  // @@protoc_insertion_point(destructor:ChannelConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ChannelConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChannelConfig::ArenaDtor(void* object) {
  ChannelConfig* _this = reinterpret_cast< ChannelConfig* >(object);
  (void)_this;
}
void ChannelConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChannelConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChannelConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:ChannelConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      description_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      name_.ClearNonDefaultToEmpty();
    }
    extraction_rate_ = 1u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChannelConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string description = 1 [default = ""];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ChannelConfig.description");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ChannelConfig.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 extraction_rate = 3 [default = 1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_extraction_rate(&has_bits);
          extraction_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChannelConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChannelConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string description = 1 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ChannelConfig.description");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_description(), target);
  }

  // required string name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ChannelConfig.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // required uint32 extraction_rate = 3 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_extraction_rate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChannelConfig)
  return target;
}

size_t ChannelConfig::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ChannelConfig)
  size_t total_size = 0;

  if (_internal_has_name()) {
    // required string name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_extraction_rate()) {
    // required uint32 extraction_rate = 3 [default = 1];
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_extraction_rate());
  }

  return total_size;
}
size_t ChannelConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChannelConfig)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required string name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required uint32 extraction_rate = 3 [default = 1];
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_extraction_rate());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string description = 1 [default = ""];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChannelConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChannelConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChannelConfig::GetClassData() const { return &_class_data_; }

void ChannelConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ChannelConfig *>(to)->MergeFrom(
      static_cast<const ChannelConfig &>(from));
}


void ChannelConfig::MergeFrom(const ChannelConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChannelConfig)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_description(from._internal_description());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000004u) {
      extraction_rate_ = from.extraction_rate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChannelConfig::CopyFrom(const ChannelConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChannelConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelConfig::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ChannelConfig::InternalSwap(ChannelConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &description_, lhs_arena,
      &other->description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  swap(extraction_rate_, other->extraction_rate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto_getter, &descriptor_table_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto_once,
      file_level_metadata_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto[1]);
}

// ===================================================================

class Channels::_Internal {
 public:
};

Channels::Channels(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  channel_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Channels)
}
Channels::Channels(const Channels& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      channel_(from.channel_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Channels)
}

void Channels::SharedCtor() {
}

Channels::~Channels() {
  // @@protoc_insertion_point(destructor:Channels)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Channels::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Channels::ArenaDtor(void* object) {
  Channels* _this = reinterpret_cast< Channels* >(object);
  (void)_this;
}
void Channels::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Channels::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Channels::Clear() {
// @@protoc_insertion_point(message_clear_start:Channels)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channel_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Channels::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ChannelConfig channel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_channel(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Channels::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Channels)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ChannelConfig channel = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_channel_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_channel(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Channels)
  return target;
}

size_t Channels::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Channels)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ChannelConfig channel = 1;
  total_size += 1UL * this->_internal_channel_size();
  for (const auto& msg : this->channel_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Channels::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Channels::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Channels::GetClassData() const { return &_class_data_; }

void Channels::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Channels *>(to)->MergeFrom(
      static_cast<const Channels &>(from));
}


void Channels::MergeFrom(const Channels& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Channels)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  channel_.MergeFrom(from.channel_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Channels::CopyFrom(const Channels& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Channels)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Channels::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(channel_)) return false;
  return true;
}

void Channels::InternalSwap(Channels* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  channel_.InternalSwap(&other->channel_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Channels::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto_getter, &descriptor_table_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto_once,
      file_level_metadata_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto[2]);
}

// ===================================================================

class Records::_Internal {
 public:
};

Records::Records(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  record_path_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Records)
}
Records::Records(const Records& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      record_path_(from.record_path_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Records)
}

void Records::SharedCtor() {
}

Records::~Records() {
  // @@protoc_insertion_point(destructor:Records)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Records::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Records::ArenaDtor(void* object) {
  Records* _this = reinterpret_cast< Records* >(object);
  (void)_this;
}
void Records::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Records::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Records::Clear() {
// @@protoc_insertion_point(message_clear_start:Records)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  record_path_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Records::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string record_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_record_path();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Records.record_path");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Records::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Records)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string record_path = 1;
  for (int i = 0, n = this->_internal_record_path_size(); i < n; i++) {
    const auto& s = this->_internal_record_path(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Records.record_path");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Records)
  return target;
}

size_t Records::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Records)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string record_path = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(record_path_.size());
  for (int i = 0, n = record_path_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      record_path_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Records::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Records::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Records::GetClassData() const { return &_class_data_; }

void Records::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Records *>(to)->MergeFrom(
      static_cast<const Records &>(from));
}


void Records::MergeFrom(const Records& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Records)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  record_path_.MergeFrom(from.record_path_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Records::CopyFrom(const Records& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Records)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Records::IsInitialized() const {
  return true;
}

void Records::InternalSwap(Records* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  record_path_.InternalSwap(&other->record_path_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Records::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto_getter, &descriptor_table_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto_once,
      file_level_metadata_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto[3]);
}

// ===================================================================

class DataExtractionConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<DataExtractionConfig>()._has_bits_);
  static const ::IoConfig& io_config(const DataExtractionConfig* msg);
  static void set_has_io_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::Channels& channels(const DataExtractionConfig* msg);
  static void set_has_channels(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::Records& records(const DataExtractionConfig* msg);
  static void set_has_records(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::IoConfig&
DataExtractionConfig::_Internal::io_config(const DataExtractionConfig* msg) {
  return *msg->io_config_;
}
const ::Channels&
DataExtractionConfig::_Internal::channels(const DataExtractionConfig* msg) {
  return *msg->channels_;
}
const ::Records&
DataExtractionConfig::_Internal::records(const DataExtractionConfig* msg) {
  return *msg->records_;
}
DataExtractionConfig::DataExtractionConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:DataExtractionConfig)
}
DataExtractionConfig::DataExtractionConfig(const DataExtractionConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_io_config()) {
    io_config_ = new ::IoConfig(*from.io_config_);
  } else {
    io_config_ = nullptr;
  }
  if (from._internal_has_channels()) {
    channels_ = new ::Channels(*from.channels_);
  } else {
    channels_ = nullptr;
  }
  if (from._internal_has_records()) {
    records_ = new ::Records(*from.records_);
  } else {
    records_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:DataExtractionConfig)
}

void DataExtractionConfig::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&io_config_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&records_) -
    reinterpret_cast<char*>(&io_config_)) + sizeof(records_));
}

DataExtractionConfig::~DataExtractionConfig() {
  // @@protoc_insertion_point(destructor:DataExtractionConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DataExtractionConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete io_config_;
  if (this != internal_default_instance()) delete channels_;
  if (this != internal_default_instance()) delete records_;
}

void DataExtractionConfig::ArenaDtor(void* object) {
  DataExtractionConfig* _this = reinterpret_cast< DataExtractionConfig* >(object);
  (void)_this;
}
void DataExtractionConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DataExtractionConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DataExtractionConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:DataExtractionConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(io_config_ != nullptr);
      io_config_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(channels_ != nullptr);
      channels_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(records_ != nullptr);
      records_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataExtractionConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .IoConfig io_config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_io_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .Channels channels = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_channels(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .Records records = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_records(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DataExtractionConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DataExtractionConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .IoConfig io_config = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::io_config(this), target, stream);
  }

  // required .Channels channels = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::channels(this), target, stream);
  }

  // required .Records records = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::records(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DataExtractionConfig)
  return target;
}

size_t DataExtractionConfig::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:DataExtractionConfig)
  size_t total_size = 0;

  if (_internal_has_io_config()) {
    // required .IoConfig io_config = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *io_config_);
  }

  if (_internal_has_channels()) {
    // required .Channels channels = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *channels_);
  }

  if (_internal_has_records()) {
    // required .Records records = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *records_);
  }

  return total_size;
}
size_t DataExtractionConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DataExtractionConfig)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .IoConfig io_config = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *io_config_);

    // required .Channels channels = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *channels_);

    // required .Records records = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *records_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DataExtractionConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DataExtractionConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DataExtractionConfig::GetClassData() const { return &_class_data_; }

void DataExtractionConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DataExtractionConfig *>(to)->MergeFrom(
      static_cast<const DataExtractionConfig &>(from));
}


void DataExtractionConfig::MergeFrom(const DataExtractionConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DataExtractionConfig)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_io_config()->::IoConfig::MergeFrom(from._internal_io_config());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_channels()->::Channels::MergeFrom(from._internal_channels());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_records()->::Records::MergeFrom(from._internal_records());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DataExtractionConfig::CopyFrom(const DataExtractionConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DataExtractionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataExtractionConfig::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_io_config()) {
    if (!io_config_->IsInitialized()) return false;
  }
  if (_internal_has_channels()) {
    if (!channels_->IsInitialized()) return false;
  }
  return true;
}

void DataExtractionConfig::InternalSwap(DataExtractionConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DataExtractionConfig, records_)
      + sizeof(DataExtractionConfig::records_)
      - PROTOBUF_FIELD_OFFSET(DataExtractionConfig, io_config_)>(
          reinterpret_cast<char*>(&io_config_),
          reinterpret_cast<char*>(&other->io_config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DataExtractionConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto_getter, &descriptor_table_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto_once,
      file_level_metadata_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::IoConfig* Arena::CreateMaybeMessage< ::IoConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IoConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::ChannelConfig* Arena::CreateMaybeMessage< ::ChannelConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChannelConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::Channels* Arena::CreateMaybeMessage< ::Channels >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Channels >(arena);
}
template<> PROTOBUF_NOINLINE ::Records* Arena::CreateMaybeMessage< ::Records >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Records >(arena);
}
template<> PROTOBUF_NOINLINE ::DataExtractionConfig* Arena::CreateMaybeMessage< ::DataExtractionConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DataExtractionConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
