// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/dreamview/proto/data_collection_table.proto

#include "modules/dreamview/proto/data_collection_table.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace apollo {
namespace dreamview {
constexpr Criterion::Criterion(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : field_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , vehicle_config_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , comparison_operator_(0)

  , value_(0){}
struct CriterionDefaultTypeInternal {
  constexpr CriterionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CriterionDefaultTypeInternal() {}
  union {
    Criterion _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CriterionDefaultTypeInternal _Criterion_default_instance_;
constexpr Range::Range(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : criterion_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct RangeDefaultTypeInternal {
  constexpr RangeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RangeDefaultTypeInternal() {}
  union {
    Range _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RangeDefaultTypeInternal _Range_default_instance_;
constexpr Feature::Feature(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : range_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct FeatureDefaultTypeInternal {
  constexpr FeatureDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FeatureDefaultTypeInternal() {}
  union {
    Feature _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FeatureDefaultTypeInternal _Feature_default_instance_;
constexpr Scenario::Scenario(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : feature_(){}
struct ScenarioDefaultTypeInternal {
  constexpr ScenarioDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ScenarioDefaultTypeInternal() {}
  union {
    Scenario _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ScenarioDefaultTypeInternal _Scenario_default_instance_;
constexpr DataCollectionTable_ScenarioEntry_DoNotUse::DataCollectionTable_ScenarioEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct DataCollectionTable_ScenarioEntry_DoNotUseDefaultTypeInternal {
  constexpr DataCollectionTable_ScenarioEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DataCollectionTable_ScenarioEntry_DoNotUseDefaultTypeInternal() {}
  union {
    DataCollectionTable_ScenarioEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DataCollectionTable_ScenarioEntry_DoNotUseDefaultTypeInternal _DataCollectionTable_ScenarioEntry_DoNotUse_default_instance_;
constexpr DataCollectionTable::DataCollectionTable(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : scenario_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , frame_threshold_(0u)
  , total_frames_(0u){}
struct DataCollectionTableDefaultTypeInternal {
  constexpr DataCollectionTableDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DataCollectionTableDefaultTypeInternal() {}
  union {
    DataCollectionTable _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DataCollectionTableDefaultTypeInternal _DataCollectionTable_default_instance_;
}  // namespace dreamview
}  // namespace apollo
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Criterion, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Criterion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Criterion, field_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Criterion, comparison_operator_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Criterion, value_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Criterion, vehicle_config_),
  0,
  2,
  3,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Range, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Range, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Range, name_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Range, criterion_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Feature, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Feature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Feature, name_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Feature, range_),
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Scenario, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Scenario, feature_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::DataCollectionTable_ScenarioEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::DataCollectionTable_ScenarioEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::DataCollectionTable_ScenarioEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::DataCollectionTable_ScenarioEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::DataCollectionTable, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::DataCollectionTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::DataCollectionTable, scenario_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::DataCollectionTable, frame_threshold_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::DataCollectionTable, total_frames_),
  ~0u,
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, -1, sizeof(::apollo::dreamview::Criterion)},
  { 14, 22, -1, sizeof(::apollo::dreamview::Range)},
  { 24, 32, -1, sizeof(::apollo::dreamview::Feature)},
  { 34, -1, -1, sizeof(::apollo::dreamview::Scenario)},
  { 41, 49, -1, sizeof(::apollo::dreamview::DataCollectionTable_ScenarioEntry_DoNotUse)},
  { 51, 60, -1, sizeof(::apollo::dreamview::DataCollectionTable)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::dreamview::_Criterion_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::dreamview::_Range_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::dreamview::_Feature_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::dreamview::_Scenario_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::dreamview::_DataCollectionTable_ScenarioEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::dreamview::_DataCollectionTable_default_instance_),
};

const char descriptor_table_protodef_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n3modules/dreamview/proto/data_collectio"
  "n_table.proto\022\020apollo.dreamview\"\204\001\n\tCrit"
  "erion\022\r\n\005field\030\001 \001(\t\022A\n\023comparison_opera"
  "tor\030\002 \001(\0162$.apollo.dreamview.ComparisonO"
  "perator\022\r\n\005value\030\003 \001(\002\022\026\n\016vehicle_config"
  "\030\004 \001(\t\"E\n\005Range\022\014\n\004name\030\001 \001(\t\022.\n\tcriteri"
  "on\030\002 \003(\0132\033.apollo.dreamview.Criterion\"\?\n"
  "\007Feature\022\014\n\004name\030\001 \001(\t\022&\n\005range\030\002 \003(\0132\027."
  "apollo.dreamview.Range\"6\n\010Scenario\022*\n\007fe"
  "ature\030\001 \003(\0132\031.apollo.dreamview.Feature\"\330"
  "\001\n\023DataCollectionTable\022E\n\010scenario\030\001 \003(\013"
  "23.apollo.dreamview.DataCollectionTable."
  "ScenarioEntry\022\027\n\017frame_threshold\030\002 \002(\r\022\024"
  "\n\014total_frames\030\003 \002(\r\032K\n\rScenarioEntry\022\013\n"
  "\003key\030\001 \001(\t\022)\n\005value\030\002 \001(\0132\032.apollo.dream"
  "view.Scenario:\0028\001*\202\001\n\022ComparisonOperator"
  "\022\t\n\005EQUAL\020\000\022\r\n\tNOT_EQUAL\020\001\022\020\n\014GREATER_TH"
  "AN\020\002\022\031\n\025GREATER_THAN_OR_EQUAL\020\003\022\r\n\tLESS_"
  "THAN\020\004\022\026\n\022LESS_THAN_OR_EQUAL\020\005"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto = {
  false, false, 750, descriptor_table_protodef_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto, "modules/dreamview/proto/data_collection_table.proto", 
  &descriptor_table_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto_once, nullptr, 0, 6,
  schemas, file_default_instances, TableStruct_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto::offsets,
  file_level_metadata_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto, file_level_enum_descriptors_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto, file_level_service_descriptors_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto_getter() {
  return &descriptor_table_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto(&descriptor_table_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto);
namespace apollo {
namespace dreamview {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ComparisonOperator_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto);
  return file_level_enum_descriptors_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto[0];
}
bool ComparisonOperator_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Criterion::_Internal {
 public:
  using HasBits = decltype(std::declval<Criterion>()._has_bits_);
  static void set_has_field(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_comparison_operator(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_vehicle_config(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Criterion::Criterion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.dreamview.Criterion)
}
Criterion::Criterion(const Criterion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  field_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field()) {
    field_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_field(), 
      GetArenaForAllocation());
  }
  vehicle_config_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_vehicle_config()) {
    vehicle_config_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vehicle_config(), 
      GetArenaForAllocation());
  }
  ::memcpy(&comparison_operator_, &from.comparison_operator_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&comparison_operator_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.Criterion)
}

void Criterion::SharedCtor() {
field_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
vehicle_config_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&comparison_operator_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&comparison_operator_)) + sizeof(value_));
}

Criterion::~Criterion() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.Criterion)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Criterion::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  field_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vehicle_config_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Criterion::ArenaDtor(void* object) {
  Criterion* _this = reinterpret_cast< Criterion* >(object);
  (void)_this;
}
void Criterion::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Criterion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Criterion::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.Criterion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      field_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      vehicle_config_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&comparison_operator_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&value_) -
        reinterpret_cast<char*>(&comparison_operator_)) + sizeof(value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Criterion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string field = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_field();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.dreamview.Criterion.field");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.dreamview.ComparisonOperator comparison_operator = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::dreamview::ComparisonOperator_IsValid(val))) {
            _internal_set_comparison_operator(static_cast<::apollo::dreamview::ComparisonOperator>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional float value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional string vehicle_config = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_vehicle_config();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.dreamview.Criterion.vehicle_config");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Criterion::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.Criterion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string field = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field().data(), static_cast<int>(this->_internal_field().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.Criterion.field");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_field(), target);
  }

  // optional .apollo.dreamview.ComparisonOperator comparison_operator = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_comparison_operator(), target);
  }

  // optional float value = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_value(), target);
  }

  // optional string vehicle_config = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_vehicle_config().data(), static_cast<int>(this->_internal_vehicle_config().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.Criterion.vehicle_config");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_vehicle_config(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.Criterion)
  return target;
}

size_t Criterion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.Criterion)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string field = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field());
    }

    // optional string vehicle_config = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_vehicle_config());
    }

    // optional .apollo.dreamview.ComparisonOperator comparison_operator = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_comparison_operator());
    }

    // optional float value = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Criterion::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Criterion::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Criterion::GetClassData() const { return &_class_data_; }

void Criterion::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Criterion *>(to)->MergeFrom(
      static_cast<const Criterion &>(from));
}


void Criterion::MergeFrom(const Criterion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.Criterion)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_field(from._internal_field());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_vehicle_config(from._internal_vehicle_config());
    }
    if (cached_has_bits & 0x00000004u) {
      comparison_operator_ = from.comparison_operator_;
    }
    if (cached_has_bits & 0x00000008u) {
      value_ = from.value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Criterion::CopyFrom(const Criterion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.Criterion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Criterion::IsInitialized() const {
  return true;
}

void Criterion::InternalSwap(Criterion* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &field_, lhs_arena,
      &other->field_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &vehicle_config_, lhs_arena,
      &other->vehicle_config_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Criterion, value_)
      + sizeof(Criterion::value_)
      - PROTOBUF_FIELD_OFFSET(Criterion, comparison_operator_)>(
          reinterpret_cast<char*>(&comparison_operator_),
          reinterpret_cast<char*>(&other->comparison_operator_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Criterion::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto_getter, &descriptor_table_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto_once,
      file_level_metadata_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto[0]);
}

// ===================================================================

class Range::_Internal {
 public:
  using HasBits = decltype(std::declval<Range>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Range::Range(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  criterion_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.dreamview.Range)
}
Range::Range(const Range& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      criterion_(from.criterion_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.Range)
}

void Range::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Range::~Range() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.Range)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Range::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Range::ArenaDtor(void* object) {
  Range* _this = reinterpret_cast< Range* >(object);
  (void)_this;
}
void Range::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Range::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Range::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.Range)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  criterion_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Range::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.dreamview.Range.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.dreamview.Criterion criterion = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_criterion(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Range::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.Range)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.Range.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated .apollo.dreamview.Criterion criterion = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_criterion_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_criterion(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.Range)
  return target;
}

size_t Range::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.Range)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.dreamview.Criterion criterion = 2;
  total_size += 1UL * this->_internal_criterion_size();
  for (const auto& msg : this->criterion_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string name = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Range::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Range::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Range::GetClassData() const { return &_class_data_; }

void Range::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Range *>(to)->MergeFrom(
      static_cast<const Range &>(from));
}


void Range::MergeFrom(const Range& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.Range)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  criterion_.MergeFrom(from.criterion_);
  if (from._internal_has_name()) {
    _internal_set_name(from._internal_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Range::CopyFrom(const Range& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.Range)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Range::IsInitialized() const {
  return true;
}

void Range::InternalSwap(Range* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  criterion_.InternalSwap(&other->criterion_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Range::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto_getter, &descriptor_table_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto_once,
      file_level_metadata_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto[1]);
}

// ===================================================================

class Feature::_Internal {
 public:
  using HasBits = decltype(std::declval<Feature>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Feature::Feature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  range_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.dreamview.Feature)
}
Feature::Feature(const Feature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      range_(from.range_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.Feature)
}

void Feature::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Feature::~Feature() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.Feature)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Feature::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Feature::ArenaDtor(void* object) {
  Feature* _this = reinterpret_cast< Feature* >(object);
  (void)_this;
}
void Feature::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Feature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Feature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.Feature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  range_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Feature::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.dreamview.Feature.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.dreamview.Range range = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_range(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Feature::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.Feature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.Feature.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated .apollo.dreamview.Range range = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_range_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_range(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.Feature)
  return target;
}

size_t Feature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.Feature)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.dreamview.Range range = 2;
  total_size += 1UL * this->_internal_range_size();
  for (const auto& msg : this->range_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string name = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Feature::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Feature::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Feature::GetClassData() const { return &_class_data_; }

void Feature::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Feature *>(to)->MergeFrom(
      static_cast<const Feature &>(from));
}


void Feature::MergeFrom(const Feature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.Feature)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  range_.MergeFrom(from.range_);
  if (from._internal_has_name()) {
    _internal_set_name(from._internal_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Feature::CopyFrom(const Feature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.Feature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Feature::IsInitialized() const {
  return true;
}

void Feature::InternalSwap(Feature* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  range_.InternalSwap(&other->range_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Feature::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto_getter, &descriptor_table_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto_once,
      file_level_metadata_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto[2]);
}

// ===================================================================

class Scenario::_Internal {
 public:
};

Scenario::Scenario(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  feature_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.dreamview.Scenario)
}
Scenario::Scenario(const Scenario& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      feature_(from.feature_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.Scenario)
}

void Scenario::SharedCtor() {
}

Scenario::~Scenario() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.Scenario)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Scenario::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Scenario::ArenaDtor(void* object) {
  Scenario* _this = reinterpret_cast< Scenario* >(object);
  (void)_this;
}
void Scenario::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Scenario::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Scenario::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.Scenario)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  feature_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Scenario::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .apollo.dreamview.Feature feature = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_feature(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Scenario::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.Scenario)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.dreamview.Feature feature = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_feature_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_feature(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.Scenario)
  return target;
}

size_t Scenario::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.Scenario)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.dreamview.Feature feature = 1;
  total_size += 1UL * this->_internal_feature_size();
  for (const auto& msg : this->feature_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Scenario::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Scenario::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Scenario::GetClassData() const { return &_class_data_; }

void Scenario::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Scenario *>(to)->MergeFrom(
      static_cast<const Scenario &>(from));
}


void Scenario::MergeFrom(const Scenario& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.Scenario)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  feature_.MergeFrom(from.feature_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Scenario::CopyFrom(const Scenario& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.Scenario)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Scenario::IsInitialized() const {
  return true;
}

void Scenario::InternalSwap(Scenario* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  feature_.InternalSwap(&other->feature_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Scenario::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto_getter, &descriptor_table_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto_once,
      file_level_metadata_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto[3]);
}

// ===================================================================

DataCollectionTable_ScenarioEntry_DoNotUse::DataCollectionTable_ScenarioEntry_DoNotUse() {}
DataCollectionTable_ScenarioEntry_DoNotUse::DataCollectionTable_ScenarioEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void DataCollectionTable_ScenarioEntry_DoNotUse::MergeFrom(const DataCollectionTable_ScenarioEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata DataCollectionTable_ScenarioEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto_getter, &descriptor_table_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto_once,
      file_level_metadata_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto[4]);
}

// ===================================================================

class DataCollectionTable::_Internal {
 public:
  using HasBits = decltype(std::declval<DataCollectionTable>()._has_bits_);
  static void set_has_frame_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_total_frames(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

DataCollectionTable::DataCollectionTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  scenario_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.dreamview.DataCollectionTable)
}
DataCollectionTable::DataCollectionTable(const DataCollectionTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  scenario_.MergeFrom(from.scenario_);
  ::memcpy(&frame_threshold_, &from.frame_threshold_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_frames_) -
    reinterpret_cast<char*>(&frame_threshold_)) + sizeof(total_frames_));
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.DataCollectionTable)
}

void DataCollectionTable::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&frame_threshold_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&total_frames_) -
    reinterpret_cast<char*>(&frame_threshold_)) + sizeof(total_frames_));
}

DataCollectionTable::~DataCollectionTable() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.DataCollectionTable)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DataCollectionTable::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DataCollectionTable::ArenaDtor(void* object) {
  DataCollectionTable* _this = reinterpret_cast< DataCollectionTable* >(object);
  (void)_this;
  _this->scenario_. ~MapField();
}
inline void DataCollectionTable::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &DataCollectionTable::ArenaDtor);
  }
}
void DataCollectionTable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DataCollectionTable::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.DataCollectionTable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  scenario_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&frame_threshold_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&total_frames_) -
        reinterpret_cast<char*>(&frame_threshold_)) + sizeof(total_frames_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataCollectionTable::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, .apollo.dreamview.Scenario> scenario = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&scenario_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // required uint32 frame_threshold = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_frame_threshold(&has_bits);
          frame_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 total_frames = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_total_frames(&has_bits);
          total_frames_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DataCollectionTable::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.DataCollectionTable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .apollo.dreamview.Scenario> scenario = 1;
  if (!this->_internal_scenario().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Scenario >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
          "apollo.dreamview.DataCollectionTable.ScenarioEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_scenario().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_scenario().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Scenario >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Scenario >::const_iterator
          it = this->_internal_scenario().begin();
          it != this->_internal_scenario().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = DataCollectionTable_ScenarioEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Scenario >::const_iterator
          it = this->_internal_scenario().begin();
          it != this->_internal_scenario().end(); ++it) {
        target = DataCollectionTable_ScenarioEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  cached_has_bits = _has_bits_[0];
  // required uint32 frame_threshold = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_frame_threshold(), target);
  }

  // required uint32 total_frames = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_total_frames(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.DataCollectionTable)
  return target;
}

size_t DataCollectionTable::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:apollo.dreamview.DataCollectionTable)
  size_t total_size = 0;

  if (_internal_has_frame_threshold()) {
    // required uint32 frame_threshold = 2;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_frame_threshold());
  }

  if (_internal_has_total_frames()) {
    // required uint32 total_frames = 3;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_total_frames());
  }

  return total_size;
}
size_t DataCollectionTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.DataCollectionTable)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 frame_threshold = 2;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_frame_threshold());

    // required uint32 total_frames = 3;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_total_frames());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .apollo.dreamview.Scenario> scenario = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_scenario_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Scenario >::const_iterator
      it = this->_internal_scenario().begin();
      it != this->_internal_scenario().end(); ++it) {
    total_size += DataCollectionTable_ScenarioEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DataCollectionTable::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DataCollectionTable::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DataCollectionTable::GetClassData() const { return &_class_data_; }

void DataCollectionTable::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DataCollectionTable *>(to)->MergeFrom(
      static_cast<const DataCollectionTable &>(from));
}


void DataCollectionTable::MergeFrom(const DataCollectionTable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.DataCollectionTable)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  scenario_.MergeFrom(from.scenario_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      frame_threshold_ = from.frame_threshold_;
    }
    if (cached_has_bits & 0x00000002u) {
      total_frames_ = from.total_frames_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DataCollectionTable::CopyFrom(const DataCollectionTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.DataCollectionTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataCollectionTable::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void DataCollectionTable::InternalSwap(DataCollectionTable* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  scenario_.InternalSwap(&other->scenario_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DataCollectionTable, total_frames_)
      + sizeof(DataCollectionTable::total_frames_)
      - PROTOBUF_FIELD_OFFSET(DataCollectionTable, frame_threshold_)>(
          reinterpret_cast<char*>(&frame_threshold_),
          reinterpret_cast<char*>(&other->frame_threshold_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DataCollectionTable::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto_getter, &descriptor_table_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto_once,
      file_level_metadata_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace dreamview
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::dreamview::Criterion* Arena::CreateMaybeMessage< ::apollo::dreamview::Criterion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::dreamview::Criterion >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dreamview::Range* Arena::CreateMaybeMessage< ::apollo::dreamview::Range >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::dreamview::Range >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dreamview::Feature* Arena::CreateMaybeMessage< ::apollo::dreamview::Feature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::dreamview::Feature >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dreamview::Scenario* Arena::CreateMaybeMessage< ::apollo::dreamview::Scenario >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::dreamview::Scenario >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dreamview::DataCollectionTable_ScenarioEntry_DoNotUse* Arena::CreateMaybeMessage< ::apollo::dreamview::DataCollectionTable_ScenarioEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::dreamview::DataCollectionTable_ScenarioEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dreamview::DataCollectionTable* Arena::CreateMaybeMessage< ::apollo::dreamview::DataCollectionTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::dreamview::DataCollectionTable >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
