// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/dreamview/proto/chart.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fdreamview_2fproto_2fchart_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fdreamview_2fproto_2fchart_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "modules/common/proto/geometry.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fdreamview_2fproto_2fchart_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fdreamview_2fproto_2fchart_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fdreamview_2fproto_2fchart_2eproto;
namespace apollo {
namespace dreamview {
class Car;
struct CarDefaultTypeInternal;
extern CarDefaultTypeInternal _Car_default_instance_;
class Chart;
struct ChartDefaultTypeInternal;
extern ChartDefaultTypeInternal _Chart_default_instance_;
class Line;
struct LineDefaultTypeInternal;
extern LineDefaultTypeInternal _Line_default_instance_;
class Line_PropertiesEntry_DoNotUse;
struct Line_PropertiesEntry_DoNotUseDefaultTypeInternal;
extern Line_PropertiesEntry_DoNotUseDefaultTypeInternal _Line_PropertiesEntry_DoNotUse_default_instance_;
class Options;
struct OptionsDefaultTypeInternal;
extern OptionsDefaultTypeInternal _Options_default_instance_;
class Options_Axis;
struct Options_AxisDefaultTypeInternal;
extern Options_AxisDefaultTypeInternal _Options_Axis_default_instance_;
class Polygon;
struct PolygonDefaultTypeInternal;
extern PolygonDefaultTypeInternal _Polygon_default_instance_;
class Polygon_PropertiesEntry_DoNotUse;
struct Polygon_PropertiesEntry_DoNotUseDefaultTypeInternal;
extern Polygon_PropertiesEntry_DoNotUseDefaultTypeInternal _Polygon_PropertiesEntry_DoNotUse_default_instance_;
}  // namespace dreamview
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::dreamview::Car* Arena::CreateMaybeMessage<::apollo::dreamview::Car>(Arena*);
template<> ::apollo::dreamview::Chart* Arena::CreateMaybeMessage<::apollo::dreamview::Chart>(Arena*);
template<> ::apollo::dreamview::Line* Arena::CreateMaybeMessage<::apollo::dreamview::Line>(Arena*);
template<> ::apollo::dreamview::Line_PropertiesEntry_DoNotUse* Arena::CreateMaybeMessage<::apollo::dreamview::Line_PropertiesEntry_DoNotUse>(Arena*);
template<> ::apollo::dreamview::Options* Arena::CreateMaybeMessage<::apollo::dreamview::Options>(Arena*);
template<> ::apollo::dreamview::Options_Axis* Arena::CreateMaybeMessage<::apollo::dreamview::Options_Axis>(Arena*);
template<> ::apollo::dreamview::Polygon* Arena::CreateMaybeMessage<::apollo::dreamview::Polygon>(Arena*);
template<> ::apollo::dreamview::Polygon_PropertiesEntry_DoNotUse* Arena::CreateMaybeMessage<::apollo::dreamview::Polygon_PropertiesEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace dreamview {

// ===================================================================

class Options_Axis final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.Options.Axis) */ {
 public:
  inline Options_Axis() : Options_Axis(nullptr) {}
  ~Options_Axis() override;
  explicit constexpr Options_Axis(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Options_Axis(const Options_Axis& from);
  Options_Axis(Options_Axis&& from) noexcept
    : Options_Axis() {
    *this = ::std::move(from);
  }

  inline Options_Axis& operator=(const Options_Axis& from) {
    CopyFrom(from);
    return *this;
  }
  inline Options_Axis& operator=(Options_Axis&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Options_Axis& default_instance() {
    return *internal_default_instance();
  }
  static inline const Options_Axis* internal_default_instance() {
    return reinterpret_cast<const Options_Axis*>(
               &_Options_Axis_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Options_Axis& a, Options_Axis& b) {
    a.Swap(&b);
  }
  inline void Swap(Options_Axis* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Options_Axis* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Options_Axis* New() const final {
    return new Options_Axis();
  }

  Options_Axis* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Options_Axis>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Options_Axis& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Options_Axis& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Options_Axis* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.dreamview.Options.Axis";
  }
  protected:
  explicit Options_Axis(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelStringFieldNumber = 3,
    kMinFieldNumber = 1,
    kMaxFieldNumber = 2,
    kWindowSizeFieldNumber = 4,
    kStepSizeFieldNumber = 5,
    kMidValueFieldNumber = 6,
  };
  // optional string label_string = 3;
  bool has_label_string() const;
  private:
  bool _internal_has_label_string() const;
  public:
  void clear_label_string();
  const std::string& label_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_label_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_label_string();
  PROTOBUF_MUST_USE_RESULT std::string* release_label_string();
  void set_allocated_label_string(std::string* label_string);
  private:
  const std::string& _internal_label_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_label_string(const std::string& value);
  std::string* _internal_mutable_label_string();
  public:

  // optional double min = 1;
  bool has_min() const;
  private:
  bool _internal_has_min() const;
  public:
  void clear_min();
  double min() const;
  void set_min(double value);
  private:
  double _internal_min() const;
  void _internal_set_min(double value);
  public:

  // optional double max = 2;
  bool has_max() const;
  private:
  bool _internal_has_max() const;
  public:
  void clear_max();
  double max() const;
  void set_max(double value);
  private:
  double _internal_max() const;
  void _internal_set_max(double value);
  public:

  // optional double window_size = 4;
  bool has_window_size() const;
  private:
  bool _internal_has_window_size() const;
  public:
  void clear_window_size();
  double window_size() const;
  void set_window_size(double value);
  private:
  double _internal_window_size() const;
  void _internal_set_window_size(double value);
  public:

  // optional double step_size = 5;
  bool has_step_size() const;
  private:
  bool _internal_has_step_size() const;
  public:
  void clear_step_size();
  double step_size() const;
  void set_step_size(double value);
  private:
  double _internal_step_size() const;
  void _internal_set_step_size(double value);
  public:

  // optional double mid_value = 6;
  bool has_mid_value() const;
  private:
  bool _internal_has_mid_value() const;
  public:
  void clear_mid_value();
  double mid_value() const;
  void set_mid_value(double value);
  private:
  double _internal_mid_value() const;
  void _internal_set_mid_value(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.dreamview.Options.Axis)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_string_;
  double min_;
  double max_;
  double window_size_;
  double step_size_;
  double mid_value_;
  friend struct ::TableStruct_modules_2fdreamview_2fproto_2fchart_2eproto;
};
// -------------------------------------------------------------------

class Options final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.Options) */ {
 public:
  inline Options() : Options(nullptr) {}
  ~Options() override;
  explicit constexpr Options(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Options(const Options& from);
  Options(Options&& from) noexcept
    : Options() {
    *this = ::std::move(from);
  }

  inline Options& operator=(const Options& from) {
    CopyFrom(from);
    return *this;
  }
  inline Options& operator=(Options&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Options& default_instance() {
    return *internal_default_instance();
  }
  static inline const Options* internal_default_instance() {
    return reinterpret_cast<const Options*>(
               &_Options_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Options& a, Options& b) {
    a.Swap(&b);
  }
  inline void Swap(Options* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Options* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Options* New() const final {
    return new Options();
  }

  Options* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Options>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Options& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Options& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Options* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.dreamview.Options";
  }
  protected:
  explicit Options(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Options_Axis Axis;

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kAspectRatioFieldNumber = 4,
    kSyncXyWindowSizeFieldNumber = 5,
    kLegendDisplayFieldNumber = 1,
  };
  // optional .apollo.dreamview.Options.Axis x = 2;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  const ::apollo::dreamview::Options_Axis& x() const;
  PROTOBUF_MUST_USE_RESULT ::apollo::dreamview::Options_Axis* release_x();
  ::apollo::dreamview::Options_Axis* mutable_x();
  void set_allocated_x(::apollo::dreamview::Options_Axis* x);
  private:
  const ::apollo::dreamview::Options_Axis& _internal_x() const;
  ::apollo::dreamview::Options_Axis* _internal_mutable_x();
  public:
  void unsafe_arena_set_allocated_x(
      ::apollo::dreamview::Options_Axis* x);
  ::apollo::dreamview::Options_Axis* unsafe_arena_release_x();

  // optional .apollo.dreamview.Options.Axis y = 3;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  const ::apollo::dreamview::Options_Axis& y() const;
  PROTOBUF_MUST_USE_RESULT ::apollo::dreamview::Options_Axis* release_y();
  ::apollo::dreamview::Options_Axis* mutable_y();
  void set_allocated_y(::apollo::dreamview::Options_Axis* y);
  private:
  const ::apollo::dreamview::Options_Axis& _internal_y() const;
  ::apollo::dreamview::Options_Axis* _internal_mutable_y();
  public:
  void unsafe_arena_set_allocated_y(
      ::apollo::dreamview::Options_Axis* y);
  ::apollo::dreamview::Options_Axis* unsafe_arena_release_y();

  // optional double aspect_ratio = 4;
  bool has_aspect_ratio() const;
  private:
  bool _internal_has_aspect_ratio() const;
  public:
  void clear_aspect_ratio();
  double aspect_ratio() const;
  void set_aspect_ratio(double value);
  private:
  double _internal_aspect_ratio() const;
  void _internal_set_aspect_ratio(double value);
  public:

  // optional bool sync_xy_window_size = 5 [default = false];
  bool has_sync_xy_window_size() const;
  private:
  bool _internal_has_sync_xy_window_size() const;
  public:
  void clear_sync_xy_window_size();
  bool sync_xy_window_size() const;
  void set_sync_xy_window_size(bool value);
  private:
  bool _internal_sync_xy_window_size() const;
  void _internal_set_sync_xy_window_size(bool value);
  public:

  // optional bool legend_display = 1 [default = true];
  bool has_legend_display() const;
  private:
  bool _internal_has_legend_display() const;
  public:
  void clear_legend_display();
  bool legend_display() const;
  void set_legend_display(bool value);
  private:
  bool _internal_legend_display() const;
  void _internal_set_legend_display(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.dreamview.Options)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::apollo::dreamview::Options_Axis* x_;
  ::apollo::dreamview::Options_Axis* y_;
  double aspect_ratio_;
  bool sync_xy_window_size_;
  bool legend_display_;
  friend struct ::TableStruct_modules_2fdreamview_2fproto_2fchart_2eproto;
};
// -------------------------------------------------------------------

class Line_PropertiesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Line_PropertiesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Line_PropertiesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  Line_PropertiesEntry_DoNotUse();
  explicit constexpr Line_PropertiesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Line_PropertiesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Line_PropertiesEntry_DoNotUse& other);
  static const Line_PropertiesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Line_PropertiesEntry_DoNotUse*>(&_Line_PropertiesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
#ifndef NDEBUG
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
       s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "apollo.dreamview.Line.PropertiesEntry.key");
#else
    (void) s;
#endif
    return true;
 }
  static bool ValidateValue(std::string* s) {
#ifndef NDEBUG
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
       s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "apollo.dreamview.Line.PropertiesEntry.value");
#else
    (void) s;
#endif
    return true;
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class Line final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.Line) */ {
 public:
  inline Line() : Line(nullptr) {}
  ~Line() override;
  explicit constexpr Line(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Line(const Line& from);
  Line(Line&& from) noexcept
    : Line() {
    *this = ::std::move(from);
  }

  inline Line& operator=(const Line& from) {
    CopyFrom(from);
    return *this;
  }
  inline Line& operator=(Line&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Line& default_instance() {
    return *internal_default_instance();
  }
  static inline const Line* internal_default_instance() {
    return reinterpret_cast<const Line*>(
               &_Line_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Line& a, Line& b) {
    a.Swap(&b);
  }
  inline void Swap(Line* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Line* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Line* New() const final {
    return new Line();
  }

  Line* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Line>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Line& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Line& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Line* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.dreamview.Line";
  }
  protected:
  explicit Line(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kPointFieldNumber = 3,
    kPropertiesFieldNumber = 4,
    kLabelFieldNumber = 1,
    kHideLabelInLegendFieldNumber = 2,
  };
  // repeated .apollo.common.Point2D point = 3;
  int point_size() const;
  private:
  int _internal_point_size() const;
  public:
  void clear_point();
  ::apollo::common::Point2D* mutable_point(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::Point2D >*
      mutable_point();
  private:
  const ::apollo::common::Point2D& _internal_point(int index) const;
  ::apollo::common::Point2D* _internal_add_point();
  public:
  const ::apollo::common::Point2D& point(int index) const;
  ::apollo::common::Point2D* add_point();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::Point2D >&
      point() const;

  // map<string, string> properties = 4;
  int properties_size() const;
  private:
  int _internal_properties_size() const;
  public:
  void clear_properties();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_properties() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_properties();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      properties() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_properties();

  // optional string label = 1;
  bool has_label() const;
  private:
  bool _internal_has_label() const;
  public:
  void clear_label();
  const std::string& label() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_label(ArgT0&& arg0, ArgT... args);
  std::string* mutable_label();
  PROTOBUF_MUST_USE_RESULT std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // optional bool hide_label_in_legend = 2 [default = false];
  bool has_hide_label_in_legend() const;
  private:
  bool _internal_has_hide_label_in_legend() const;
  public:
  void clear_hide_label_in_legend();
  bool hide_label_in_legend() const;
  void set_hide_label_in_legend(bool value);
  private:
  bool _internal_hide_label_in_legend() const;
  void _internal_set_hide_label_in_legend(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.dreamview.Line)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::Point2D > point_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Line_PropertiesEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> properties_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  bool hide_label_in_legend_;
  friend struct ::TableStruct_modules_2fdreamview_2fproto_2fchart_2eproto;
};
// -------------------------------------------------------------------

class Polygon_PropertiesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Polygon_PropertiesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Polygon_PropertiesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  Polygon_PropertiesEntry_DoNotUse();
  explicit constexpr Polygon_PropertiesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Polygon_PropertiesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Polygon_PropertiesEntry_DoNotUse& other);
  static const Polygon_PropertiesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Polygon_PropertiesEntry_DoNotUse*>(&_Polygon_PropertiesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
#ifndef NDEBUG
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
       s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "apollo.dreamview.Polygon.PropertiesEntry.key");
#else
    (void) s;
#endif
    return true;
 }
  static bool ValidateValue(std::string* s) {
#ifndef NDEBUG
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
       s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "apollo.dreamview.Polygon.PropertiesEntry.value");
#else
    (void) s;
#endif
    return true;
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class Polygon final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.Polygon) */ {
 public:
  inline Polygon() : Polygon(nullptr) {}
  ~Polygon() override;
  explicit constexpr Polygon(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Polygon(const Polygon& from);
  Polygon(Polygon&& from) noexcept
    : Polygon() {
    *this = ::std::move(from);
  }

  inline Polygon& operator=(const Polygon& from) {
    CopyFrom(from);
    return *this;
  }
  inline Polygon& operator=(Polygon&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Polygon& default_instance() {
    return *internal_default_instance();
  }
  static inline const Polygon* internal_default_instance() {
    return reinterpret_cast<const Polygon*>(
               &_Polygon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Polygon& a, Polygon& b) {
    a.Swap(&b);
  }
  inline void Swap(Polygon* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Polygon* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Polygon* New() const final {
    return new Polygon();
  }

  Polygon* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Polygon>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Polygon& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Polygon& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Polygon* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.dreamview.Polygon";
  }
  protected:
  explicit Polygon(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kPointFieldNumber = 3,
    kPropertiesFieldNumber = 4,
    kLabelFieldNumber = 1,
    kHideLabelInLegendFieldNumber = 2,
  };
  // repeated .apollo.common.Point2D point = 3;
  int point_size() const;
  private:
  int _internal_point_size() const;
  public:
  void clear_point();
  ::apollo::common::Point2D* mutable_point(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::Point2D >*
      mutable_point();
  private:
  const ::apollo::common::Point2D& _internal_point(int index) const;
  ::apollo::common::Point2D* _internal_add_point();
  public:
  const ::apollo::common::Point2D& point(int index) const;
  ::apollo::common::Point2D* add_point();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::Point2D >&
      point() const;

  // map<string, string> properties = 4;
  int properties_size() const;
  private:
  int _internal_properties_size() const;
  public:
  void clear_properties();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_properties() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_properties();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      properties() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_properties();

  // optional string label = 1;
  bool has_label() const;
  private:
  bool _internal_has_label() const;
  public:
  void clear_label();
  const std::string& label() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_label(ArgT0&& arg0, ArgT... args);
  std::string* mutable_label();
  PROTOBUF_MUST_USE_RESULT std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // optional bool hide_label_in_legend = 2 [default = false];
  bool has_hide_label_in_legend() const;
  private:
  bool _internal_has_hide_label_in_legend() const;
  public:
  void clear_hide_label_in_legend();
  bool hide_label_in_legend() const;
  void set_hide_label_in_legend(bool value);
  private:
  bool _internal_hide_label_in_legend() const;
  void _internal_set_hide_label_in_legend(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.dreamview.Polygon)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::Point2D > point_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Polygon_PropertiesEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> properties_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  bool hide_label_in_legend_;
  friend struct ::TableStruct_modules_2fdreamview_2fproto_2fchart_2eproto;
};
// -------------------------------------------------------------------

class Car final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.Car) */ {
 public:
  inline Car() : Car(nullptr) {}
  ~Car() override;
  explicit constexpr Car(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Car(const Car& from);
  Car(Car&& from) noexcept
    : Car() {
    *this = ::std::move(from);
  }

  inline Car& operator=(const Car& from) {
    CopyFrom(from);
    return *this;
  }
  inline Car& operator=(Car&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Car& default_instance() {
    return *internal_default_instance();
  }
  static inline const Car* internal_default_instance() {
    return reinterpret_cast<const Car*>(
               &_Car_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Car& a, Car& b) {
    a.Swap(&b);
  }
  inline void Swap(Car* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Car* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Car* New() const final {
    return new Car();
  }

  Car* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Car>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Car& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Car& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Car* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.dreamview.Car";
  }
  protected:
  explicit Car(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelFieldNumber = 1,
    kColorFieldNumber = 6,
    kXFieldNumber = 3,
    kYFieldNumber = 4,
    kHeadingFieldNumber = 5,
    kHideLabelInLegendFieldNumber = 2,
  };
  // optional string label = 1;
  bool has_label() const;
  private:
  bool _internal_has_label() const;
  public:
  void clear_label();
  const std::string& label() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_label(ArgT0&& arg0, ArgT... args);
  std::string* mutable_label();
  PROTOBUF_MUST_USE_RESULT std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // optional string color = 6;
  bool has_color() const;
  private:
  bool _internal_has_color() const;
  public:
  void clear_color();
  const std::string& color() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_color(ArgT0&& arg0, ArgT... args);
  std::string* mutable_color();
  PROTOBUF_MUST_USE_RESULT std::string* release_color();
  void set_allocated_color(std::string* color);
  private:
  const std::string& _internal_color() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_color(const std::string& value);
  std::string* _internal_mutable_color();
  public:

  // optional double x = 3;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // optional double y = 4;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // optional double heading = 5;
  bool has_heading() const;
  private:
  bool _internal_has_heading() const;
  public:
  void clear_heading();
  double heading() const;
  void set_heading(double value);
  private:
  double _internal_heading() const;
  void _internal_set_heading(double value);
  public:

  // optional bool hide_label_in_legend = 2 [default = false];
  bool has_hide_label_in_legend() const;
  private:
  bool _internal_has_hide_label_in_legend() const;
  public:
  void clear_hide_label_in_legend();
  bool hide_label_in_legend() const;
  void set_hide_label_in_legend(bool value);
  private:
  bool _internal_hide_label_in_legend() const;
  void _internal_set_hide_label_in_legend(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.dreamview.Car)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr color_;
  double x_;
  double y_;
  double heading_;
  bool hide_label_in_legend_;
  friend struct ::TableStruct_modules_2fdreamview_2fproto_2fchart_2eproto;
};
// -------------------------------------------------------------------

class Chart final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.Chart) */ {
 public:
  inline Chart() : Chart(nullptr) {}
  ~Chart() override;
  explicit constexpr Chart(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Chart(const Chart& from);
  Chart(Chart&& from) noexcept
    : Chart() {
    *this = ::std::move(from);
  }

  inline Chart& operator=(const Chart& from) {
    CopyFrom(from);
    return *this;
  }
  inline Chart& operator=(Chart&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Chart& default_instance() {
    return *internal_default_instance();
  }
  static inline const Chart* internal_default_instance() {
    return reinterpret_cast<const Chart*>(
               &_Chart_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Chart& a, Chart& b) {
    a.Swap(&b);
  }
  inline void Swap(Chart* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Chart* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Chart* New() const final {
    return new Chart();
  }

  Chart* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Chart>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Chart& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Chart& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Chart* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.dreamview.Chart";
  }
  protected:
  explicit Chart(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLineFieldNumber = 3,
    kPolygonFieldNumber = 4,
    kCarFieldNumber = 5,
    kTitleFieldNumber = 1,
    kOptionsFieldNumber = 2,
  };
  // repeated .apollo.dreamview.Line line = 3;
  int line_size() const;
  private:
  int _internal_line_size() const;
  public:
  void clear_line();
  ::apollo::dreamview::Line* mutable_line(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::Line >*
      mutable_line();
  private:
  const ::apollo::dreamview::Line& _internal_line(int index) const;
  ::apollo::dreamview::Line* _internal_add_line();
  public:
  const ::apollo::dreamview::Line& line(int index) const;
  ::apollo::dreamview::Line* add_line();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::Line >&
      line() const;

  // repeated .apollo.dreamview.Polygon polygon = 4;
  int polygon_size() const;
  private:
  int _internal_polygon_size() const;
  public:
  void clear_polygon();
  ::apollo::dreamview::Polygon* mutable_polygon(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::Polygon >*
      mutable_polygon();
  private:
  const ::apollo::dreamview::Polygon& _internal_polygon(int index) const;
  ::apollo::dreamview::Polygon* _internal_add_polygon();
  public:
  const ::apollo::dreamview::Polygon& polygon(int index) const;
  ::apollo::dreamview::Polygon* add_polygon();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::Polygon >&
      polygon() const;

  // repeated .apollo.dreamview.Car car = 5;
  int car_size() const;
  private:
  int _internal_car_size() const;
  public:
  void clear_car();
  ::apollo::dreamview::Car* mutable_car(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::Car >*
      mutable_car();
  private:
  const ::apollo::dreamview::Car& _internal_car(int index) const;
  ::apollo::dreamview::Car* _internal_add_car();
  public:
  const ::apollo::dreamview::Car& car(int index) const;
  ::apollo::dreamview::Car* add_car();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::Car >&
      car() const;

  // optional string title = 1;
  bool has_title() const;
  private:
  bool _internal_has_title() const;
  public:
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_MUST_USE_RESULT std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // optional .apollo.dreamview.Options options = 2;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::apollo::dreamview::Options& options() const;
  PROTOBUF_MUST_USE_RESULT ::apollo::dreamview::Options* release_options();
  ::apollo::dreamview::Options* mutable_options();
  void set_allocated_options(::apollo::dreamview::Options* options);
  private:
  const ::apollo::dreamview::Options& _internal_options() const;
  ::apollo::dreamview::Options* _internal_mutable_options();
  public:
  void unsafe_arena_set_allocated_options(
      ::apollo::dreamview::Options* options);
  ::apollo::dreamview::Options* unsafe_arena_release_options();

  // @@protoc_insertion_point(class_scope:apollo.dreamview.Chart)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::Line > line_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::Polygon > polygon_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::Car > car_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::apollo::dreamview::Options* options_;
  friend struct ::TableStruct_modules_2fdreamview_2fproto_2fchart_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Options_Axis

// optional double min = 1;
inline bool Options_Axis::_internal_has_min() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Options_Axis::has_min() const {
  return _internal_has_min();
}
inline void Options_Axis::clear_min() {
  min_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double Options_Axis::_internal_min() const {
  return min_;
}
inline double Options_Axis::min() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Options.Axis.min)
  return _internal_min();
}
inline void Options_Axis::_internal_set_min(double value) {
  _has_bits_[0] |= 0x00000002u;
  min_ = value;
}
inline void Options_Axis::set_min(double value) {
  _internal_set_min(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.Options.Axis.min)
}

// optional double max = 2;
inline bool Options_Axis::_internal_has_max() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Options_Axis::has_max() const {
  return _internal_has_max();
}
inline void Options_Axis::clear_max() {
  max_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double Options_Axis::_internal_max() const {
  return max_;
}
inline double Options_Axis::max() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Options.Axis.max)
  return _internal_max();
}
inline void Options_Axis::_internal_set_max(double value) {
  _has_bits_[0] |= 0x00000004u;
  max_ = value;
}
inline void Options_Axis::set_max(double value) {
  _internal_set_max(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.Options.Axis.max)
}

// optional string label_string = 3;
inline bool Options_Axis::_internal_has_label_string() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Options_Axis::has_label_string() const {
  return _internal_has_label_string();
}
inline void Options_Axis::clear_label_string() {
  label_string_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Options_Axis::label_string() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Options.Axis.label_string)
  return _internal_label_string();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Options_Axis::set_label_string(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 label_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.dreamview.Options.Axis.label_string)
}
inline std::string* Options_Axis::mutable_label_string() {
  std::string* _s = _internal_mutable_label_string();
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.Options.Axis.label_string)
  return _s;
}
inline const std::string& Options_Axis::_internal_label_string() const {
  return label_string_.Get();
}
inline void Options_Axis::_internal_set_label_string(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  label_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Options_Axis::_internal_mutable_label_string() {
  _has_bits_[0] |= 0x00000001u;
  return label_string_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Options_Axis::release_label_string() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.Options.Axis.label_string)
  if (!_internal_has_label_string()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return label_string_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Options_Axis::set_allocated_label_string(std::string* label_string) {
  if (label_string != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  label_string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label_string,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.Options.Axis.label_string)
}

// optional double window_size = 4;
inline bool Options_Axis::_internal_has_window_size() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Options_Axis::has_window_size() const {
  return _internal_has_window_size();
}
inline void Options_Axis::clear_window_size() {
  window_size_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double Options_Axis::_internal_window_size() const {
  return window_size_;
}
inline double Options_Axis::window_size() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Options.Axis.window_size)
  return _internal_window_size();
}
inline void Options_Axis::_internal_set_window_size(double value) {
  _has_bits_[0] |= 0x00000008u;
  window_size_ = value;
}
inline void Options_Axis::set_window_size(double value) {
  _internal_set_window_size(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.Options.Axis.window_size)
}

// optional double step_size = 5;
inline bool Options_Axis::_internal_has_step_size() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Options_Axis::has_step_size() const {
  return _internal_has_step_size();
}
inline void Options_Axis::clear_step_size() {
  step_size_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double Options_Axis::_internal_step_size() const {
  return step_size_;
}
inline double Options_Axis::step_size() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Options.Axis.step_size)
  return _internal_step_size();
}
inline void Options_Axis::_internal_set_step_size(double value) {
  _has_bits_[0] |= 0x00000010u;
  step_size_ = value;
}
inline void Options_Axis::set_step_size(double value) {
  _internal_set_step_size(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.Options.Axis.step_size)
}

// optional double mid_value = 6;
inline bool Options_Axis::_internal_has_mid_value() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Options_Axis::has_mid_value() const {
  return _internal_has_mid_value();
}
inline void Options_Axis::clear_mid_value() {
  mid_value_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double Options_Axis::_internal_mid_value() const {
  return mid_value_;
}
inline double Options_Axis::mid_value() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Options.Axis.mid_value)
  return _internal_mid_value();
}
inline void Options_Axis::_internal_set_mid_value(double value) {
  _has_bits_[0] |= 0x00000020u;
  mid_value_ = value;
}
inline void Options_Axis::set_mid_value(double value) {
  _internal_set_mid_value(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.Options.Axis.mid_value)
}

// -------------------------------------------------------------------

// Options

// optional bool legend_display = 1 [default = true];
inline bool Options::_internal_has_legend_display() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Options::has_legend_display() const {
  return _internal_has_legend_display();
}
inline void Options::clear_legend_display() {
  legend_display_ = true;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool Options::_internal_legend_display() const {
  return legend_display_;
}
inline bool Options::legend_display() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Options.legend_display)
  return _internal_legend_display();
}
inline void Options::_internal_set_legend_display(bool value) {
  _has_bits_[0] |= 0x00000010u;
  legend_display_ = value;
}
inline void Options::set_legend_display(bool value) {
  _internal_set_legend_display(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.Options.legend_display)
}

// optional .apollo.dreamview.Options.Axis x = 2;
inline bool Options::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || x_ != nullptr);
  return value;
}
inline bool Options::has_x() const {
  return _internal_has_x();
}
inline void Options::clear_x() {
  if (x_ != nullptr) x_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::dreamview::Options_Axis& Options::_internal_x() const {
  const ::apollo::dreamview::Options_Axis* p = x_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::dreamview::Options_Axis&>(
      ::apollo::dreamview::_Options_Axis_default_instance_);
}
inline const ::apollo::dreamview::Options_Axis& Options::x() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Options.x)
  return _internal_x();
}
inline void Options::unsafe_arena_set_allocated_x(
    ::apollo::dreamview::Options_Axis* x) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(x_);
  }
  x_ = x;
  if (x) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.dreamview.Options.x)
}
inline ::apollo::dreamview::Options_Axis* Options::release_x() {
  _has_bits_[0] &= ~0x00000001u;
  ::apollo::dreamview::Options_Axis* temp = x_;
  x_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::dreamview::Options_Axis* Options::unsafe_arena_release_x() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.Options.x)
  _has_bits_[0] &= ~0x00000001u;
  ::apollo::dreamview::Options_Axis* temp = x_;
  x_ = nullptr;
  return temp;
}
inline ::apollo::dreamview::Options_Axis* Options::_internal_mutable_x() {
  _has_bits_[0] |= 0x00000001u;
  if (x_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::dreamview::Options_Axis>(GetArenaForAllocation());
    x_ = p;
  }
  return x_;
}
inline ::apollo::dreamview::Options_Axis* Options::mutable_x() {
  ::apollo::dreamview::Options_Axis* _msg = _internal_mutable_x();
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.Options.x)
  return _msg;
}
inline void Options::set_allocated_x(::apollo::dreamview::Options_Axis* x) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete x_;
  }
  if (x) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::apollo::dreamview::Options_Axis>::GetOwningArena(x);
    if (message_arena != submessage_arena) {
      x = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, x, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  x_ = x;
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.Options.x)
}

// optional .apollo.dreamview.Options.Axis y = 3;
inline bool Options::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || y_ != nullptr);
  return value;
}
inline bool Options::has_y() const {
  return _internal_has_y();
}
inline void Options::clear_y() {
  if (y_ != nullptr) y_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::dreamview::Options_Axis& Options::_internal_y() const {
  const ::apollo::dreamview::Options_Axis* p = y_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::dreamview::Options_Axis&>(
      ::apollo::dreamview::_Options_Axis_default_instance_);
}
inline const ::apollo::dreamview::Options_Axis& Options::y() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Options.y)
  return _internal_y();
}
inline void Options::unsafe_arena_set_allocated_y(
    ::apollo::dreamview::Options_Axis* y) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(y_);
  }
  y_ = y;
  if (y) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.dreamview.Options.y)
}
inline ::apollo::dreamview::Options_Axis* Options::release_y() {
  _has_bits_[0] &= ~0x00000002u;
  ::apollo::dreamview::Options_Axis* temp = y_;
  y_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::dreamview::Options_Axis* Options::unsafe_arena_release_y() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.Options.y)
  _has_bits_[0] &= ~0x00000002u;
  ::apollo::dreamview::Options_Axis* temp = y_;
  y_ = nullptr;
  return temp;
}
inline ::apollo::dreamview::Options_Axis* Options::_internal_mutable_y() {
  _has_bits_[0] |= 0x00000002u;
  if (y_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::dreamview::Options_Axis>(GetArenaForAllocation());
    y_ = p;
  }
  return y_;
}
inline ::apollo::dreamview::Options_Axis* Options::mutable_y() {
  ::apollo::dreamview::Options_Axis* _msg = _internal_mutable_y();
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.Options.y)
  return _msg;
}
inline void Options::set_allocated_y(::apollo::dreamview::Options_Axis* y) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete y_;
  }
  if (y) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::apollo::dreamview::Options_Axis>::GetOwningArena(y);
    if (message_arena != submessage_arena) {
      y = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, y, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  y_ = y;
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.Options.y)
}

// optional double aspect_ratio = 4;
inline bool Options::_internal_has_aspect_ratio() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Options::has_aspect_ratio() const {
  return _internal_has_aspect_ratio();
}
inline void Options::clear_aspect_ratio() {
  aspect_ratio_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double Options::_internal_aspect_ratio() const {
  return aspect_ratio_;
}
inline double Options::aspect_ratio() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Options.aspect_ratio)
  return _internal_aspect_ratio();
}
inline void Options::_internal_set_aspect_ratio(double value) {
  _has_bits_[0] |= 0x00000004u;
  aspect_ratio_ = value;
}
inline void Options::set_aspect_ratio(double value) {
  _internal_set_aspect_ratio(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.Options.aspect_ratio)
}

// optional bool sync_xy_window_size = 5 [default = false];
inline bool Options::_internal_has_sync_xy_window_size() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Options::has_sync_xy_window_size() const {
  return _internal_has_sync_xy_window_size();
}
inline void Options::clear_sync_xy_window_size() {
  sync_xy_window_size_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool Options::_internal_sync_xy_window_size() const {
  return sync_xy_window_size_;
}
inline bool Options::sync_xy_window_size() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Options.sync_xy_window_size)
  return _internal_sync_xy_window_size();
}
inline void Options::_internal_set_sync_xy_window_size(bool value) {
  _has_bits_[0] |= 0x00000008u;
  sync_xy_window_size_ = value;
}
inline void Options::set_sync_xy_window_size(bool value) {
  _internal_set_sync_xy_window_size(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.Options.sync_xy_window_size)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Line

// optional string label = 1;
inline bool Line::_internal_has_label() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Line::has_label() const {
  return _internal_has_label();
}
inline void Line::clear_label() {
  label_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Line::label() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Line.label)
  return _internal_label();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Line::set_label(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.dreamview.Line.label)
}
inline std::string* Line::mutable_label() {
  std::string* _s = _internal_mutable_label();
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.Line.label)
  return _s;
}
inline const std::string& Line::_internal_label() const {
  return label_.Get();
}
inline void Line::_internal_set_label(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Line::_internal_mutable_label() {
  _has_bits_[0] |= 0x00000001u;
  return label_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Line::release_label() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.Line.label)
  if (!_internal_has_label()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return label_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Line::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  label_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.Line.label)
}

// optional bool hide_label_in_legend = 2 [default = false];
inline bool Line::_internal_has_hide_label_in_legend() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Line::has_hide_label_in_legend() const {
  return _internal_has_hide_label_in_legend();
}
inline void Line::clear_hide_label_in_legend() {
  hide_label_in_legend_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool Line::_internal_hide_label_in_legend() const {
  return hide_label_in_legend_;
}
inline bool Line::hide_label_in_legend() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Line.hide_label_in_legend)
  return _internal_hide_label_in_legend();
}
inline void Line::_internal_set_hide_label_in_legend(bool value) {
  _has_bits_[0] |= 0x00000002u;
  hide_label_in_legend_ = value;
}
inline void Line::set_hide_label_in_legend(bool value) {
  _internal_set_hide_label_in_legend(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.Line.hide_label_in_legend)
}

// repeated .apollo.common.Point2D point = 3;
inline int Line::_internal_point_size() const {
  return point_.size();
}
inline int Line::point_size() const {
  return _internal_point_size();
}
inline ::apollo::common::Point2D* Line::mutable_point(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.Line.point)
  return point_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::Point2D >*
Line::mutable_point() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.Line.point)
  return &point_;
}
inline const ::apollo::common::Point2D& Line::_internal_point(int index) const {
  return point_.Get(index);
}
inline const ::apollo::common::Point2D& Line::point(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Line.point)
  return _internal_point(index);
}
inline ::apollo::common::Point2D* Line::_internal_add_point() {
  return point_.Add();
}
inline ::apollo::common::Point2D* Line::add_point() {
  ::apollo::common::Point2D* _add = _internal_add_point();
  // @@protoc_insertion_point(field_add:apollo.dreamview.Line.point)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::Point2D >&
Line::point() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.Line.point)
  return point_;
}

// map<string, string> properties = 4;
inline int Line::_internal_properties_size() const {
  return properties_.size();
}
inline int Line::properties_size() const {
  return _internal_properties_size();
}
inline void Line::clear_properties() {
  properties_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Line::_internal_properties() const {
  return properties_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Line::properties() const {
  // @@protoc_insertion_point(field_map:apollo.dreamview.Line.properties)
  return _internal_properties();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Line::_internal_mutable_properties() {
  return properties_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Line::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_map:apollo.dreamview.Line.properties)
  return _internal_mutable_properties();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Polygon

// optional string label = 1;
inline bool Polygon::_internal_has_label() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Polygon::has_label() const {
  return _internal_has_label();
}
inline void Polygon::clear_label() {
  label_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Polygon::label() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Polygon.label)
  return _internal_label();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Polygon::set_label(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.dreamview.Polygon.label)
}
inline std::string* Polygon::mutable_label() {
  std::string* _s = _internal_mutable_label();
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.Polygon.label)
  return _s;
}
inline const std::string& Polygon::_internal_label() const {
  return label_.Get();
}
inline void Polygon::_internal_set_label(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Polygon::_internal_mutable_label() {
  _has_bits_[0] |= 0x00000001u;
  return label_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Polygon::release_label() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.Polygon.label)
  if (!_internal_has_label()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return label_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Polygon::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  label_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.Polygon.label)
}

// optional bool hide_label_in_legend = 2 [default = false];
inline bool Polygon::_internal_has_hide_label_in_legend() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Polygon::has_hide_label_in_legend() const {
  return _internal_has_hide_label_in_legend();
}
inline void Polygon::clear_hide_label_in_legend() {
  hide_label_in_legend_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool Polygon::_internal_hide_label_in_legend() const {
  return hide_label_in_legend_;
}
inline bool Polygon::hide_label_in_legend() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Polygon.hide_label_in_legend)
  return _internal_hide_label_in_legend();
}
inline void Polygon::_internal_set_hide_label_in_legend(bool value) {
  _has_bits_[0] |= 0x00000002u;
  hide_label_in_legend_ = value;
}
inline void Polygon::set_hide_label_in_legend(bool value) {
  _internal_set_hide_label_in_legend(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.Polygon.hide_label_in_legend)
}

// repeated .apollo.common.Point2D point = 3;
inline int Polygon::_internal_point_size() const {
  return point_.size();
}
inline int Polygon::point_size() const {
  return _internal_point_size();
}
inline ::apollo::common::Point2D* Polygon::mutable_point(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.Polygon.point)
  return point_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::Point2D >*
Polygon::mutable_point() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.Polygon.point)
  return &point_;
}
inline const ::apollo::common::Point2D& Polygon::_internal_point(int index) const {
  return point_.Get(index);
}
inline const ::apollo::common::Point2D& Polygon::point(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Polygon.point)
  return _internal_point(index);
}
inline ::apollo::common::Point2D* Polygon::_internal_add_point() {
  return point_.Add();
}
inline ::apollo::common::Point2D* Polygon::add_point() {
  ::apollo::common::Point2D* _add = _internal_add_point();
  // @@protoc_insertion_point(field_add:apollo.dreamview.Polygon.point)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::Point2D >&
Polygon::point() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.Polygon.point)
  return point_;
}

// map<string, string> properties = 4;
inline int Polygon::_internal_properties_size() const {
  return properties_.size();
}
inline int Polygon::properties_size() const {
  return _internal_properties_size();
}
inline void Polygon::clear_properties() {
  properties_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Polygon::_internal_properties() const {
  return properties_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Polygon::properties() const {
  // @@protoc_insertion_point(field_map:apollo.dreamview.Polygon.properties)
  return _internal_properties();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Polygon::_internal_mutable_properties() {
  return properties_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Polygon::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_map:apollo.dreamview.Polygon.properties)
  return _internal_mutable_properties();
}

// -------------------------------------------------------------------

// Car

// optional string label = 1;
inline bool Car::_internal_has_label() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Car::has_label() const {
  return _internal_has_label();
}
inline void Car::clear_label() {
  label_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Car::label() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Car.label)
  return _internal_label();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Car::set_label(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.dreamview.Car.label)
}
inline std::string* Car::mutable_label() {
  std::string* _s = _internal_mutable_label();
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.Car.label)
  return _s;
}
inline const std::string& Car::_internal_label() const {
  return label_.Get();
}
inline void Car::_internal_set_label(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Car::_internal_mutable_label() {
  _has_bits_[0] |= 0x00000001u;
  return label_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Car::release_label() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.Car.label)
  if (!_internal_has_label()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return label_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Car::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  label_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.Car.label)
}

// optional bool hide_label_in_legend = 2 [default = false];
inline bool Car::_internal_has_hide_label_in_legend() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Car::has_hide_label_in_legend() const {
  return _internal_has_hide_label_in_legend();
}
inline void Car::clear_hide_label_in_legend() {
  hide_label_in_legend_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool Car::_internal_hide_label_in_legend() const {
  return hide_label_in_legend_;
}
inline bool Car::hide_label_in_legend() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Car.hide_label_in_legend)
  return _internal_hide_label_in_legend();
}
inline void Car::_internal_set_hide_label_in_legend(bool value) {
  _has_bits_[0] |= 0x00000020u;
  hide_label_in_legend_ = value;
}
inline void Car::set_hide_label_in_legend(bool value) {
  _internal_set_hide_label_in_legend(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.Car.hide_label_in_legend)
}

// optional double x = 3;
inline bool Car::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Car::has_x() const {
  return _internal_has_x();
}
inline void Car::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double Car::_internal_x() const {
  return x_;
}
inline double Car::x() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Car.x)
  return _internal_x();
}
inline void Car::_internal_set_x(double value) {
  _has_bits_[0] |= 0x00000004u;
  x_ = value;
}
inline void Car::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.Car.x)
}

// optional double y = 4;
inline bool Car::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Car::has_y() const {
  return _internal_has_y();
}
inline void Car::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double Car::_internal_y() const {
  return y_;
}
inline double Car::y() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Car.y)
  return _internal_y();
}
inline void Car::_internal_set_y(double value) {
  _has_bits_[0] |= 0x00000008u;
  y_ = value;
}
inline void Car::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.Car.y)
}

// optional double heading = 5;
inline bool Car::_internal_has_heading() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Car::has_heading() const {
  return _internal_has_heading();
}
inline void Car::clear_heading() {
  heading_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double Car::_internal_heading() const {
  return heading_;
}
inline double Car::heading() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Car.heading)
  return _internal_heading();
}
inline void Car::_internal_set_heading(double value) {
  _has_bits_[0] |= 0x00000010u;
  heading_ = value;
}
inline void Car::set_heading(double value) {
  _internal_set_heading(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.Car.heading)
}

// optional string color = 6;
inline bool Car::_internal_has_color() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Car::has_color() const {
  return _internal_has_color();
}
inline void Car::clear_color() {
  color_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Car::color() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Car.color)
  return _internal_color();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Car::set_color(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 color_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.dreamview.Car.color)
}
inline std::string* Car::mutable_color() {
  std::string* _s = _internal_mutable_color();
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.Car.color)
  return _s;
}
inline const std::string& Car::_internal_color() const {
  return color_.Get();
}
inline void Car::_internal_set_color(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  color_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Car::_internal_mutable_color() {
  _has_bits_[0] |= 0x00000002u;
  return color_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Car::release_color() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.Car.color)
  if (!_internal_has_color()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return color_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Car::set_allocated_color(std::string* color) {
  if (color != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  color_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), color,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.Car.color)
}

// -------------------------------------------------------------------

// Chart

// optional string title = 1;
inline bool Chart::_internal_has_title() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Chart::has_title() const {
  return _internal_has_title();
}
inline void Chart::clear_title() {
  title_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Chart::title() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Chart.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Chart::set_title(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.dreamview.Chart.title)
}
inline std::string* Chart::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.Chart.title)
  return _s;
}
inline const std::string& Chart::_internal_title() const {
  return title_.Get();
}
inline void Chart::_internal_set_title(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Chart::_internal_mutable_title() {
  _has_bits_[0] |= 0x00000001u;
  return title_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Chart::release_title() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.Chart.title)
  if (!_internal_has_title()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return title_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Chart::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.Chart.title)
}

// optional .apollo.dreamview.Options options = 2;
inline bool Chart::_internal_has_options() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || options_ != nullptr);
  return value;
}
inline bool Chart::has_options() const {
  return _internal_has_options();
}
inline void Chart::clear_options() {
  if (options_ != nullptr) options_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::dreamview::Options& Chart::_internal_options() const {
  const ::apollo::dreamview::Options* p = options_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::dreamview::Options&>(
      ::apollo::dreamview::_Options_default_instance_);
}
inline const ::apollo::dreamview::Options& Chart::options() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Chart.options)
  return _internal_options();
}
inline void Chart::unsafe_arena_set_allocated_options(
    ::apollo::dreamview::Options* options) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(options_);
  }
  options_ = options;
  if (options) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.dreamview.Chart.options)
}
inline ::apollo::dreamview::Options* Chart::release_options() {
  _has_bits_[0] &= ~0x00000002u;
  ::apollo::dreamview::Options* temp = options_;
  options_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::dreamview::Options* Chart::unsafe_arena_release_options() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.Chart.options)
  _has_bits_[0] &= ~0x00000002u;
  ::apollo::dreamview::Options* temp = options_;
  options_ = nullptr;
  return temp;
}
inline ::apollo::dreamview::Options* Chart::_internal_mutable_options() {
  _has_bits_[0] |= 0x00000002u;
  if (options_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::dreamview::Options>(GetArenaForAllocation());
    options_ = p;
  }
  return options_;
}
inline ::apollo::dreamview::Options* Chart::mutable_options() {
  ::apollo::dreamview::Options* _msg = _internal_mutable_options();
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.Chart.options)
  return _msg;
}
inline void Chart::set_allocated_options(::apollo::dreamview::Options* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete options_;
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::apollo::dreamview::Options>::GetOwningArena(options);
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  options_ = options;
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.Chart.options)
}

// repeated .apollo.dreamview.Line line = 3;
inline int Chart::_internal_line_size() const {
  return line_.size();
}
inline int Chart::line_size() const {
  return _internal_line_size();
}
inline void Chart::clear_line() {
  line_.Clear();
}
inline ::apollo::dreamview::Line* Chart::mutable_line(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.Chart.line)
  return line_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::Line >*
Chart::mutable_line() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.Chart.line)
  return &line_;
}
inline const ::apollo::dreamview::Line& Chart::_internal_line(int index) const {
  return line_.Get(index);
}
inline const ::apollo::dreamview::Line& Chart::line(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Chart.line)
  return _internal_line(index);
}
inline ::apollo::dreamview::Line* Chart::_internal_add_line() {
  return line_.Add();
}
inline ::apollo::dreamview::Line* Chart::add_line() {
  ::apollo::dreamview::Line* _add = _internal_add_line();
  // @@protoc_insertion_point(field_add:apollo.dreamview.Chart.line)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::Line >&
Chart::line() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.Chart.line)
  return line_;
}

// repeated .apollo.dreamview.Polygon polygon = 4;
inline int Chart::_internal_polygon_size() const {
  return polygon_.size();
}
inline int Chart::polygon_size() const {
  return _internal_polygon_size();
}
inline void Chart::clear_polygon() {
  polygon_.Clear();
}
inline ::apollo::dreamview::Polygon* Chart::mutable_polygon(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.Chart.polygon)
  return polygon_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::Polygon >*
Chart::mutable_polygon() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.Chart.polygon)
  return &polygon_;
}
inline const ::apollo::dreamview::Polygon& Chart::_internal_polygon(int index) const {
  return polygon_.Get(index);
}
inline const ::apollo::dreamview::Polygon& Chart::polygon(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Chart.polygon)
  return _internal_polygon(index);
}
inline ::apollo::dreamview::Polygon* Chart::_internal_add_polygon() {
  return polygon_.Add();
}
inline ::apollo::dreamview::Polygon* Chart::add_polygon() {
  ::apollo::dreamview::Polygon* _add = _internal_add_polygon();
  // @@protoc_insertion_point(field_add:apollo.dreamview.Chart.polygon)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::Polygon >&
Chart::polygon() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.Chart.polygon)
  return polygon_;
}

// repeated .apollo.dreamview.Car car = 5;
inline int Chart::_internal_car_size() const {
  return car_.size();
}
inline int Chart::car_size() const {
  return _internal_car_size();
}
inline void Chart::clear_car() {
  car_.Clear();
}
inline ::apollo::dreamview::Car* Chart::mutable_car(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.Chart.car)
  return car_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::Car >*
Chart::mutable_car() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.Chart.car)
  return &car_;
}
inline const ::apollo::dreamview::Car& Chart::_internal_car(int index) const {
  return car_.Get(index);
}
inline const ::apollo::dreamview::Car& Chart::car(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Chart.car)
  return _internal_car(index);
}
inline ::apollo::dreamview::Car* Chart::_internal_add_car() {
  return car_.Add();
}
inline ::apollo::dreamview::Car* Chart::add_car() {
  ::apollo::dreamview::Car* _add = _internal_add_car();
  // @@protoc_insertion_point(field_add:apollo.dreamview.Chart.car)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::Car >&
Chart::car() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.Chart.car)
  return car_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace dreamview
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fdreamview_2fproto_2fchart_2eproto
