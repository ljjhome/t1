// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/dreamview/proto/camera_update.proto

#include "modules/dreamview/proto/camera_update.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace apollo {
namespace dreamview {
constexpr CameraUpdate::CameraUpdate(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : localization_()
  , localization2camera_tf_()
  , image_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , image_aspect_ratio_(0){}
struct CameraUpdateDefaultTypeInternal {
  constexpr CameraUpdateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CameraUpdateDefaultTypeInternal() {}
  union {
    CameraUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CameraUpdateDefaultTypeInternal _CameraUpdate_default_instance_;
}  // namespace dreamview
}  // namespace apollo
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fdreamview_2fproto_2fcamera_5fupdate_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_modules_2fdreamview_2fproto_2fcamera_5fupdate_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fdreamview_2fproto_2fcamera_5fupdate_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fdreamview_2fproto_2fcamera_5fupdate_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::CameraUpdate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::CameraUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::CameraUpdate, localization_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::CameraUpdate, localization2camera_tf_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::CameraUpdate, image_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::CameraUpdate, image_aspect_ratio_),
  ~0u,
  ~0u,
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, -1, sizeof(::apollo::dreamview::CameraUpdate)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::dreamview::_CameraUpdate_default_instance_),
};

const char descriptor_table_protodef_modules_2fdreamview_2fproto_2fcamera_5fupdate_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n+modules/dreamview/proto/camera_update."
  "proto\022\020apollo.dreamview\"o\n\014CameraUpdate\022"
  "\024\n\014localization\030\001 \003(\001\022\036\n\026localization2ca"
  "mera_tf\030\002 \003(\001\022\r\n\005image\030\003 \001(\014\022\032\n\022image_as"
  "pect_ratio\030\004 \001(\001"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fdreamview_2fproto_2fcamera_5fupdate_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fdreamview_2fproto_2fcamera_5fupdate_2eproto = {
  false, false, 176, descriptor_table_protodef_modules_2fdreamview_2fproto_2fcamera_5fupdate_2eproto, "modules/dreamview/proto/camera_update.proto", 
  &descriptor_table_modules_2fdreamview_2fproto_2fcamera_5fupdate_2eproto_once, nullptr, 0, 1,
  schemas, file_default_instances, TableStruct_modules_2fdreamview_2fproto_2fcamera_5fupdate_2eproto::offsets,
  file_level_metadata_modules_2fdreamview_2fproto_2fcamera_5fupdate_2eproto, file_level_enum_descriptors_modules_2fdreamview_2fproto_2fcamera_5fupdate_2eproto, file_level_service_descriptors_modules_2fdreamview_2fproto_2fcamera_5fupdate_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_modules_2fdreamview_2fproto_2fcamera_5fupdate_2eproto_getter() {
  return &descriptor_table_modules_2fdreamview_2fproto_2fcamera_5fupdate_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_modules_2fdreamview_2fproto_2fcamera_5fupdate_2eproto(&descriptor_table_modules_2fdreamview_2fproto_2fcamera_5fupdate_2eproto);
namespace apollo {
namespace dreamview {

// ===================================================================

class CameraUpdate::_Internal {
 public:
  using HasBits = decltype(std::declval<CameraUpdate>()._has_bits_);
  static void set_has_image(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_image_aspect_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CameraUpdate::CameraUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  localization_(arena),
  localization2camera_tf_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.dreamview.CameraUpdate)
}
CameraUpdate::CameraUpdate(const CameraUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      localization_(from.localization_),
      localization2camera_tf_(from.localization2camera_tf_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_image()) {
    image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_image(), 
      GetArenaForAllocation());
  }
  image_aspect_ratio_ = from.image_aspect_ratio_;
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.CameraUpdate)
}

void CameraUpdate::SharedCtor() {
image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
image_aspect_ratio_ = 0;
}

CameraUpdate::~CameraUpdate() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.CameraUpdate)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CameraUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  image_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CameraUpdate::ArenaDtor(void* object) {
  CameraUpdate* _this = reinterpret_cast< CameraUpdate* >(object);
  (void)_this;
}
void CameraUpdate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CameraUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CameraUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.CameraUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  localization_.Clear();
  localization2camera_tf_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    image_.ClearNonDefaultToEmpty();
  }
  image_aspect_ratio_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CameraUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated double localization = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_localization(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<9>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_localization(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated double localization2camera_tf = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_localization2camera_tf(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<17>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_localization2camera_tf(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes image = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_image();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double image_aspect_ratio = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_image_aspect_ratio(&has_bits);
          image_aspect_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CameraUpdate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.CameraUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double localization = 1;
  for (int i = 0, n = this->_internal_localization_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_localization(i), target);
  }

  // repeated double localization2camera_tf = 2;
  for (int i = 0, n = this->_internal_localization2camera_tf_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_localization2camera_tf(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bytes image = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_image(), target);
  }

  // optional double image_aspect_ratio = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_image_aspect_ratio(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.CameraUpdate)
  return target;
}

size_t CameraUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.CameraUpdate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double localization = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_localization_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_localization_size());
    total_size += data_size;
  }

  // repeated double localization2camera_tf = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_localization2camera_tf_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_localization2camera_tf_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes image = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_image());
    }

    // optional double image_aspect_ratio = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CameraUpdate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CameraUpdate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CameraUpdate::GetClassData() const { return &_class_data_; }

void CameraUpdate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CameraUpdate *>(to)->MergeFrom(
      static_cast<const CameraUpdate &>(from));
}


void CameraUpdate::MergeFrom(const CameraUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.CameraUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  localization_.MergeFrom(from.localization_);
  localization2camera_tf_.MergeFrom(from.localization2camera_tf_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_image(from._internal_image());
    }
    if (cached_has_bits & 0x00000002u) {
      image_aspect_ratio_ = from.image_aspect_ratio_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CameraUpdate::CopyFrom(const CameraUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.CameraUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraUpdate::IsInitialized() const {
  return true;
}

void CameraUpdate::InternalSwap(CameraUpdate* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  localization_.InternalSwap(&other->localization_);
  localization2camera_tf_.InternalSwap(&other->localization2camera_tf_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &image_, lhs_arena,
      &other->image_, rhs_arena
  );
  swap(image_aspect_ratio_, other->image_aspect_ratio_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CameraUpdate::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fdreamview_2fproto_2fcamera_5fupdate_2eproto_getter, &descriptor_table_modules_2fdreamview_2fproto_2fcamera_5fupdate_2eproto_once,
      file_level_metadata_modules_2fdreamview_2fproto_2fcamera_5fupdate_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace dreamview
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::dreamview::CameraUpdate* Arena::CreateMaybeMessage< ::apollo::dreamview::CameraUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::dreamview::CameraUpdate >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
