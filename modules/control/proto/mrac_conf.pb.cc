// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/control/proto/mrac_conf.proto

#include "modules/control/proto/mrac_conf.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace apollo {
namespace control {
constexpr MracConf::MracConf(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : adaption_state_gain_()
  , adaption_matrix_p_()
  , anti_windup_compensation_gain_()
  , reference_time_constant_(0)
  , reference_natural_frequency_(0)
  , reference_damping_ratio_(0)
  , adaption_desired_gain_(0)
  , adaption_nonlinear_gain_(0)
  , clamping_time_constant_(0)
  , mrac_model_order_(1)
  , mrac_saturation_level_(1){}
struct MracConfDefaultTypeInternal {
  constexpr MracConfDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MracConfDefaultTypeInternal() {}
  union {
    MracConf _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MracConfDefaultTypeInternal _MracConf_default_instance_;
}  // namespace control
}  // namespace apollo
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fcontrol_2fproto_2fmrac_5fconf_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_modules_2fcontrol_2fproto_2fmrac_5fconf_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fcontrol_2fproto_2fmrac_5fconf_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fcontrol_2fproto_2fmrac_5fconf_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::control::MracConf, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::MracConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::control::MracConf, mrac_model_order_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::MracConf, reference_time_constant_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::MracConf, reference_natural_frequency_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::MracConf, reference_damping_ratio_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::MracConf, adaption_state_gain_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::MracConf, adaption_desired_gain_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::MracConf, adaption_nonlinear_gain_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::MracConf, adaption_matrix_p_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::MracConf, mrac_saturation_level_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::MracConf, anti_windup_compensation_gain_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::MracConf, clamping_time_constant_),
  6,
  0,
  1,
  2,
  ~0u,
  3,
  4,
  ~0u,
  7,
  ~0u,
  5,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 17, -1, sizeof(::apollo::control::MracConf)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::control::_MracConf_default_instance_),
};

const char descriptor_table_protodef_modules_2fcontrol_2fproto_2fmrac_5fconf_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n%modules/control/proto/mrac_conf.proto\022"
  "\016apollo.control\"\357\002\n\010MracConf\022\033\n\020mrac_mod"
  "el_order\030\001 \001(\005:\0011\022\037\n\027reference_time_cons"
  "tant\030\002 \001(\001\022#\n\033reference_natural_frequenc"
  "y\030\003 \001(\001\022\037\n\027reference_damping_ratio\030\004 \001(\001"
  "\022\033\n\023adaption_state_gain\030\005 \003(\001\022\035\n\025adaptio"
  "n_desired_gain\030\006 \001(\001\022\037\n\027adaption_nonline"
  "ar_gain\030\007 \001(\001\022\031\n\021adaption_matrix_p\030\010 \003(\001"
  "\022 \n\025mrac_saturation_level\030\t \001(\001:\0011\022%\n\035an"
  "ti_windup_compensation_gain\030\n \003(\001\022\036\n\026cla"
  "mping_time_constant\030\013 \001(\001"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fcontrol_2fproto_2fmrac_5fconf_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fcontrol_2fproto_2fmrac_5fconf_2eproto = {
  false, false, 425, descriptor_table_protodef_modules_2fcontrol_2fproto_2fmrac_5fconf_2eproto, "modules/control/proto/mrac_conf.proto", 
  &descriptor_table_modules_2fcontrol_2fproto_2fmrac_5fconf_2eproto_once, nullptr, 0, 1,
  schemas, file_default_instances, TableStruct_modules_2fcontrol_2fproto_2fmrac_5fconf_2eproto::offsets,
  file_level_metadata_modules_2fcontrol_2fproto_2fmrac_5fconf_2eproto, file_level_enum_descriptors_modules_2fcontrol_2fproto_2fmrac_5fconf_2eproto, file_level_service_descriptors_modules_2fcontrol_2fproto_2fmrac_5fconf_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_modules_2fcontrol_2fproto_2fmrac_5fconf_2eproto_getter() {
  return &descriptor_table_modules_2fcontrol_2fproto_2fmrac_5fconf_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_modules_2fcontrol_2fproto_2fmrac_5fconf_2eproto(&descriptor_table_modules_2fcontrol_2fproto_2fmrac_5fconf_2eproto);
namespace apollo {
namespace control {

// ===================================================================

class MracConf::_Internal {
 public:
  using HasBits = decltype(std::declval<MracConf>()._has_bits_);
  static void set_has_mrac_model_order(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_reference_time_constant(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_reference_natural_frequency(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_reference_damping_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_adaption_desired_gain(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_adaption_nonlinear_gain(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_mrac_saturation_level(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_clamping_time_constant(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

MracConf::MracConf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  adaption_state_gain_(arena),
  adaption_matrix_p_(arena),
  anti_windup_compensation_gain_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.control.MracConf)
}
MracConf::MracConf(const MracConf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      adaption_state_gain_(from.adaption_state_gain_),
      adaption_matrix_p_(from.adaption_matrix_p_),
      anti_windup_compensation_gain_(from.anti_windup_compensation_gain_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&reference_time_constant_, &from.reference_time_constant_,
    static_cast<size_t>(reinterpret_cast<char*>(&mrac_saturation_level_) -
    reinterpret_cast<char*>(&reference_time_constant_)) + sizeof(mrac_saturation_level_));
  // @@protoc_insertion_point(copy_constructor:apollo.control.MracConf)
}

void MracConf::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&reference_time_constant_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&clamping_time_constant_) -
    reinterpret_cast<char*>(&reference_time_constant_)) + sizeof(clamping_time_constant_));
mrac_model_order_ = 1;
mrac_saturation_level_ = 1;
}

MracConf::~MracConf() {
  // @@protoc_insertion_point(destructor:apollo.control.MracConf)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MracConf::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MracConf::ArenaDtor(void* object) {
  MracConf* _this = reinterpret_cast< MracConf* >(object);
  (void)_this;
}
void MracConf::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MracConf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MracConf::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.control.MracConf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  adaption_state_gain_.Clear();
  adaption_matrix_p_.Clear();
  anti_windup_compensation_gain_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&reference_time_constant_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&clamping_time_constant_) -
        reinterpret_cast<char*>(&reference_time_constant_)) + sizeof(clamping_time_constant_));
    mrac_model_order_ = 1;
    mrac_saturation_level_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MracConf::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 mrac_model_order = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_mrac_model_order(&has_bits);
          mrac_model_order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double reference_time_constant = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_reference_time_constant(&has_bits);
          reference_time_constant_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double reference_natural_frequency = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_reference_natural_frequency(&has_bits);
          reference_natural_frequency_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double reference_damping_ratio = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_reference_damping_ratio(&has_bits);
          reference_damping_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated double adaption_state_gain = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_adaption_state_gain(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<41>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_adaption_state_gain(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double adaption_desired_gain = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_adaption_desired_gain(&has_bits);
          adaption_desired_gain_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double adaption_nonlinear_gain = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_adaption_nonlinear_gain(&has_bits);
          adaption_nonlinear_gain_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated double adaption_matrix_p = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_adaption_matrix_p(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<65>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_adaption_matrix_p(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double mrac_saturation_level = 9 [default = 1];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_mrac_saturation_level(&has_bits);
          mrac_saturation_level_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated double anti_windup_compensation_gain = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_anti_windup_compensation_gain(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<81>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_anti_windup_compensation_gain(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double clamping_time_constant = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_clamping_time_constant(&has_bits);
          clamping_time_constant_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MracConf::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.control.MracConf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 mrac_model_order = 1 [default = 1];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_mrac_model_order(), target);
  }

  // optional double reference_time_constant = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_reference_time_constant(), target);
  }

  // optional double reference_natural_frequency = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_reference_natural_frequency(), target);
  }

  // optional double reference_damping_ratio = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_reference_damping_ratio(), target);
  }

  // repeated double adaption_state_gain = 5;
  for (int i = 0, n = this->_internal_adaption_state_gain_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_adaption_state_gain(i), target);
  }

  // optional double adaption_desired_gain = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_adaption_desired_gain(), target);
  }

  // optional double adaption_nonlinear_gain = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_adaption_nonlinear_gain(), target);
  }

  // repeated double adaption_matrix_p = 8;
  for (int i = 0, n = this->_internal_adaption_matrix_p_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_adaption_matrix_p(i), target);
  }

  // optional double mrac_saturation_level = 9 [default = 1];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_mrac_saturation_level(), target);
  }

  // repeated double anti_windup_compensation_gain = 10;
  for (int i = 0, n = this->_internal_anti_windup_compensation_gain_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_anti_windup_compensation_gain(i), target);
  }

  // optional double clamping_time_constant = 11;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_clamping_time_constant(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.control.MracConf)
  return target;
}

size_t MracConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.control.MracConf)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double adaption_state_gain = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_adaption_state_gain_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_adaption_state_gain_size());
    total_size += data_size;
  }

  // repeated double adaption_matrix_p = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_adaption_matrix_p_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_adaption_matrix_p_size());
    total_size += data_size;
  }

  // repeated double anti_windup_compensation_gain = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_anti_windup_compensation_gain_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_anti_windup_compensation_gain_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional double reference_time_constant = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double reference_natural_frequency = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double reference_damping_ratio = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double adaption_desired_gain = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double adaption_nonlinear_gain = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double clamping_time_constant = 11;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional int32 mrac_model_order = 1 [default = 1];
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_mrac_model_order());
    }

    // optional double mrac_saturation_level = 9 [default = 1];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MracConf::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MracConf::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MracConf::GetClassData() const { return &_class_data_; }

void MracConf::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MracConf *>(to)->MergeFrom(
      static_cast<const MracConf &>(from));
}


void MracConf::MergeFrom(const MracConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.control.MracConf)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  adaption_state_gain_.MergeFrom(from.adaption_state_gain_);
  adaption_matrix_p_.MergeFrom(from.adaption_matrix_p_);
  anti_windup_compensation_gain_.MergeFrom(from.anti_windup_compensation_gain_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      reference_time_constant_ = from.reference_time_constant_;
    }
    if (cached_has_bits & 0x00000002u) {
      reference_natural_frequency_ = from.reference_natural_frequency_;
    }
    if (cached_has_bits & 0x00000004u) {
      reference_damping_ratio_ = from.reference_damping_ratio_;
    }
    if (cached_has_bits & 0x00000008u) {
      adaption_desired_gain_ = from.adaption_desired_gain_;
    }
    if (cached_has_bits & 0x00000010u) {
      adaption_nonlinear_gain_ = from.adaption_nonlinear_gain_;
    }
    if (cached_has_bits & 0x00000020u) {
      clamping_time_constant_ = from.clamping_time_constant_;
    }
    if (cached_has_bits & 0x00000040u) {
      mrac_model_order_ = from.mrac_model_order_;
    }
    if (cached_has_bits & 0x00000080u) {
      mrac_saturation_level_ = from.mrac_saturation_level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MracConf::CopyFrom(const MracConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.control.MracConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MracConf::IsInitialized() const {
  return true;
}

void MracConf::InternalSwap(MracConf* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  adaption_state_gain_.InternalSwap(&other->adaption_state_gain_);
  adaption_matrix_p_.InternalSwap(&other->adaption_matrix_p_);
  anti_windup_compensation_gain_.InternalSwap(&other->anti_windup_compensation_gain_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MracConf, clamping_time_constant_)
      + sizeof(MracConf::clamping_time_constant_)
      - PROTOBUF_FIELD_OFFSET(MracConf, reference_time_constant_)>(
          reinterpret_cast<char*>(&reference_time_constant_),
          reinterpret_cast<char*>(&other->reference_time_constant_));
  swap(mrac_model_order_, other->mrac_model_order_);
  swap(mrac_saturation_level_, other->mrac_saturation_level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MracConf::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fcontrol_2fproto_2fmrac_5fconf_2eproto_getter, &descriptor_table_modules_2fcontrol_2fproto_2fmrac_5fconf_2eproto_once,
      file_level_metadata_modules_2fcontrol_2fproto_2fmrac_5fconf_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace control
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::control::MracConf* Arena::CreateMaybeMessage< ::apollo::control::MracConf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::control::MracConf >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
