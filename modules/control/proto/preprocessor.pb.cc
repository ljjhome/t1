// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/control/proto/preprocessor.proto

#include "modules/control/proto/preprocessor.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace apollo {
namespace control {
constexpr Preprocessor::Preprocessor(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : estop_reason_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , header_(nullptr)
  , local_view_(nullptr)
  , engage_advice_(nullptr)
  , input_debug_(nullptr)
  , received_pad_msg_(false)
  , estop_(false){}
struct PreprocessorDefaultTypeInternal {
  constexpr PreprocessorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PreprocessorDefaultTypeInternal() {}
  union {
    Preprocessor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PreprocessorDefaultTypeInternal _Preprocessor_default_instance_;
}  // namespace control
}  // namespace apollo
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fcontrol_2fproto_2fpreprocessor_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_modules_2fcontrol_2fproto_2fpreprocessor_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fcontrol_2fproto_2fpreprocessor_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fcontrol_2fproto_2fpreprocessor_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::control::Preprocessor, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::Preprocessor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::control::Preprocessor, header_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::Preprocessor, local_view_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::Preprocessor, engage_advice_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::Preprocessor, input_debug_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::Preprocessor, received_pad_msg_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::Preprocessor, estop_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::Preprocessor, estop_reason_),
  1,
  2,
  3,
  4,
  5,
  6,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 13, -1, sizeof(::apollo::control::Preprocessor)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::control::_Preprocessor_default_instance_),
};

const char descriptor_table_protodef_modules_2fcontrol_2fproto_2fpreprocessor_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n(modules/control/proto/preprocessor.pro"
  "to\022\016apollo.control\032!modules/common/proto"
  "/header.proto\032&modules/common/proto/driv"
  "e_state.proto\032\'modules/control/proto/inp"
  "ut_debug.proto\032&modules/control/proto/lo"
  "cal_view.proto\"\226\002\n\014Preprocessor\022%\n\006heade"
  "r\030\001 \001(\0132\025.apollo.common.Header\022-\n\nlocal_"
  "view\030\002 \001(\0132\031.apollo.control.LocalView\0222\n"
  "\rengage_advice\030\004 \001(\0132\033.apollo.common.Eng"
  "ageAdvice\022/\n\013input_debug\030\005 \001(\0132\032.apollo."
  "control.InputDebug\022\037\n\020received_pad_msg\030\006"
  " \001(\010:\005false\022\024\n\005estop\030\007 \001(\010:\005false\022\024\n\014est"
  "op_reason\030\010 \001(\t"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fcontrol_2fproto_2fpreprocessor_2eproto_deps[4] = {
  &::descriptor_table_modules_2fcommon_2fproto_2fdrive_5fstate_2eproto,
  &::descriptor_table_modules_2fcommon_2fproto_2fheader_2eproto,
  &::descriptor_table_modules_2fcontrol_2fproto_2finput_5fdebug_2eproto,
  &::descriptor_table_modules_2fcontrol_2fproto_2flocal_5fview_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fcontrol_2fproto_2fpreprocessor_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fcontrol_2fproto_2fpreprocessor_2eproto = {
  false, false, 495, descriptor_table_protodef_modules_2fcontrol_2fproto_2fpreprocessor_2eproto, "modules/control/proto/preprocessor.proto", 
  &descriptor_table_modules_2fcontrol_2fproto_2fpreprocessor_2eproto_once, descriptor_table_modules_2fcontrol_2fproto_2fpreprocessor_2eproto_deps, 4, 1,
  schemas, file_default_instances, TableStruct_modules_2fcontrol_2fproto_2fpreprocessor_2eproto::offsets,
  file_level_metadata_modules_2fcontrol_2fproto_2fpreprocessor_2eproto, file_level_enum_descriptors_modules_2fcontrol_2fproto_2fpreprocessor_2eproto, file_level_service_descriptors_modules_2fcontrol_2fproto_2fpreprocessor_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_modules_2fcontrol_2fproto_2fpreprocessor_2eproto_getter() {
  return &descriptor_table_modules_2fcontrol_2fproto_2fpreprocessor_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_modules_2fcontrol_2fproto_2fpreprocessor_2eproto(&descriptor_table_modules_2fcontrol_2fproto_2fpreprocessor_2eproto);
namespace apollo {
namespace control {

// ===================================================================

class Preprocessor::_Internal {
 public:
  using HasBits = decltype(std::declval<Preprocessor>()._has_bits_);
  static const ::apollo::common::Header& header(const Preprocessor* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::control::LocalView& local_view(const Preprocessor* msg);
  static void set_has_local_view(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::common::EngageAdvice& engage_advice(const Preprocessor* msg);
  static void set_has_engage_advice(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::apollo::control::InputDebug& input_debug(const Preprocessor* msg);
  static void set_has_input_debug(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_received_pad_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_estop(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_estop_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::apollo::common::Header&
Preprocessor::_Internal::header(const Preprocessor* msg) {
  return *msg->header_;
}
const ::apollo::control::LocalView&
Preprocessor::_Internal::local_view(const Preprocessor* msg) {
  return *msg->local_view_;
}
const ::apollo::common::EngageAdvice&
Preprocessor::_Internal::engage_advice(const Preprocessor* msg) {
  return *msg->engage_advice_;
}
const ::apollo::control::InputDebug&
Preprocessor::_Internal::input_debug(const Preprocessor* msg) {
  return *msg->input_debug_;
}
void Preprocessor::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void Preprocessor::clear_local_view() {
  if (local_view_ != nullptr) local_view_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void Preprocessor::clear_engage_advice() {
  if (engage_advice_ != nullptr) engage_advice_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void Preprocessor::clear_input_debug() {
  if (input_debug_ != nullptr) input_debug_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
Preprocessor::Preprocessor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.control.Preprocessor)
}
Preprocessor::Preprocessor(const Preprocessor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  estop_reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_estop_reason()) {
    estop_reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_estop_reason(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_header()) {
    header_ = new ::apollo::common::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_local_view()) {
    local_view_ = new ::apollo::control::LocalView(*from.local_view_);
  } else {
    local_view_ = nullptr;
  }
  if (from._internal_has_engage_advice()) {
    engage_advice_ = new ::apollo::common::EngageAdvice(*from.engage_advice_);
  } else {
    engage_advice_ = nullptr;
  }
  if (from._internal_has_input_debug()) {
    input_debug_ = new ::apollo::control::InputDebug(*from.input_debug_);
  } else {
    input_debug_ = nullptr;
  }
  ::memcpy(&received_pad_msg_, &from.received_pad_msg_,
    static_cast<size_t>(reinterpret_cast<char*>(&estop_) -
    reinterpret_cast<char*>(&received_pad_msg_)) + sizeof(estop_));
  // @@protoc_insertion_point(copy_constructor:apollo.control.Preprocessor)
}

void Preprocessor::SharedCtor() {
estop_reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&estop_) -
    reinterpret_cast<char*>(&header_)) + sizeof(estop_));
}

Preprocessor::~Preprocessor() {
  // @@protoc_insertion_point(destructor:apollo.control.Preprocessor)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Preprocessor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  estop_reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete local_view_;
  if (this != internal_default_instance()) delete engage_advice_;
  if (this != internal_default_instance()) delete input_debug_;
}

void Preprocessor::ArenaDtor(void* object) {
  Preprocessor* _this = reinterpret_cast< Preprocessor* >(object);
  (void)_this;
}
void Preprocessor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Preprocessor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Preprocessor::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.control.Preprocessor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      estop_reason_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(header_ != nullptr);
      header_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(local_view_ != nullptr);
      local_view_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(engage_advice_ != nullptr);
      engage_advice_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(input_debug_ != nullptr);
      input_debug_->Clear();
    }
  }
  ::memset(&received_pad_msg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&estop_) -
      reinterpret_cast<char*>(&received_pad_msg_)) + sizeof(estop_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Preprocessor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.control.LocalView local_view = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_local_view(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.EngageAdvice engage_advice = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_engage_advice(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.control.InputDebug input_debug = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_input_debug(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool received_pad_msg = 6 [default = false];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_received_pad_msg(&has_bits);
          received_pad_msg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool estop = 7 [default = false];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_estop(&has_bits);
          estop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string estop_reason = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_estop_reason();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.control.Preprocessor.estop_reason");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Preprocessor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.control.Preprocessor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // optional .apollo.control.LocalView local_view = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::local_view(this), target, stream);
  }

  // optional .apollo.common.EngageAdvice engage_advice = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::engage_advice(this), target, stream);
  }

  // optional .apollo.control.InputDebug input_debug = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::input_debug(this), target, stream);
  }

  // optional bool received_pad_msg = 6 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_received_pad_msg(), target);
  }

  // optional bool estop = 7 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_estop(), target);
  }

  // optional string estop_reason = 8;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_estop_reason().data(), static_cast<int>(this->_internal_estop_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.control.Preprocessor.estop_reason");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_estop_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.control.Preprocessor)
  return target;
}

size_t Preprocessor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.control.Preprocessor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string estop_reason = 8;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_estop_reason());
    }

    // optional .apollo.common.Header header = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional .apollo.control.LocalView local_view = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *local_view_);
    }

    // optional .apollo.common.EngageAdvice engage_advice = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *engage_advice_);
    }

    // optional .apollo.control.InputDebug input_debug = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *input_debug_);
    }

    // optional bool received_pad_msg = 6 [default = false];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool estop = 7 [default = false];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Preprocessor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Preprocessor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Preprocessor::GetClassData() const { return &_class_data_; }

void Preprocessor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Preprocessor *>(to)->MergeFrom(
      static_cast<const Preprocessor &>(from));
}


void Preprocessor::MergeFrom(const Preprocessor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.control.Preprocessor)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_estop_reason(from._internal_estop_reason());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_header()->::apollo::common::Header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_local_view()->::apollo::control::LocalView::MergeFrom(from._internal_local_view());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_engage_advice()->::apollo::common::EngageAdvice::MergeFrom(from._internal_engage_advice());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_input_debug()->::apollo::control::InputDebug::MergeFrom(from._internal_input_debug());
    }
    if (cached_has_bits & 0x00000020u) {
      received_pad_msg_ = from.received_pad_msg_;
    }
    if (cached_has_bits & 0x00000040u) {
      estop_ = from.estop_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Preprocessor::CopyFrom(const Preprocessor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.control.Preprocessor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Preprocessor::IsInitialized() const {
  return true;
}

void Preprocessor::InternalSwap(Preprocessor* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &estop_reason_, lhs_arena,
      &other->estop_reason_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Preprocessor, estop_)
      + sizeof(Preprocessor::estop_)
      - PROTOBUF_FIELD_OFFSET(Preprocessor, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Preprocessor::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fcontrol_2fproto_2fpreprocessor_2eproto_getter, &descriptor_table_modules_2fcontrol_2fproto_2fpreprocessor_2eproto_once,
      file_level_metadata_modules_2fcontrol_2fproto_2fpreprocessor_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace control
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::control::Preprocessor* Arena::CreateMaybeMessage< ::apollo::control::Preprocessor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::control::Preprocessor >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
