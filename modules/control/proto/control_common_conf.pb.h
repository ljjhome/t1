// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/control/proto/control_common_conf.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fcontrol_2fproto_2fcontrol_5fcommon_5fconf_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fcontrol_2fproto_2fcontrol_5fcommon_5fconf_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "modules/canbus/proto/chassis.pb.h"
#include "modules/control/proto/pad_msg.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fcontrol_2fproto_2fcontrol_5fcommon_5fconf_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fcontrol_2fproto_2fcontrol_5fcommon_5fconf_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fcontrol_2fproto_2fcontrol_5fcommon_5fconf_2eproto;
namespace apollo {
namespace control {
class ControlCommonConf;
struct ControlCommonConfDefaultTypeInternal;
extern ControlCommonConfDefaultTypeInternal _ControlCommonConf_default_instance_;
}  // namespace control
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::control::ControlCommonConf* Arena::CreateMaybeMessage<::apollo::control::ControlCommonConf>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace control {

// ===================================================================

class ControlCommonConf final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.control.ControlCommonConf) */ {
 public:
  inline ControlCommonConf() : ControlCommonConf(nullptr) {}
  ~ControlCommonConf() override;
  explicit constexpr ControlCommonConf(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ControlCommonConf(const ControlCommonConf& from);
  ControlCommonConf(ControlCommonConf&& from) noexcept
    : ControlCommonConf() {
    *this = ::std::move(from);
  }

  inline ControlCommonConf& operator=(const ControlCommonConf& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlCommonConf& operator=(ControlCommonConf&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ControlCommonConf& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControlCommonConf* internal_default_instance() {
    return reinterpret_cast<const ControlCommonConf*>(
               &_ControlCommonConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ControlCommonConf& a, ControlCommonConf& b) {
    a.Swap(&b);
  }
  inline void Swap(ControlCommonConf* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControlCommonConf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ControlCommonConf* New() const final {
    return new ControlCommonConf();
  }

  ControlCommonConf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ControlCommonConf>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ControlCommonConf& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ControlCommonConf& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlCommonConf* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.control.ControlCommonConf";
  }
  protected:
  explicit ControlCommonConf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnableCsvDebugFieldNumber = 2,
    kEnableSpeedStationPreviewFieldNumber = 3,
    kIsControlTestModeFieldNumber = 4,
    kUsePreviewSpeedForTableFieldNumber = 5,
    kEnableInputTimestampCheckFieldNumber = 6,
    kEnableSlopeOffsetFieldNumber = 14,
    kEnableNavigationModeErrorFilterFieldNumber = 16,
    kControlPeriodFieldNumber = 19,
    kMaxPlanningIntervalSecFieldNumber = 20,
    kMaxPlanningDelayThresholdFieldNumber = 21,
    kDrivingModeFieldNumber = 22,
    kActionFieldNumber = 23,
    kSoftEstopBrakeFieldNumber = 24,
    kMaxStatusIntervalSecFieldNumber = 27,
    kTrajectoryPeriodFieldNumber = 30,
    kChassisPeriodFieldNumber = 31,
    kLocalizationPeriodFieldNumber = 32,
    kMinimumSpeedResolutionFieldNumber = 33,
    kMaxSteeringPercentageAllowedFieldNumber = 26,
    kQueryRelativeTimeFieldNumber = 35,
    kMinimumSpeedProtectionFieldNumber = 36,
    kControlTestDurationFieldNumber = 1,
    kMaxLocalizationMissNumFieldNumber = 7,
    kMaxChassisMissNumFieldNumber = 8,
    kMaxAccelerationWhenStoppedFieldNumber = 10,
    kSteerAngleRateFieldNumber = 11,
    kMaxPlanningMissNumFieldNumber = 9,
    kEnableGainSchedulerFieldNumber = 12,
    kSetSteerLimitFieldNumber = 13,
    kEnableNavigationModePositionUpdateFieldNumber = 17,
    kEnablePersistentEstopFieldNumber = 18,
    kLockSteerSpeedFieldNumber = 15,
    kMaxPathRemainWhenStoppedFieldNumber = 37,
  };
  // optional bool enable_csv_debug = 2 [default = false];
  bool has_enable_csv_debug() const;
  private:
  bool _internal_has_enable_csv_debug() const;
  public:
  void clear_enable_csv_debug();
  bool enable_csv_debug() const;
  void set_enable_csv_debug(bool value);
  private:
  bool _internal_enable_csv_debug() const;
  void _internal_set_enable_csv_debug(bool value);
  public:

  // optional bool enable_speed_station_preview = 3 [default = false];
  bool has_enable_speed_station_preview() const;
  private:
  bool _internal_has_enable_speed_station_preview() const;
  public:
  void clear_enable_speed_station_preview();
  bool enable_speed_station_preview() const;
  void set_enable_speed_station_preview(bool value);
  private:
  bool _internal_enable_speed_station_preview() const;
  void _internal_set_enable_speed_station_preview(bool value);
  public:

  // optional bool is_control_test_mode = 4 [default = false];
  bool has_is_control_test_mode() const;
  private:
  bool _internal_has_is_control_test_mode() const;
  public:
  void clear_is_control_test_mode();
  bool is_control_test_mode() const;
  void set_is_control_test_mode(bool value);
  private:
  bool _internal_is_control_test_mode() const;
  void _internal_set_is_control_test_mode(bool value);
  public:

  // optional bool use_preview_speed_for_table = 5 [default = false];
  bool has_use_preview_speed_for_table() const;
  private:
  bool _internal_has_use_preview_speed_for_table() const;
  public:
  void clear_use_preview_speed_for_table();
  bool use_preview_speed_for_table() const;
  void set_use_preview_speed_for_table(bool value);
  private:
  bool _internal_use_preview_speed_for_table() const;
  void _internal_set_use_preview_speed_for_table(bool value);
  public:

  // optional bool enable_input_timestamp_check = 6 [default = false];
  bool has_enable_input_timestamp_check() const;
  private:
  bool _internal_has_enable_input_timestamp_check() const;
  public:
  void clear_enable_input_timestamp_check();
  bool enable_input_timestamp_check() const;
  void set_enable_input_timestamp_check(bool value);
  private:
  bool _internal_enable_input_timestamp_check() const;
  void _internal_set_enable_input_timestamp_check(bool value);
  public:

  // optional bool enable_slope_offset = 14 [default = false];
  bool has_enable_slope_offset() const;
  private:
  bool _internal_has_enable_slope_offset() const;
  public:
  void clear_enable_slope_offset();
  bool enable_slope_offset() const;
  void set_enable_slope_offset(bool value);
  private:
  bool _internal_enable_slope_offset() const;
  void _internal_set_enable_slope_offset(bool value);
  public:

  // optional bool enable_navigation_mode_error_filter = 16 [default = false];
  bool has_enable_navigation_mode_error_filter() const;
  private:
  bool _internal_has_enable_navigation_mode_error_filter() const;
  public:
  void clear_enable_navigation_mode_error_filter();
  bool enable_navigation_mode_error_filter() const;
  void set_enable_navigation_mode_error_filter(bool value);
  private:
  bool _internal_enable_navigation_mode_error_filter() const;
  void _internal_set_enable_navigation_mode_error_filter(bool value);
  public:

  // optional double control_period = 19;
  bool has_control_period() const;
  private:
  bool _internal_has_control_period() const;
  public:
  void clear_control_period();
  double control_period() const;
  void set_control_period(double value);
  private:
  double _internal_control_period() const;
  void _internal_set_control_period(double value);
  public:

  // optional double max_planning_interval_sec = 20;
  bool has_max_planning_interval_sec() const;
  private:
  bool _internal_has_max_planning_interval_sec() const;
  public:
  void clear_max_planning_interval_sec();
  double max_planning_interval_sec() const;
  void set_max_planning_interval_sec(double value);
  private:
  double _internal_max_planning_interval_sec() const;
  void _internal_set_max_planning_interval_sec(double value);
  public:

  // optional double max_planning_delay_threshold = 21;
  bool has_max_planning_delay_threshold() const;
  private:
  bool _internal_has_max_planning_delay_threshold() const;
  public:
  void clear_max_planning_delay_threshold();
  double max_planning_delay_threshold() const;
  void set_max_planning_delay_threshold(double value);
  private:
  double _internal_max_planning_delay_threshold() const;
  void _internal_set_max_planning_delay_threshold(double value);
  public:

  // optional .apollo.canbus.Chassis.DrivingMode driving_mode = 22;
  bool has_driving_mode() const;
  private:
  bool _internal_has_driving_mode() const;
  public:
  void clear_driving_mode();
  ::apollo::canbus::Chassis_DrivingMode driving_mode() const;
  void set_driving_mode(::apollo::canbus::Chassis_DrivingMode value);
  private:
  ::apollo::canbus::Chassis_DrivingMode _internal_driving_mode() const;
  void _internal_set_driving_mode(::apollo::canbus::Chassis_DrivingMode value);
  public:

  // optional .apollo.control.DrivingAction action = 23;
  bool has_action() const;
  private:
  bool _internal_has_action() const;
  public:
  void clear_action();
  ::apollo::control::DrivingAction action() const;
  void set_action(::apollo::control::DrivingAction value);
  private:
  ::apollo::control::DrivingAction _internal_action() const;
  void _internal_set_action(::apollo::control::DrivingAction value);
  public:

  // optional double soft_estop_brake = 24;
  bool has_soft_estop_brake() const;
  private:
  bool _internal_has_soft_estop_brake() const;
  public:
  void clear_soft_estop_brake();
  double soft_estop_brake() const;
  void set_soft_estop_brake(double value);
  private:
  double _internal_soft_estop_brake() const;
  void _internal_set_soft_estop_brake(double value);
  public:

  // optional double max_status_interval_sec = 27;
  bool has_max_status_interval_sec() const;
  private:
  bool _internal_has_max_status_interval_sec() const;
  public:
  void clear_max_status_interval_sec();
  double max_status_interval_sec() const;
  void set_max_status_interval_sec(double value);
  private:
  double _internal_max_status_interval_sec() const;
  void _internal_set_max_status_interval_sec(double value);
  public:

  // optional double trajectory_period = 30;
  bool has_trajectory_period() const;
  private:
  bool _internal_has_trajectory_period() const;
  public:
  void clear_trajectory_period();
  double trajectory_period() const;
  void set_trajectory_period(double value);
  private:
  double _internal_trajectory_period() const;
  void _internal_set_trajectory_period(double value);
  public:

  // optional double chassis_period = 31;
  bool has_chassis_period() const;
  private:
  bool _internal_has_chassis_period() const;
  public:
  void clear_chassis_period();
  double chassis_period() const;
  void set_chassis_period(double value);
  private:
  double _internal_chassis_period() const;
  void _internal_set_chassis_period(double value);
  public:

  // optional double localization_period = 32;
  bool has_localization_period() const;
  private:
  bool _internal_has_localization_period() const;
  public:
  void clear_localization_period();
  double localization_period() const;
  void set_localization_period(double value);
  private:
  double _internal_localization_period() const;
  void _internal_set_localization_period(double value);
  public:

  // optional double minimum_speed_resolution = 33;
  bool has_minimum_speed_resolution() const;
  private:
  bool _internal_has_minimum_speed_resolution() const;
  public:
  void clear_minimum_speed_resolution();
  double minimum_speed_resolution() const;
  void set_minimum_speed_resolution(double value);
  private:
  double _internal_minimum_speed_resolution() const;
  void _internal_set_minimum_speed_resolution(double value);
  public:

  // optional int32 max_steering_percentage_allowed = 26;
  bool has_max_steering_percentage_allowed() const;
  private:
  bool _internal_has_max_steering_percentage_allowed() const;
  public:
  void clear_max_steering_percentage_allowed();
  ::PROTOBUF_NAMESPACE_ID::int32 max_steering_percentage_allowed() const;
  void set_max_steering_percentage_allowed(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_steering_percentage_allowed() const;
  void _internal_set_max_steering_percentage_allowed(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional double query_relative_time = 35;
  bool has_query_relative_time() const;
  private:
  bool _internal_has_query_relative_time() const;
  public:
  void clear_query_relative_time();
  double query_relative_time() const;
  void set_query_relative_time(double value);
  private:
  double _internal_query_relative_time() const;
  void _internal_set_query_relative_time(double value);
  public:

  // optional double minimum_speed_protection = 36;
  bool has_minimum_speed_protection() const;
  private:
  bool _internal_has_minimum_speed_protection() const;
  public:
  void clear_minimum_speed_protection();
  double minimum_speed_protection() const;
  void set_minimum_speed_protection(double value);
  private:
  double _internal_minimum_speed_protection() const;
  void _internal_set_minimum_speed_protection(double value);
  public:

  // optional double control_test_duration = 1 [default = -1];
  bool has_control_test_duration() const;
  private:
  bool _internal_has_control_test_duration() const;
  public:
  void clear_control_test_duration();
  double control_test_duration() const;
  void set_control_test_duration(double value);
  private:
  double _internal_control_test_duration() const;
  void _internal_set_control_test_duration(double value);
  public:

  // optional int32 max_localization_miss_num = 7 [default = 20];
  bool has_max_localization_miss_num() const;
  private:
  bool _internal_has_max_localization_miss_num() const;
  public:
  void clear_max_localization_miss_num();
  ::PROTOBUF_NAMESPACE_ID::int32 max_localization_miss_num() const;
  void set_max_localization_miss_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_localization_miss_num() const;
  void _internal_set_max_localization_miss_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 max_chassis_miss_num = 8 [default = 20];
  bool has_max_chassis_miss_num() const;
  private:
  bool _internal_has_max_chassis_miss_num() const;
  public:
  void clear_max_chassis_miss_num();
  ::PROTOBUF_NAMESPACE_ID::int32 max_chassis_miss_num() const;
  void set_max_chassis_miss_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_chassis_miss_num() const;
  void _internal_set_max_chassis_miss_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional double max_acceleration_when_stopped = 10 [default = 0.01];
  bool has_max_acceleration_when_stopped() const;
  private:
  bool _internal_has_max_acceleration_when_stopped() const;
  public:
  void clear_max_acceleration_when_stopped();
  double max_acceleration_when_stopped() const;
  void set_max_acceleration_when_stopped(double value);
  private:
  double _internal_max_acceleration_when_stopped() const;
  void _internal_set_max_acceleration_when_stopped(double value);
  public:

  // optional double steer_angle_rate = 11 [default = 100];
  bool has_steer_angle_rate() const;
  private:
  bool _internal_has_steer_angle_rate() const;
  public:
  void clear_steer_angle_rate();
  double steer_angle_rate() const;
  void set_steer_angle_rate(double value);
  private:
  double _internal_steer_angle_rate() const;
  void _internal_set_steer_angle_rate(double value);
  public:

  // optional int32 max_planning_miss_num = 9 [default = 20];
  bool has_max_planning_miss_num() const;
  private:
  bool _internal_has_max_planning_miss_num() const;
  public:
  void clear_max_planning_miss_num();
  ::PROTOBUF_NAMESPACE_ID::int32 max_planning_miss_num() const;
  void set_max_planning_miss_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_planning_miss_num() const;
  void _internal_set_max_planning_miss_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool enable_gain_scheduler = 12 [default = true];
  bool has_enable_gain_scheduler() const;
  private:
  bool _internal_has_enable_gain_scheduler() const;
  public:
  void clear_enable_gain_scheduler();
  bool enable_gain_scheduler() const;
  void set_enable_gain_scheduler(bool value);
  private:
  bool _internal_enable_gain_scheduler() const;
  void _internal_set_enable_gain_scheduler(bool value);
  public:

  // optional bool set_steer_limit = 13 [default = true];
  bool has_set_steer_limit() const;
  private:
  bool _internal_has_set_steer_limit() const;
  public:
  void clear_set_steer_limit();
  bool set_steer_limit() const;
  void set_set_steer_limit(bool value);
  private:
  bool _internal_set_steer_limit() const;
  void _internal_set_set_steer_limit(bool value);
  public:

  // optional bool enable_navigation_mode_position_update = 17 [default = true];
  bool has_enable_navigation_mode_position_update() const;
  private:
  bool _internal_has_enable_navigation_mode_position_update() const;
  public:
  void clear_enable_navigation_mode_position_update();
  bool enable_navigation_mode_position_update() const;
  void set_enable_navigation_mode_position_update(bool value);
  private:
  bool _internal_enable_navigation_mode_position_update() const;
  void _internal_set_enable_navigation_mode_position_update(bool value);
  public:

  // optional bool enable_persistent_estop = 18 [default = true];
  bool has_enable_persistent_estop() const;
  private:
  bool _internal_has_enable_persistent_estop() const;
  public:
  void clear_enable_persistent_estop();
  bool enable_persistent_estop() const;
  void set_enable_persistent_estop(bool value);
  private:
  bool _internal_enable_persistent_estop() const;
  void _internal_set_enable_persistent_estop(bool value);
  public:

  // optional double lock_steer_speed = 15 [default = 0.081];
  bool has_lock_steer_speed() const;
  private:
  bool _internal_has_lock_steer_speed() const;
  public:
  void clear_lock_steer_speed();
  double lock_steer_speed() const;
  void set_lock_steer_speed(double value);
  private:
  double _internal_lock_steer_speed() const;
  void _internal_set_lock_steer_speed(double value);
  public:

  // optional double max_path_remain_when_stopped = 37 [default = 0.3];
  bool has_max_path_remain_when_stopped() const;
  private:
  bool _internal_has_max_path_remain_when_stopped() const;
  public:
  void clear_max_path_remain_when_stopped();
  double max_path_remain_when_stopped() const;
  void set_max_path_remain_when_stopped(double value);
  private:
  double _internal_max_path_remain_when_stopped() const;
  void _internal_set_max_path_remain_when_stopped(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.control.ControlCommonConf)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool enable_csv_debug_;
  bool enable_speed_station_preview_;
  bool is_control_test_mode_;
  bool use_preview_speed_for_table_;
  bool enable_input_timestamp_check_;
  bool enable_slope_offset_;
  bool enable_navigation_mode_error_filter_;
  double control_period_;
  double max_planning_interval_sec_;
  double max_planning_delay_threshold_;
  int driving_mode_;
  int action_;
  double soft_estop_brake_;
  double max_status_interval_sec_;
  double trajectory_period_;
  double chassis_period_;
  double localization_period_;
  double minimum_speed_resolution_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_steering_percentage_allowed_;
  double query_relative_time_;
  double minimum_speed_protection_;
  double control_test_duration_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_localization_miss_num_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_chassis_miss_num_;
  double max_acceleration_when_stopped_;
  double steer_angle_rate_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_planning_miss_num_;
  bool enable_gain_scheduler_;
  bool set_steer_limit_;
  bool enable_navigation_mode_position_update_;
  bool enable_persistent_estop_;
  double lock_steer_speed_;
  double max_path_remain_when_stopped_;
  friend struct ::TableStruct_modules_2fcontrol_2fproto_2fcontrol_5fcommon_5fconf_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ControlCommonConf

// optional double control_test_duration = 1 [default = -1];
inline bool ControlCommonConf::_internal_has_control_test_duration() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool ControlCommonConf::has_control_test_duration() const {
  return _internal_has_control_test_duration();
}
inline void ControlCommonConf::clear_control_test_duration() {
  control_test_duration_ = -1;
  _has_bits_[0] &= ~0x00200000u;
}
inline double ControlCommonConf::_internal_control_test_duration() const {
  return control_test_duration_;
}
inline double ControlCommonConf::control_test_duration() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlCommonConf.control_test_duration)
  return _internal_control_test_duration();
}
inline void ControlCommonConf::_internal_set_control_test_duration(double value) {
  _has_bits_[0] |= 0x00200000u;
  control_test_duration_ = value;
}
inline void ControlCommonConf::set_control_test_duration(double value) {
  _internal_set_control_test_duration(value);
  // @@protoc_insertion_point(field_set:apollo.control.ControlCommonConf.control_test_duration)
}

// optional bool enable_csv_debug = 2 [default = false];
inline bool ControlCommonConf::_internal_has_enable_csv_debug() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ControlCommonConf::has_enable_csv_debug() const {
  return _internal_has_enable_csv_debug();
}
inline void ControlCommonConf::clear_enable_csv_debug() {
  enable_csv_debug_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool ControlCommonConf::_internal_enable_csv_debug() const {
  return enable_csv_debug_;
}
inline bool ControlCommonConf::enable_csv_debug() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlCommonConf.enable_csv_debug)
  return _internal_enable_csv_debug();
}
inline void ControlCommonConf::_internal_set_enable_csv_debug(bool value) {
  _has_bits_[0] |= 0x00000001u;
  enable_csv_debug_ = value;
}
inline void ControlCommonConf::set_enable_csv_debug(bool value) {
  _internal_set_enable_csv_debug(value);
  // @@protoc_insertion_point(field_set:apollo.control.ControlCommonConf.enable_csv_debug)
}

// optional bool enable_speed_station_preview = 3 [default = false];
inline bool ControlCommonConf::_internal_has_enable_speed_station_preview() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ControlCommonConf::has_enable_speed_station_preview() const {
  return _internal_has_enable_speed_station_preview();
}
inline void ControlCommonConf::clear_enable_speed_station_preview() {
  enable_speed_station_preview_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool ControlCommonConf::_internal_enable_speed_station_preview() const {
  return enable_speed_station_preview_;
}
inline bool ControlCommonConf::enable_speed_station_preview() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlCommonConf.enable_speed_station_preview)
  return _internal_enable_speed_station_preview();
}
inline void ControlCommonConf::_internal_set_enable_speed_station_preview(bool value) {
  _has_bits_[0] |= 0x00000002u;
  enable_speed_station_preview_ = value;
}
inline void ControlCommonConf::set_enable_speed_station_preview(bool value) {
  _internal_set_enable_speed_station_preview(value);
  // @@protoc_insertion_point(field_set:apollo.control.ControlCommonConf.enable_speed_station_preview)
}

// optional bool is_control_test_mode = 4 [default = false];
inline bool ControlCommonConf::_internal_has_is_control_test_mode() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ControlCommonConf::has_is_control_test_mode() const {
  return _internal_has_is_control_test_mode();
}
inline void ControlCommonConf::clear_is_control_test_mode() {
  is_control_test_mode_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool ControlCommonConf::_internal_is_control_test_mode() const {
  return is_control_test_mode_;
}
inline bool ControlCommonConf::is_control_test_mode() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlCommonConf.is_control_test_mode)
  return _internal_is_control_test_mode();
}
inline void ControlCommonConf::_internal_set_is_control_test_mode(bool value) {
  _has_bits_[0] |= 0x00000004u;
  is_control_test_mode_ = value;
}
inline void ControlCommonConf::set_is_control_test_mode(bool value) {
  _internal_set_is_control_test_mode(value);
  // @@protoc_insertion_point(field_set:apollo.control.ControlCommonConf.is_control_test_mode)
}

// optional bool use_preview_speed_for_table = 5 [default = false];
inline bool ControlCommonConf::_internal_has_use_preview_speed_for_table() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ControlCommonConf::has_use_preview_speed_for_table() const {
  return _internal_has_use_preview_speed_for_table();
}
inline void ControlCommonConf::clear_use_preview_speed_for_table() {
  use_preview_speed_for_table_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool ControlCommonConf::_internal_use_preview_speed_for_table() const {
  return use_preview_speed_for_table_;
}
inline bool ControlCommonConf::use_preview_speed_for_table() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlCommonConf.use_preview_speed_for_table)
  return _internal_use_preview_speed_for_table();
}
inline void ControlCommonConf::_internal_set_use_preview_speed_for_table(bool value) {
  _has_bits_[0] |= 0x00000008u;
  use_preview_speed_for_table_ = value;
}
inline void ControlCommonConf::set_use_preview_speed_for_table(bool value) {
  _internal_set_use_preview_speed_for_table(value);
  // @@protoc_insertion_point(field_set:apollo.control.ControlCommonConf.use_preview_speed_for_table)
}

// optional bool enable_input_timestamp_check = 6 [default = false];
inline bool ControlCommonConf::_internal_has_enable_input_timestamp_check() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ControlCommonConf::has_enable_input_timestamp_check() const {
  return _internal_has_enable_input_timestamp_check();
}
inline void ControlCommonConf::clear_enable_input_timestamp_check() {
  enable_input_timestamp_check_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool ControlCommonConf::_internal_enable_input_timestamp_check() const {
  return enable_input_timestamp_check_;
}
inline bool ControlCommonConf::enable_input_timestamp_check() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlCommonConf.enable_input_timestamp_check)
  return _internal_enable_input_timestamp_check();
}
inline void ControlCommonConf::_internal_set_enable_input_timestamp_check(bool value) {
  _has_bits_[0] |= 0x00000010u;
  enable_input_timestamp_check_ = value;
}
inline void ControlCommonConf::set_enable_input_timestamp_check(bool value) {
  _internal_set_enable_input_timestamp_check(value);
  // @@protoc_insertion_point(field_set:apollo.control.ControlCommonConf.enable_input_timestamp_check)
}

// optional int32 max_localization_miss_num = 7 [default = 20];
inline bool ControlCommonConf::_internal_has_max_localization_miss_num() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool ControlCommonConf::has_max_localization_miss_num() const {
  return _internal_has_max_localization_miss_num();
}
inline void ControlCommonConf::clear_max_localization_miss_num() {
  max_localization_miss_num_ = 20;
  _has_bits_[0] &= ~0x00400000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ControlCommonConf::_internal_max_localization_miss_num() const {
  return max_localization_miss_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ControlCommonConf::max_localization_miss_num() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlCommonConf.max_localization_miss_num)
  return _internal_max_localization_miss_num();
}
inline void ControlCommonConf::_internal_set_max_localization_miss_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00400000u;
  max_localization_miss_num_ = value;
}
inline void ControlCommonConf::set_max_localization_miss_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_localization_miss_num(value);
  // @@protoc_insertion_point(field_set:apollo.control.ControlCommonConf.max_localization_miss_num)
}

// optional int32 max_chassis_miss_num = 8 [default = 20];
inline bool ControlCommonConf::_internal_has_max_chassis_miss_num() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool ControlCommonConf::has_max_chassis_miss_num() const {
  return _internal_has_max_chassis_miss_num();
}
inline void ControlCommonConf::clear_max_chassis_miss_num() {
  max_chassis_miss_num_ = 20;
  _has_bits_[0] &= ~0x00800000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ControlCommonConf::_internal_max_chassis_miss_num() const {
  return max_chassis_miss_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ControlCommonConf::max_chassis_miss_num() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlCommonConf.max_chassis_miss_num)
  return _internal_max_chassis_miss_num();
}
inline void ControlCommonConf::_internal_set_max_chassis_miss_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00800000u;
  max_chassis_miss_num_ = value;
}
inline void ControlCommonConf::set_max_chassis_miss_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_chassis_miss_num(value);
  // @@protoc_insertion_point(field_set:apollo.control.ControlCommonConf.max_chassis_miss_num)
}

// optional int32 max_planning_miss_num = 9 [default = 20];
inline bool ControlCommonConf::_internal_has_max_planning_miss_num() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool ControlCommonConf::has_max_planning_miss_num() const {
  return _internal_has_max_planning_miss_num();
}
inline void ControlCommonConf::clear_max_planning_miss_num() {
  max_planning_miss_num_ = 20;
  _has_bits_[0] &= ~0x04000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ControlCommonConf::_internal_max_planning_miss_num() const {
  return max_planning_miss_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ControlCommonConf::max_planning_miss_num() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlCommonConf.max_planning_miss_num)
  return _internal_max_planning_miss_num();
}
inline void ControlCommonConf::_internal_set_max_planning_miss_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x04000000u;
  max_planning_miss_num_ = value;
}
inline void ControlCommonConf::set_max_planning_miss_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_planning_miss_num(value);
  // @@protoc_insertion_point(field_set:apollo.control.ControlCommonConf.max_planning_miss_num)
}

// optional double max_acceleration_when_stopped = 10 [default = 0.01];
inline bool ControlCommonConf::_internal_has_max_acceleration_when_stopped() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool ControlCommonConf::has_max_acceleration_when_stopped() const {
  return _internal_has_max_acceleration_when_stopped();
}
inline void ControlCommonConf::clear_max_acceleration_when_stopped() {
  max_acceleration_when_stopped_ = 0.01;
  _has_bits_[0] &= ~0x01000000u;
}
inline double ControlCommonConf::_internal_max_acceleration_when_stopped() const {
  return max_acceleration_when_stopped_;
}
inline double ControlCommonConf::max_acceleration_when_stopped() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlCommonConf.max_acceleration_when_stopped)
  return _internal_max_acceleration_when_stopped();
}
inline void ControlCommonConf::_internal_set_max_acceleration_when_stopped(double value) {
  _has_bits_[0] |= 0x01000000u;
  max_acceleration_when_stopped_ = value;
}
inline void ControlCommonConf::set_max_acceleration_when_stopped(double value) {
  _internal_set_max_acceleration_when_stopped(value);
  // @@protoc_insertion_point(field_set:apollo.control.ControlCommonConf.max_acceleration_when_stopped)
}

// optional double steer_angle_rate = 11 [default = 100];
inline bool ControlCommonConf::_internal_has_steer_angle_rate() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool ControlCommonConf::has_steer_angle_rate() const {
  return _internal_has_steer_angle_rate();
}
inline void ControlCommonConf::clear_steer_angle_rate() {
  steer_angle_rate_ = 100;
  _has_bits_[0] &= ~0x02000000u;
}
inline double ControlCommonConf::_internal_steer_angle_rate() const {
  return steer_angle_rate_;
}
inline double ControlCommonConf::steer_angle_rate() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlCommonConf.steer_angle_rate)
  return _internal_steer_angle_rate();
}
inline void ControlCommonConf::_internal_set_steer_angle_rate(double value) {
  _has_bits_[0] |= 0x02000000u;
  steer_angle_rate_ = value;
}
inline void ControlCommonConf::set_steer_angle_rate(double value) {
  _internal_set_steer_angle_rate(value);
  // @@protoc_insertion_point(field_set:apollo.control.ControlCommonConf.steer_angle_rate)
}

// optional bool enable_gain_scheduler = 12 [default = true];
inline bool ControlCommonConf::_internal_has_enable_gain_scheduler() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool ControlCommonConf::has_enable_gain_scheduler() const {
  return _internal_has_enable_gain_scheduler();
}
inline void ControlCommonConf::clear_enable_gain_scheduler() {
  enable_gain_scheduler_ = true;
  _has_bits_[0] &= ~0x08000000u;
}
inline bool ControlCommonConf::_internal_enable_gain_scheduler() const {
  return enable_gain_scheduler_;
}
inline bool ControlCommonConf::enable_gain_scheduler() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlCommonConf.enable_gain_scheduler)
  return _internal_enable_gain_scheduler();
}
inline void ControlCommonConf::_internal_set_enable_gain_scheduler(bool value) {
  _has_bits_[0] |= 0x08000000u;
  enable_gain_scheduler_ = value;
}
inline void ControlCommonConf::set_enable_gain_scheduler(bool value) {
  _internal_set_enable_gain_scheduler(value);
  // @@protoc_insertion_point(field_set:apollo.control.ControlCommonConf.enable_gain_scheduler)
}

// optional bool set_steer_limit = 13 [default = true];
inline bool ControlCommonConf::_internal_has_set_steer_limit() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool ControlCommonConf::has_set_steer_limit() const {
  return _internal_has_set_steer_limit();
}
inline void ControlCommonConf::clear_set_steer_limit() {
  set_steer_limit_ = true;
  _has_bits_[0] &= ~0x10000000u;
}
inline bool ControlCommonConf::_internal_set_steer_limit() const {
  return set_steer_limit_;
}
inline bool ControlCommonConf::set_steer_limit() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlCommonConf.set_steer_limit)
  return _internal_set_steer_limit();
}
inline void ControlCommonConf::_internal_set_set_steer_limit(bool value) {
  _has_bits_[0] |= 0x10000000u;
  set_steer_limit_ = value;
}
inline void ControlCommonConf::set_set_steer_limit(bool value) {
  _internal_set_set_steer_limit(value);
  // @@protoc_insertion_point(field_set:apollo.control.ControlCommonConf.set_steer_limit)
}

// optional bool enable_slope_offset = 14 [default = false];
inline bool ControlCommonConf::_internal_has_enable_slope_offset() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ControlCommonConf::has_enable_slope_offset() const {
  return _internal_has_enable_slope_offset();
}
inline void ControlCommonConf::clear_enable_slope_offset() {
  enable_slope_offset_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool ControlCommonConf::_internal_enable_slope_offset() const {
  return enable_slope_offset_;
}
inline bool ControlCommonConf::enable_slope_offset() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlCommonConf.enable_slope_offset)
  return _internal_enable_slope_offset();
}
inline void ControlCommonConf::_internal_set_enable_slope_offset(bool value) {
  _has_bits_[0] |= 0x00000020u;
  enable_slope_offset_ = value;
}
inline void ControlCommonConf::set_enable_slope_offset(bool value) {
  _internal_set_enable_slope_offset(value);
  // @@protoc_insertion_point(field_set:apollo.control.ControlCommonConf.enable_slope_offset)
}

// optional double lock_steer_speed = 15 [default = 0.081];
inline bool ControlCommonConf::_internal_has_lock_steer_speed() const {
  bool value = (_has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool ControlCommonConf::has_lock_steer_speed() const {
  return _internal_has_lock_steer_speed();
}
inline void ControlCommonConf::clear_lock_steer_speed() {
  lock_steer_speed_ = 0.081;
  _has_bits_[0] &= ~0x80000000u;
}
inline double ControlCommonConf::_internal_lock_steer_speed() const {
  return lock_steer_speed_;
}
inline double ControlCommonConf::lock_steer_speed() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlCommonConf.lock_steer_speed)
  return _internal_lock_steer_speed();
}
inline void ControlCommonConf::_internal_set_lock_steer_speed(double value) {
  _has_bits_[0] |= 0x80000000u;
  lock_steer_speed_ = value;
}
inline void ControlCommonConf::set_lock_steer_speed(double value) {
  _internal_set_lock_steer_speed(value);
  // @@protoc_insertion_point(field_set:apollo.control.ControlCommonConf.lock_steer_speed)
}

// optional bool enable_navigation_mode_error_filter = 16 [default = false];
inline bool ControlCommonConf::_internal_has_enable_navigation_mode_error_filter() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ControlCommonConf::has_enable_navigation_mode_error_filter() const {
  return _internal_has_enable_navigation_mode_error_filter();
}
inline void ControlCommonConf::clear_enable_navigation_mode_error_filter() {
  enable_navigation_mode_error_filter_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool ControlCommonConf::_internal_enable_navigation_mode_error_filter() const {
  return enable_navigation_mode_error_filter_;
}
inline bool ControlCommonConf::enable_navigation_mode_error_filter() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlCommonConf.enable_navigation_mode_error_filter)
  return _internal_enable_navigation_mode_error_filter();
}
inline void ControlCommonConf::_internal_set_enable_navigation_mode_error_filter(bool value) {
  _has_bits_[0] |= 0x00000040u;
  enable_navigation_mode_error_filter_ = value;
}
inline void ControlCommonConf::set_enable_navigation_mode_error_filter(bool value) {
  _internal_set_enable_navigation_mode_error_filter(value);
  // @@protoc_insertion_point(field_set:apollo.control.ControlCommonConf.enable_navigation_mode_error_filter)
}

// optional bool enable_navigation_mode_position_update = 17 [default = true];
inline bool ControlCommonConf::_internal_has_enable_navigation_mode_position_update() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool ControlCommonConf::has_enable_navigation_mode_position_update() const {
  return _internal_has_enable_navigation_mode_position_update();
}
inline void ControlCommonConf::clear_enable_navigation_mode_position_update() {
  enable_navigation_mode_position_update_ = true;
  _has_bits_[0] &= ~0x20000000u;
}
inline bool ControlCommonConf::_internal_enable_navigation_mode_position_update() const {
  return enable_navigation_mode_position_update_;
}
inline bool ControlCommonConf::enable_navigation_mode_position_update() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlCommonConf.enable_navigation_mode_position_update)
  return _internal_enable_navigation_mode_position_update();
}
inline void ControlCommonConf::_internal_set_enable_navigation_mode_position_update(bool value) {
  _has_bits_[0] |= 0x20000000u;
  enable_navigation_mode_position_update_ = value;
}
inline void ControlCommonConf::set_enable_navigation_mode_position_update(bool value) {
  _internal_set_enable_navigation_mode_position_update(value);
  // @@protoc_insertion_point(field_set:apollo.control.ControlCommonConf.enable_navigation_mode_position_update)
}

// optional bool enable_persistent_estop = 18 [default = true];
inline bool ControlCommonConf::_internal_has_enable_persistent_estop() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool ControlCommonConf::has_enable_persistent_estop() const {
  return _internal_has_enable_persistent_estop();
}
inline void ControlCommonConf::clear_enable_persistent_estop() {
  enable_persistent_estop_ = true;
  _has_bits_[0] &= ~0x40000000u;
}
inline bool ControlCommonConf::_internal_enable_persistent_estop() const {
  return enable_persistent_estop_;
}
inline bool ControlCommonConf::enable_persistent_estop() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlCommonConf.enable_persistent_estop)
  return _internal_enable_persistent_estop();
}
inline void ControlCommonConf::_internal_set_enable_persistent_estop(bool value) {
  _has_bits_[0] |= 0x40000000u;
  enable_persistent_estop_ = value;
}
inline void ControlCommonConf::set_enable_persistent_estop(bool value) {
  _internal_set_enable_persistent_estop(value);
  // @@protoc_insertion_point(field_set:apollo.control.ControlCommonConf.enable_persistent_estop)
}

// optional double control_period = 19;
inline bool ControlCommonConf::_internal_has_control_period() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ControlCommonConf::has_control_period() const {
  return _internal_has_control_period();
}
inline void ControlCommonConf::clear_control_period() {
  control_period_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline double ControlCommonConf::_internal_control_period() const {
  return control_period_;
}
inline double ControlCommonConf::control_period() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlCommonConf.control_period)
  return _internal_control_period();
}
inline void ControlCommonConf::_internal_set_control_period(double value) {
  _has_bits_[0] |= 0x00000080u;
  control_period_ = value;
}
inline void ControlCommonConf::set_control_period(double value) {
  _internal_set_control_period(value);
  // @@protoc_insertion_point(field_set:apollo.control.ControlCommonConf.control_period)
}

// optional double max_planning_interval_sec = 20;
inline bool ControlCommonConf::_internal_has_max_planning_interval_sec() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ControlCommonConf::has_max_planning_interval_sec() const {
  return _internal_has_max_planning_interval_sec();
}
inline void ControlCommonConf::clear_max_planning_interval_sec() {
  max_planning_interval_sec_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline double ControlCommonConf::_internal_max_planning_interval_sec() const {
  return max_planning_interval_sec_;
}
inline double ControlCommonConf::max_planning_interval_sec() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlCommonConf.max_planning_interval_sec)
  return _internal_max_planning_interval_sec();
}
inline void ControlCommonConf::_internal_set_max_planning_interval_sec(double value) {
  _has_bits_[0] |= 0x00000100u;
  max_planning_interval_sec_ = value;
}
inline void ControlCommonConf::set_max_planning_interval_sec(double value) {
  _internal_set_max_planning_interval_sec(value);
  // @@protoc_insertion_point(field_set:apollo.control.ControlCommonConf.max_planning_interval_sec)
}

// optional double max_planning_delay_threshold = 21;
inline bool ControlCommonConf::_internal_has_max_planning_delay_threshold() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ControlCommonConf::has_max_planning_delay_threshold() const {
  return _internal_has_max_planning_delay_threshold();
}
inline void ControlCommonConf::clear_max_planning_delay_threshold() {
  max_planning_delay_threshold_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline double ControlCommonConf::_internal_max_planning_delay_threshold() const {
  return max_planning_delay_threshold_;
}
inline double ControlCommonConf::max_planning_delay_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlCommonConf.max_planning_delay_threshold)
  return _internal_max_planning_delay_threshold();
}
inline void ControlCommonConf::_internal_set_max_planning_delay_threshold(double value) {
  _has_bits_[0] |= 0x00000200u;
  max_planning_delay_threshold_ = value;
}
inline void ControlCommonConf::set_max_planning_delay_threshold(double value) {
  _internal_set_max_planning_delay_threshold(value);
  // @@protoc_insertion_point(field_set:apollo.control.ControlCommonConf.max_planning_delay_threshold)
}

// optional .apollo.canbus.Chassis.DrivingMode driving_mode = 22;
inline bool ControlCommonConf::_internal_has_driving_mode() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool ControlCommonConf::has_driving_mode() const {
  return _internal_has_driving_mode();
}
inline void ControlCommonConf::clear_driving_mode() {
  driving_mode_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::apollo::canbus::Chassis_DrivingMode ControlCommonConf::_internal_driving_mode() const {
  return static_cast< ::apollo::canbus::Chassis_DrivingMode >(driving_mode_);
}
inline ::apollo::canbus::Chassis_DrivingMode ControlCommonConf::driving_mode() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlCommonConf.driving_mode)
  return _internal_driving_mode();
}
inline void ControlCommonConf::_internal_set_driving_mode(::apollo::canbus::Chassis_DrivingMode value) {
  assert(::apollo::canbus::Chassis_DrivingMode_IsValid(value));
  _has_bits_[0] |= 0x00000400u;
  driving_mode_ = value;
}
inline void ControlCommonConf::set_driving_mode(::apollo::canbus::Chassis_DrivingMode value) {
  _internal_set_driving_mode(value);
  // @@protoc_insertion_point(field_set:apollo.control.ControlCommonConf.driving_mode)
}

// optional .apollo.control.DrivingAction action = 23;
inline bool ControlCommonConf::_internal_has_action() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool ControlCommonConf::has_action() const {
  return _internal_has_action();
}
inline void ControlCommonConf::clear_action() {
  action_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::apollo::control::DrivingAction ControlCommonConf::_internal_action() const {
  return static_cast< ::apollo::control::DrivingAction >(action_);
}
inline ::apollo::control::DrivingAction ControlCommonConf::action() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlCommonConf.action)
  return _internal_action();
}
inline void ControlCommonConf::_internal_set_action(::apollo::control::DrivingAction value) {
  assert(::apollo::control::DrivingAction_IsValid(value));
  _has_bits_[0] |= 0x00000800u;
  action_ = value;
}
inline void ControlCommonConf::set_action(::apollo::control::DrivingAction value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:apollo.control.ControlCommonConf.action)
}

// optional double soft_estop_brake = 24;
inline bool ControlCommonConf::_internal_has_soft_estop_brake() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool ControlCommonConf::has_soft_estop_brake() const {
  return _internal_has_soft_estop_brake();
}
inline void ControlCommonConf::clear_soft_estop_brake() {
  soft_estop_brake_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline double ControlCommonConf::_internal_soft_estop_brake() const {
  return soft_estop_brake_;
}
inline double ControlCommonConf::soft_estop_brake() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlCommonConf.soft_estop_brake)
  return _internal_soft_estop_brake();
}
inline void ControlCommonConf::_internal_set_soft_estop_brake(double value) {
  _has_bits_[0] |= 0x00001000u;
  soft_estop_brake_ = value;
}
inline void ControlCommonConf::set_soft_estop_brake(double value) {
  _internal_set_soft_estop_brake(value);
  // @@protoc_insertion_point(field_set:apollo.control.ControlCommonConf.soft_estop_brake)
}

// optional int32 max_steering_percentage_allowed = 26;
inline bool ControlCommonConf::_internal_has_max_steering_percentage_allowed() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool ControlCommonConf::has_max_steering_percentage_allowed() const {
  return _internal_has_max_steering_percentage_allowed();
}
inline void ControlCommonConf::clear_max_steering_percentage_allowed() {
  max_steering_percentage_allowed_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ControlCommonConf::_internal_max_steering_percentage_allowed() const {
  return max_steering_percentage_allowed_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ControlCommonConf::max_steering_percentage_allowed() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlCommonConf.max_steering_percentage_allowed)
  return _internal_max_steering_percentage_allowed();
}
inline void ControlCommonConf::_internal_set_max_steering_percentage_allowed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00040000u;
  max_steering_percentage_allowed_ = value;
}
inline void ControlCommonConf::set_max_steering_percentage_allowed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_steering_percentage_allowed(value);
  // @@protoc_insertion_point(field_set:apollo.control.ControlCommonConf.max_steering_percentage_allowed)
}

// optional double max_status_interval_sec = 27;
inline bool ControlCommonConf::_internal_has_max_status_interval_sec() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool ControlCommonConf::has_max_status_interval_sec() const {
  return _internal_has_max_status_interval_sec();
}
inline void ControlCommonConf::clear_max_status_interval_sec() {
  max_status_interval_sec_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline double ControlCommonConf::_internal_max_status_interval_sec() const {
  return max_status_interval_sec_;
}
inline double ControlCommonConf::max_status_interval_sec() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlCommonConf.max_status_interval_sec)
  return _internal_max_status_interval_sec();
}
inline void ControlCommonConf::_internal_set_max_status_interval_sec(double value) {
  _has_bits_[0] |= 0x00002000u;
  max_status_interval_sec_ = value;
}
inline void ControlCommonConf::set_max_status_interval_sec(double value) {
  _internal_set_max_status_interval_sec(value);
  // @@protoc_insertion_point(field_set:apollo.control.ControlCommonConf.max_status_interval_sec)
}

// optional double trajectory_period = 30;
inline bool ControlCommonConf::_internal_has_trajectory_period() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool ControlCommonConf::has_trajectory_period() const {
  return _internal_has_trajectory_period();
}
inline void ControlCommonConf::clear_trajectory_period() {
  trajectory_period_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline double ControlCommonConf::_internal_trajectory_period() const {
  return trajectory_period_;
}
inline double ControlCommonConf::trajectory_period() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlCommonConf.trajectory_period)
  return _internal_trajectory_period();
}
inline void ControlCommonConf::_internal_set_trajectory_period(double value) {
  _has_bits_[0] |= 0x00004000u;
  trajectory_period_ = value;
}
inline void ControlCommonConf::set_trajectory_period(double value) {
  _internal_set_trajectory_period(value);
  // @@protoc_insertion_point(field_set:apollo.control.ControlCommonConf.trajectory_period)
}

// optional double chassis_period = 31;
inline bool ControlCommonConf::_internal_has_chassis_period() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool ControlCommonConf::has_chassis_period() const {
  return _internal_has_chassis_period();
}
inline void ControlCommonConf::clear_chassis_period() {
  chassis_period_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline double ControlCommonConf::_internal_chassis_period() const {
  return chassis_period_;
}
inline double ControlCommonConf::chassis_period() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlCommonConf.chassis_period)
  return _internal_chassis_period();
}
inline void ControlCommonConf::_internal_set_chassis_period(double value) {
  _has_bits_[0] |= 0x00008000u;
  chassis_period_ = value;
}
inline void ControlCommonConf::set_chassis_period(double value) {
  _internal_set_chassis_period(value);
  // @@protoc_insertion_point(field_set:apollo.control.ControlCommonConf.chassis_period)
}

// optional double localization_period = 32;
inline bool ControlCommonConf::_internal_has_localization_period() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool ControlCommonConf::has_localization_period() const {
  return _internal_has_localization_period();
}
inline void ControlCommonConf::clear_localization_period() {
  localization_period_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline double ControlCommonConf::_internal_localization_period() const {
  return localization_period_;
}
inline double ControlCommonConf::localization_period() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlCommonConf.localization_period)
  return _internal_localization_period();
}
inline void ControlCommonConf::_internal_set_localization_period(double value) {
  _has_bits_[0] |= 0x00010000u;
  localization_period_ = value;
}
inline void ControlCommonConf::set_localization_period(double value) {
  _internal_set_localization_period(value);
  // @@protoc_insertion_point(field_set:apollo.control.ControlCommonConf.localization_period)
}

// optional double minimum_speed_resolution = 33;
inline bool ControlCommonConf::_internal_has_minimum_speed_resolution() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool ControlCommonConf::has_minimum_speed_resolution() const {
  return _internal_has_minimum_speed_resolution();
}
inline void ControlCommonConf::clear_minimum_speed_resolution() {
  minimum_speed_resolution_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline double ControlCommonConf::_internal_minimum_speed_resolution() const {
  return minimum_speed_resolution_;
}
inline double ControlCommonConf::minimum_speed_resolution() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlCommonConf.minimum_speed_resolution)
  return _internal_minimum_speed_resolution();
}
inline void ControlCommonConf::_internal_set_minimum_speed_resolution(double value) {
  _has_bits_[0] |= 0x00020000u;
  minimum_speed_resolution_ = value;
}
inline void ControlCommonConf::set_minimum_speed_resolution(double value) {
  _internal_set_minimum_speed_resolution(value);
  // @@protoc_insertion_point(field_set:apollo.control.ControlCommonConf.minimum_speed_resolution)
}

// optional double query_relative_time = 35;
inline bool ControlCommonConf::_internal_has_query_relative_time() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool ControlCommonConf::has_query_relative_time() const {
  return _internal_has_query_relative_time();
}
inline void ControlCommonConf::clear_query_relative_time() {
  query_relative_time_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline double ControlCommonConf::_internal_query_relative_time() const {
  return query_relative_time_;
}
inline double ControlCommonConf::query_relative_time() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlCommonConf.query_relative_time)
  return _internal_query_relative_time();
}
inline void ControlCommonConf::_internal_set_query_relative_time(double value) {
  _has_bits_[0] |= 0x00080000u;
  query_relative_time_ = value;
}
inline void ControlCommonConf::set_query_relative_time(double value) {
  _internal_set_query_relative_time(value);
  // @@protoc_insertion_point(field_set:apollo.control.ControlCommonConf.query_relative_time)
}

// optional double minimum_speed_protection = 36;
inline bool ControlCommonConf::_internal_has_minimum_speed_protection() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool ControlCommonConf::has_minimum_speed_protection() const {
  return _internal_has_minimum_speed_protection();
}
inline void ControlCommonConf::clear_minimum_speed_protection() {
  minimum_speed_protection_ = 0;
  _has_bits_[0] &= ~0x00100000u;
}
inline double ControlCommonConf::_internal_minimum_speed_protection() const {
  return minimum_speed_protection_;
}
inline double ControlCommonConf::minimum_speed_protection() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlCommonConf.minimum_speed_protection)
  return _internal_minimum_speed_protection();
}
inline void ControlCommonConf::_internal_set_minimum_speed_protection(double value) {
  _has_bits_[0] |= 0x00100000u;
  minimum_speed_protection_ = value;
}
inline void ControlCommonConf::set_minimum_speed_protection(double value) {
  _internal_set_minimum_speed_protection(value);
  // @@protoc_insertion_point(field_set:apollo.control.ControlCommonConf.minimum_speed_protection)
}

// optional double max_path_remain_when_stopped = 37 [default = 0.3];
inline bool ControlCommonConf::_internal_has_max_path_remain_when_stopped() const {
  bool value = (_has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool ControlCommonConf::has_max_path_remain_when_stopped() const {
  return _internal_has_max_path_remain_when_stopped();
}
inline void ControlCommonConf::clear_max_path_remain_when_stopped() {
  max_path_remain_when_stopped_ = 0.3;
  _has_bits_[1] &= ~0x00000001u;
}
inline double ControlCommonConf::_internal_max_path_remain_when_stopped() const {
  return max_path_remain_when_stopped_;
}
inline double ControlCommonConf::max_path_remain_when_stopped() const {
  // @@protoc_insertion_point(field_get:apollo.control.ControlCommonConf.max_path_remain_when_stopped)
  return _internal_max_path_remain_when_stopped();
}
inline void ControlCommonConf::_internal_set_max_path_remain_when_stopped(double value) {
  _has_bits_[1] |= 0x00000001u;
  max_path_remain_when_stopped_ = value;
}
inline void ControlCommonConf::set_max_path_remain_when_stopped(double value) {
  _internal_set_max_path_remain_when_stopped(value);
  // @@protoc_insertion_point(field_set:apollo.control.ControlCommonConf.max_path_remain_when_stopped)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace control
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fcontrol_2fproto_2fcontrol_5fcommon_5fconf_2eproto
