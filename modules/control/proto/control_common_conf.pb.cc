// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/control/proto/control_common_conf.proto

#include "modules/control/proto/control_common_conf.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace apollo {
namespace control {
constexpr ControlCommonConf::ControlCommonConf(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : enable_csv_debug_(false)
  , enable_speed_station_preview_(false)
  , is_control_test_mode_(false)
  , use_preview_speed_for_table_(false)
  , enable_input_timestamp_check_(false)
  , enable_slope_offset_(false)
  , enable_navigation_mode_error_filter_(false)
  , control_period_(0)
  , max_planning_interval_sec_(0)
  , max_planning_delay_threshold_(0)
  , driving_mode_(0)

  , action_(0)

  , soft_estop_brake_(0)
  , max_status_interval_sec_(0)
  , trajectory_period_(0)
  , chassis_period_(0)
  , localization_period_(0)
  , minimum_speed_resolution_(0)
  , max_steering_percentage_allowed_(0)
  , query_relative_time_(0)
  , minimum_speed_protection_(0)
  , control_test_duration_(-1)
  , max_localization_miss_num_(20)
  , max_chassis_miss_num_(20)
  , max_acceleration_when_stopped_(0.01)
  , steer_angle_rate_(100)
  , max_planning_miss_num_(20)
  , enable_gain_scheduler_(true)
  , set_steer_limit_(true)
  , enable_navigation_mode_position_update_(true)
  , enable_persistent_estop_(true)
  , lock_steer_speed_(0.081)
  , max_path_remain_when_stopped_(0.3){}
struct ControlCommonConfDefaultTypeInternal {
  constexpr ControlCommonConfDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ControlCommonConfDefaultTypeInternal() {}
  union {
    ControlCommonConf _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ControlCommonConfDefaultTypeInternal _ControlCommonConf_default_instance_;
}  // namespace control
}  // namespace apollo
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fcontrol_2fproto_2fcontrol_5fcommon_5fconf_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_modules_2fcontrol_2fproto_2fcontrol_5fcommon_5fconf_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fcontrol_2fproto_2fcontrol_5fcommon_5fconf_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fcontrol_2fproto_2fcontrol_5fcommon_5fconf_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlCommonConf, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlCommonConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlCommonConf, control_test_duration_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlCommonConf, enable_csv_debug_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlCommonConf, enable_speed_station_preview_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlCommonConf, is_control_test_mode_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlCommonConf, use_preview_speed_for_table_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlCommonConf, enable_input_timestamp_check_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlCommonConf, max_localization_miss_num_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlCommonConf, max_chassis_miss_num_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlCommonConf, max_planning_miss_num_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlCommonConf, max_acceleration_when_stopped_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlCommonConf, steer_angle_rate_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlCommonConf, enable_gain_scheduler_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlCommonConf, set_steer_limit_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlCommonConf, enable_slope_offset_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlCommonConf, lock_steer_speed_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlCommonConf, enable_navigation_mode_error_filter_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlCommonConf, enable_navigation_mode_position_update_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlCommonConf, enable_persistent_estop_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlCommonConf, control_period_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlCommonConf, max_planning_interval_sec_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlCommonConf, max_planning_delay_threshold_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlCommonConf, driving_mode_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlCommonConf, action_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlCommonConf, soft_estop_brake_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlCommonConf, max_steering_percentage_allowed_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlCommonConf, max_status_interval_sec_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlCommonConf, trajectory_period_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlCommonConf, chassis_period_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlCommonConf, localization_period_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlCommonConf, minimum_speed_resolution_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlCommonConf, query_relative_time_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlCommonConf, minimum_speed_protection_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlCommonConf, max_path_remain_when_stopped_),
  21,
  0,
  1,
  2,
  3,
  4,
  22,
  23,
  26,
  24,
  25,
  27,
  28,
  5,
  31,
  6,
  29,
  30,
  7,
  8,
  9,
  10,
  11,
  12,
  18,
  13,
  14,
  15,
  16,
  17,
  19,
  20,
  32,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 39, -1, sizeof(::apollo::control::ControlCommonConf)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::control::_ControlCommonConf_default_instance_),
};

const char descriptor_table_protodef_modules_2fcontrol_2fproto_2fcontrol_5fcommon_5fconf_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n/modules/control/proto/control_common_c"
  "onf.proto\022\016apollo.control\032\"modules/canbu"
  "s/proto/chassis.proto\032#modules/control/p"
  "roto/pad_msg.proto\"\336\t\n\021ControlCommonConf"
  "\022!\n\025control_test_duration\030\001 \001(\001:\002-1\022\037\n\020e"
  "nable_csv_debug\030\002 \001(\010:\005false\022+\n\034enable_s"
  "peed_station_preview\030\003 \001(\010:\005false\022#\n\024is_"
  "control_test_mode\030\004 \001(\010:\005false\022*\n\033use_pr"
  "eview_speed_for_table\030\005 \001(\010:\005false\022+\n\034en"
  "able_input_timestamp_check\030\006 \001(\010:\005false\022"
  "%\n\031max_localization_miss_num\030\007 \001(\005:\00220\022 "
  "\n\024max_chassis_miss_num\030\010 \001(\005:\00220\022!\n\025max_"
  "planning_miss_num\030\t \001(\005:\00220\022+\n\035max_accel"
  "eration_when_stopped\030\n \001(\001:\0040.01\022\035\n\020stee"
  "r_angle_rate\030\013 \001(\001:\003100\022#\n\025enable_gain_s"
  "cheduler\030\014 \001(\010:\004true\022\035\n\017set_steer_limit\030"
  "\r \001(\010:\004true\022\"\n\023enable_slope_offset\030\016 \001(\010"
  ":\005false\022\037\n\020lock_steer_speed\030\017 \001(\001:\0050.081"
  "\0222\n#enable_navigation_mode_error_filter\030"
  "\020 \001(\010:\005false\0224\n&enable_navigation_mode_p"
  "osition_update\030\021 \001(\010:\004true\022%\n\027enable_per"
  "sistent_estop\030\022 \001(\010:\004true\022\026\n\016control_per"
  "iod\030\023 \001(\001\022!\n\031max_planning_interval_sec\030\024"
  " \001(\001\022$\n\034max_planning_delay_threshold\030\025 \001"
  "(\001\0228\n\014driving_mode\030\026 \001(\0162\".apollo.canbus"
  ".Chassis.DrivingMode\022-\n\006action\030\027 \001(\0162\035.a"
  "pollo.control.DrivingAction\022\030\n\020soft_esto"
  "p_brake\030\030 \001(\001\022\'\n\037max_steering_percentage"
  "_allowed\030\032 \001(\005\022\037\n\027max_status_interval_se"
  "c\030\033 \001(\001\022\031\n\021trajectory_period\030\036 \001(\001\022\026\n\016ch"
  "assis_period\030\037 \001(\001\022\033\n\023localization_perio"
  "d\030  \001(\001\022 \n\030minimum_speed_resolution\030! \001("
  "\001\022\033\n\023query_relative_time\030# \001(\001\022 \n\030minimu"
  "m_speed_protection\030$ \001(\001\022)\n\034max_path_rem"
  "ain_when_stopped\030% \001(\001:\0030.3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fcontrol_2fproto_2fcontrol_5fcommon_5fconf_2eproto_deps[2] = {
  &::descriptor_table_modules_2fcanbus_2fproto_2fchassis_2eproto,
  &::descriptor_table_modules_2fcontrol_2fproto_2fpad_5fmsg_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fcontrol_2fproto_2fcontrol_5fcommon_5fconf_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fcontrol_2fproto_2fcontrol_5fcommon_5fconf_2eproto = {
  false, false, 1387, descriptor_table_protodef_modules_2fcontrol_2fproto_2fcontrol_5fcommon_5fconf_2eproto, "modules/control/proto/control_common_conf.proto", 
  &descriptor_table_modules_2fcontrol_2fproto_2fcontrol_5fcommon_5fconf_2eproto_once, descriptor_table_modules_2fcontrol_2fproto_2fcontrol_5fcommon_5fconf_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_modules_2fcontrol_2fproto_2fcontrol_5fcommon_5fconf_2eproto::offsets,
  file_level_metadata_modules_2fcontrol_2fproto_2fcontrol_5fcommon_5fconf_2eproto, file_level_enum_descriptors_modules_2fcontrol_2fproto_2fcontrol_5fcommon_5fconf_2eproto, file_level_service_descriptors_modules_2fcontrol_2fproto_2fcontrol_5fcommon_5fconf_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_modules_2fcontrol_2fproto_2fcontrol_5fcommon_5fconf_2eproto_getter() {
  return &descriptor_table_modules_2fcontrol_2fproto_2fcontrol_5fcommon_5fconf_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_modules_2fcontrol_2fproto_2fcontrol_5fcommon_5fconf_2eproto(&descriptor_table_modules_2fcontrol_2fproto_2fcontrol_5fcommon_5fconf_2eproto);
namespace apollo {
namespace control {

// ===================================================================

class ControlCommonConf::_Internal {
 public:
  using HasBits = decltype(std::declval<ControlCommonConf>()._has_bits_);
  static void set_has_control_test_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_enable_csv_debug(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_enable_speed_station_preview(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_control_test_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_use_preview_speed_for_table(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_enable_input_timestamp_check(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_max_localization_miss_num(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_max_chassis_miss_num(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_max_planning_miss_num(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_max_acceleration_when_stopped(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_steer_angle_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_enable_gain_scheduler(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_set_steer_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_enable_slope_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_lock_steer_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_enable_navigation_mode_error_filter(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_enable_navigation_mode_position_update(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_enable_persistent_estop(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_control_period(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_max_planning_interval_sec(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_max_planning_delay_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_driving_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_action(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_soft_estop_brake(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_max_steering_percentage_allowed(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_max_status_interval_sec(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_trajectory_period(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_chassis_period(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_localization_period(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_minimum_speed_resolution(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_query_relative_time(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_minimum_speed_protection(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_max_path_remain_when_stopped(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
};

ControlCommonConf::ControlCommonConf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.control.ControlCommonConf)
}
ControlCommonConf::ControlCommonConf(const ControlCommonConf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&enable_csv_debug_, &from.enable_csv_debug_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_path_remain_when_stopped_) -
    reinterpret_cast<char*>(&enable_csv_debug_)) + sizeof(max_path_remain_when_stopped_));
  // @@protoc_insertion_point(copy_constructor:apollo.control.ControlCommonConf)
}

void ControlCommonConf::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&enable_csv_debug_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&minimum_speed_protection_) -
    reinterpret_cast<char*>(&enable_csv_debug_)) + sizeof(minimum_speed_protection_));
control_test_duration_ = -1;
max_localization_miss_num_ = 20;
max_chassis_miss_num_ = 20;
max_acceleration_when_stopped_ = 0.01;
steer_angle_rate_ = 100;
max_planning_miss_num_ = 20;
enable_gain_scheduler_ = true;
set_steer_limit_ = true;
enable_navigation_mode_position_update_ = true;
enable_persistent_estop_ = true;
lock_steer_speed_ = 0.081;
max_path_remain_when_stopped_ = 0.3;
}

ControlCommonConf::~ControlCommonConf() {
  // @@protoc_insertion_point(destructor:apollo.control.ControlCommonConf)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ControlCommonConf::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ControlCommonConf::ArenaDtor(void* object) {
  ControlCommonConf* _this = reinterpret_cast< ControlCommonConf* >(object);
  (void)_this;
}
void ControlCommonConf::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControlCommonConf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ControlCommonConf::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.control.ControlCommonConf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&enable_csv_debug_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&control_period_) -
        reinterpret_cast<char*>(&enable_csv_debug_)) + sizeof(control_period_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&max_planning_interval_sec_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&chassis_period_) -
        reinterpret_cast<char*>(&max_planning_interval_sec_)) + sizeof(chassis_period_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&localization_period_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&minimum_speed_protection_) -
        reinterpret_cast<char*>(&localization_period_)) + sizeof(minimum_speed_protection_));
    control_test_duration_ = -1;
    max_localization_miss_num_ = 20;
    max_chassis_miss_num_ = 20;
  }
  if (cached_has_bits & 0xff000000u) {
    max_acceleration_when_stopped_ = 0.01;
    steer_angle_rate_ = 100;
    max_planning_miss_num_ = 20;
    enable_gain_scheduler_ = true;
    set_steer_limit_ = true;
    enable_navigation_mode_position_update_ = true;
    enable_persistent_estop_ = true;
    lock_steer_speed_ = 0.081;
  }
  max_path_remain_when_stopped_ = 0.3;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlCommonConf::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double control_test_duration = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_control_test_duration(&_has_bits_);
          control_test_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_csv_debug = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_enable_csv_debug(&_has_bits_);
          enable_csv_debug_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_speed_station_preview = 3 [default = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_enable_speed_station_preview(&_has_bits_);
          enable_speed_station_preview_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_control_test_mode = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_is_control_test_mode(&_has_bits_);
          is_control_test_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool use_preview_speed_for_table = 5 [default = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_use_preview_speed_for_table(&_has_bits_);
          use_preview_speed_for_table_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_input_timestamp_check = 6 [default = false];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_enable_input_timestamp_check(&_has_bits_);
          enable_input_timestamp_check_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 max_localization_miss_num = 7 [default = 20];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_max_localization_miss_num(&_has_bits_);
          max_localization_miss_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 max_chassis_miss_num = 8 [default = 20];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_max_chassis_miss_num(&_has_bits_);
          max_chassis_miss_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 max_planning_miss_num = 9 [default = 20];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_max_planning_miss_num(&_has_bits_);
          max_planning_miss_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double max_acceleration_when_stopped = 10 [default = 0.01];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_max_acceleration_when_stopped(&_has_bits_);
          max_acceleration_when_stopped_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double steer_angle_rate = 11 [default = 100];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_steer_angle_rate(&_has_bits_);
          steer_angle_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_gain_scheduler = 12 [default = true];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_enable_gain_scheduler(&_has_bits_);
          enable_gain_scheduler_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool set_steer_limit = 13 [default = true];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_set_steer_limit(&_has_bits_);
          set_steer_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_slope_offset = 14 [default = false];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_enable_slope_offset(&_has_bits_);
          enable_slope_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double lock_steer_speed = 15 [default = 0.081];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          _Internal::set_has_lock_steer_speed(&_has_bits_);
          lock_steer_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_navigation_mode_error_filter = 16 [default = false];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_enable_navigation_mode_error_filter(&_has_bits_);
          enable_navigation_mode_error_filter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_navigation_mode_position_update = 17 [default = true];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_enable_navigation_mode_position_update(&_has_bits_);
          enable_navigation_mode_position_update_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_persistent_estop = 18 [default = true];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_enable_persistent_estop(&_has_bits_);
          enable_persistent_estop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double control_period = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 153)) {
          _Internal::set_has_control_period(&_has_bits_);
          control_period_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double max_planning_interval_sec = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 161)) {
          _Internal::set_has_max_planning_interval_sec(&_has_bits_);
          max_planning_interval_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double max_planning_delay_threshold = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 169)) {
          _Internal::set_has_max_planning_delay_threshold(&_has_bits_);
          max_planning_delay_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Chassis.DrivingMode driving_mode = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Chassis_DrivingMode_IsValid(val))) {
            _internal_set_driving_mode(static_cast<::apollo::canbus::Chassis_DrivingMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(22, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.control.DrivingAction action = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::control::DrivingAction_IsValid(val))) {
            _internal_set_action(static_cast<::apollo::control::DrivingAction>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(23, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional double soft_estop_brake = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 193)) {
          _Internal::set_has_soft_estop_brake(&_has_bits_);
          soft_estop_brake_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional int32 max_steering_percentage_allowed = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_max_steering_percentage_allowed(&_has_bits_);
          max_steering_percentage_allowed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double max_status_interval_sec = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 217)) {
          _Internal::set_has_max_status_interval_sec(&_has_bits_);
          max_status_interval_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double trajectory_period = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 241)) {
          _Internal::set_has_trajectory_period(&_has_bits_);
          trajectory_period_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double chassis_period = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 249)) {
          _Internal::set_has_chassis_period(&_has_bits_);
          chassis_period_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double localization_period = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 1)) {
          _Internal::set_has_localization_period(&_has_bits_);
          localization_period_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double minimum_speed_resolution = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_minimum_speed_resolution(&_has_bits_);
          minimum_speed_resolution_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double query_relative_time = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_query_relative_time(&_has_bits_);
          query_relative_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double minimum_speed_protection = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_minimum_speed_protection(&_has_bits_);
          minimum_speed_protection_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double max_path_remain_when_stopped = 37 [default = 0.3];
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_max_path_remain_when_stopped(&_has_bits_);
          max_path_remain_when_stopped_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ControlCommonConf::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.control.ControlCommonConf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double control_test_duration = 1 [default = -1];
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_control_test_duration(), target);
  }

  // optional bool enable_csv_debug = 2 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_enable_csv_debug(), target);
  }

  // optional bool enable_speed_station_preview = 3 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_enable_speed_station_preview(), target);
  }

  // optional bool is_control_test_mode = 4 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_control_test_mode(), target);
  }

  // optional bool use_preview_speed_for_table = 5 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_use_preview_speed_for_table(), target);
  }

  // optional bool enable_input_timestamp_check = 6 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_enable_input_timestamp_check(), target);
  }

  // optional int32 max_localization_miss_num = 7 [default = 20];
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_max_localization_miss_num(), target);
  }

  // optional int32 max_chassis_miss_num = 8 [default = 20];
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_max_chassis_miss_num(), target);
  }

  // optional int32 max_planning_miss_num = 9 [default = 20];
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_max_planning_miss_num(), target);
  }

  // optional double max_acceleration_when_stopped = 10 [default = 0.01];
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_max_acceleration_when_stopped(), target);
  }

  // optional double steer_angle_rate = 11 [default = 100];
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_steer_angle_rate(), target);
  }

  // optional bool enable_gain_scheduler = 12 [default = true];
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_enable_gain_scheduler(), target);
  }

  // optional bool set_steer_limit = 13 [default = true];
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_set_steer_limit(), target);
  }

  // optional bool enable_slope_offset = 14 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_enable_slope_offset(), target);
  }

  // optional double lock_steer_speed = 15 [default = 0.081];
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_lock_steer_speed(), target);
  }

  // optional bool enable_navigation_mode_error_filter = 16 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_enable_navigation_mode_error_filter(), target);
  }

  // optional bool enable_navigation_mode_position_update = 17 [default = true];
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->_internal_enable_navigation_mode_position_update(), target);
  }

  // optional bool enable_persistent_estop = 18 [default = true];
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18, this->_internal_enable_persistent_estop(), target);
  }

  // optional double control_period = 19;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(19, this->_internal_control_period(), target);
  }

  // optional double max_planning_interval_sec = 20;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(20, this->_internal_max_planning_interval_sec(), target);
  }

  // optional double max_planning_delay_threshold = 21;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(21, this->_internal_max_planning_delay_threshold(), target);
  }

  // optional .apollo.canbus.Chassis.DrivingMode driving_mode = 22;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      22, this->_internal_driving_mode(), target);
  }

  // optional .apollo.control.DrivingAction action = 23;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      23, this->_internal_action(), target);
  }

  // optional double soft_estop_brake = 24;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(24, this->_internal_soft_estop_brake(), target);
  }

  // optional int32 max_steering_percentage_allowed = 26;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(26, this->_internal_max_steering_percentage_allowed(), target);
  }

  // optional double max_status_interval_sec = 27;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(27, this->_internal_max_status_interval_sec(), target);
  }

  // optional double trajectory_period = 30;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(30, this->_internal_trajectory_period(), target);
  }

  // optional double chassis_period = 31;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(31, this->_internal_chassis_period(), target);
  }

  // optional double localization_period = 32;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(32, this->_internal_localization_period(), target);
  }

  // optional double minimum_speed_resolution = 33;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(33, this->_internal_minimum_speed_resolution(), target);
  }

  // optional double query_relative_time = 35;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(35, this->_internal_query_relative_time(), target);
  }

  // optional double minimum_speed_protection = 36;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(36, this->_internal_minimum_speed_protection(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional double max_path_remain_when_stopped = 37 [default = 0.3];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(37, this->_internal_max_path_remain_when_stopped(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.control.ControlCommonConf)
  return target;
}

size_t ControlCommonConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.control.ControlCommonConf)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool enable_csv_debug = 2 [default = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool enable_speed_station_preview = 3 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool is_control_test_mode = 4 [default = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool use_preview_speed_for_table = 5 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool enable_input_timestamp_check = 6 [default = false];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool enable_slope_offset = 14 [default = false];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool enable_navigation_mode_error_filter = 16 [default = false];
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 1;
    }

    // optional double control_period = 19;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 8;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional double max_planning_interval_sec = 20;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 8;
    }

    // optional double max_planning_delay_threshold = 21;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 8;
    }

    // optional .apollo.canbus.Chassis.DrivingMode driving_mode = 22;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_driving_mode());
    }

    // optional .apollo.control.DrivingAction action = 23;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_action());
    }

    // optional double soft_estop_brake = 24;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 8;
    }

    // optional double max_status_interval_sec = 27;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 8;
    }

    // optional double trajectory_period = 30;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 8;
    }

    // optional double chassis_period = 31;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 8;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional double localization_period = 32;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 8;
    }

    // optional double minimum_speed_resolution = 33;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 8;
    }

    // optional int32 max_steering_percentage_allowed = 26;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_max_steering_percentage_allowed());
    }

    // optional double query_relative_time = 35;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 8;
    }

    // optional double minimum_speed_protection = 36;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 8;
    }

    // optional double control_test_duration = 1 [default = -1];
    if (cached_has_bits & 0x00200000u) {
      total_size += 1 + 8;
    }

    // optional int32 max_localization_miss_num = 7 [default = 20];
    if (cached_has_bits & 0x00400000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_max_localization_miss_num());
    }

    // optional int32 max_chassis_miss_num = 8 [default = 20];
    if (cached_has_bits & 0x00800000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_max_chassis_miss_num());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional double max_acceleration_when_stopped = 10 [default = 0.01];
    if (cached_has_bits & 0x01000000u) {
      total_size += 1 + 8;
    }

    // optional double steer_angle_rate = 11 [default = 100];
    if (cached_has_bits & 0x02000000u) {
      total_size += 1 + 8;
    }

    // optional int32 max_planning_miss_num = 9 [default = 20];
    if (cached_has_bits & 0x04000000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_max_planning_miss_num());
    }

    // optional bool enable_gain_scheduler = 12 [default = true];
    if (cached_has_bits & 0x08000000u) {
      total_size += 1 + 1;
    }

    // optional bool set_steer_limit = 13 [default = true];
    if (cached_has_bits & 0x10000000u) {
      total_size += 1 + 1;
    }

    // optional bool enable_navigation_mode_position_update = 17 [default = true];
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 1;
    }

    // optional bool enable_persistent_estop = 18 [default = true];
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 1;
    }

    // optional double lock_steer_speed = 15 [default = 0.081];
    if (cached_has_bits & 0x80000000u) {
      total_size += 1 + 8;
    }

  }
  // optional double max_path_remain_when_stopped = 37 [default = 0.3];
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControlCommonConf::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ControlCommonConf::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControlCommonConf::GetClassData() const { return &_class_data_; }

void ControlCommonConf::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ControlCommonConf *>(to)->MergeFrom(
      static_cast<const ControlCommonConf &>(from));
}


void ControlCommonConf::MergeFrom(const ControlCommonConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.control.ControlCommonConf)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      enable_csv_debug_ = from.enable_csv_debug_;
    }
    if (cached_has_bits & 0x00000002u) {
      enable_speed_station_preview_ = from.enable_speed_station_preview_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_control_test_mode_ = from.is_control_test_mode_;
    }
    if (cached_has_bits & 0x00000008u) {
      use_preview_speed_for_table_ = from.use_preview_speed_for_table_;
    }
    if (cached_has_bits & 0x00000010u) {
      enable_input_timestamp_check_ = from.enable_input_timestamp_check_;
    }
    if (cached_has_bits & 0x00000020u) {
      enable_slope_offset_ = from.enable_slope_offset_;
    }
    if (cached_has_bits & 0x00000040u) {
      enable_navigation_mode_error_filter_ = from.enable_navigation_mode_error_filter_;
    }
    if (cached_has_bits & 0x00000080u) {
      control_period_ = from.control_period_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      max_planning_interval_sec_ = from.max_planning_interval_sec_;
    }
    if (cached_has_bits & 0x00000200u) {
      max_planning_delay_threshold_ = from.max_planning_delay_threshold_;
    }
    if (cached_has_bits & 0x00000400u) {
      driving_mode_ = from.driving_mode_;
    }
    if (cached_has_bits & 0x00000800u) {
      action_ = from.action_;
    }
    if (cached_has_bits & 0x00001000u) {
      soft_estop_brake_ = from.soft_estop_brake_;
    }
    if (cached_has_bits & 0x00002000u) {
      max_status_interval_sec_ = from.max_status_interval_sec_;
    }
    if (cached_has_bits & 0x00004000u) {
      trajectory_period_ = from.trajectory_period_;
    }
    if (cached_has_bits & 0x00008000u) {
      chassis_period_ = from.chassis_period_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      localization_period_ = from.localization_period_;
    }
    if (cached_has_bits & 0x00020000u) {
      minimum_speed_resolution_ = from.minimum_speed_resolution_;
    }
    if (cached_has_bits & 0x00040000u) {
      max_steering_percentage_allowed_ = from.max_steering_percentage_allowed_;
    }
    if (cached_has_bits & 0x00080000u) {
      query_relative_time_ = from.query_relative_time_;
    }
    if (cached_has_bits & 0x00100000u) {
      minimum_speed_protection_ = from.minimum_speed_protection_;
    }
    if (cached_has_bits & 0x00200000u) {
      control_test_duration_ = from.control_test_duration_;
    }
    if (cached_has_bits & 0x00400000u) {
      max_localization_miss_num_ = from.max_localization_miss_num_;
    }
    if (cached_has_bits & 0x00800000u) {
      max_chassis_miss_num_ = from.max_chassis_miss_num_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      max_acceleration_when_stopped_ = from.max_acceleration_when_stopped_;
    }
    if (cached_has_bits & 0x02000000u) {
      steer_angle_rate_ = from.steer_angle_rate_;
    }
    if (cached_has_bits & 0x04000000u) {
      max_planning_miss_num_ = from.max_planning_miss_num_;
    }
    if (cached_has_bits & 0x08000000u) {
      enable_gain_scheduler_ = from.enable_gain_scheduler_;
    }
    if (cached_has_bits & 0x10000000u) {
      set_steer_limit_ = from.set_steer_limit_;
    }
    if (cached_has_bits & 0x20000000u) {
      enable_navigation_mode_position_update_ = from.enable_navigation_mode_position_update_;
    }
    if (cached_has_bits & 0x40000000u) {
      enable_persistent_estop_ = from.enable_persistent_estop_;
    }
    if (cached_has_bits & 0x80000000u) {
      lock_steer_speed_ = from.lock_steer_speed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (from._internal_has_max_path_remain_when_stopped()) {
    _internal_set_max_path_remain_when_stopped(from._internal_max_path_remain_when_stopped());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ControlCommonConf::CopyFrom(const ControlCommonConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.control.ControlCommonConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlCommonConf::IsInitialized() const {
  return true;
}

void ControlCommonConf::InternalSwap(ControlCommonConf* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ControlCommonConf, minimum_speed_protection_)
      + sizeof(ControlCommonConf::minimum_speed_protection_)
      - PROTOBUF_FIELD_OFFSET(ControlCommonConf, enable_csv_debug_)>(
          reinterpret_cast<char*>(&enable_csv_debug_),
          reinterpret_cast<char*>(&other->enable_csv_debug_));
  swap(control_test_duration_, other->control_test_duration_);
  swap(max_localization_miss_num_, other->max_localization_miss_num_);
  swap(max_chassis_miss_num_, other->max_chassis_miss_num_);
  swap(max_acceleration_when_stopped_, other->max_acceleration_when_stopped_);
  swap(steer_angle_rate_, other->steer_angle_rate_);
  swap(max_planning_miss_num_, other->max_planning_miss_num_);
  swap(enable_gain_scheduler_, other->enable_gain_scheduler_);
  swap(set_steer_limit_, other->set_steer_limit_);
  swap(enable_navigation_mode_position_update_, other->enable_navigation_mode_position_update_);
  swap(enable_persistent_estop_, other->enable_persistent_estop_);
  swap(lock_steer_speed_, other->lock_steer_speed_);
  swap(max_path_remain_when_stopped_, other->max_path_remain_when_stopped_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlCommonConf::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fcontrol_2fproto_2fcontrol_5fcommon_5fconf_2eproto_getter, &descriptor_table_modules_2fcontrol_2fproto_2fcontrol_5fcommon_5fconf_2eproto_once,
      file_level_metadata_modules_2fcontrol_2fproto_2fcontrol_5fcommon_5fconf_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace control
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::control::ControlCommonConf* Arena::CreateMaybeMessage< ::apollo::control::ControlCommonConf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::control::ControlCommonConf >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
