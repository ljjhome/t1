// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/control/proto/gain_scheduler_conf.proto

#include "modules/control/proto/gain_scheduler_conf.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace apollo {
namespace control {
constexpr GainScheduler::GainScheduler(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : scheduler_(){}
struct GainSchedulerDefaultTypeInternal {
  constexpr GainSchedulerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GainSchedulerDefaultTypeInternal() {}
  union {
    GainScheduler _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GainSchedulerDefaultTypeInternal _GainScheduler_default_instance_;
constexpr GainSchedulerInfo::GainSchedulerInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : speed_(0)
  , ratio_(0){}
struct GainSchedulerInfoDefaultTypeInternal {
  constexpr GainSchedulerInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GainSchedulerInfoDefaultTypeInternal() {}
  union {
    GainSchedulerInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GainSchedulerInfoDefaultTypeInternal _GainSchedulerInfo_default_instance_;
}  // namespace control
}  // namespace apollo
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fcontrol_2fproto_2fgain_5fscheduler_5fconf_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_modules_2fcontrol_2fproto_2fgain_5fscheduler_5fconf_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fcontrol_2fproto_2fgain_5fscheduler_5fconf_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fcontrol_2fproto_2fgain_5fscheduler_5fconf_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::control::GainScheduler, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::control::GainScheduler, scheduler_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::GainSchedulerInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::GainSchedulerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::control::GainSchedulerInfo, speed_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::GainSchedulerInfo, ratio_),
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::apollo::control::GainScheduler)},
  { 7, 15, -1, sizeof(::apollo::control::GainSchedulerInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::control::_GainScheduler_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::control::_GainSchedulerInfo_default_instance_),
};

const char descriptor_table_protodef_modules_2fcontrol_2fproto_2fgain_5fscheduler_5fconf_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n/modules/control/proto/gain_scheduler_c"
  "onf.proto\022\016apollo.control\"E\n\rGainSchedul"
  "er\0224\n\tscheduler\030\001 \003(\0132!.apollo.control.G"
  "ainSchedulerInfo\"1\n\021GainSchedulerInfo\022\r\n"
  "\005speed\030\001 \001(\001\022\r\n\005ratio\030\002 \001(\001"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fcontrol_2fproto_2fgain_5fscheduler_5fconf_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fcontrol_2fproto_2fgain_5fscheduler_5fconf_2eproto = {
  false, false, 187, descriptor_table_protodef_modules_2fcontrol_2fproto_2fgain_5fscheduler_5fconf_2eproto, "modules/control/proto/gain_scheduler_conf.proto", 
  &descriptor_table_modules_2fcontrol_2fproto_2fgain_5fscheduler_5fconf_2eproto_once, nullptr, 0, 2,
  schemas, file_default_instances, TableStruct_modules_2fcontrol_2fproto_2fgain_5fscheduler_5fconf_2eproto::offsets,
  file_level_metadata_modules_2fcontrol_2fproto_2fgain_5fscheduler_5fconf_2eproto, file_level_enum_descriptors_modules_2fcontrol_2fproto_2fgain_5fscheduler_5fconf_2eproto, file_level_service_descriptors_modules_2fcontrol_2fproto_2fgain_5fscheduler_5fconf_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_modules_2fcontrol_2fproto_2fgain_5fscheduler_5fconf_2eproto_getter() {
  return &descriptor_table_modules_2fcontrol_2fproto_2fgain_5fscheduler_5fconf_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_modules_2fcontrol_2fproto_2fgain_5fscheduler_5fconf_2eproto(&descriptor_table_modules_2fcontrol_2fproto_2fgain_5fscheduler_5fconf_2eproto);
namespace apollo {
namespace control {

// ===================================================================

class GainScheduler::_Internal {
 public:
};

GainScheduler::GainScheduler(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  scheduler_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.control.GainScheduler)
}
GainScheduler::GainScheduler(const GainScheduler& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      scheduler_(from.scheduler_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.control.GainScheduler)
}

void GainScheduler::SharedCtor() {
}

GainScheduler::~GainScheduler() {
  // @@protoc_insertion_point(destructor:apollo.control.GainScheduler)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GainScheduler::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GainScheduler::ArenaDtor(void* object) {
  GainScheduler* _this = reinterpret_cast< GainScheduler* >(object);
  (void)_this;
}
void GainScheduler::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GainScheduler::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GainScheduler::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.control.GainScheduler)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  scheduler_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GainScheduler::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .apollo.control.GainSchedulerInfo scheduler = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_scheduler(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GainScheduler::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.control.GainScheduler)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.control.GainSchedulerInfo scheduler = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_scheduler_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_scheduler(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.control.GainScheduler)
  return target;
}

size_t GainScheduler::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.control.GainScheduler)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.control.GainSchedulerInfo scheduler = 1;
  total_size += 1UL * this->_internal_scheduler_size();
  for (const auto& msg : this->scheduler_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GainScheduler::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GainScheduler::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GainScheduler::GetClassData() const { return &_class_data_; }

void GainScheduler::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GainScheduler *>(to)->MergeFrom(
      static_cast<const GainScheduler &>(from));
}


void GainScheduler::MergeFrom(const GainScheduler& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.control.GainScheduler)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  scheduler_.MergeFrom(from.scheduler_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GainScheduler::CopyFrom(const GainScheduler& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.control.GainScheduler)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GainScheduler::IsInitialized() const {
  return true;
}

void GainScheduler::InternalSwap(GainScheduler* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  scheduler_.InternalSwap(&other->scheduler_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GainScheduler::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fcontrol_2fproto_2fgain_5fscheduler_5fconf_2eproto_getter, &descriptor_table_modules_2fcontrol_2fproto_2fgain_5fscheduler_5fconf_2eproto_once,
      file_level_metadata_modules_2fcontrol_2fproto_2fgain_5fscheduler_5fconf_2eproto[0]);
}

// ===================================================================

class GainSchedulerInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<GainSchedulerInfo>()._has_bits_);
  static void set_has_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

GainSchedulerInfo::GainSchedulerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.control.GainSchedulerInfo)
}
GainSchedulerInfo::GainSchedulerInfo(const GainSchedulerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&speed_, &from.speed_,
    static_cast<size_t>(reinterpret_cast<char*>(&ratio_) -
    reinterpret_cast<char*>(&speed_)) + sizeof(ratio_));
  // @@protoc_insertion_point(copy_constructor:apollo.control.GainSchedulerInfo)
}

void GainSchedulerInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&speed_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ratio_) -
    reinterpret_cast<char*>(&speed_)) + sizeof(ratio_));
}

GainSchedulerInfo::~GainSchedulerInfo() {
  // @@protoc_insertion_point(destructor:apollo.control.GainSchedulerInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GainSchedulerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GainSchedulerInfo::ArenaDtor(void* object) {
  GainSchedulerInfo* _this = reinterpret_cast< GainSchedulerInfo* >(object);
  (void)_this;
}
void GainSchedulerInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GainSchedulerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GainSchedulerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.control.GainSchedulerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&speed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ratio_) -
        reinterpret_cast<char*>(&speed_)) + sizeof(ratio_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GainSchedulerInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double speed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_speed(&has_bits);
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double ratio = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_ratio(&has_bits);
          ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GainSchedulerInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.control.GainSchedulerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double speed = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_speed(), target);
  }

  // optional double ratio = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_ratio(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.control.GainSchedulerInfo)
  return target;
}

size_t GainSchedulerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.control.GainSchedulerInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double speed = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double ratio = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GainSchedulerInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GainSchedulerInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GainSchedulerInfo::GetClassData() const { return &_class_data_; }

void GainSchedulerInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GainSchedulerInfo *>(to)->MergeFrom(
      static_cast<const GainSchedulerInfo &>(from));
}


void GainSchedulerInfo::MergeFrom(const GainSchedulerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.control.GainSchedulerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      speed_ = from.speed_;
    }
    if (cached_has_bits & 0x00000002u) {
      ratio_ = from.ratio_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GainSchedulerInfo::CopyFrom(const GainSchedulerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.control.GainSchedulerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GainSchedulerInfo::IsInitialized() const {
  return true;
}

void GainSchedulerInfo::InternalSwap(GainSchedulerInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GainSchedulerInfo, ratio_)
      + sizeof(GainSchedulerInfo::ratio_)
      - PROTOBUF_FIELD_OFFSET(GainSchedulerInfo, speed_)>(
          reinterpret_cast<char*>(&speed_),
          reinterpret_cast<char*>(&other->speed_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GainSchedulerInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fcontrol_2fproto_2fgain_5fscheduler_5fconf_2eproto_getter, &descriptor_table_modules_2fcontrol_2fproto_2fgain_5fscheduler_5fconf_2eproto_once,
      file_level_metadata_modules_2fcontrol_2fproto_2fgain_5fscheduler_5fconf_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace control
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::control::GainScheduler* Arena::CreateMaybeMessage< ::apollo::control::GainScheduler >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::control::GainScheduler >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::control::GainSchedulerInfo* Arena::CreateMaybeMessage< ::apollo::control::GainSchedulerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::control::GainSchedulerInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
