// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/contrib/lgsvl_msgs/proto/detection2d.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fcontrib_2flgsvl_5fmsgs_2fproto_2fdetection2d_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fcontrib_2flgsvl_5fmsgs_2fproto_2fdetection2d_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "modules/common/proto/header.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fcontrib_2flgsvl_5fmsgs_2fproto_2fdetection2d_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fcontrib_2flgsvl_5fmsgs_2fproto_2fdetection2d_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fcontrib_2flgsvl_5fmsgs_2fproto_2fdetection2d_2eproto;
namespace apollo {
namespace contrib {
namespace lgsvl_msgs {
class BoundingBox2D;
struct BoundingBox2DDefaultTypeInternal;
extern BoundingBox2DDefaultTypeInternal _BoundingBox2D_default_instance_;
class Detection2D;
struct Detection2DDefaultTypeInternal;
extern Detection2DDefaultTypeInternal _Detection2D_default_instance_;
class Twist;
struct TwistDefaultTypeInternal;
extern TwistDefaultTypeInternal _Twist_default_instance_;
class Vector3;
struct Vector3DefaultTypeInternal;
extern Vector3DefaultTypeInternal _Vector3_default_instance_;
}  // namespace lgsvl_msgs
}  // namespace contrib
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::contrib::lgsvl_msgs::BoundingBox2D* Arena::CreateMaybeMessage<::apollo::contrib::lgsvl_msgs::BoundingBox2D>(Arena*);
template<> ::apollo::contrib::lgsvl_msgs::Detection2D* Arena::CreateMaybeMessage<::apollo::contrib::lgsvl_msgs::Detection2D>(Arena*);
template<> ::apollo::contrib::lgsvl_msgs::Twist* Arena::CreateMaybeMessage<::apollo::contrib::lgsvl_msgs::Twist>(Arena*);
template<> ::apollo::contrib::lgsvl_msgs::Vector3* Arena::CreateMaybeMessage<::apollo::contrib::lgsvl_msgs::Vector3>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace contrib {
namespace lgsvl_msgs {

// ===================================================================

class BoundingBox2D final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.contrib.lgsvl_msgs.BoundingBox2D) */ {
 public:
  inline BoundingBox2D() : BoundingBox2D(nullptr) {}
  ~BoundingBox2D() override;
  explicit constexpr BoundingBox2D(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BoundingBox2D(const BoundingBox2D& from);
  BoundingBox2D(BoundingBox2D&& from) noexcept
    : BoundingBox2D() {
    *this = ::std::move(from);
  }

  inline BoundingBox2D& operator=(const BoundingBox2D& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoundingBox2D& operator=(BoundingBox2D&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BoundingBox2D& default_instance() {
    return *internal_default_instance();
  }
  static inline const BoundingBox2D* internal_default_instance() {
    return reinterpret_cast<const BoundingBox2D*>(
               &_BoundingBox2D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BoundingBox2D& a, BoundingBox2D& b) {
    a.Swap(&b);
  }
  inline void Swap(BoundingBox2D* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BoundingBox2D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BoundingBox2D* New() const final {
    return new BoundingBox2D();
  }

  BoundingBox2D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BoundingBox2D>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BoundingBox2D& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BoundingBox2D& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BoundingBox2D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.contrib.lgsvl_msgs.BoundingBox2D";
  }
  protected:
  explicit BoundingBox2D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kWidthFieldNumber = 3,
    kHeightFieldNumber = 4,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float width = 3;
  void clear_width();
  float width() const;
  void set_width(float value);
  private:
  float _internal_width() const;
  void _internal_set_width(float value);
  public:

  // float height = 4;
  void clear_height();
  float height() const;
  void set_height(float value);
  private:
  float _internal_height() const;
  void _internal_set_height(float value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.contrib.lgsvl_msgs.BoundingBox2D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  float width_;
  float height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_modules_2fcontrib_2flgsvl_5fmsgs_2fproto_2fdetection2d_2eproto;
};
// -------------------------------------------------------------------

class Vector3 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.contrib.lgsvl_msgs.Vector3) */ {
 public:
  inline Vector3() : Vector3(nullptr) {}
  ~Vector3() override;
  explicit constexpr Vector3(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vector3(const Vector3& from);
  Vector3(Vector3&& from) noexcept
    : Vector3() {
    *this = ::std::move(from);
  }

  inline Vector3& operator=(const Vector3& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector3& operator=(Vector3&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vector3& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vector3* internal_default_instance() {
    return reinterpret_cast<const Vector3*>(
               &_Vector3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Vector3& a, Vector3& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector3* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector3* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vector3* New() const final {
    return new Vector3();
  }

  Vector3* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vector3>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Vector3& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Vector3& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector3* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.contrib.lgsvl_msgs.Vector3";
  }
  protected:
  explicit Vector3(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // double z = 3;
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.contrib.lgsvl_msgs.Vector3)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double x_;
  double y_;
  double z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_modules_2fcontrib_2flgsvl_5fmsgs_2fproto_2fdetection2d_2eproto;
};
// -------------------------------------------------------------------

class Twist final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.contrib.lgsvl_msgs.Twist) */ {
 public:
  inline Twist() : Twist(nullptr) {}
  ~Twist() override;
  explicit constexpr Twist(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Twist(const Twist& from);
  Twist(Twist&& from) noexcept
    : Twist() {
    *this = ::std::move(from);
  }

  inline Twist& operator=(const Twist& from) {
    CopyFrom(from);
    return *this;
  }
  inline Twist& operator=(Twist&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Twist& default_instance() {
    return *internal_default_instance();
  }
  static inline const Twist* internal_default_instance() {
    return reinterpret_cast<const Twist*>(
               &_Twist_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Twist& a, Twist& b) {
    a.Swap(&b);
  }
  inline void Swap(Twist* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Twist* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Twist* New() const final {
    return new Twist();
  }

  Twist* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Twist>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Twist& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Twist& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Twist* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.contrib.lgsvl_msgs.Twist";
  }
  protected:
  explicit Twist(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLinearFieldNumber = 1,
    kAngularFieldNumber = 2,
  };
  // .apollo.contrib.lgsvl_msgs.Vector3 linear = 1;
  bool has_linear() const;
  private:
  bool _internal_has_linear() const;
  public:
  void clear_linear();
  const ::apollo::contrib::lgsvl_msgs::Vector3& linear() const;
  PROTOBUF_MUST_USE_RESULT ::apollo::contrib::lgsvl_msgs::Vector3* release_linear();
  ::apollo::contrib::lgsvl_msgs::Vector3* mutable_linear();
  void set_allocated_linear(::apollo::contrib::lgsvl_msgs::Vector3* linear);
  private:
  const ::apollo::contrib::lgsvl_msgs::Vector3& _internal_linear() const;
  ::apollo::contrib::lgsvl_msgs::Vector3* _internal_mutable_linear();
  public:
  void unsafe_arena_set_allocated_linear(
      ::apollo::contrib::lgsvl_msgs::Vector3* linear);
  ::apollo::contrib::lgsvl_msgs::Vector3* unsafe_arena_release_linear();

  // .apollo.contrib.lgsvl_msgs.Vector3 angular = 2;
  bool has_angular() const;
  private:
  bool _internal_has_angular() const;
  public:
  void clear_angular();
  const ::apollo::contrib::lgsvl_msgs::Vector3& angular() const;
  PROTOBUF_MUST_USE_RESULT ::apollo::contrib::lgsvl_msgs::Vector3* release_angular();
  ::apollo::contrib::lgsvl_msgs::Vector3* mutable_angular();
  void set_allocated_angular(::apollo::contrib::lgsvl_msgs::Vector3* angular);
  private:
  const ::apollo::contrib::lgsvl_msgs::Vector3& _internal_angular() const;
  ::apollo::contrib::lgsvl_msgs::Vector3* _internal_mutable_angular();
  public:
  void unsafe_arena_set_allocated_angular(
      ::apollo::contrib::lgsvl_msgs::Vector3* angular);
  ::apollo::contrib::lgsvl_msgs::Vector3* unsafe_arena_release_angular();

  // @@protoc_insertion_point(class_scope:apollo.contrib.lgsvl_msgs.Twist)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::apollo::contrib::lgsvl_msgs::Vector3* linear_;
  ::apollo::contrib::lgsvl_msgs::Vector3* angular_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_modules_2fcontrib_2flgsvl_5fmsgs_2fproto_2fdetection2d_2eproto;
};
// -------------------------------------------------------------------

class Detection2D final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.contrib.lgsvl_msgs.Detection2D) */ {
 public:
  inline Detection2D() : Detection2D(nullptr) {}
  ~Detection2D() override;
  explicit constexpr Detection2D(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Detection2D(const Detection2D& from);
  Detection2D(Detection2D&& from) noexcept
    : Detection2D() {
    *this = ::std::move(from);
  }

  inline Detection2D& operator=(const Detection2D& from) {
    CopyFrom(from);
    return *this;
  }
  inline Detection2D& operator=(Detection2D&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Detection2D& default_instance() {
    return *internal_default_instance();
  }
  static inline const Detection2D* internal_default_instance() {
    return reinterpret_cast<const Detection2D*>(
               &_Detection2D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Detection2D& a, Detection2D& b) {
    a.Swap(&b);
  }
  inline void Swap(Detection2D* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Detection2D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Detection2D* New() const final {
    return new Detection2D();
  }

  Detection2D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Detection2D>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Detection2D& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Detection2D& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Detection2D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.contrib.lgsvl_msgs.Detection2D";
  }
  protected:
  explicit Detection2D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelFieldNumber = 3,
    kHeaderFieldNumber = 1,
    kBboxFieldNumber = 5,
    kVelocityFieldNumber = 6,
    kScoreFieldNumber = 4,
    kIdFieldNumber = 2,
  };
  // string label = 3;
  void clear_label();
  const std::string& label() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_label(ArgT0&& arg0, ArgT... args);
  std::string* mutable_label();
  PROTOBUF_MUST_USE_RESULT std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // .apollo.common.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::apollo::common::Header& header() const;
  PROTOBUF_MUST_USE_RESULT ::apollo::common::Header* release_header();
  ::apollo::common::Header* mutable_header();
  void set_allocated_header(::apollo::common::Header* header);
  private:
  const ::apollo::common::Header& _internal_header() const;
  ::apollo::common::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::apollo::common::Header* header);
  ::apollo::common::Header* unsafe_arena_release_header();

  // .apollo.contrib.lgsvl_msgs.BoundingBox2D bbox = 5;
  bool has_bbox() const;
  private:
  bool _internal_has_bbox() const;
  public:
  void clear_bbox();
  const ::apollo::contrib::lgsvl_msgs::BoundingBox2D& bbox() const;
  PROTOBUF_MUST_USE_RESULT ::apollo::contrib::lgsvl_msgs::BoundingBox2D* release_bbox();
  ::apollo::contrib::lgsvl_msgs::BoundingBox2D* mutable_bbox();
  void set_allocated_bbox(::apollo::contrib::lgsvl_msgs::BoundingBox2D* bbox);
  private:
  const ::apollo::contrib::lgsvl_msgs::BoundingBox2D& _internal_bbox() const;
  ::apollo::contrib::lgsvl_msgs::BoundingBox2D* _internal_mutable_bbox();
  public:
  void unsafe_arena_set_allocated_bbox(
      ::apollo::contrib::lgsvl_msgs::BoundingBox2D* bbox);
  ::apollo::contrib::lgsvl_msgs::BoundingBox2D* unsafe_arena_release_bbox();

  // .apollo.contrib.lgsvl_msgs.Twist velocity = 6;
  bool has_velocity() const;
  private:
  bool _internal_has_velocity() const;
  public:
  void clear_velocity();
  const ::apollo::contrib::lgsvl_msgs::Twist& velocity() const;
  PROTOBUF_MUST_USE_RESULT ::apollo::contrib::lgsvl_msgs::Twist* release_velocity();
  ::apollo::contrib::lgsvl_msgs::Twist* mutable_velocity();
  void set_allocated_velocity(::apollo::contrib::lgsvl_msgs::Twist* velocity);
  private:
  const ::apollo::contrib::lgsvl_msgs::Twist& _internal_velocity() const;
  ::apollo::contrib::lgsvl_msgs::Twist* _internal_mutable_velocity();
  public:
  void unsafe_arena_set_allocated_velocity(
      ::apollo::contrib::lgsvl_msgs::Twist* velocity);
  ::apollo::contrib::lgsvl_msgs::Twist* unsafe_arena_release_velocity();

  // double score = 4;
  void clear_score();
  double score() const;
  void set_score(double value);
  private:
  double _internal_score() const;
  void _internal_set_score(double value);
  public:

  // uint32 id = 2;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.contrib.lgsvl_msgs.Detection2D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  ::apollo::common::Header* header_;
  ::apollo::contrib::lgsvl_msgs::BoundingBox2D* bbox_;
  ::apollo::contrib::lgsvl_msgs::Twist* velocity_;
  double score_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_modules_2fcontrib_2flgsvl_5fmsgs_2fproto_2fdetection2d_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BoundingBox2D

// float x = 1;
inline void BoundingBox2D::clear_x() {
  x_ = 0;
}
inline float BoundingBox2D::_internal_x() const {
  return x_;
}
inline float BoundingBox2D::x() const {
  // @@protoc_insertion_point(field_get:apollo.contrib.lgsvl_msgs.BoundingBox2D.x)
  return _internal_x();
}
inline void BoundingBox2D::_internal_set_x(float value) {
  
  x_ = value;
}
inline void BoundingBox2D::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:apollo.contrib.lgsvl_msgs.BoundingBox2D.x)
}

// float y = 2;
inline void BoundingBox2D::clear_y() {
  y_ = 0;
}
inline float BoundingBox2D::_internal_y() const {
  return y_;
}
inline float BoundingBox2D::y() const {
  // @@protoc_insertion_point(field_get:apollo.contrib.lgsvl_msgs.BoundingBox2D.y)
  return _internal_y();
}
inline void BoundingBox2D::_internal_set_y(float value) {
  
  y_ = value;
}
inline void BoundingBox2D::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:apollo.contrib.lgsvl_msgs.BoundingBox2D.y)
}

// float width = 3;
inline void BoundingBox2D::clear_width() {
  width_ = 0;
}
inline float BoundingBox2D::_internal_width() const {
  return width_;
}
inline float BoundingBox2D::width() const {
  // @@protoc_insertion_point(field_get:apollo.contrib.lgsvl_msgs.BoundingBox2D.width)
  return _internal_width();
}
inline void BoundingBox2D::_internal_set_width(float value) {
  
  width_ = value;
}
inline void BoundingBox2D::set_width(float value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:apollo.contrib.lgsvl_msgs.BoundingBox2D.width)
}

// float height = 4;
inline void BoundingBox2D::clear_height() {
  height_ = 0;
}
inline float BoundingBox2D::_internal_height() const {
  return height_;
}
inline float BoundingBox2D::height() const {
  // @@protoc_insertion_point(field_get:apollo.contrib.lgsvl_msgs.BoundingBox2D.height)
  return _internal_height();
}
inline void BoundingBox2D::_internal_set_height(float value) {
  
  height_ = value;
}
inline void BoundingBox2D::set_height(float value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:apollo.contrib.lgsvl_msgs.BoundingBox2D.height)
}

// -------------------------------------------------------------------

// Vector3

// double x = 1;
inline void Vector3::clear_x() {
  x_ = 0;
}
inline double Vector3::_internal_x() const {
  return x_;
}
inline double Vector3::x() const {
  // @@protoc_insertion_point(field_get:apollo.contrib.lgsvl_msgs.Vector3.x)
  return _internal_x();
}
inline void Vector3::_internal_set_x(double value) {
  
  x_ = value;
}
inline void Vector3::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:apollo.contrib.lgsvl_msgs.Vector3.x)
}

// double y = 2;
inline void Vector3::clear_y() {
  y_ = 0;
}
inline double Vector3::_internal_y() const {
  return y_;
}
inline double Vector3::y() const {
  // @@protoc_insertion_point(field_get:apollo.contrib.lgsvl_msgs.Vector3.y)
  return _internal_y();
}
inline void Vector3::_internal_set_y(double value) {
  
  y_ = value;
}
inline void Vector3::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:apollo.contrib.lgsvl_msgs.Vector3.y)
}

// double z = 3;
inline void Vector3::clear_z() {
  z_ = 0;
}
inline double Vector3::_internal_z() const {
  return z_;
}
inline double Vector3::z() const {
  // @@protoc_insertion_point(field_get:apollo.contrib.lgsvl_msgs.Vector3.z)
  return _internal_z();
}
inline void Vector3::_internal_set_z(double value) {
  
  z_ = value;
}
inline void Vector3::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:apollo.contrib.lgsvl_msgs.Vector3.z)
}

// -------------------------------------------------------------------

// Twist

// .apollo.contrib.lgsvl_msgs.Vector3 linear = 1;
inline bool Twist::_internal_has_linear() const {
  return this != internal_default_instance() && linear_ != nullptr;
}
inline bool Twist::has_linear() const {
  return _internal_has_linear();
}
inline void Twist::clear_linear() {
  if (GetArenaForAllocation() == nullptr && linear_ != nullptr) {
    delete linear_;
  }
  linear_ = nullptr;
}
inline const ::apollo::contrib::lgsvl_msgs::Vector3& Twist::_internal_linear() const {
  const ::apollo::contrib::lgsvl_msgs::Vector3* p = linear_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::contrib::lgsvl_msgs::Vector3&>(
      ::apollo::contrib::lgsvl_msgs::_Vector3_default_instance_);
}
inline const ::apollo::contrib::lgsvl_msgs::Vector3& Twist::linear() const {
  // @@protoc_insertion_point(field_get:apollo.contrib.lgsvl_msgs.Twist.linear)
  return _internal_linear();
}
inline void Twist::unsafe_arena_set_allocated_linear(
    ::apollo::contrib::lgsvl_msgs::Vector3* linear) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(linear_);
  }
  linear_ = linear;
  if (linear) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.contrib.lgsvl_msgs.Twist.linear)
}
inline ::apollo::contrib::lgsvl_msgs::Vector3* Twist::release_linear() {
  
  ::apollo::contrib::lgsvl_msgs::Vector3* temp = linear_;
  linear_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::contrib::lgsvl_msgs::Vector3* Twist::unsafe_arena_release_linear() {
  // @@protoc_insertion_point(field_release:apollo.contrib.lgsvl_msgs.Twist.linear)
  
  ::apollo::contrib::lgsvl_msgs::Vector3* temp = linear_;
  linear_ = nullptr;
  return temp;
}
inline ::apollo::contrib::lgsvl_msgs::Vector3* Twist::_internal_mutable_linear() {
  
  if (linear_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::contrib::lgsvl_msgs::Vector3>(GetArenaForAllocation());
    linear_ = p;
  }
  return linear_;
}
inline ::apollo::contrib::lgsvl_msgs::Vector3* Twist::mutable_linear() {
  ::apollo::contrib::lgsvl_msgs::Vector3* _msg = _internal_mutable_linear();
  // @@protoc_insertion_point(field_mutable:apollo.contrib.lgsvl_msgs.Twist.linear)
  return _msg;
}
inline void Twist::set_allocated_linear(::apollo::contrib::lgsvl_msgs::Vector3* linear) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete linear_;
  }
  if (linear) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::apollo::contrib::lgsvl_msgs::Vector3>::GetOwningArena(linear);
    if (message_arena != submessage_arena) {
      linear = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, linear, submessage_arena);
    }
    
  } else {
    
  }
  linear_ = linear;
  // @@protoc_insertion_point(field_set_allocated:apollo.contrib.lgsvl_msgs.Twist.linear)
}

// .apollo.contrib.lgsvl_msgs.Vector3 angular = 2;
inline bool Twist::_internal_has_angular() const {
  return this != internal_default_instance() && angular_ != nullptr;
}
inline bool Twist::has_angular() const {
  return _internal_has_angular();
}
inline void Twist::clear_angular() {
  if (GetArenaForAllocation() == nullptr && angular_ != nullptr) {
    delete angular_;
  }
  angular_ = nullptr;
}
inline const ::apollo::contrib::lgsvl_msgs::Vector3& Twist::_internal_angular() const {
  const ::apollo::contrib::lgsvl_msgs::Vector3* p = angular_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::contrib::lgsvl_msgs::Vector3&>(
      ::apollo::contrib::lgsvl_msgs::_Vector3_default_instance_);
}
inline const ::apollo::contrib::lgsvl_msgs::Vector3& Twist::angular() const {
  // @@protoc_insertion_point(field_get:apollo.contrib.lgsvl_msgs.Twist.angular)
  return _internal_angular();
}
inline void Twist::unsafe_arena_set_allocated_angular(
    ::apollo::contrib::lgsvl_msgs::Vector3* angular) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(angular_);
  }
  angular_ = angular;
  if (angular) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.contrib.lgsvl_msgs.Twist.angular)
}
inline ::apollo::contrib::lgsvl_msgs::Vector3* Twist::release_angular() {
  
  ::apollo::contrib::lgsvl_msgs::Vector3* temp = angular_;
  angular_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::contrib::lgsvl_msgs::Vector3* Twist::unsafe_arena_release_angular() {
  // @@protoc_insertion_point(field_release:apollo.contrib.lgsvl_msgs.Twist.angular)
  
  ::apollo::contrib::lgsvl_msgs::Vector3* temp = angular_;
  angular_ = nullptr;
  return temp;
}
inline ::apollo::contrib::lgsvl_msgs::Vector3* Twist::_internal_mutable_angular() {
  
  if (angular_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::contrib::lgsvl_msgs::Vector3>(GetArenaForAllocation());
    angular_ = p;
  }
  return angular_;
}
inline ::apollo::contrib::lgsvl_msgs::Vector3* Twist::mutable_angular() {
  ::apollo::contrib::lgsvl_msgs::Vector3* _msg = _internal_mutable_angular();
  // @@protoc_insertion_point(field_mutable:apollo.contrib.lgsvl_msgs.Twist.angular)
  return _msg;
}
inline void Twist::set_allocated_angular(::apollo::contrib::lgsvl_msgs::Vector3* angular) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete angular_;
  }
  if (angular) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::apollo::contrib::lgsvl_msgs::Vector3>::GetOwningArena(angular);
    if (message_arena != submessage_arena) {
      angular = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, angular, submessage_arena);
    }
    
  } else {
    
  }
  angular_ = angular;
  // @@protoc_insertion_point(field_set_allocated:apollo.contrib.lgsvl_msgs.Twist.angular)
}

// -------------------------------------------------------------------

// Detection2D

// .apollo.common.Header header = 1;
inline bool Detection2D::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool Detection2D::has_header() const {
  return _internal_has_header();
}
inline const ::apollo::common::Header& Detection2D::_internal_header() const {
  const ::apollo::common::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::common::Header&>(
      ::apollo::common::_Header_default_instance_);
}
inline const ::apollo::common::Header& Detection2D::header() const {
  // @@protoc_insertion_point(field_get:apollo.contrib.lgsvl_msgs.Detection2D.header)
  return _internal_header();
}
inline void Detection2D::unsafe_arena_set_allocated_header(
    ::apollo::common::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.contrib.lgsvl_msgs.Detection2D.header)
}
inline ::apollo::common::Header* Detection2D::release_header() {
  
  ::apollo::common::Header* temp = header_;
  header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::common::Header* Detection2D::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:apollo.contrib.lgsvl_msgs.Detection2D.header)
  
  ::apollo::common::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::apollo::common::Header* Detection2D::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Header>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::apollo::common::Header* Detection2D::mutable_header() {
  ::apollo::common::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:apollo.contrib.lgsvl_msgs.Detection2D.header)
  return _msg;
}
inline void Detection2D::set_allocated_header(::apollo::common::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:apollo.contrib.lgsvl_msgs.Detection2D.header)
}

// uint32 id = 2;
inline void Detection2D::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Detection2D::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Detection2D::id() const {
  // @@protoc_insertion_point(field_get:apollo.contrib.lgsvl_msgs.Detection2D.id)
  return _internal_id();
}
inline void Detection2D::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void Detection2D::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:apollo.contrib.lgsvl_msgs.Detection2D.id)
}

// string label = 3;
inline void Detection2D::clear_label() {
  label_.ClearToEmpty();
}
inline const std::string& Detection2D::label() const {
  // @@protoc_insertion_point(field_get:apollo.contrib.lgsvl_msgs.Detection2D.label)
  return _internal_label();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Detection2D::set_label(ArgT0&& arg0, ArgT... args) {
 
 label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.contrib.lgsvl_msgs.Detection2D.label)
}
inline std::string* Detection2D::mutable_label() {
  std::string* _s = _internal_mutable_label();
  // @@protoc_insertion_point(field_mutable:apollo.contrib.lgsvl_msgs.Detection2D.label)
  return _s;
}
inline const std::string& Detection2D::_internal_label() const {
  return label_.Get();
}
inline void Detection2D::_internal_set_label(const std::string& value) {
  
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Detection2D::_internal_mutable_label() {
  
  return label_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Detection2D::release_label() {
  // @@protoc_insertion_point(field_release:apollo.contrib.lgsvl_msgs.Detection2D.label)
  return label_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Detection2D::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    
  } else {
    
  }
  label_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:apollo.contrib.lgsvl_msgs.Detection2D.label)
}

// double score = 4;
inline void Detection2D::clear_score() {
  score_ = 0;
}
inline double Detection2D::_internal_score() const {
  return score_;
}
inline double Detection2D::score() const {
  // @@protoc_insertion_point(field_get:apollo.contrib.lgsvl_msgs.Detection2D.score)
  return _internal_score();
}
inline void Detection2D::_internal_set_score(double value) {
  
  score_ = value;
}
inline void Detection2D::set_score(double value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:apollo.contrib.lgsvl_msgs.Detection2D.score)
}

// .apollo.contrib.lgsvl_msgs.BoundingBox2D bbox = 5;
inline bool Detection2D::_internal_has_bbox() const {
  return this != internal_default_instance() && bbox_ != nullptr;
}
inline bool Detection2D::has_bbox() const {
  return _internal_has_bbox();
}
inline void Detection2D::clear_bbox() {
  if (GetArenaForAllocation() == nullptr && bbox_ != nullptr) {
    delete bbox_;
  }
  bbox_ = nullptr;
}
inline const ::apollo::contrib::lgsvl_msgs::BoundingBox2D& Detection2D::_internal_bbox() const {
  const ::apollo::contrib::lgsvl_msgs::BoundingBox2D* p = bbox_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::contrib::lgsvl_msgs::BoundingBox2D&>(
      ::apollo::contrib::lgsvl_msgs::_BoundingBox2D_default_instance_);
}
inline const ::apollo::contrib::lgsvl_msgs::BoundingBox2D& Detection2D::bbox() const {
  // @@protoc_insertion_point(field_get:apollo.contrib.lgsvl_msgs.Detection2D.bbox)
  return _internal_bbox();
}
inline void Detection2D::unsafe_arena_set_allocated_bbox(
    ::apollo::contrib::lgsvl_msgs::BoundingBox2D* bbox) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bbox_);
  }
  bbox_ = bbox;
  if (bbox) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.contrib.lgsvl_msgs.Detection2D.bbox)
}
inline ::apollo::contrib::lgsvl_msgs::BoundingBox2D* Detection2D::release_bbox() {
  
  ::apollo::contrib::lgsvl_msgs::BoundingBox2D* temp = bbox_;
  bbox_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::contrib::lgsvl_msgs::BoundingBox2D* Detection2D::unsafe_arena_release_bbox() {
  // @@protoc_insertion_point(field_release:apollo.contrib.lgsvl_msgs.Detection2D.bbox)
  
  ::apollo::contrib::lgsvl_msgs::BoundingBox2D* temp = bbox_;
  bbox_ = nullptr;
  return temp;
}
inline ::apollo::contrib::lgsvl_msgs::BoundingBox2D* Detection2D::_internal_mutable_bbox() {
  
  if (bbox_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::contrib::lgsvl_msgs::BoundingBox2D>(GetArenaForAllocation());
    bbox_ = p;
  }
  return bbox_;
}
inline ::apollo::contrib::lgsvl_msgs::BoundingBox2D* Detection2D::mutable_bbox() {
  ::apollo::contrib::lgsvl_msgs::BoundingBox2D* _msg = _internal_mutable_bbox();
  // @@protoc_insertion_point(field_mutable:apollo.contrib.lgsvl_msgs.Detection2D.bbox)
  return _msg;
}
inline void Detection2D::set_allocated_bbox(::apollo::contrib::lgsvl_msgs::BoundingBox2D* bbox) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete bbox_;
  }
  if (bbox) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::apollo::contrib::lgsvl_msgs::BoundingBox2D>::GetOwningArena(bbox);
    if (message_arena != submessage_arena) {
      bbox = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bbox, submessage_arena);
    }
    
  } else {
    
  }
  bbox_ = bbox;
  // @@protoc_insertion_point(field_set_allocated:apollo.contrib.lgsvl_msgs.Detection2D.bbox)
}

// .apollo.contrib.lgsvl_msgs.Twist velocity = 6;
inline bool Detection2D::_internal_has_velocity() const {
  return this != internal_default_instance() && velocity_ != nullptr;
}
inline bool Detection2D::has_velocity() const {
  return _internal_has_velocity();
}
inline void Detection2D::clear_velocity() {
  if (GetArenaForAllocation() == nullptr && velocity_ != nullptr) {
    delete velocity_;
  }
  velocity_ = nullptr;
}
inline const ::apollo::contrib::lgsvl_msgs::Twist& Detection2D::_internal_velocity() const {
  const ::apollo::contrib::lgsvl_msgs::Twist* p = velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::contrib::lgsvl_msgs::Twist&>(
      ::apollo::contrib::lgsvl_msgs::_Twist_default_instance_);
}
inline const ::apollo::contrib::lgsvl_msgs::Twist& Detection2D::velocity() const {
  // @@protoc_insertion_point(field_get:apollo.contrib.lgsvl_msgs.Detection2D.velocity)
  return _internal_velocity();
}
inline void Detection2D::unsafe_arena_set_allocated_velocity(
    ::apollo::contrib::lgsvl_msgs::Twist* velocity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(velocity_);
  }
  velocity_ = velocity;
  if (velocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.contrib.lgsvl_msgs.Detection2D.velocity)
}
inline ::apollo::contrib::lgsvl_msgs::Twist* Detection2D::release_velocity() {
  
  ::apollo::contrib::lgsvl_msgs::Twist* temp = velocity_;
  velocity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::contrib::lgsvl_msgs::Twist* Detection2D::unsafe_arena_release_velocity() {
  // @@protoc_insertion_point(field_release:apollo.contrib.lgsvl_msgs.Detection2D.velocity)
  
  ::apollo::contrib::lgsvl_msgs::Twist* temp = velocity_;
  velocity_ = nullptr;
  return temp;
}
inline ::apollo::contrib::lgsvl_msgs::Twist* Detection2D::_internal_mutable_velocity() {
  
  if (velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::contrib::lgsvl_msgs::Twist>(GetArenaForAllocation());
    velocity_ = p;
  }
  return velocity_;
}
inline ::apollo::contrib::lgsvl_msgs::Twist* Detection2D::mutable_velocity() {
  ::apollo::contrib::lgsvl_msgs::Twist* _msg = _internal_mutable_velocity();
  // @@protoc_insertion_point(field_mutable:apollo.contrib.lgsvl_msgs.Detection2D.velocity)
  return _msg;
}
inline void Detection2D::set_allocated_velocity(::apollo::contrib::lgsvl_msgs::Twist* velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete velocity_;
  }
  if (velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::apollo::contrib::lgsvl_msgs::Twist>::GetOwningArena(velocity);
    if (message_arena != submessage_arena) {
      velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity, submessage_arena);
    }
    
  } else {
    
  }
  velocity_ = velocity;
  // @@protoc_insertion_point(field_set_allocated:apollo.contrib.lgsvl_msgs.Detection2D.velocity)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace lgsvl_msgs
}  // namespace contrib
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fcontrib_2flgsvl_5fmsgs_2fproto_2fdetection2d_2eproto
