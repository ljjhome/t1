// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/contrib/lgsvl_msgs/proto/detection3d.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fcontrib_2flgsvl_5fmsgs_2fproto_2fdetection3d_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fcontrib_2flgsvl_5fmsgs_2fproto_2fdetection3d_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "modules/common/proto/header.pb.h"
#include "modules/common/proto/geometry.pb.h"
#include "modules/contrib/lgsvl_msgs/proto/detection2d.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fcontrib_2flgsvl_5fmsgs_2fproto_2fdetection3d_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fcontrib_2flgsvl_5fmsgs_2fproto_2fdetection3d_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fcontrib_2flgsvl_5fmsgs_2fproto_2fdetection3d_2eproto;
namespace apollo {
namespace contrib {
namespace lgsvl_msgs {
class BoundingBox3D;
struct BoundingBox3DDefaultTypeInternal;
extern BoundingBox3DDefaultTypeInternal _BoundingBox3D_default_instance_;
class Detection3D;
struct Detection3DDefaultTypeInternal;
extern Detection3DDefaultTypeInternal _Detection3D_default_instance_;
class Pose;
struct PoseDefaultTypeInternal;
extern PoseDefaultTypeInternal _Pose_default_instance_;
}  // namespace lgsvl_msgs
}  // namespace contrib
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::contrib::lgsvl_msgs::BoundingBox3D* Arena::CreateMaybeMessage<::apollo::contrib::lgsvl_msgs::BoundingBox3D>(Arena*);
template<> ::apollo::contrib::lgsvl_msgs::Detection3D* Arena::CreateMaybeMessage<::apollo::contrib::lgsvl_msgs::Detection3D>(Arena*);
template<> ::apollo::contrib::lgsvl_msgs::Pose* Arena::CreateMaybeMessage<::apollo::contrib::lgsvl_msgs::Pose>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace contrib {
namespace lgsvl_msgs {

// ===================================================================

class Pose final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.contrib.lgsvl_msgs.Pose) */ {
 public:
  inline Pose() : Pose(nullptr) {}
  ~Pose() override;
  explicit constexpr Pose(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Pose(const Pose& from);
  Pose(Pose&& from) noexcept
    : Pose() {
    *this = ::std::move(from);
  }

  inline Pose& operator=(const Pose& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pose& operator=(Pose&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Pose& default_instance() {
    return *internal_default_instance();
  }
  static inline const Pose* internal_default_instance() {
    return reinterpret_cast<const Pose*>(
               &_Pose_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Pose& a, Pose& b) {
    a.Swap(&b);
  }
  inline void Swap(Pose* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pose* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Pose* New() const final {
    return new Pose();
  }

  Pose* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Pose>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Pose& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Pose& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pose* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.contrib.lgsvl_msgs.Pose";
  }
  protected:
  explicit Pose(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 1,
    kOrientationFieldNumber = 2,
  };
  // .apollo.common.Point3D position = 1;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::apollo::common::Point3D& position() const;
  PROTOBUF_MUST_USE_RESULT ::apollo::common::Point3D* release_position();
  ::apollo::common::Point3D* mutable_position();
  void set_allocated_position(::apollo::common::Point3D* position);
  private:
  const ::apollo::common::Point3D& _internal_position() const;
  ::apollo::common::Point3D* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::apollo::common::Point3D* position);
  ::apollo::common::Point3D* unsafe_arena_release_position();

  // .apollo.common.Quaternion orientation = 2;
  bool has_orientation() const;
  private:
  bool _internal_has_orientation() const;
  public:
  void clear_orientation();
  const ::apollo::common::Quaternion& orientation() const;
  PROTOBUF_MUST_USE_RESULT ::apollo::common::Quaternion* release_orientation();
  ::apollo::common::Quaternion* mutable_orientation();
  void set_allocated_orientation(::apollo::common::Quaternion* orientation);
  private:
  const ::apollo::common::Quaternion& _internal_orientation() const;
  ::apollo::common::Quaternion* _internal_mutable_orientation();
  public:
  void unsafe_arena_set_allocated_orientation(
      ::apollo::common::Quaternion* orientation);
  ::apollo::common::Quaternion* unsafe_arena_release_orientation();

  // @@protoc_insertion_point(class_scope:apollo.contrib.lgsvl_msgs.Pose)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::apollo::common::Point3D* position_;
  ::apollo::common::Quaternion* orientation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_modules_2fcontrib_2flgsvl_5fmsgs_2fproto_2fdetection3d_2eproto;
};
// -------------------------------------------------------------------

class BoundingBox3D final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.contrib.lgsvl_msgs.BoundingBox3D) */ {
 public:
  inline BoundingBox3D() : BoundingBox3D(nullptr) {}
  ~BoundingBox3D() override;
  explicit constexpr BoundingBox3D(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BoundingBox3D(const BoundingBox3D& from);
  BoundingBox3D(BoundingBox3D&& from) noexcept
    : BoundingBox3D() {
    *this = ::std::move(from);
  }

  inline BoundingBox3D& operator=(const BoundingBox3D& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoundingBox3D& operator=(BoundingBox3D&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BoundingBox3D& default_instance() {
    return *internal_default_instance();
  }
  static inline const BoundingBox3D* internal_default_instance() {
    return reinterpret_cast<const BoundingBox3D*>(
               &_BoundingBox3D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BoundingBox3D& a, BoundingBox3D& b) {
    a.Swap(&b);
  }
  inline void Swap(BoundingBox3D* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BoundingBox3D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BoundingBox3D* New() const final {
    return new BoundingBox3D();
  }

  BoundingBox3D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BoundingBox3D>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BoundingBox3D& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BoundingBox3D& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BoundingBox3D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.contrib.lgsvl_msgs.BoundingBox3D";
  }
  protected:
  explicit BoundingBox3D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 1,
    kSizeFieldNumber = 2,
  };
  // .apollo.contrib.lgsvl_msgs.Pose position = 1;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::apollo::contrib::lgsvl_msgs::Pose& position() const;
  PROTOBUF_MUST_USE_RESULT ::apollo::contrib::lgsvl_msgs::Pose* release_position();
  ::apollo::contrib::lgsvl_msgs::Pose* mutable_position();
  void set_allocated_position(::apollo::contrib::lgsvl_msgs::Pose* position);
  private:
  const ::apollo::contrib::lgsvl_msgs::Pose& _internal_position() const;
  ::apollo::contrib::lgsvl_msgs::Pose* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::apollo::contrib::lgsvl_msgs::Pose* position);
  ::apollo::contrib::lgsvl_msgs::Pose* unsafe_arena_release_position();

  // .apollo.contrib.lgsvl_msgs.Vector3 size = 2;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  const ::apollo::contrib::lgsvl_msgs::Vector3& size() const;
  PROTOBUF_MUST_USE_RESULT ::apollo::contrib::lgsvl_msgs::Vector3* release_size();
  ::apollo::contrib::lgsvl_msgs::Vector3* mutable_size();
  void set_allocated_size(::apollo::contrib::lgsvl_msgs::Vector3* size);
  private:
  const ::apollo::contrib::lgsvl_msgs::Vector3& _internal_size() const;
  ::apollo::contrib::lgsvl_msgs::Vector3* _internal_mutable_size();
  public:
  void unsafe_arena_set_allocated_size(
      ::apollo::contrib::lgsvl_msgs::Vector3* size);
  ::apollo::contrib::lgsvl_msgs::Vector3* unsafe_arena_release_size();

  // @@protoc_insertion_point(class_scope:apollo.contrib.lgsvl_msgs.BoundingBox3D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::apollo::contrib::lgsvl_msgs::Pose* position_;
  ::apollo::contrib::lgsvl_msgs::Vector3* size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_modules_2fcontrib_2flgsvl_5fmsgs_2fproto_2fdetection3d_2eproto;
};
// -------------------------------------------------------------------

class Detection3D final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.contrib.lgsvl_msgs.Detection3D) */ {
 public:
  inline Detection3D() : Detection3D(nullptr) {}
  ~Detection3D() override;
  explicit constexpr Detection3D(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Detection3D(const Detection3D& from);
  Detection3D(Detection3D&& from) noexcept
    : Detection3D() {
    *this = ::std::move(from);
  }

  inline Detection3D& operator=(const Detection3D& from) {
    CopyFrom(from);
    return *this;
  }
  inline Detection3D& operator=(Detection3D&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Detection3D& default_instance() {
    return *internal_default_instance();
  }
  static inline const Detection3D* internal_default_instance() {
    return reinterpret_cast<const Detection3D*>(
               &_Detection3D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Detection3D& a, Detection3D& b) {
    a.Swap(&b);
  }
  inline void Swap(Detection3D* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Detection3D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Detection3D* New() const final {
    return new Detection3D();
  }

  Detection3D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Detection3D>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Detection3D& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Detection3D& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Detection3D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.contrib.lgsvl_msgs.Detection3D";
  }
  protected:
  explicit Detection3D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelFieldNumber = 3,
    kHeaderFieldNumber = 1,
    kBboxFieldNumber = 5,
    kVelocityFieldNumber = 6,
    kScoreFieldNumber = 4,
    kIdFieldNumber = 2,
  };
  // string label = 3;
  void clear_label();
  const std::string& label() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_label(ArgT0&& arg0, ArgT... args);
  std::string* mutable_label();
  PROTOBUF_MUST_USE_RESULT std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // .apollo.common.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::apollo::common::Header& header() const;
  PROTOBUF_MUST_USE_RESULT ::apollo::common::Header* release_header();
  ::apollo::common::Header* mutable_header();
  void set_allocated_header(::apollo::common::Header* header);
  private:
  const ::apollo::common::Header& _internal_header() const;
  ::apollo::common::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::apollo::common::Header* header);
  ::apollo::common::Header* unsafe_arena_release_header();

  // .apollo.contrib.lgsvl_msgs.BoundingBox3D bbox = 5;
  bool has_bbox() const;
  private:
  bool _internal_has_bbox() const;
  public:
  void clear_bbox();
  const ::apollo::contrib::lgsvl_msgs::BoundingBox3D& bbox() const;
  PROTOBUF_MUST_USE_RESULT ::apollo::contrib::lgsvl_msgs::BoundingBox3D* release_bbox();
  ::apollo::contrib::lgsvl_msgs::BoundingBox3D* mutable_bbox();
  void set_allocated_bbox(::apollo::contrib::lgsvl_msgs::BoundingBox3D* bbox);
  private:
  const ::apollo::contrib::lgsvl_msgs::BoundingBox3D& _internal_bbox() const;
  ::apollo::contrib::lgsvl_msgs::BoundingBox3D* _internal_mutable_bbox();
  public:
  void unsafe_arena_set_allocated_bbox(
      ::apollo::contrib::lgsvl_msgs::BoundingBox3D* bbox);
  ::apollo::contrib::lgsvl_msgs::BoundingBox3D* unsafe_arena_release_bbox();

  // .apollo.contrib.lgsvl_msgs.Twist velocity = 6;
  bool has_velocity() const;
  private:
  bool _internal_has_velocity() const;
  public:
  void clear_velocity();
  const ::apollo::contrib::lgsvl_msgs::Twist& velocity() const;
  PROTOBUF_MUST_USE_RESULT ::apollo::contrib::lgsvl_msgs::Twist* release_velocity();
  ::apollo::contrib::lgsvl_msgs::Twist* mutable_velocity();
  void set_allocated_velocity(::apollo::contrib::lgsvl_msgs::Twist* velocity);
  private:
  const ::apollo::contrib::lgsvl_msgs::Twist& _internal_velocity() const;
  ::apollo::contrib::lgsvl_msgs::Twist* _internal_mutable_velocity();
  public:
  void unsafe_arena_set_allocated_velocity(
      ::apollo::contrib::lgsvl_msgs::Twist* velocity);
  ::apollo::contrib::lgsvl_msgs::Twist* unsafe_arena_release_velocity();

  // double score = 4;
  void clear_score();
  double score() const;
  void set_score(double value);
  private:
  double _internal_score() const;
  void _internal_set_score(double value);
  public:

  // uint32 id = 2;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.contrib.lgsvl_msgs.Detection3D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  ::apollo::common::Header* header_;
  ::apollo::contrib::lgsvl_msgs::BoundingBox3D* bbox_;
  ::apollo::contrib::lgsvl_msgs::Twist* velocity_;
  double score_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_modules_2fcontrib_2flgsvl_5fmsgs_2fproto_2fdetection3d_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Pose

// .apollo.common.Point3D position = 1;
inline bool Pose::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool Pose::has_position() const {
  return _internal_has_position();
}
inline const ::apollo::common::Point3D& Pose::_internal_position() const {
  const ::apollo::common::Point3D* p = position_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::common::Point3D&>(
      ::apollo::common::_Point3D_default_instance_);
}
inline const ::apollo::common::Point3D& Pose::position() const {
  // @@protoc_insertion_point(field_get:apollo.contrib.lgsvl_msgs.Pose.position)
  return _internal_position();
}
inline void Pose::unsafe_arena_set_allocated_position(
    ::apollo::common::Point3D* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.contrib.lgsvl_msgs.Pose.position)
}
inline ::apollo::common::Point3D* Pose::release_position() {
  
  ::apollo::common::Point3D* temp = position_;
  position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::common::Point3D* Pose::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:apollo.contrib.lgsvl_msgs.Pose.position)
  
  ::apollo::common::Point3D* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::apollo::common::Point3D* Pose::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Point3D>(GetArenaForAllocation());
    position_ = p;
  }
  return position_;
}
inline ::apollo::common::Point3D* Pose::mutable_position() {
  ::apollo::common::Point3D* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:apollo.contrib.lgsvl_msgs.Pose.position)
  return _msg;
}
inline void Pose::set_allocated_position(::apollo::common::Point3D* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position));
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:apollo.contrib.lgsvl_msgs.Pose.position)
}

// .apollo.common.Quaternion orientation = 2;
inline bool Pose::_internal_has_orientation() const {
  return this != internal_default_instance() && orientation_ != nullptr;
}
inline bool Pose::has_orientation() const {
  return _internal_has_orientation();
}
inline const ::apollo::common::Quaternion& Pose::_internal_orientation() const {
  const ::apollo::common::Quaternion* p = orientation_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::common::Quaternion&>(
      ::apollo::common::_Quaternion_default_instance_);
}
inline const ::apollo::common::Quaternion& Pose::orientation() const {
  // @@protoc_insertion_point(field_get:apollo.contrib.lgsvl_msgs.Pose.orientation)
  return _internal_orientation();
}
inline void Pose::unsafe_arena_set_allocated_orientation(
    ::apollo::common::Quaternion* orientation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientation_);
  }
  orientation_ = orientation;
  if (orientation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.contrib.lgsvl_msgs.Pose.orientation)
}
inline ::apollo::common::Quaternion* Pose::release_orientation() {
  
  ::apollo::common::Quaternion* temp = orientation_;
  orientation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::common::Quaternion* Pose::unsafe_arena_release_orientation() {
  // @@protoc_insertion_point(field_release:apollo.contrib.lgsvl_msgs.Pose.orientation)
  
  ::apollo::common::Quaternion* temp = orientation_;
  orientation_ = nullptr;
  return temp;
}
inline ::apollo::common::Quaternion* Pose::_internal_mutable_orientation() {
  
  if (orientation_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Quaternion>(GetArenaForAllocation());
    orientation_ = p;
  }
  return orientation_;
}
inline ::apollo::common::Quaternion* Pose::mutable_orientation() {
  ::apollo::common::Quaternion* _msg = _internal_mutable_orientation();
  // @@protoc_insertion_point(field_mutable:apollo.contrib.lgsvl_msgs.Pose.orientation)
  return _msg;
}
inline void Pose::set_allocated_orientation(::apollo::common::Quaternion* orientation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientation_);
  }
  if (orientation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientation));
    if (message_arena != submessage_arena) {
      orientation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orientation, submessage_arena);
    }
    
  } else {
    
  }
  orientation_ = orientation;
  // @@protoc_insertion_point(field_set_allocated:apollo.contrib.lgsvl_msgs.Pose.orientation)
}

// -------------------------------------------------------------------

// BoundingBox3D

// .apollo.contrib.lgsvl_msgs.Pose position = 1;
inline bool BoundingBox3D::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool BoundingBox3D::has_position() const {
  return _internal_has_position();
}
inline void BoundingBox3D::clear_position() {
  if (GetArenaForAllocation() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
inline const ::apollo::contrib::lgsvl_msgs::Pose& BoundingBox3D::_internal_position() const {
  const ::apollo::contrib::lgsvl_msgs::Pose* p = position_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::contrib::lgsvl_msgs::Pose&>(
      ::apollo::contrib::lgsvl_msgs::_Pose_default_instance_);
}
inline const ::apollo::contrib::lgsvl_msgs::Pose& BoundingBox3D::position() const {
  // @@protoc_insertion_point(field_get:apollo.contrib.lgsvl_msgs.BoundingBox3D.position)
  return _internal_position();
}
inline void BoundingBox3D::unsafe_arena_set_allocated_position(
    ::apollo::contrib::lgsvl_msgs::Pose* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.contrib.lgsvl_msgs.BoundingBox3D.position)
}
inline ::apollo::contrib::lgsvl_msgs::Pose* BoundingBox3D::release_position() {
  
  ::apollo::contrib::lgsvl_msgs::Pose* temp = position_;
  position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::contrib::lgsvl_msgs::Pose* BoundingBox3D::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:apollo.contrib.lgsvl_msgs.BoundingBox3D.position)
  
  ::apollo::contrib::lgsvl_msgs::Pose* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::apollo::contrib::lgsvl_msgs::Pose* BoundingBox3D::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::contrib::lgsvl_msgs::Pose>(GetArenaForAllocation());
    position_ = p;
  }
  return position_;
}
inline ::apollo::contrib::lgsvl_msgs::Pose* BoundingBox3D::mutable_position() {
  ::apollo::contrib::lgsvl_msgs::Pose* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:apollo.contrib.lgsvl_msgs.BoundingBox3D.position)
  return _msg;
}
inline void BoundingBox3D::set_allocated_position(::apollo::contrib::lgsvl_msgs::Pose* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::apollo::contrib::lgsvl_msgs::Pose>::GetOwningArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:apollo.contrib.lgsvl_msgs.BoundingBox3D.position)
}

// .apollo.contrib.lgsvl_msgs.Vector3 size = 2;
inline bool BoundingBox3D::_internal_has_size() const {
  return this != internal_default_instance() && size_ != nullptr;
}
inline bool BoundingBox3D::has_size() const {
  return _internal_has_size();
}
inline const ::apollo::contrib::lgsvl_msgs::Vector3& BoundingBox3D::_internal_size() const {
  const ::apollo::contrib::lgsvl_msgs::Vector3* p = size_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::contrib::lgsvl_msgs::Vector3&>(
      ::apollo::contrib::lgsvl_msgs::_Vector3_default_instance_);
}
inline const ::apollo::contrib::lgsvl_msgs::Vector3& BoundingBox3D::size() const {
  // @@protoc_insertion_point(field_get:apollo.contrib.lgsvl_msgs.BoundingBox3D.size)
  return _internal_size();
}
inline void BoundingBox3D::unsafe_arena_set_allocated_size(
    ::apollo::contrib::lgsvl_msgs::Vector3* size) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(size_);
  }
  size_ = size;
  if (size) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.contrib.lgsvl_msgs.BoundingBox3D.size)
}
inline ::apollo::contrib::lgsvl_msgs::Vector3* BoundingBox3D::release_size() {
  
  ::apollo::contrib::lgsvl_msgs::Vector3* temp = size_;
  size_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::contrib::lgsvl_msgs::Vector3* BoundingBox3D::unsafe_arena_release_size() {
  // @@protoc_insertion_point(field_release:apollo.contrib.lgsvl_msgs.BoundingBox3D.size)
  
  ::apollo::contrib::lgsvl_msgs::Vector3* temp = size_;
  size_ = nullptr;
  return temp;
}
inline ::apollo::contrib::lgsvl_msgs::Vector3* BoundingBox3D::_internal_mutable_size() {
  
  if (size_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::contrib::lgsvl_msgs::Vector3>(GetArenaForAllocation());
    size_ = p;
  }
  return size_;
}
inline ::apollo::contrib::lgsvl_msgs::Vector3* BoundingBox3D::mutable_size() {
  ::apollo::contrib::lgsvl_msgs::Vector3* _msg = _internal_mutable_size();
  // @@protoc_insertion_point(field_mutable:apollo.contrib.lgsvl_msgs.BoundingBox3D.size)
  return _msg;
}
inline void BoundingBox3D::set_allocated_size(::apollo::contrib::lgsvl_msgs::Vector3* size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(size_);
  }
  if (size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(size));
    if (message_arena != submessage_arena) {
      size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, size, submessage_arena);
    }
    
  } else {
    
  }
  size_ = size;
  // @@protoc_insertion_point(field_set_allocated:apollo.contrib.lgsvl_msgs.BoundingBox3D.size)
}

// -------------------------------------------------------------------

// Detection3D

// .apollo.common.Header header = 1;
inline bool Detection3D::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool Detection3D::has_header() const {
  return _internal_has_header();
}
inline const ::apollo::common::Header& Detection3D::_internal_header() const {
  const ::apollo::common::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::common::Header&>(
      ::apollo::common::_Header_default_instance_);
}
inline const ::apollo::common::Header& Detection3D::header() const {
  // @@protoc_insertion_point(field_get:apollo.contrib.lgsvl_msgs.Detection3D.header)
  return _internal_header();
}
inline void Detection3D::unsafe_arena_set_allocated_header(
    ::apollo::common::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.contrib.lgsvl_msgs.Detection3D.header)
}
inline ::apollo::common::Header* Detection3D::release_header() {
  
  ::apollo::common::Header* temp = header_;
  header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::common::Header* Detection3D::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:apollo.contrib.lgsvl_msgs.Detection3D.header)
  
  ::apollo::common::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::apollo::common::Header* Detection3D::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Header>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::apollo::common::Header* Detection3D::mutable_header() {
  ::apollo::common::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:apollo.contrib.lgsvl_msgs.Detection3D.header)
  return _msg;
}
inline void Detection3D::set_allocated_header(::apollo::common::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:apollo.contrib.lgsvl_msgs.Detection3D.header)
}

// uint32 id = 2;
inline void Detection3D::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Detection3D::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Detection3D::id() const {
  // @@protoc_insertion_point(field_get:apollo.contrib.lgsvl_msgs.Detection3D.id)
  return _internal_id();
}
inline void Detection3D::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void Detection3D::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:apollo.contrib.lgsvl_msgs.Detection3D.id)
}

// string label = 3;
inline void Detection3D::clear_label() {
  label_.ClearToEmpty();
}
inline const std::string& Detection3D::label() const {
  // @@protoc_insertion_point(field_get:apollo.contrib.lgsvl_msgs.Detection3D.label)
  return _internal_label();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Detection3D::set_label(ArgT0&& arg0, ArgT... args) {
 
 label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.contrib.lgsvl_msgs.Detection3D.label)
}
inline std::string* Detection3D::mutable_label() {
  std::string* _s = _internal_mutable_label();
  // @@protoc_insertion_point(field_mutable:apollo.contrib.lgsvl_msgs.Detection3D.label)
  return _s;
}
inline const std::string& Detection3D::_internal_label() const {
  return label_.Get();
}
inline void Detection3D::_internal_set_label(const std::string& value) {
  
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Detection3D::_internal_mutable_label() {
  
  return label_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Detection3D::release_label() {
  // @@protoc_insertion_point(field_release:apollo.contrib.lgsvl_msgs.Detection3D.label)
  return label_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Detection3D::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    
  } else {
    
  }
  label_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:apollo.contrib.lgsvl_msgs.Detection3D.label)
}

// double score = 4;
inline void Detection3D::clear_score() {
  score_ = 0;
}
inline double Detection3D::_internal_score() const {
  return score_;
}
inline double Detection3D::score() const {
  // @@protoc_insertion_point(field_get:apollo.contrib.lgsvl_msgs.Detection3D.score)
  return _internal_score();
}
inline void Detection3D::_internal_set_score(double value) {
  
  score_ = value;
}
inline void Detection3D::set_score(double value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:apollo.contrib.lgsvl_msgs.Detection3D.score)
}

// .apollo.contrib.lgsvl_msgs.BoundingBox3D bbox = 5;
inline bool Detection3D::_internal_has_bbox() const {
  return this != internal_default_instance() && bbox_ != nullptr;
}
inline bool Detection3D::has_bbox() const {
  return _internal_has_bbox();
}
inline void Detection3D::clear_bbox() {
  if (GetArenaForAllocation() == nullptr && bbox_ != nullptr) {
    delete bbox_;
  }
  bbox_ = nullptr;
}
inline const ::apollo::contrib::lgsvl_msgs::BoundingBox3D& Detection3D::_internal_bbox() const {
  const ::apollo::contrib::lgsvl_msgs::BoundingBox3D* p = bbox_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::contrib::lgsvl_msgs::BoundingBox3D&>(
      ::apollo::contrib::lgsvl_msgs::_BoundingBox3D_default_instance_);
}
inline const ::apollo::contrib::lgsvl_msgs::BoundingBox3D& Detection3D::bbox() const {
  // @@protoc_insertion_point(field_get:apollo.contrib.lgsvl_msgs.Detection3D.bbox)
  return _internal_bbox();
}
inline void Detection3D::unsafe_arena_set_allocated_bbox(
    ::apollo::contrib::lgsvl_msgs::BoundingBox3D* bbox) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bbox_);
  }
  bbox_ = bbox;
  if (bbox) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.contrib.lgsvl_msgs.Detection3D.bbox)
}
inline ::apollo::contrib::lgsvl_msgs::BoundingBox3D* Detection3D::release_bbox() {
  
  ::apollo::contrib::lgsvl_msgs::BoundingBox3D* temp = bbox_;
  bbox_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::contrib::lgsvl_msgs::BoundingBox3D* Detection3D::unsafe_arena_release_bbox() {
  // @@protoc_insertion_point(field_release:apollo.contrib.lgsvl_msgs.Detection3D.bbox)
  
  ::apollo::contrib::lgsvl_msgs::BoundingBox3D* temp = bbox_;
  bbox_ = nullptr;
  return temp;
}
inline ::apollo::contrib::lgsvl_msgs::BoundingBox3D* Detection3D::_internal_mutable_bbox() {
  
  if (bbox_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::contrib::lgsvl_msgs::BoundingBox3D>(GetArenaForAllocation());
    bbox_ = p;
  }
  return bbox_;
}
inline ::apollo::contrib::lgsvl_msgs::BoundingBox3D* Detection3D::mutable_bbox() {
  ::apollo::contrib::lgsvl_msgs::BoundingBox3D* _msg = _internal_mutable_bbox();
  // @@protoc_insertion_point(field_mutable:apollo.contrib.lgsvl_msgs.Detection3D.bbox)
  return _msg;
}
inline void Detection3D::set_allocated_bbox(::apollo::contrib::lgsvl_msgs::BoundingBox3D* bbox) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete bbox_;
  }
  if (bbox) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::apollo::contrib::lgsvl_msgs::BoundingBox3D>::GetOwningArena(bbox);
    if (message_arena != submessage_arena) {
      bbox = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bbox, submessage_arena);
    }
    
  } else {
    
  }
  bbox_ = bbox;
  // @@protoc_insertion_point(field_set_allocated:apollo.contrib.lgsvl_msgs.Detection3D.bbox)
}

// .apollo.contrib.lgsvl_msgs.Twist velocity = 6;
inline bool Detection3D::_internal_has_velocity() const {
  return this != internal_default_instance() && velocity_ != nullptr;
}
inline bool Detection3D::has_velocity() const {
  return _internal_has_velocity();
}
inline const ::apollo::contrib::lgsvl_msgs::Twist& Detection3D::_internal_velocity() const {
  const ::apollo::contrib::lgsvl_msgs::Twist* p = velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::contrib::lgsvl_msgs::Twist&>(
      ::apollo::contrib::lgsvl_msgs::_Twist_default_instance_);
}
inline const ::apollo::contrib::lgsvl_msgs::Twist& Detection3D::velocity() const {
  // @@protoc_insertion_point(field_get:apollo.contrib.lgsvl_msgs.Detection3D.velocity)
  return _internal_velocity();
}
inline void Detection3D::unsafe_arena_set_allocated_velocity(
    ::apollo::contrib::lgsvl_msgs::Twist* velocity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(velocity_);
  }
  velocity_ = velocity;
  if (velocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.contrib.lgsvl_msgs.Detection3D.velocity)
}
inline ::apollo::contrib::lgsvl_msgs::Twist* Detection3D::release_velocity() {
  
  ::apollo::contrib::lgsvl_msgs::Twist* temp = velocity_;
  velocity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::contrib::lgsvl_msgs::Twist* Detection3D::unsafe_arena_release_velocity() {
  // @@protoc_insertion_point(field_release:apollo.contrib.lgsvl_msgs.Detection3D.velocity)
  
  ::apollo::contrib::lgsvl_msgs::Twist* temp = velocity_;
  velocity_ = nullptr;
  return temp;
}
inline ::apollo::contrib::lgsvl_msgs::Twist* Detection3D::_internal_mutable_velocity() {
  
  if (velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::contrib::lgsvl_msgs::Twist>(GetArenaForAllocation());
    velocity_ = p;
  }
  return velocity_;
}
inline ::apollo::contrib::lgsvl_msgs::Twist* Detection3D::mutable_velocity() {
  ::apollo::contrib::lgsvl_msgs::Twist* _msg = _internal_mutable_velocity();
  // @@protoc_insertion_point(field_mutable:apollo.contrib.lgsvl_msgs.Detection3D.velocity)
  return _msg;
}
inline void Detection3D::set_allocated_velocity(::apollo::contrib::lgsvl_msgs::Twist* velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(velocity_);
  }
  if (velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(velocity));
    if (message_arena != submessage_arena) {
      velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity, submessage_arena);
    }
    
  } else {
    
  }
  velocity_ = velocity;
  // @@protoc_insertion_point(field_set_allocated:apollo.contrib.lgsvl_msgs.Detection3D.velocity)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace lgsvl_msgs
}  // namespace contrib
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fcontrib_2flgsvl_5fmsgs_2fproto_2fdetection3d_2eproto
