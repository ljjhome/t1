// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/v2x/proto/v2x_obu_traffic_light.proto

#include "modules/v2x/proto/v2x_obu_traffic_light.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace apollo {
namespace v2x {
namespace obu {
constexpr SingleTrafficLight::SingleTrafficLight(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , color_(0)

  , traffic_light_type_(0)
  , color_remaining_time_s_(0)
  , right_turn_light_(false)
  , next_remaining_time_(0)
  , next_color_(0)

  , next_2nd_color_(0)

  , next_2nd_remaining_time_(0){}
struct SingleTrafficLightDefaultTypeInternal {
  constexpr SingleTrafficLightDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SingleTrafficLightDefaultTypeInternal() {}
  union {
    SingleTrafficLight _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SingleTrafficLightDefaultTypeInternal _SingleTrafficLight_default_instance_;
constexpr LaneTrafficLight::LaneTrafficLight(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : single_traffic_light_()
  , gps_x_m_(0)
  , gps_y_m_(0){}
struct LaneTrafficLightDefaultTypeInternal {
  constexpr LaneTrafficLightDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LaneTrafficLightDefaultTypeInternal() {}
  union {
    LaneTrafficLight _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LaneTrafficLightDefaultTypeInternal _LaneTrafficLight_default_instance_;
constexpr RoadTrafficLight::RoadTrafficLight(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : lane_traffic_light_()
  , road_direction_(0){}
struct RoadTrafficLightDefaultTypeInternal {
  constexpr RoadTrafficLightDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RoadTrafficLightDefaultTypeInternal() {}
  union {
    RoadTrafficLight _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RoadTrafficLightDefaultTypeInternal _RoadTrafficLight_default_instance_;
constexpr ObuTrafficLight::ObuTrafficLight(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : road_traffic_light_()
  , hdmap_junction_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , header_(nullptr)
  , intersection_id_(0){}
struct ObuTrafficLightDefaultTypeInternal {
  constexpr ObuTrafficLightDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ObuTrafficLightDefaultTypeInternal() {}
  union {
    ObuTrafficLight _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ObuTrafficLightDefaultTypeInternal _ObuTrafficLight_default_instance_;
}  // namespace obu
}  // namespace v2x
}  // namespace apollo
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fv2x_2fproto_2fv2x_5fobu_5ftraffic_5flight_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_modules_2fv2x_2fproto_2fv2x_5fobu_5ftraffic_5flight_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fv2x_2fproto_2fv2x_5fobu_5ftraffic_5flight_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fv2x_2fproto_2fv2x_5fobu_5ftraffic_5flight_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::obu::SingleTrafficLight, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::obu::SingleTrafficLight, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::obu::SingleTrafficLight, color_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::obu::SingleTrafficLight, traffic_light_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::obu::SingleTrafficLight, id_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::obu::SingleTrafficLight, color_remaining_time_s_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::obu::SingleTrafficLight, right_turn_light_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::obu::SingleTrafficLight, next_color_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::obu::SingleTrafficLight, next_remaining_time_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::obu::SingleTrafficLight, next_2nd_color_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::obu::SingleTrafficLight, next_2nd_remaining_time_),
  1,
  2,
  0,
  3,
  4,
  6,
  5,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::obu::LaneTrafficLight, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::obu::LaneTrafficLight, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::obu::LaneTrafficLight, gps_x_m_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::obu::LaneTrafficLight, gps_y_m_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::obu::LaneTrafficLight, single_traffic_light_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::obu::RoadTrafficLight, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::obu::RoadTrafficLight, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::obu::RoadTrafficLight, lane_traffic_light_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::obu::RoadTrafficLight, road_direction_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::obu::ObuTrafficLight, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::obu::ObuTrafficLight, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::obu::ObuTrafficLight, header_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::obu::ObuTrafficLight, road_traffic_light_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::obu::ObuTrafficLight, intersection_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::obu::ObuTrafficLight, hdmap_junction_id_),
  1,
  ~0u,
  2,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 15, -1, sizeof(::apollo::v2x::obu::SingleTrafficLight)},
  { 24, 33, -1, sizeof(::apollo::v2x::obu::LaneTrafficLight)},
  { 36, 44, -1, sizeof(::apollo::v2x::obu::RoadTrafficLight)},
  { 46, 56, -1, sizeof(::apollo::v2x::obu::ObuTrafficLight)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::v2x::obu::_SingleTrafficLight_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::v2x::obu::_LaneTrafficLight_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::v2x::obu::_RoadTrafficLight_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::v2x::obu::_ObuTrafficLight_default_instance_),
};

const char descriptor_table_protodef_modules_2fv2x_2fproto_2fv2x_5fobu_5ftraffic_5flight_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n-modules/v2x/proto/v2x_obu_traffic_ligh"
  "t.proto\022\016apollo.v2x.obu\032!modules/common/"
  "proto/header.proto\032)modules/v2x/proto/v2"
  "x_traffic_light.proto\"\230\003\n\022SingleTrafficL"
  "ight\0223\n\005color\030\001 \001(\0162$.apollo.v2x.SingleT"
  "rafficLight.Color\022\032\n\022traffic_light_type\030"
  "\002 \001(\005\022\n\n\002id\030\003 \001(\t\022\036\n\026color_remaining_tim"
  "e_s\030\004 \001(\005\022\030\n\020right_turn_light\030\005 \001(\010\0228\n\nn"
  "ext_color\030\006 \001(\0162$.apollo.v2x.SingleTraff"
  "icLight.Color\022\033\n\023next_remaining_time\030\007 \001"
  "(\001\022<\n\016next_2nd_color\030\010 \001(\0162$.apollo.v2x."
  "SingleTrafficLight.Color\022\037\n\027next_2nd_rem"
  "aining_time\030\t \001(\001\"5\n\004Type\022\014\n\010STRAIGHT\020\001\022"
  "\010\n\004LEFT\020\002\022\t\n\005RIGHT\020\003\022\n\n\006U_TURN\020\004\"v\n\020Lane"
  "TrafficLight\022\017\n\007gps_x_m\030\001 \001(\001\022\017\n\007gps_y_m"
  "\030\002 \001(\001\022@\n\024single_traffic_light\030\003 \003(\0132\".a"
  "pollo.v2x.obu.SingleTrafficLight\"h\n\020Road"
  "TrafficLight\022<\n\022lane_traffic_light\030\001 \003(\013"
  "2 .apollo.v2x.obu.LaneTrafficLight\022\026\n\016ro"
  "ad_direction\030\002 \001(\005\"\252\001\n\017ObuTrafficLight\022%"
  "\n\006header\030\001 \001(\0132\025.apollo.common.Header\022<\n"
  "\022road_traffic_light\030\002 \003(\0132 .apollo.v2x.o"
  "bu.RoadTrafficLight\022\027\n\017intersection_id\030\003"
  " \001(\005\022\031\n\021hdmap_junction_id\030\004 \001(\014"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fv2x_2fproto_2fv2x_5fobu_5ftraffic_5flight_2eproto_deps[2] = {
  &::descriptor_table_modules_2fcommon_2fproto_2fheader_2eproto,
  &::descriptor_table_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fv2x_2fproto_2fv2x_5fobu_5ftraffic_5flight_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fv2x_2fproto_2fv2x_5fobu_5ftraffic_5flight_2eproto = {
  false, false, 951, descriptor_table_protodef_modules_2fv2x_2fproto_2fv2x_5fobu_5ftraffic_5flight_2eproto, "modules/v2x/proto/v2x_obu_traffic_light.proto", 
  &descriptor_table_modules_2fv2x_2fproto_2fv2x_5fobu_5ftraffic_5flight_2eproto_once, descriptor_table_modules_2fv2x_2fproto_2fv2x_5fobu_5ftraffic_5flight_2eproto_deps, 2, 4,
  schemas, file_default_instances, TableStruct_modules_2fv2x_2fproto_2fv2x_5fobu_5ftraffic_5flight_2eproto::offsets,
  file_level_metadata_modules_2fv2x_2fproto_2fv2x_5fobu_5ftraffic_5flight_2eproto, file_level_enum_descriptors_modules_2fv2x_2fproto_2fv2x_5fobu_5ftraffic_5flight_2eproto, file_level_service_descriptors_modules_2fv2x_2fproto_2fv2x_5fobu_5ftraffic_5flight_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_modules_2fv2x_2fproto_2fv2x_5fobu_5ftraffic_5flight_2eproto_getter() {
  return &descriptor_table_modules_2fv2x_2fproto_2fv2x_5fobu_5ftraffic_5flight_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_modules_2fv2x_2fproto_2fv2x_5fobu_5ftraffic_5flight_2eproto(&descriptor_table_modules_2fv2x_2fproto_2fv2x_5fobu_5ftraffic_5flight_2eproto);
namespace apollo {
namespace v2x {
namespace obu {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SingleTrafficLight_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fv2x_2fproto_2fv2x_5fobu_5ftraffic_5flight_2eproto);
  return file_level_enum_descriptors_modules_2fv2x_2fproto_2fv2x_5fobu_5ftraffic_5flight_2eproto[0];
}
bool SingleTrafficLight_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SingleTrafficLight_Type SingleTrafficLight::STRAIGHT;
constexpr SingleTrafficLight_Type SingleTrafficLight::LEFT;
constexpr SingleTrafficLight_Type SingleTrafficLight::RIGHT;
constexpr SingleTrafficLight_Type SingleTrafficLight::U_TURN;
constexpr SingleTrafficLight_Type SingleTrafficLight::Type_MIN;
constexpr SingleTrafficLight_Type SingleTrafficLight::Type_MAX;
constexpr int SingleTrafficLight::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class SingleTrafficLight::_Internal {
 public:
  using HasBits = decltype(std::declval<SingleTrafficLight>()._has_bits_);
  static void set_has_color(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_traffic_light_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_color_remaining_time_s(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_right_turn_light(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_next_color(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_next_remaining_time(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_next_2nd_color(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_next_2nd_remaining_time(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

SingleTrafficLight::SingleTrafficLight(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.v2x.obu.SingleTrafficLight)
}
SingleTrafficLight::SingleTrafficLight(const SingleTrafficLight& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_id()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&color_, &from.color_,
    static_cast<size_t>(reinterpret_cast<char*>(&next_2nd_remaining_time_) -
    reinterpret_cast<char*>(&color_)) + sizeof(next_2nd_remaining_time_));
  // @@protoc_insertion_point(copy_constructor:apollo.v2x.obu.SingleTrafficLight)
}

void SingleTrafficLight::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&color_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&next_2nd_remaining_time_) -
    reinterpret_cast<char*>(&color_)) + sizeof(next_2nd_remaining_time_));
}

SingleTrafficLight::~SingleTrafficLight() {
  // @@protoc_insertion_point(destructor:apollo.v2x.obu.SingleTrafficLight)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SingleTrafficLight::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SingleTrafficLight::ArenaDtor(void* object) {
  SingleTrafficLight* _this = reinterpret_cast< SingleTrafficLight* >(object);
  (void)_this;
}
void SingleTrafficLight::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SingleTrafficLight::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SingleTrafficLight::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.v2x.obu.SingleTrafficLight)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    id_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&color_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&next_2nd_color_) -
        reinterpret_cast<char*>(&color_)) + sizeof(next_2nd_color_));
  }
  next_2nd_remaining_time_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SingleTrafficLight::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.v2x.SingleTrafficLight.Color color = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::v2x::SingleTrafficLight_Color_IsValid(val))) {
            _internal_set_color(static_cast<::apollo::v2x::SingleTrafficLight_Color>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int32 traffic_light_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_traffic_light_type(&has_bits);
          traffic_light_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.v2x.obu.SingleTrafficLight.id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 color_remaining_time_s = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_color_remaining_time_s(&has_bits);
          color_remaining_time_s_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool right_turn_light = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_right_turn_light(&has_bits);
          right_turn_light_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.v2x.SingleTrafficLight.Color next_color = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::v2x::SingleTrafficLight_Color_IsValid(val))) {
            _internal_set_next_color(static_cast<::apollo::v2x::SingleTrafficLight_Color>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional double next_remaining_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_next_remaining_time(&has_bits);
          next_remaining_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.v2x.SingleTrafficLight.Color next_2nd_color = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::v2x::SingleTrafficLight_Color_IsValid(val))) {
            _internal_set_next_2nd_color(static_cast<::apollo::v2x::SingleTrafficLight_Color>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional double next_2nd_remaining_time = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_next_2nd_remaining_time(&has_bits);
          next_2nd_remaining_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SingleTrafficLight::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.v2x.obu.SingleTrafficLight)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.v2x.SingleTrafficLight.Color color = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_color(), target);
  }

  // optional int32 traffic_light_type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_traffic_light_type(), target);
  }

  // optional string id = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.v2x.obu.SingleTrafficLight.id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_id(), target);
  }

  // optional int32 color_remaining_time_s = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_color_remaining_time_s(), target);
  }

  // optional bool right_turn_light = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_right_turn_light(), target);
  }

  // optional .apollo.v2x.SingleTrafficLight.Color next_color = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_next_color(), target);
  }

  // optional double next_remaining_time = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_next_remaining_time(), target);
  }

  // optional .apollo.v2x.SingleTrafficLight.Color next_2nd_color = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_next_2nd_color(), target);
  }

  // optional double next_2nd_remaining_time = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_next_2nd_remaining_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.v2x.obu.SingleTrafficLight)
  return target;
}

size_t SingleTrafficLight::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.v2x.obu.SingleTrafficLight)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string id = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
    }

    // optional .apollo.v2x.SingleTrafficLight.Color color = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_color());
    }

    // optional int32 traffic_light_type = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_traffic_light_type());
    }

    // optional int32 color_remaining_time_s = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_color_remaining_time_s());
    }

    // optional bool right_turn_light = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional double next_remaining_time = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional .apollo.v2x.SingleTrafficLight.Color next_color = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_next_color());
    }

    // optional .apollo.v2x.SingleTrafficLight.Color next_2nd_color = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_next_2nd_color());
    }

  }
  // optional double next_2nd_remaining_time = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SingleTrafficLight::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SingleTrafficLight::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SingleTrafficLight::GetClassData() const { return &_class_data_; }

void SingleTrafficLight::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SingleTrafficLight *>(to)->MergeFrom(
      static_cast<const SingleTrafficLight &>(from));
}


void SingleTrafficLight::MergeFrom(const SingleTrafficLight& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.v2x.obu.SingleTrafficLight)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      color_ = from.color_;
    }
    if (cached_has_bits & 0x00000004u) {
      traffic_light_type_ = from.traffic_light_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      color_remaining_time_s_ = from.color_remaining_time_s_;
    }
    if (cached_has_bits & 0x00000010u) {
      right_turn_light_ = from.right_turn_light_;
    }
    if (cached_has_bits & 0x00000020u) {
      next_remaining_time_ = from.next_remaining_time_;
    }
    if (cached_has_bits & 0x00000040u) {
      next_color_ = from.next_color_;
    }
    if (cached_has_bits & 0x00000080u) {
      next_2nd_color_ = from.next_2nd_color_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_next_2nd_remaining_time(from._internal_next_2nd_remaining_time());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SingleTrafficLight::CopyFrom(const SingleTrafficLight& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.v2x.obu.SingleTrafficLight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleTrafficLight::IsInitialized() const {
  return true;
}

void SingleTrafficLight::InternalSwap(SingleTrafficLight* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SingleTrafficLight, next_2nd_remaining_time_)
      + sizeof(SingleTrafficLight::next_2nd_remaining_time_)
      - PROTOBUF_FIELD_OFFSET(SingleTrafficLight, color_)>(
          reinterpret_cast<char*>(&color_),
          reinterpret_cast<char*>(&other->color_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleTrafficLight::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fv2x_2fproto_2fv2x_5fobu_5ftraffic_5flight_2eproto_getter, &descriptor_table_modules_2fv2x_2fproto_2fv2x_5fobu_5ftraffic_5flight_2eproto_once,
      file_level_metadata_modules_2fv2x_2fproto_2fv2x_5fobu_5ftraffic_5flight_2eproto[0]);
}

// ===================================================================

class LaneTrafficLight::_Internal {
 public:
  using HasBits = decltype(std::declval<LaneTrafficLight>()._has_bits_);
  static void set_has_gps_x_m(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_gps_y_m(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

LaneTrafficLight::LaneTrafficLight(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  single_traffic_light_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.v2x.obu.LaneTrafficLight)
}
LaneTrafficLight::LaneTrafficLight(const LaneTrafficLight& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      single_traffic_light_(from.single_traffic_light_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&gps_x_m_, &from.gps_x_m_,
    static_cast<size_t>(reinterpret_cast<char*>(&gps_y_m_) -
    reinterpret_cast<char*>(&gps_x_m_)) + sizeof(gps_y_m_));
  // @@protoc_insertion_point(copy_constructor:apollo.v2x.obu.LaneTrafficLight)
}

void LaneTrafficLight::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&gps_x_m_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&gps_y_m_) -
    reinterpret_cast<char*>(&gps_x_m_)) + sizeof(gps_y_m_));
}

LaneTrafficLight::~LaneTrafficLight() {
  // @@protoc_insertion_point(destructor:apollo.v2x.obu.LaneTrafficLight)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LaneTrafficLight::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LaneTrafficLight::ArenaDtor(void* object) {
  LaneTrafficLight* _this = reinterpret_cast< LaneTrafficLight* >(object);
  (void)_this;
}
void LaneTrafficLight::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LaneTrafficLight::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LaneTrafficLight::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.v2x.obu.LaneTrafficLight)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  single_traffic_light_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&gps_x_m_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gps_y_m_) -
        reinterpret_cast<char*>(&gps_x_m_)) + sizeof(gps_y_m_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LaneTrafficLight::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double gps_x_m = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_gps_x_m(&has_bits);
          gps_x_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double gps_y_m = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_gps_y_m(&has_bits);
          gps_y_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.v2x.obu.SingleTrafficLight single_traffic_light = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_single_traffic_light(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LaneTrafficLight::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.v2x.obu.LaneTrafficLight)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double gps_x_m = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_gps_x_m(), target);
  }

  // optional double gps_y_m = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_gps_y_m(), target);
  }

  // repeated .apollo.v2x.obu.SingleTrafficLight single_traffic_light = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_single_traffic_light_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_single_traffic_light(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.v2x.obu.LaneTrafficLight)
  return target;
}

size_t LaneTrafficLight::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.v2x.obu.LaneTrafficLight)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.v2x.obu.SingleTrafficLight single_traffic_light = 3;
  total_size += 1UL * this->_internal_single_traffic_light_size();
  for (const auto& msg : this->single_traffic_light_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double gps_x_m = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double gps_y_m = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LaneTrafficLight::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LaneTrafficLight::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LaneTrafficLight::GetClassData() const { return &_class_data_; }

void LaneTrafficLight::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LaneTrafficLight *>(to)->MergeFrom(
      static_cast<const LaneTrafficLight &>(from));
}


void LaneTrafficLight::MergeFrom(const LaneTrafficLight& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.v2x.obu.LaneTrafficLight)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  single_traffic_light_.MergeFrom(from.single_traffic_light_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      gps_x_m_ = from.gps_x_m_;
    }
    if (cached_has_bits & 0x00000002u) {
      gps_y_m_ = from.gps_y_m_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LaneTrafficLight::CopyFrom(const LaneTrafficLight& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.v2x.obu.LaneTrafficLight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneTrafficLight::IsInitialized() const {
  return true;
}

void LaneTrafficLight::InternalSwap(LaneTrafficLight* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  single_traffic_light_.InternalSwap(&other->single_traffic_light_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LaneTrafficLight, gps_y_m_)
      + sizeof(LaneTrafficLight::gps_y_m_)
      - PROTOBUF_FIELD_OFFSET(LaneTrafficLight, gps_x_m_)>(
          reinterpret_cast<char*>(&gps_x_m_),
          reinterpret_cast<char*>(&other->gps_x_m_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LaneTrafficLight::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fv2x_2fproto_2fv2x_5fobu_5ftraffic_5flight_2eproto_getter, &descriptor_table_modules_2fv2x_2fproto_2fv2x_5fobu_5ftraffic_5flight_2eproto_once,
      file_level_metadata_modules_2fv2x_2fproto_2fv2x_5fobu_5ftraffic_5flight_2eproto[1]);
}

// ===================================================================

class RoadTrafficLight::_Internal {
 public:
  using HasBits = decltype(std::declval<RoadTrafficLight>()._has_bits_);
  static void set_has_road_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RoadTrafficLight::RoadTrafficLight(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  lane_traffic_light_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.v2x.obu.RoadTrafficLight)
}
RoadTrafficLight::RoadTrafficLight(const RoadTrafficLight& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      lane_traffic_light_(from.lane_traffic_light_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  road_direction_ = from.road_direction_;
  // @@protoc_insertion_point(copy_constructor:apollo.v2x.obu.RoadTrafficLight)
}

void RoadTrafficLight::SharedCtor() {
road_direction_ = 0;
}

RoadTrafficLight::~RoadTrafficLight() {
  // @@protoc_insertion_point(destructor:apollo.v2x.obu.RoadTrafficLight)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RoadTrafficLight::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RoadTrafficLight::ArenaDtor(void* object) {
  RoadTrafficLight* _this = reinterpret_cast< RoadTrafficLight* >(object);
  (void)_this;
}
void RoadTrafficLight::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoadTrafficLight::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RoadTrafficLight::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.v2x.obu.RoadTrafficLight)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lane_traffic_light_.Clear();
  road_direction_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoadTrafficLight::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .apollo.v2x.obu.LaneTrafficLight lane_traffic_light = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lane_traffic_light(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int32 road_direction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_road_direction(&has_bits);
          road_direction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoadTrafficLight::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.v2x.obu.RoadTrafficLight)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.v2x.obu.LaneTrafficLight lane_traffic_light = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lane_traffic_light_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_lane_traffic_light(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 road_direction = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_road_direction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.v2x.obu.RoadTrafficLight)
  return target;
}

size_t RoadTrafficLight::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.v2x.obu.RoadTrafficLight)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.v2x.obu.LaneTrafficLight lane_traffic_light = 1;
  total_size += 1UL * this->_internal_lane_traffic_light_size();
  for (const auto& msg : this->lane_traffic_light_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional int32 road_direction = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_road_direction());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoadTrafficLight::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RoadTrafficLight::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoadTrafficLight::GetClassData() const { return &_class_data_; }

void RoadTrafficLight::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RoadTrafficLight *>(to)->MergeFrom(
      static_cast<const RoadTrafficLight &>(from));
}


void RoadTrafficLight::MergeFrom(const RoadTrafficLight& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.v2x.obu.RoadTrafficLight)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lane_traffic_light_.MergeFrom(from.lane_traffic_light_);
  if (from._internal_has_road_direction()) {
    _internal_set_road_direction(from._internal_road_direction());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoadTrafficLight::CopyFrom(const RoadTrafficLight& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.v2x.obu.RoadTrafficLight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoadTrafficLight::IsInitialized() const {
  return true;
}

void RoadTrafficLight::InternalSwap(RoadTrafficLight* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  lane_traffic_light_.InternalSwap(&other->lane_traffic_light_);
  swap(road_direction_, other->road_direction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoadTrafficLight::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fv2x_2fproto_2fv2x_5fobu_5ftraffic_5flight_2eproto_getter, &descriptor_table_modules_2fv2x_2fproto_2fv2x_5fobu_5ftraffic_5flight_2eproto_once,
      file_level_metadata_modules_2fv2x_2fproto_2fv2x_5fobu_5ftraffic_5flight_2eproto[2]);
}

// ===================================================================

class ObuTrafficLight::_Internal {
 public:
  using HasBits = decltype(std::declval<ObuTrafficLight>()._has_bits_);
  static const ::apollo::common::Header& header(const ObuTrafficLight* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_intersection_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_hdmap_junction_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::apollo::common::Header&
ObuTrafficLight::_Internal::header(const ObuTrafficLight* msg) {
  return *msg->header_;
}
void ObuTrafficLight::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
ObuTrafficLight::ObuTrafficLight(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  road_traffic_light_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.v2x.obu.ObuTrafficLight)
}
ObuTrafficLight::ObuTrafficLight(const ObuTrafficLight& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      road_traffic_light_(from.road_traffic_light_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hdmap_junction_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_hdmap_junction_id()) {
    hdmap_junction_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_hdmap_junction_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_header()) {
    header_ = new ::apollo::common::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  intersection_id_ = from.intersection_id_;
  // @@protoc_insertion_point(copy_constructor:apollo.v2x.obu.ObuTrafficLight)
}

void ObuTrafficLight::SharedCtor() {
hdmap_junction_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&intersection_id_) -
    reinterpret_cast<char*>(&header_)) + sizeof(intersection_id_));
}

ObuTrafficLight::~ObuTrafficLight() {
  // @@protoc_insertion_point(destructor:apollo.v2x.obu.ObuTrafficLight)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ObuTrafficLight::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  hdmap_junction_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void ObuTrafficLight::ArenaDtor(void* object) {
  ObuTrafficLight* _this = reinterpret_cast< ObuTrafficLight* >(object);
  (void)_this;
}
void ObuTrafficLight::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObuTrafficLight::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ObuTrafficLight::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.v2x.obu.ObuTrafficLight)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  road_traffic_light_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      hdmap_junction_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(header_ != nullptr);
      header_->Clear();
    }
  }
  intersection_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObuTrafficLight::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.v2x.obu.RoadTrafficLight road_traffic_light = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_road_traffic_light(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int32 intersection_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_intersection_id(&has_bits);
          intersection_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes hdmap_junction_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_hdmap_junction_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObuTrafficLight::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.v2x.obu.ObuTrafficLight)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // repeated .apollo.v2x.obu.RoadTrafficLight road_traffic_light = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_road_traffic_light_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_road_traffic_light(i), target, stream);
  }

  // optional int32 intersection_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_intersection_id(), target);
  }

  // optional bytes hdmap_junction_id = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_hdmap_junction_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.v2x.obu.ObuTrafficLight)
  return target;
}

size_t ObuTrafficLight::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.v2x.obu.ObuTrafficLight)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.v2x.obu.RoadTrafficLight road_traffic_light = 2;
  total_size += 1UL * this->_internal_road_traffic_light_size();
  for (const auto& msg : this->road_traffic_light_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes hdmap_junction_id = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_hdmap_junction_id());
    }

    // optional .apollo.common.Header header = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional int32 intersection_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_intersection_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ObuTrafficLight::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ObuTrafficLight::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ObuTrafficLight::GetClassData() const { return &_class_data_; }

void ObuTrafficLight::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ObuTrafficLight *>(to)->MergeFrom(
      static_cast<const ObuTrafficLight &>(from));
}


void ObuTrafficLight::MergeFrom(const ObuTrafficLight& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.v2x.obu.ObuTrafficLight)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  road_traffic_light_.MergeFrom(from.road_traffic_light_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_hdmap_junction_id(from._internal_hdmap_junction_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_header()->::apollo::common::Header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000004u) {
      intersection_id_ = from.intersection_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ObuTrafficLight::CopyFrom(const ObuTrafficLight& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.v2x.obu.ObuTrafficLight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObuTrafficLight::IsInitialized() const {
  return true;
}

void ObuTrafficLight::InternalSwap(ObuTrafficLight* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  road_traffic_light_.InternalSwap(&other->road_traffic_light_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &hdmap_junction_id_, lhs_arena,
      &other->hdmap_junction_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ObuTrafficLight, intersection_id_)
      + sizeof(ObuTrafficLight::intersection_id_)
      - PROTOBUF_FIELD_OFFSET(ObuTrafficLight, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ObuTrafficLight::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fv2x_2fproto_2fv2x_5fobu_5ftraffic_5flight_2eproto_getter, &descriptor_table_modules_2fv2x_2fproto_2fv2x_5fobu_5ftraffic_5flight_2eproto_once,
      file_level_metadata_modules_2fv2x_2fproto_2fv2x_5fobu_5ftraffic_5flight_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace obu
}  // namespace v2x
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::v2x::obu::SingleTrafficLight* Arena::CreateMaybeMessage< ::apollo::v2x::obu::SingleTrafficLight >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::v2x::obu::SingleTrafficLight >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::v2x::obu::LaneTrafficLight* Arena::CreateMaybeMessage< ::apollo::v2x::obu::LaneTrafficLight >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::v2x::obu::LaneTrafficLight >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::v2x::obu::RoadTrafficLight* Arena::CreateMaybeMessage< ::apollo::v2x::obu::RoadTrafficLight >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::v2x::obu::RoadTrafficLight >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::v2x::obu::ObuTrafficLight* Arena::CreateMaybeMessage< ::apollo::v2x::obu::ObuTrafficLight >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::v2x::obu::ObuTrafficLight >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
