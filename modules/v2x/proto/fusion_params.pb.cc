// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/v2x/proto/fusion_params.proto

#include "modules/v2x/proto/fusion_params.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace apollo {
namespace v2x {
namespace ft {
namespace fusion {
constexpr KMParams::KMParams(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : min_score_(0){}
struct KMParamsDefaultTypeInternal {
  constexpr KMParamsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~KMParamsDefaultTypeInternal() {}
  union {
    KMParams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT KMParamsDefaultTypeInternal _KMParams_default_instance_;
constexpr Param::Param(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : k_(0)
  , b_(0){}
struct ParamDefaultTypeInternal {
  constexpr ParamDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ParamDefaultTypeInternal() {}
  union {
    Param _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ParamDefaultTypeInternal _Param_default_instance_;
constexpr SingleCameraParam::SingleCameraParam(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : param_()
  , camera_id_(0){}
struct SingleCameraParamDefaultTypeInternal {
  constexpr SingleCameraParamDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SingleCameraParamDefaultTypeInternal() {}
  union {
    SingleCameraParam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SingleCameraParamDefaultTypeInternal _SingleCameraParam_default_instance_;
constexpr ScoreParams::ScoreParams(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : prob_scale_(0)
  , max_match_distance_(0)
  , min_score_(0)
  , use_mahalanobis_distance_(false)
  , check_type_(false)
  , confidence_level_(2)
{}
struct ScoreParamsDefaultTypeInternal {
  constexpr ScoreParamsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ScoreParamsDefaultTypeInternal() {}
  union {
    ScoreParams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ScoreParamsDefaultTypeInternal _ScoreParams_default_instance_;
constexpr FusionParams::FusionParams(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fusion_params_()
  , km_params_(nullptr)
  , score_params_(nullptr){}
struct FusionParamsDefaultTypeInternal {
  constexpr FusionParamsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FusionParamsDefaultTypeInternal() {}
  union {
    FusionParams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FusionParamsDefaultTypeInternal _FusionParams_default_instance_;
}  // namespace fusion
}  // namespace ft
}  // namespace v2x
}  // namespace apollo
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fv2x_2fproto_2ffusion_5fparams_2eproto[5];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_modules_2fv2x_2fproto_2ffusion_5fparams_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fv2x_2fproto_2ffusion_5fparams_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fv2x_2fproto_2ffusion_5fparams_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::ft::fusion::KMParams, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::ft::fusion::KMParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::ft::fusion::KMParams, min_score_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::ft::fusion::Param, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::ft::fusion::Param, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::ft::fusion::Param, k_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::ft::fusion::Param, b_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::ft::fusion::SingleCameraParam, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::ft::fusion::SingleCameraParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::ft::fusion::SingleCameraParam, camera_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::ft::fusion::SingleCameraParam, param_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::ft::fusion::ScoreParams, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::ft::fusion::ScoreParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::ft::fusion::ScoreParams, prob_scale_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::ft::fusion::ScoreParams, max_match_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::ft::fusion::ScoreParams, min_score_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::ft::fusion::ScoreParams, use_mahalanobis_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::ft::fusion::ScoreParams, check_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::ft::fusion::ScoreParams, confidence_level_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::ft::fusion::FusionParams, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::ft::fusion::FusionParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::ft::fusion::FusionParams, fusion_params_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::ft::fusion::FusionParams, km_params_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::ft::fusion::FusionParams, score_params_),
  ~0u,
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, -1, sizeof(::apollo::v2x::ft::fusion::KMParams)},
  { 8, 16, -1, sizeof(::apollo::v2x::ft::fusion::Param)},
  { 18, 26, -1, sizeof(::apollo::v2x::ft::fusion::SingleCameraParam)},
  { 28, 40, -1, sizeof(::apollo::v2x::ft::fusion::ScoreParams)},
  { 46, 55, -1, sizeof(::apollo::v2x::ft::fusion::FusionParams)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::v2x::ft::fusion::_KMParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::v2x::ft::fusion::_Param_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::v2x::ft::fusion::_SingleCameraParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::v2x::ft::fusion::_ScoreParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::v2x::ft::fusion::_FusionParams_default_instance_),
};

const char descriptor_table_protodef_modules_2fv2x_2fproto_2ffusion_5fparams_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n%modules/v2x/proto/fusion_params.proto\022"
  "\024apollo.v2x.ft.fusion\"\035\n\010KMParams\022\021\n\tmin"
  "_score\030\001 \001(\001\"\035\n\005Param\022\t\n\001k\030\001 \001(\001\022\t\n\001b\030\002 "
  "\001(\001\"R\n\021SingleCameraParam\022\021\n\tcamera_id\030\001 "
  "\001(\005\022*\n\005param\030\002 \003(\0132\033.apollo.v2x.ft.fusio"
  "n.Param\"\334\001\n\013ScoreParams\022\022\n\nprob_scale\030\001 "
  "\001(\001\022\032\n\022max_match_distance\030\002 \001(\001\022\021\n\tmin_s"
  "core\030\003 \001(\001\022\'\n\030use_mahalanobis_distance\030\004"
  " \001(\010:\005false\022\031\n\ncheck_type\030\005 \001(\010:\005false\022F"
  "\n\020confidence_level\030\006 \001(\0162%.apollo.v2x.ft"
  ".fusion.ConfidenceLevel:\005C975P\"\272\001\n\014Fusio"
  "nParams\022>\n\rfusion_params\030\001 \003(\0132\'.apollo."
  "v2x.ft.fusion.SingleCameraParam\0221\n\tkm_pa"
  "rams\030\002 \001(\0132\036.apollo.v2x.ft.fusion.KMPara"
  "ms\0227\n\014score_params\030\003 \002(\0132!.apollo.v2x.ft"
  ".fusion.ScoreParams*:\n\017ConfidenceLevel\022\010"
  "\n\004C90P\020\000\022\010\n\004C95P\020\001\022\t\n\005C975P\020\002\022\010\n\004C99P\020\003"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fv2x_2fproto_2ffusion_5fparams_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fv2x_2fproto_2ffusion_5fparams_2eproto = {
  false, false, 679, descriptor_table_protodef_modules_2fv2x_2fproto_2ffusion_5fparams_2eproto, "modules/v2x/proto/fusion_params.proto", 
  &descriptor_table_modules_2fv2x_2fproto_2ffusion_5fparams_2eproto_once, nullptr, 0, 5,
  schemas, file_default_instances, TableStruct_modules_2fv2x_2fproto_2ffusion_5fparams_2eproto::offsets,
  file_level_metadata_modules_2fv2x_2fproto_2ffusion_5fparams_2eproto, file_level_enum_descriptors_modules_2fv2x_2fproto_2ffusion_5fparams_2eproto, file_level_service_descriptors_modules_2fv2x_2fproto_2ffusion_5fparams_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_modules_2fv2x_2fproto_2ffusion_5fparams_2eproto_getter() {
  return &descriptor_table_modules_2fv2x_2fproto_2ffusion_5fparams_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_modules_2fv2x_2fproto_2ffusion_5fparams_2eproto(&descriptor_table_modules_2fv2x_2fproto_2ffusion_5fparams_2eproto);
namespace apollo {
namespace v2x {
namespace ft {
namespace fusion {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConfidenceLevel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fv2x_2fproto_2ffusion_5fparams_2eproto);
  return file_level_enum_descriptors_modules_2fv2x_2fproto_2ffusion_5fparams_2eproto[0];
}
bool ConfidenceLevel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class KMParams::_Internal {
 public:
  using HasBits = decltype(std::declval<KMParams>()._has_bits_);
  static void set_has_min_score(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

KMParams::KMParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.v2x.ft.fusion.KMParams)
}
KMParams::KMParams(const KMParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  min_score_ = from.min_score_;
  // @@protoc_insertion_point(copy_constructor:apollo.v2x.ft.fusion.KMParams)
}

void KMParams::SharedCtor() {
min_score_ = 0;
}

KMParams::~KMParams() {
  // @@protoc_insertion_point(destructor:apollo.v2x.ft.fusion.KMParams)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void KMParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void KMParams::ArenaDtor(void* object) {
  KMParams* _this = reinterpret_cast< KMParams* >(object);
  (void)_this;
}
void KMParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KMParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void KMParams::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.v2x.ft.fusion.KMParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  min_score_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KMParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double min_score = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_min_score(&has_bits);
          min_score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KMParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.v2x.ft.fusion.KMParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double min_score = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_min_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.v2x.ft.fusion.KMParams)
  return target;
}

size_t KMParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.v2x.ft.fusion.KMParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional double min_score = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KMParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    KMParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KMParams::GetClassData() const { return &_class_data_; }

void KMParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<KMParams *>(to)->MergeFrom(
      static_cast<const KMParams &>(from));
}


void KMParams::MergeFrom(const KMParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.v2x.ft.fusion.KMParams)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_min_score()) {
    _internal_set_min_score(from._internal_min_score());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KMParams::CopyFrom(const KMParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.v2x.ft.fusion.KMParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KMParams::IsInitialized() const {
  return true;
}

void KMParams::InternalSwap(KMParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(min_score_, other->min_score_);
}

::PROTOBUF_NAMESPACE_ID::Metadata KMParams::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fv2x_2fproto_2ffusion_5fparams_2eproto_getter, &descriptor_table_modules_2fv2x_2fproto_2ffusion_5fparams_2eproto_once,
      file_level_metadata_modules_2fv2x_2fproto_2ffusion_5fparams_2eproto[0]);
}

// ===================================================================

class Param::_Internal {
 public:
  using HasBits = decltype(std::declval<Param>()._has_bits_);
  static void set_has_k(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_b(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Param::Param(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.v2x.ft.fusion.Param)
}
Param::Param(const Param& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&k_, &from.k_,
    static_cast<size_t>(reinterpret_cast<char*>(&b_) -
    reinterpret_cast<char*>(&k_)) + sizeof(b_));
  // @@protoc_insertion_point(copy_constructor:apollo.v2x.ft.fusion.Param)
}

void Param::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&k_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&b_) -
    reinterpret_cast<char*>(&k_)) + sizeof(b_));
}

Param::~Param() {
  // @@protoc_insertion_point(destructor:apollo.v2x.ft.fusion.Param)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Param::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Param::ArenaDtor(void* object) {
  Param* _this = reinterpret_cast< Param* >(object);
  (void)_this;
}
void Param::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Param::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Param::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.v2x.ft.fusion.Param)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&k_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&b_) -
        reinterpret_cast<char*>(&k_)) + sizeof(b_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Param::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double k = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_k(&has_bits);
          k_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double b = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_b(&has_bits);
          b_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Param::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.v2x.ft.fusion.Param)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double k = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_k(), target);
  }

  // optional double b = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_b(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.v2x.ft.fusion.Param)
  return target;
}

size_t Param::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.v2x.ft.fusion.Param)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double k = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double b = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Param::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Param::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Param::GetClassData() const { return &_class_data_; }

void Param::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Param *>(to)->MergeFrom(
      static_cast<const Param &>(from));
}


void Param::MergeFrom(const Param& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.v2x.ft.fusion.Param)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      k_ = from.k_;
    }
    if (cached_has_bits & 0x00000002u) {
      b_ = from.b_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Param::CopyFrom(const Param& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.v2x.ft.fusion.Param)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Param::IsInitialized() const {
  return true;
}

void Param::InternalSwap(Param* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Param, b_)
      + sizeof(Param::b_)
      - PROTOBUF_FIELD_OFFSET(Param, k_)>(
          reinterpret_cast<char*>(&k_),
          reinterpret_cast<char*>(&other->k_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Param::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fv2x_2fproto_2ffusion_5fparams_2eproto_getter, &descriptor_table_modules_2fv2x_2fproto_2ffusion_5fparams_2eproto_once,
      file_level_metadata_modules_2fv2x_2fproto_2ffusion_5fparams_2eproto[1]);
}

// ===================================================================

class SingleCameraParam::_Internal {
 public:
  using HasBits = decltype(std::declval<SingleCameraParam>()._has_bits_);
  static void set_has_camera_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SingleCameraParam::SingleCameraParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  param_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.v2x.ft.fusion.SingleCameraParam)
}
SingleCameraParam::SingleCameraParam(const SingleCameraParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      param_(from.param_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  camera_id_ = from.camera_id_;
  // @@protoc_insertion_point(copy_constructor:apollo.v2x.ft.fusion.SingleCameraParam)
}

void SingleCameraParam::SharedCtor() {
camera_id_ = 0;
}

SingleCameraParam::~SingleCameraParam() {
  // @@protoc_insertion_point(destructor:apollo.v2x.ft.fusion.SingleCameraParam)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SingleCameraParam::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SingleCameraParam::ArenaDtor(void* object) {
  SingleCameraParam* _this = reinterpret_cast< SingleCameraParam* >(object);
  (void)_this;
}
void SingleCameraParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SingleCameraParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SingleCameraParam::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.v2x.ft.fusion.SingleCameraParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  param_.Clear();
  camera_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SingleCameraParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 camera_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_camera_id(&has_bits);
          camera_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.v2x.ft.fusion.Param param = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_param(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SingleCameraParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.v2x.ft.fusion.SingleCameraParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 camera_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_camera_id(), target);
  }

  // repeated .apollo.v2x.ft.fusion.Param param = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_param_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_param(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.v2x.ft.fusion.SingleCameraParam)
  return target;
}

size_t SingleCameraParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.v2x.ft.fusion.SingleCameraParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.v2x.ft.fusion.Param param = 2;
  total_size += 1UL * this->_internal_param_size();
  for (const auto& msg : this->param_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional int32 camera_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_camera_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SingleCameraParam::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SingleCameraParam::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SingleCameraParam::GetClassData() const { return &_class_data_; }

void SingleCameraParam::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SingleCameraParam *>(to)->MergeFrom(
      static_cast<const SingleCameraParam &>(from));
}


void SingleCameraParam::MergeFrom(const SingleCameraParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.v2x.ft.fusion.SingleCameraParam)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  param_.MergeFrom(from.param_);
  if (from._internal_has_camera_id()) {
    _internal_set_camera_id(from._internal_camera_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SingleCameraParam::CopyFrom(const SingleCameraParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.v2x.ft.fusion.SingleCameraParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleCameraParam::IsInitialized() const {
  return true;
}

void SingleCameraParam::InternalSwap(SingleCameraParam* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  param_.InternalSwap(&other->param_);
  swap(camera_id_, other->camera_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleCameraParam::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fv2x_2fproto_2ffusion_5fparams_2eproto_getter, &descriptor_table_modules_2fv2x_2fproto_2ffusion_5fparams_2eproto_once,
      file_level_metadata_modules_2fv2x_2fproto_2ffusion_5fparams_2eproto[2]);
}

// ===================================================================

class ScoreParams::_Internal {
 public:
  using HasBits = decltype(std::declval<ScoreParams>()._has_bits_);
  static void set_has_prob_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max_match_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_min_score(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_use_mahalanobis_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_check_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_confidence_level(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

ScoreParams::ScoreParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.v2x.ft.fusion.ScoreParams)
}
ScoreParams::ScoreParams(const ScoreParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&prob_scale_, &from.prob_scale_,
    static_cast<size_t>(reinterpret_cast<char*>(&confidence_level_) -
    reinterpret_cast<char*>(&prob_scale_)) + sizeof(confidence_level_));
  // @@protoc_insertion_point(copy_constructor:apollo.v2x.ft.fusion.ScoreParams)
}

void ScoreParams::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&prob_scale_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&check_type_) -
    reinterpret_cast<char*>(&prob_scale_)) + sizeof(check_type_));
confidence_level_ = 2;
}

ScoreParams::~ScoreParams() {
  // @@protoc_insertion_point(destructor:apollo.v2x.ft.fusion.ScoreParams)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ScoreParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ScoreParams::ArenaDtor(void* object) {
  ScoreParams* _this = reinterpret_cast< ScoreParams* >(object);
  (void)_this;
}
void ScoreParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScoreParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ScoreParams::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.v2x.ft.fusion.ScoreParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&prob_scale_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&check_type_) -
        reinterpret_cast<char*>(&prob_scale_)) + sizeof(check_type_));
    confidence_level_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScoreParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double prob_scale = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_prob_scale(&has_bits);
          prob_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double max_match_distance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_max_match_distance(&has_bits);
          max_match_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double min_score = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_min_score(&has_bits);
          min_score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool use_mahalanobis_distance = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_use_mahalanobis_distance(&has_bits);
          use_mahalanobis_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool check_type = 5 [default = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_check_type(&has_bits);
          check_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.v2x.ft.fusion.ConfidenceLevel confidence_level = 6 [default = C975P];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::v2x::ft::fusion::ConfidenceLevel_IsValid(val))) {
            _internal_set_confidence_level(static_cast<::apollo::v2x::ft::fusion::ConfidenceLevel>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScoreParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.v2x.ft.fusion.ScoreParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double prob_scale = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_prob_scale(), target);
  }

  // optional double max_match_distance = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_max_match_distance(), target);
  }

  // optional double min_score = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_min_score(), target);
  }

  // optional bool use_mahalanobis_distance = 4 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_use_mahalanobis_distance(), target);
  }

  // optional bool check_type = 5 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_check_type(), target);
  }

  // optional .apollo.v2x.ft.fusion.ConfidenceLevel confidence_level = 6 [default = C975P];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_confidence_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.v2x.ft.fusion.ScoreParams)
  return target;
}

size_t ScoreParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.v2x.ft.fusion.ScoreParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional double prob_scale = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double max_match_distance = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double min_score = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional bool use_mahalanobis_distance = 4 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool check_type = 5 [default = false];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional .apollo.v2x.ft.fusion.ConfidenceLevel confidence_level = 6 [default = C975P];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_confidence_level());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ScoreParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ScoreParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ScoreParams::GetClassData() const { return &_class_data_; }

void ScoreParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ScoreParams *>(to)->MergeFrom(
      static_cast<const ScoreParams &>(from));
}


void ScoreParams::MergeFrom(const ScoreParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.v2x.ft.fusion.ScoreParams)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      prob_scale_ = from.prob_scale_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_match_distance_ = from.max_match_distance_;
    }
    if (cached_has_bits & 0x00000004u) {
      min_score_ = from.min_score_;
    }
    if (cached_has_bits & 0x00000008u) {
      use_mahalanobis_distance_ = from.use_mahalanobis_distance_;
    }
    if (cached_has_bits & 0x00000010u) {
      check_type_ = from.check_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      confidence_level_ = from.confidence_level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ScoreParams::CopyFrom(const ScoreParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.v2x.ft.fusion.ScoreParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScoreParams::IsInitialized() const {
  return true;
}

void ScoreParams::InternalSwap(ScoreParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ScoreParams, check_type_)
      + sizeof(ScoreParams::check_type_)
      - PROTOBUF_FIELD_OFFSET(ScoreParams, prob_scale_)>(
          reinterpret_cast<char*>(&prob_scale_),
          reinterpret_cast<char*>(&other->prob_scale_));
  swap(confidence_level_, other->confidence_level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScoreParams::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fv2x_2fproto_2ffusion_5fparams_2eproto_getter, &descriptor_table_modules_2fv2x_2fproto_2ffusion_5fparams_2eproto_once,
      file_level_metadata_modules_2fv2x_2fproto_2ffusion_5fparams_2eproto[3]);
}

// ===================================================================

class FusionParams::_Internal {
 public:
  using HasBits = decltype(std::declval<FusionParams>()._has_bits_);
  static const ::apollo::v2x::ft::fusion::KMParams& km_params(const FusionParams* msg);
  static void set_has_km_params(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::v2x::ft::fusion::ScoreParams& score_params(const FusionParams* msg);
  static void set_has_score_params(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::apollo::v2x::ft::fusion::KMParams&
FusionParams::_Internal::km_params(const FusionParams* msg) {
  return *msg->km_params_;
}
const ::apollo::v2x::ft::fusion::ScoreParams&
FusionParams::_Internal::score_params(const FusionParams* msg) {
  return *msg->score_params_;
}
FusionParams::FusionParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  fusion_params_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.v2x.ft.fusion.FusionParams)
}
FusionParams::FusionParams(const FusionParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      fusion_params_(from.fusion_params_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_km_params()) {
    km_params_ = new ::apollo::v2x::ft::fusion::KMParams(*from.km_params_);
  } else {
    km_params_ = nullptr;
  }
  if (from._internal_has_score_params()) {
    score_params_ = new ::apollo::v2x::ft::fusion::ScoreParams(*from.score_params_);
  } else {
    score_params_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.v2x.ft.fusion.FusionParams)
}

void FusionParams::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&km_params_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&score_params_) -
    reinterpret_cast<char*>(&km_params_)) + sizeof(score_params_));
}

FusionParams::~FusionParams() {
  // @@protoc_insertion_point(destructor:apollo.v2x.ft.fusion.FusionParams)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FusionParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete km_params_;
  if (this != internal_default_instance()) delete score_params_;
}

void FusionParams::ArenaDtor(void* object) {
  FusionParams* _this = reinterpret_cast< FusionParams* >(object);
  (void)_this;
}
void FusionParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FusionParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FusionParams::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.v2x.ft.fusion.FusionParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fusion_params_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(km_params_ != nullptr);
      km_params_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(score_params_ != nullptr);
      score_params_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FusionParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .apollo.v2x.ft.fusion.SingleCameraParam fusion_params = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fusion_params(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.v2x.ft.fusion.KMParams km_params = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_km_params(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .apollo.v2x.ft.fusion.ScoreParams score_params = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_score_params(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FusionParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.v2x.ft.fusion.FusionParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.v2x.ft.fusion.SingleCameraParam fusion_params = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fusion_params_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_fusion_params(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .apollo.v2x.ft.fusion.KMParams km_params = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::km_params(this), target, stream);
  }

  // required .apollo.v2x.ft.fusion.ScoreParams score_params = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::score_params(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.v2x.ft.fusion.FusionParams)
  return target;
}

size_t FusionParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.v2x.ft.fusion.FusionParams)
  size_t total_size = 0;

  // required .apollo.v2x.ft.fusion.ScoreParams score_params = 3;
  if (_internal_has_score_params()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *score_params_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.v2x.ft.fusion.SingleCameraParam fusion_params = 1;
  total_size += 1UL * this->_internal_fusion_params_size();
  for (const auto& msg : this->fusion_params_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .apollo.v2x.ft.fusion.KMParams km_params = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *km_params_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FusionParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FusionParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FusionParams::GetClassData() const { return &_class_data_; }

void FusionParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FusionParams *>(to)->MergeFrom(
      static_cast<const FusionParams &>(from));
}


void FusionParams::MergeFrom(const FusionParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.v2x.ft.fusion.FusionParams)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fusion_params_.MergeFrom(from.fusion_params_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_km_params()->::apollo::v2x::ft::fusion::KMParams::MergeFrom(from._internal_km_params());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_score_params()->::apollo::v2x::ft::fusion::ScoreParams::MergeFrom(from._internal_score_params());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FusionParams::CopyFrom(const FusionParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.v2x.ft.fusion.FusionParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FusionParams::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void FusionParams::InternalSwap(FusionParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  fusion_params_.InternalSwap(&other->fusion_params_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FusionParams, score_params_)
      + sizeof(FusionParams::score_params_)
      - PROTOBUF_FIELD_OFFSET(FusionParams, km_params_)>(
          reinterpret_cast<char*>(&km_params_),
          reinterpret_cast<char*>(&other->km_params_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FusionParams::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fv2x_2fproto_2ffusion_5fparams_2eproto_getter, &descriptor_table_modules_2fv2x_2fproto_2ffusion_5fparams_2eproto_once,
      file_level_metadata_modules_2fv2x_2fproto_2ffusion_5fparams_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace fusion
}  // namespace ft
}  // namespace v2x
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::v2x::ft::fusion::KMParams* Arena::CreateMaybeMessage< ::apollo::v2x::ft::fusion::KMParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::v2x::ft::fusion::KMParams >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::v2x::ft::fusion::Param* Arena::CreateMaybeMessage< ::apollo::v2x::ft::fusion::Param >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::v2x::ft::fusion::Param >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::v2x::ft::fusion::SingleCameraParam* Arena::CreateMaybeMessage< ::apollo::v2x::ft::fusion::SingleCameraParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::v2x::ft::fusion::SingleCameraParam >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::v2x::ft::fusion::ScoreParams* Arena::CreateMaybeMessage< ::apollo::v2x::ft::fusion::ScoreParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::v2x::ft::fusion::ScoreParams >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::v2x::ft::fusion::FusionParams* Arena::CreateMaybeMessage< ::apollo::v2x::ft::fusion::FusionParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::v2x::ft::fusion::FusionParams >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
