// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/v2x/proto/v2x_traffic_light.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "modules/common/proto/header.pb.h"
#include "modules/common/proto/direction.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_2eproto;
namespace apollo {
namespace v2x {
class IntersectionTrafficLightData;
struct IntersectionTrafficLightDataDefaultTypeInternal;
extern IntersectionTrafficLightDataDefaultTypeInternal _IntersectionTrafficLightData_default_instance_;
class RoadTrafficLight;
struct RoadTrafficLightDefaultTypeInternal;
extern RoadTrafficLightDefaultTypeInternal _RoadTrafficLight_default_instance_;
class SingleTrafficLight;
struct SingleTrafficLightDefaultTypeInternal;
extern SingleTrafficLightDefaultTypeInternal _SingleTrafficLight_default_instance_;
}  // namespace v2x
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::v2x::IntersectionTrafficLightData* Arena::CreateMaybeMessage<::apollo::v2x::IntersectionTrafficLightData>(Arena*);
template<> ::apollo::v2x::RoadTrafficLight* Arena::CreateMaybeMessage<::apollo::v2x::RoadTrafficLight>(Arena*);
template<> ::apollo::v2x::SingleTrafficLight* Arena::CreateMaybeMessage<::apollo::v2x::SingleTrafficLight>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace v2x {

enum SingleTrafficLight_Color : int {
  SingleTrafficLight_Color_UNKNOWN = 0,
  SingleTrafficLight_Color_RED = 1,
  SingleTrafficLight_Color_YELLOW = 2,
  SingleTrafficLight_Color_GREEN = 3,
  SingleTrafficLight_Color_BLACK = 4,
  SingleTrafficLight_Color_FLASH_GREEN = 5
};
bool SingleTrafficLight_Color_IsValid(int value);
constexpr SingleTrafficLight_Color SingleTrafficLight_Color_Color_MIN = SingleTrafficLight_Color_UNKNOWN;
constexpr SingleTrafficLight_Color SingleTrafficLight_Color_Color_MAX = SingleTrafficLight_Color_FLASH_GREEN;
constexpr int SingleTrafficLight_Color_Color_ARRAYSIZE = SingleTrafficLight_Color_Color_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SingleTrafficLight_Color_descriptor();
template<typename T>
inline const std::string& SingleTrafficLight_Color_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SingleTrafficLight_Color>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SingleTrafficLight_Color_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SingleTrafficLight_Color_descriptor(), enum_t_value);
}
inline bool SingleTrafficLight_Color_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SingleTrafficLight_Color* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SingleTrafficLight_Color>(
    SingleTrafficLight_Color_descriptor(), name, value);
}
enum SingleTrafficLight_Type : int {
  SingleTrafficLight_Type_STRAIGHT = 0,
  SingleTrafficLight_Type_LEFT = 1,
  SingleTrafficLight_Type_RIGHT = 2,
  SingleTrafficLight_Type_U_TURN = 3
};
bool SingleTrafficLight_Type_IsValid(int value);
constexpr SingleTrafficLight_Type SingleTrafficLight_Type_Type_MIN = SingleTrafficLight_Type_STRAIGHT;
constexpr SingleTrafficLight_Type SingleTrafficLight_Type_Type_MAX = SingleTrafficLight_Type_U_TURN;
constexpr int SingleTrafficLight_Type_Type_ARRAYSIZE = SingleTrafficLight_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SingleTrafficLight_Type_descriptor();
template<typename T>
inline const std::string& SingleTrafficLight_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SingleTrafficLight_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SingleTrafficLight_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SingleTrafficLight_Type_descriptor(), enum_t_value);
}
inline bool SingleTrafficLight_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SingleTrafficLight_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SingleTrafficLight_Type>(
    SingleTrafficLight_Type_descriptor(), name, value);
}
// ===================================================================

class SingleTrafficLight final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.v2x.SingleTrafficLight) */ {
 public:
  inline SingleTrafficLight() : SingleTrafficLight(nullptr) {}
  ~SingleTrafficLight() override;
  explicit constexpr SingleTrafficLight(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SingleTrafficLight(const SingleTrafficLight& from);
  SingleTrafficLight(SingleTrafficLight&& from) noexcept
    : SingleTrafficLight() {
    *this = ::std::move(from);
  }

  inline SingleTrafficLight& operator=(const SingleTrafficLight& from) {
    CopyFrom(from);
    return *this;
  }
  inline SingleTrafficLight& operator=(SingleTrafficLight&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SingleTrafficLight& default_instance() {
    return *internal_default_instance();
  }
  static inline const SingleTrafficLight* internal_default_instance() {
    return reinterpret_cast<const SingleTrafficLight*>(
               &_SingleTrafficLight_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SingleTrafficLight& a, SingleTrafficLight& b) {
    a.Swap(&b);
  }
  inline void Swap(SingleTrafficLight* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SingleTrafficLight* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SingleTrafficLight* New() const final {
    return new SingleTrafficLight();
  }

  SingleTrafficLight* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SingleTrafficLight>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SingleTrafficLight& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SingleTrafficLight& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SingleTrafficLight* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.v2x.SingleTrafficLight";
  }
  protected:
  explicit SingleTrafficLight(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SingleTrafficLight_Color Color;
  static constexpr Color UNKNOWN =
    SingleTrafficLight_Color_UNKNOWN;
  static constexpr Color RED =
    SingleTrafficLight_Color_RED;
  static constexpr Color YELLOW =
    SingleTrafficLight_Color_YELLOW;
  static constexpr Color GREEN =
    SingleTrafficLight_Color_GREEN;
  static constexpr Color BLACK =
    SingleTrafficLight_Color_BLACK;
  static constexpr Color FLASH_GREEN =
    SingleTrafficLight_Color_FLASH_GREEN;
  static inline bool Color_IsValid(int value) {
    return SingleTrafficLight_Color_IsValid(value);
  }
  static constexpr Color Color_MIN =
    SingleTrafficLight_Color_Color_MIN;
  static constexpr Color Color_MAX =
    SingleTrafficLight_Color_Color_MAX;
  static constexpr int Color_ARRAYSIZE =
    SingleTrafficLight_Color_Color_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Color_descriptor() {
    return SingleTrafficLight_Color_descriptor();
  }
  template<typename T>
  static inline const std::string& Color_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Color>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Color_Name.");
    return SingleTrafficLight_Color_Name(enum_t_value);
  }
  static inline bool Color_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Color* value) {
    return SingleTrafficLight_Color_Parse(name, value);
  }

  typedef SingleTrafficLight_Type Type;
  static constexpr Type STRAIGHT =
    SingleTrafficLight_Type_STRAIGHT;
  static constexpr Type LEFT =
    SingleTrafficLight_Type_LEFT;
  static constexpr Type RIGHT =
    SingleTrafficLight_Type_RIGHT;
  static constexpr Type U_TURN =
    SingleTrafficLight_Type_U_TURN;
  static inline bool Type_IsValid(int value) {
    return SingleTrafficLight_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    SingleTrafficLight_Type_Type_MIN;
  static constexpr Type Type_MAX =
    SingleTrafficLight_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    SingleTrafficLight_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return SingleTrafficLight_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return SingleTrafficLight_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return SingleTrafficLight_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTrafficLightTypeFieldNumber = 2,
    kIdFieldNumber = 3,
    kColorFieldNumber = 1,
    kColorRemainingTimeSFieldNumber = 4,
    kRightTurnLightFieldNumber = 5,
    kNextColorFieldNumber = 6,
    kNextRemainingTimeSFieldNumber = 7,
  };
  // repeated .apollo.v2x.SingleTrafficLight.Type traffic_light_type = 2;
  int traffic_light_type_size() const;
  private:
  int _internal_traffic_light_type_size() const;
  public:
  void clear_traffic_light_type();
  private:
  ::apollo::v2x::SingleTrafficLight_Type _internal_traffic_light_type(int index) const;
  void _internal_add_traffic_light_type(::apollo::v2x::SingleTrafficLight_Type value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_traffic_light_type();
  public:
  ::apollo::v2x::SingleTrafficLight_Type traffic_light_type(int index) const;
  void set_traffic_light_type(int index, ::apollo::v2x::SingleTrafficLight_Type value);
  void add_traffic_light_type(::apollo::v2x::SingleTrafficLight_Type value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& traffic_light_type() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_traffic_light_type();

  // optional string id = 3;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // optional .apollo.v2x.SingleTrafficLight.Color color = 1;
  bool has_color() const;
  private:
  bool _internal_has_color() const;
  public:
  void clear_color();
  ::apollo::v2x::SingleTrafficLight_Color color() const;
  void set_color(::apollo::v2x::SingleTrafficLight_Color value);
  private:
  ::apollo::v2x::SingleTrafficLight_Color _internal_color() const;
  void _internal_set_color(::apollo::v2x::SingleTrafficLight_Color value);
  public:

  // optional int32 color_remaining_time_s = 4;
  bool has_color_remaining_time_s() const;
  private:
  bool _internal_has_color_remaining_time_s() const;
  public:
  void clear_color_remaining_time_s();
  ::PROTOBUF_NAMESPACE_ID::int32 color_remaining_time_s() const;
  void set_color_remaining_time_s(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_color_remaining_time_s() const;
  void _internal_set_color_remaining_time_s(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool right_turn_light = 5;
  bool has_right_turn_light() const;
  private:
  bool _internal_has_right_turn_light() const;
  public:
  void clear_right_turn_light();
  bool right_turn_light() const;
  void set_right_turn_light(bool value);
  private:
  bool _internal_right_turn_light() const;
  void _internal_set_right_turn_light(bool value);
  public:

  // optional .apollo.v2x.SingleTrafficLight.Color next_color = 6;
  bool has_next_color() const;
  private:
  bool _internal_has_next_color() const;
  public:
  void clear_next_color();
  ::apollo::v2x::SingleTrafficLight_Color next_color() const;
  void set_next_color(::apollo::v2x::SingleTrafficLight_Color value);
  private:
  ::apollo::v2x::SingleTrafficLight_Color _internal_next_color() const;
  void _internal_set_next_color(::apollo::v2x::SingleTrafficLight_Color value);
  public:

  // optional double next_remaining_time_s = 7;
  bool has_next_remaining_time_s() const;
  private:
  bool _internal_has_next_remaining_time_s() const;
  public:
  void clear_next_remaining_time_s();
  double next_remaining_time_s() const;
  void set_next_remaining_time_s(double value);
  private:
  double _internal_next_remaining_time_s() const;
  void _internal_set_next_remaining_time_s(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.v2x.SingleTrafficLight)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> traffic_light_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  int color_;
  ::PROTOBUF_NAMESPACE_ID::int32 color_remaining_time_s_;
  bool right_turn_light_;
  int next_color_;
  double next_remaining_time_s_;
  friend struct ::TableStruct_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_2eproto;
};
// -------------------------------------------------------------------

class RoadTrafficLight final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.v2x.RoadTrafficLight) */ {
 public:
  inline RoadTrafficLight() : RoadTrafficLight(nullptr) {}
  ~RoadTrafficLight() override;
  explicit constexpr RoadTrafficLight(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoadTrafficLight(const RoadTrafficLight& from);
  RoadTrafficLight(RoadTrafficLight&& from) noexcept
    : RoadTrafficLight() {
    *this = ::std::move(from);
  }

  inline RoadTrafficLight& operator=(const RoadTrafficLight& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoadTrafficLight& operator=(RoadTrafficLight&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoadTrafficLight& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoadTrafficLight* internal_default_instance() {
    return reinterpret_cast<const RoadTrafficLight*>(
               &_RoadTrafficLight_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RoadTrafficLight& a, RoadTrafficLight& b) {
    a.Swap(&b);
  }
  inline void Swap(RoadTrafficLight* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoadTrafficLight* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoadTrafficLight* New() const final {
    return new RoadTrafficLight();
  }

  RoadTrafficLight* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoadTrafficLight>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoadTrafficLight& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RoadTrafficLight& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoadTrafficLight* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.v2x.RoadTrafficLight";
  }
  protected:
  explicit RoadTrafficLight(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSingleTrafficLightFieldNumber = 3,
    kGpsXMFieldNumber = 1,
    kGpsYMFieldNumber = 2,
    kRoadAttributeFieldNumber = 4,
  };
  // repeated .apollo.v2x.SingleTrafficLight single_traffic_light = 3;
  int single_traffic_light_size() const;
  private:
  int _internal_single_traffic_light_size() const;
  public:
  void clear_single_traffic_light();
  ::apollo::v2x::SingleTrafficLight* mutable_single_traffic_light(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::v2x::SingleTrafficLight >*
      mutable_single_traffic_light();
  private:
  const ::apollo::v2x::SingleTrafficLight& _internal_single_traffic_light(int index) const;
  ::apollo::v2x::SingleTrafficLight* _internal_add_single_traffic_light();
  public:
  const ::apollo::v2x::SingleTrafficLight& single_traffic_light(int index) const;
  ::apollo::v2x::SingleTrafficLight* add_single_traffic_light();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::v2x::SingleTrafficLight >&
      single_traffic_light() const;

  // optional double gps_x_m = 1;
  bool has_gps_x_m() const;
  private:
  bool _internal_has_gps_x_m() const;
  public:
  void clear_gps_x_m();
  double gps_x_m() const;
  void set_gps_x_m(double value);
  private:
  double _internal_gps_x_m() const;
  void _internal_set_gps_x_m(double value);
  public:

  // optional double gps_y_m = 2;
  bool has_gps_y_m() const;
  private:
  bool _internal_has_gps_y_m() const;
  public:
  void clear_gps_y_m();
  double gps_y_m() const;
  void set_gps_y_m(double value);
  private:
  double _internal_gps_y_m() const;
  void _internal_set_gps_y_m(double value);
  public:

  // optional .apollo.common.Direction road_attribute = 4;
  bool has_road_attribute() const;
  private:
  bool _internal_has_road_attribute() const;
  public:
  void clear_road_attribute();
  ::apollo::common::Direction road_attribute() const;
  void set_road_attribute(::apollo::common::Direction value);
  private:
  ::apollo::common::Direction _internal_road_attribute() const;
  void _internal_set_road_attribute(::apollo::common::Direction value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.v2x.RoadTrafficLight)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::v2x::SingleTrafficLight > single_traffic_light_;
  double gps_x_m_;
  double gps_y_m_;
  int road_attribute_;
  friend struct ::TableStruct_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_2eproto;
};
// -------------------------------------------------------------------

class IntersectionTrafficLightData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.v2x.IntersectionTrafficLightData) */ {
 public:
  inline IntersectionTrafficLightData() : IntersectionTrafficLightData(nullptr) {}
  ~IntersectionTrafficLightData() override;
  explicit constexpr IntersectionTrafficLightData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IntersectionTrafficLightData(const IntersectionTrafficLightData& from);
  IntersectionTrafficLightData(IntersectionTrafficLightData&& from) noexcept
    : IntersectionTrafficLightData() {
    *this = ::std::move(from);
  }

  inline IntersectionTrafficLightData& operator=(const IntersectionTrafficLightData& from) {
    CopyFrom(from);
    return *this;
  }
  inline IntersectionTrafficLightData& operator=(IntersectionTrafficLightData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IntersectionTrafficLightData& default_instance() {
    return *internal_default_instance();
  }
  static inline const IntersectionTrafficLightData* internal_default_instance() {
    return reinterpret_cast<const IntersectionTrafficLightData*>(
               &_IntersectionTrafficLightData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(IntersectionTrafficLightData& a, IntersectionTrafficLightData& b) {
    a.Swap(&b);
  }
  inline void Swap(IntersectionTrafficLightData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IntersectionTrafficLightData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IntersectionTrafficLightData* New() const final {
    return new IntersectionTrafficLightData();
  }

  IntersectionTrafficLightData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IntersectionTrafficLightData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IntersectionTrafficLightData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IntersectionTrafficLightData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IntersectionTrafficLightData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.v2x.IntersectionTrafficLightData";
  }
  protected:
  explicit IntersectionTrafficLightData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoadTrafficLightFieldNumber = 2,
    kHeaderFieldNumber = 1,
    kConfidenceFieldNumber = 4,
    kIntersectionIdFieldNumber = 3,
  };
  // repeated .apollo.v2x.RoadTrafficLight road_traffic_light = 2;
  int road_traffic_light_size() const;
  private:
  int _internal_road_traffic_light_size() const;
  public:
  void clear_road_traffic_light();
  ::apollo::v2x::RoadTrafficLight* mutable_road_traffic_light(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::v2x::RoadTrafficLight >*
      mutable_road_traffic_light();
  private:
  const ::apollo::v2x::RoadTrafficLight& _internal_road_traffic_light(int index) const;
  ::apollo::v2x::RoadTrafficLight* _internal_add_road_traffic_light();
  public:
  const ::apollo::v2x::RoadTrafficLight& road_traffic_light(int index) const;
  ::apollo::v2x::RoadTrafficLight* add_road_traffic_light();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::v2x::RoadTrafficLight >&
      road_traffic_light() const;

  // optional .apollo.common.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::apollo::common::Header& header() const;
  PROTOBUF_MUST_USE_RESULT ::apollo::common::Header* release_header();
  ::apollo::common::Header* mutable_header();
  void set_allocated_header(::apollo::common::Header* header);
  private:
  const ::apollo::common::Header& _internal_header() const;
  ::apollo::common::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::apollo::common::Header* header);
  ::apollo::common::Header* unsafe_arena_release_header();

  // optional double confidence = 4;
  bool has_confidence() const;
  private:
  bool _internal_has_confidence() const;
  public:
  void clear_confidence();
  double confidence() const;
  void set_confidence(double value);
  private:
  double _internal_confidence() const;
  void _internal_set_confidence(double value);
  public:

  // optional int32 intersection_id = 3;
  bool has_intersection_id() const;
  private:
  bool _internal_has_intersection_id() const;
  public:
  void clear_intersection_id();
  ::PROTOBUF_NAMESPACE_ID::int32 intersection_id() const;
  void set_intersection_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_intersection_id() const;
  void _internal_set_intersection_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.v2x.IntersectionTrafficLightData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::v2x::RoadTrafficLight > road_traffic_light_;
  ::apollo::common::Header* header_;
  double confidence_;
  ::PROTOBUF_NAMESPACE_ID::int32 intersection_id_;
  friend struct ::TableStruct_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SingleTrafficLight

// optional .apollo.v2x.SingleTrafficLight.Color color = 1;
inline bool SingleTrafficLight::_internal_has_color() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SingleTrafficLight::has_color() const {
  return _internal_has_color();
}
inline void SingleTrafficLight::clear_color() {
  color_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::apollo::v2x::SingleTrafficLight_Color SingleTrafficLight::_internal_color() const {
  return static_cast< ::apollo::v2x::SingleTrafficLight_Color >(color_);
}
inline ::apollo::v2x::SingleTrafficLight_Color SingleTrafficLight::color() const {
  // @@protoc_insertion_point(field_get:apollo.v2x.SingleTrafficLight.color)
  return _internal_color();
}
inline void SingleTrafficLight::_internal_set_color(::apollo::v2x::SingleTrafficLight_Color value) {
  assert(::apollo::v2x::SingleTrafficLight_Color_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  color_ = value;
}
inline void SingleTrafficLight::set_color(::apollo::v2x::SingleTrafficLight_Color value) {
  _internal_set_color(value);
  // @@protoc_insertion_point(field_set:apollo.v2x.SingleTrafficLight.color)
}

// repeated .apollo.v2x.SingleTrafficLight.Type traffic_light_type = 2;
inline int SingleTrafficLight::_internal_traffic_light_type_size() const {
  return traffic_light_type_.size();
}
inline int SingleTrafficLight::traffic_light_type_size() const {
  return _internal_traffic_light_type_size();
}
inline void SingleTrafficLight::clear_traffic_light_type() {
  traffic_light_type_.Clear();
}
inline ::apollo::v2x::SingleTrafficLight_Type SingleTrafficLight::_internal_traffic_light_type(int index) const {
  return static_cast< ::apollo::v2x::SingleTrafficLight_Type >(traffic_light_type_.Get(index));
}
inline ::apollo::v2x::SingleTrafficLight_Type SingleTrafficLight::traffic_light_type(int index) const {
  // @@protoc_insertion_point(field_get:apollo.v2x.SingleTrafficLight.traffic_light_type)
  return _internal_traffic_light_type(index);
}
inline void SingleTrafficLight::set_traffic_light_type(int index, ::apollo::v2x::SingleTrafficLight_Type value) {
  assert(::apollo::v2x::SingleTrafficLight_Type_IsValid(value));
  traffic_light_type_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.v2x.SingleTrafficLight.traffic_light_type)
}
inline void SingleTrafficLight::_internal_add_traffic_light_type(::apollo::v2x::SingleTrafficLight_Type value) {
  assert(::apollo::v2x::SingleTrafficLight_Type_IsValid(value));
  traffic_light_type_.Add(value);
}
inline void SingleTrafficLight::add_traffic_light_type(::apollo::v2x::SingleTrafficLight_Type value) {
  _internal_add_traffic_light_type(value);
  // @@protoc_insertion_point(field_add:apollo.v2x.SingleTrafficLight.traffic_light_type)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
SingleTrafficLight::traffic_light_type() const {
  // @@protoc_insertion_point(field_list:apollo.v2x.SingleTrafficLight.traffic_light_type)
  return traffic_light_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
SingleTrafficLight::_internal_mutable_traffic_light_type() {
  return &traffic_light_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
SingleTrafficLight::mutable_traffic_light_type() {
  // @@protoc_insertion_point(field_mutable_list:apollo.v2x.SingleTrafficLight.traffic_light_type)
  return _internal_mutable_traffic_light_type();
}

// optional string id = 3;
inline bool SingleTrafficLight::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SingleTrafficLight::has_id() const {
  return _internal_has_id();
}
inline void SingleTrafficLight::clear_id() {
  id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SingleTrafficLight::id() const {
  // @@protoc_insertion_point(field_get:apollo.v2x.SingleTrafficLight.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SingleTrafficLight::set_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.v2x.SingleTrafficLight.id)
}
inline std::string* SingleTrafficLight::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:apollo.v2x.SingleTrafficLight.id)
  return _s;
}
inline const std::string& SingleTrafficLight::_internal_id() const {
  return id_.Get();
}
inline void SingleTrafficLight::_internal_set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SingleTrafficLight::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SingleTrafficLight::release_id() {
  // @@protoc_insertion_point(field_release:apollo.v2x.SingleTrafficLight.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SingleTrafficLight::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:apollo.v2x.SingleTrafficLight.id)
}

// optional int32 color_remaining_time_s = 4;
inline bool SingleTrafficLight::_internal_has_color_remaining_time_s() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SingleTrafficLight::has_color_remaining_time_s() const {
  return _internal_has_color_remaining_time_s();
}
inline void SingleTrafficLight::clear_color_remaining_time_s() {
  color_remaining_time_s_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SingleTrafficLight::_internal_color_remaining_time_s() const {
  return color_remaining_time_s_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SingleTrafficLight::color_remaining_time_s() const {
  // @@protoc_insertion_point(field_get:apollo.v2x.SingleTrafficLight.color_remaining_time_s)
  return _internal_color_remaining_time_s();
}
inline void SingleTrafficLight::_internal_set_color_remaining_time_s(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  color_remaining_time_s_ = value;
}
inline void SingleTrafficLight::set_color_remaining_time_s(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_color_remaining_time_s(value);
  // @@protoc_insertion_point(field_set:apollo.v2x.SingleTrafficLight.color_remaining_time_s)
}

// optional bool right_turn_light = 5;
inline bool SingleTrafficLight::_internal_has_right_turn_light() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SingleTrafficLight::has_right_turn_light() const {
  return _internal_has_right_turn_light();
}
inline void SingleTrafficLight::clear_right_turn_light() {
  right_turn_light_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool SingleTrafficLight::_internal_right_turn_light() const {
  return right_turn_light_;
}
inline bool SingleTrafficLight::right_turn_light() const {
  // @@protoc_insertion_point(field_get:apollo.v2x.SingleTrafficLight.right_turn_light)
  return _internal_right_turn_light();
}
inline void SingleTrafficLight::_internal_set_right_turn_light(bool value) {
  _has_bits_[0] |= 0x00000008u;
  right_turn_light_ = value;
}
inline void SingleTrafficLight::set_right_turn_light(bool value) {
  _internal_set_right_turn_light(value);
  // @@protoc_insertion_point(field_set:apollo.v2x.SingleTrafficLight.right_turn_light)
}

// optional .apollo.v2x.SingleTrafficLight.Color next_color = 6;
inline bool SingleTrafficLight::_internal_has_next_color() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SingleTrafficLight::has_next_color() const {
  return _internal_has_next_color();
}
inline void SingleTrafficLight::clear_next_color() {
  next_color_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::apollo::v2x::SingleTrafficLight_Color SingleTrafficLight::_internal_next_color() const {
  return static_cast< ::apollo::v2x::SingleTrafficLight_Color >(next_color_);
}
inline ::apollo::v2x::SingleTrafficLight_Color SingleTrafficLight::next_color() const {
  // @@protoc_insertion_point(field_get:apollo.v2x.SingleTrafficLight.next_color)
  return _internal_next_color();
}
inline void SingleTrafficLight::_internal_set_next_color(::apollo::v2x::SingleTrafficLight_Color value) {
  assert(::apollo::v2x::SingleTrafficLight_Color_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  next_color_ = value;
}
inline void SingleTrafficLight::set_next_color(::apollo::v2x::SingleTrafficLight_Color value) {
  _internal_set_next_color(value);
  // @@protoc_insertion_point(field_set:apollo.v2x.SingleTrafficLight.next_color)
}

// optional double next_remaining_time_s = 7;
inline bool SingleTrafficLight::_internal_has_next_remaining_time_s() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SingleTrafficLight::has_next_remaining_time_s() const {
  return _internal_has_next_remaining_time_s();
}
inline void SingleTrafficLight::clear_next_remaining_time_s() {
  next_remaining_time_s_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double SingleTrafficLight::_internal_next_remaining_time_s() const {
  return next_remaining_time_s_;
}
inline double SingleTrafficLight::next_remaining_time_s() const {
  // @@protoc_insertion_point(field_get:apollo.v2x.SingleTrafficLight.next_remaining_time_s)
  return _internal_next_remaining_time_s();
}
inline void SingleTrafficLight::_internal_set_next_remaining_time_s(double value) {
  _has_bits_[0] |= 0x00000020u;
  next_remaining_time_s_ = value;
}
inline void SingleTrafficLight::set_next_remaining_time_s(double value) {
  _internal_set_next_remaining_time_s(value);
  // @@protoc_insertion_point(field_set:apollo.v2x.SingleTrafficLight.next_remaining_time_s)
}

// -------------------------------------------------------------------

// RoadTrafficLight

// optional double gps_x_m = 1;
inline bool RoadTrafficLight::_internal_has_gps_x_m() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RoadTrafficLight::has_gps_x_m() const {
  return _internal_has_gps_x_m();
}
inline void RoadTrafficLight::clear_gps_x_m() {
  gps_x_m_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double RoadTrafficLight::_internal_gps_x_m() const {
  return gps_x_m_;
}
inline double RoadTrafficLight::gps_x_m() const {
  // @@protoc_insertion_point(field_get:apollo.v2x.RoadTrafficLight.gps_x_m)
  return _internal_gps_x_m();
}
inline void RoadTrafficLight::_internal_set_gps_x_m(double value) {
  _has_bits_[0] |= 0x00000001u;
  gps_x_m_ = value;
}
inline void RoadTrafficLight::set_gps_x_m(double value) {
  _internal_set_gps_x_m(value);
  // @@protoc_insertion_point(field_set:apollo.v2x.RoadTrafficLight.gps_x_m)
}

// optional double gps_y_m = 2;
inline bool RoadTrafficLight::_internal_has_gps_y_m() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RoadTrafficLight::has_gps_y_m() const {
  return _internal_has_gps_y_m();
}
inline void RoadTrafficLight::clear_gps_y_m() {
  gps_y_m_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double RoadTrafficLight::_internal_gps_y_m() const {
  return gps_y_m_;
}
inline double RoadTrafficLight::gps_y_m() const {
  // @@protoc_insertion_point(field_get:apollo.v2x.RoadTrafficLight.gps_y_m)
  return _internal_gps_y_m();
}
inline void RoadTrafficLight::_internal_set_gps_y_m(double value) {
  _has_bits_[0] |= 0x00000002u;
  gps_y_m_ = value;
}
inline void RoadTrafficLight::set_gps_y_m(double value) {
  _internal_set_gps_y_m(value);
  // @@protoc_insertion_point(field_set:apollo.v2x.RoadTrafficLight.gps_y_m)
}

// repeated .apollo.v2x.SingleTrafficLight single_traffic_light = 3;
inline int RoadTrafficLight::_internal_single_traffic_light_size() const {
  return single_traffic_light_.size();
}
inline int RoadTrafficLight::single_traffic_light_size() const {
  return _internal_single_traffic_light_size();
}
inline void RoadTrafficLight::clear_single_traffic_light() {
  single_traffic_light_.Clear();
}
inline ::apollo::v2x::SingleTrafficLight* RoadTrafficLight::mutable_single_traffic_light(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.v2x.RoadTrafficLight.single_traffic_light)
  return single_traffic_light_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::v2x::SingleTrafficLight >*
RoadTrafficLight::mutable_single_traffic_light() {
  // @@protoc_insertion_point(field_mutable_list:apollo.v2x.RoadTrafficLight.single_traffic_light)
  return &single_traffic_light_;
}
inline const ::apollo::v2x::SingleTrafficLight& RoadTrafficLight::_internal_single_traffic_light(int index) const {
  return single_traffic_light_.Get(index);
}
inline const ::apollo::v2x::SingleTrafficLight& RoadTrafficLight::single_traffic_light(int index) const {
  // @@protoc_insertion_point(field_get:apollo.v2x.RoadTrafficLight.single_traffic_light)
  return _internal_single_traffic_light(index);
}
inline ::apollo::v2x::SingleTrafficLight* RoadTrafficLight::_internal_add_single_traffic_light() {
  return single_traffic_light_.Add();
}
inline ::apollo::v2x::SingleTrafficLight* RoadTrafficLight::add_single_traffic_light() {
  ::apollo::v2x::SingleTrafficLight* _add = _internal_add_single_traffic_light();
  // @@protoc_insertion_point(field_add:apollo.v2x.RoadTrafficLight.single_traffic_light)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::v2x::SingleTrafficLight >&
RoadTrafficLight::single_traffic_light() const {
  // @@protoc_insertion_point(field_list:apollo.v2x.RoadTrafficLight.single_traffic_light)
  return single_traffic_light_;
}

// optional .apollo.common.Direction road_attribute = 4;
inline bool RoadTrafficLight::_internal_has_road_attribute() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RoadTrafficLight::has_road_attribute() const {
  return _internal_has_road_attribute();
}
inline void RoadTrafficLight::clear_road_attribute() {
  road_attribute_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::apollo::common::Direction RoadTrafficLight::_internal_road_attribute() const {
  return static_cast< ::apollo::common::Direction >(road_attribute_);
}
inline ::apollo::common::Direction RoadTrafficLight::road_attribute() const {
  // @@protoc_insertion_point(field_get:apollo.v2x.RoadTrafficLight.road_attribute)
  return _internal_road_attribute();
}
inline void RoadTrafficLight::_internal_set_road_attribute(::apollo::common::Direction value) {
  assert(::apollo::common::Direction_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  road_attribute_ = value;
}
inline void RoadTrafficLight::set_road_attribute(::apollo::common::Direction value) {
  _internal_set_road_attribute(value);
  // @@protoc_insertion_point(field_set:apollo.v2x.RoadTrafficLight.road_attribute)
}

// -------------------------------------------------------------------

// IntersectionTrafficLightData

// optional .apollo.common.Header header = 1;
inline bool IntersectionTrafficLightData::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || header_ != nullptr);
  return value;
}
inline bool IntersectionTrafficLightData::has_header() const {
  return _internal_has_header();
}
inline const ::apollo::common::Header& IntersectionTrafficLightData::_internal_header() const {
  const ::apollo::common::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::common::Header&>(
      ::apollo::common::_Header_default_instance_);
}
inline const ::apollo::common::Header& IntersectionTrafficLightData::header() const {
  // @@protoc_insertion_point(field_get:apollo.v2x.IntersectionTrafficLightData.header)
  return _internal_header();
}
inline void IntersectionTrafficLightData::unsafe_arena_set_allocated_header(
    ::apollo::common::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.v2x.IntersectionTrafficLightData.header)
}
inline ::apollo::common::Header* IntersectionTrafficLightData::release_header() {
  _has_bits_[0] &= ~0x00000001u;
  ::apollo::common::Header* temp = header_;
  header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::common::Header* IntersectionTrafficLightData::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:apollo.v2x.IntersectionTrafficLightData.header)
  _has_bits_[0] &= ~0x00000001u;
  ::apollo::common::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::apollo::common::Header* IntersectionTrafficLightData::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000001u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Header>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::apollo::common::Header* IntersectionTrafficLightData::mutable_header() {
  ::apollo::common::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:apollo.v2x.IntersectionTrafficLightData.header)
  return _msg;
}
inline void IntersectionTrafficLightData::set_allocated_header(::apollo::common::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:apollo.v2x.IntersectionTrafficLightData.header)
}

// repeated .apollo.v2x.RoadTrafficLight road_traffic_light = 2;
inline int IntersectionTrafficLightData::_internal_road_traffic_light_size() const {
  return road_traffic_light_.size();
}
inline int IntersectionTrafficLightData::road_traffic_light_size() const {
  return _internal_road_traffic_light_size();
}
inline void IntersectionTrafficLightData::clear_road_traffic_light() {
  road_traffic_light_.Clear();
}
inline ::apollo::v2x::RoadTrafficLight* IntersectionTrafficLightData::mutable_road_traffic_light(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.v2x.IntersectionTrafficLightData.road_traffic_light)
  return road_traffic_light_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::v2x::RoadTrafficLight >*
IntersectionTrafficLightData::mutable_road_traffic_light() {
  // @@protoc_insertion_point(field_mutable_list:apollo.v2x.IntersectionTrafficLightData.road_traffic_light)
  return &road_traffic_light_;
}
inline const ::apollo::v2x::RoadTrafficLight& IntersectionTrafficLightData::_internal_road_traffic_light(int index) const {
  return road_traffic_light_.Get(index);
}
inline const ::apollo::v2x::RoadTrafficLight& IntersectionTrafficLightData::road_traffic_light(int index) const {
  // @@protoc_insertion_point(field_get:apollo.v2x.IntersectionTrafficLightData.road_traffic_light)
  return _internal_road_traffic_light(index);
}
inline ::apollo::v2x::RoadTrafficLight* IntersectionTrafficLightData::_internal_add_road_traffic_light() {
  return road_traffic_light_.Add();
}
inline ::apollo::v2x::RoadTrafficLight* IntersectionTrafficLightData::add_road_traffic_light() {
  ::apollo::v2x::RoadTrafficLight* _add = _internal_add_road_traffic_light();
  // @@protoc_insertion_point(field_add:apollo.v2x.IntersectionTrafficLightData.road_traffic_light)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::v2x::RoadTrafficLight >&
IntersectionTrafficLightData::road_traffic_light() const {
  // @@protoc_insertion_point(field_list:apollo.v2x.IntersectionTrafficLightData.road_traffic_light)
  return road_traffic_light_;
}

// optional int32 intersection_id = 3;
inline bool IntersectionTrafficLightData::_internal_has_intersection_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool IntersectionTrafficLightData::has_intersection_id() const {
  return _internal_has_intersection_id();
}
inline void IntersectionTrafficLightData::clear_intersection_id() {
  intersection_id_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IntersectionTrafficLightData::_internal_intersection_id() const {
  return intersection_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IntersectionTrafficLightData::intersection_id() const {
  // @@protoc_insertion_point(field_get:apollo.v2x.IntersectionTrafficLightData.intersection_id)
  return _internal_intersection_id();
}
inline void IntersectionTrafficLightData::_internal_set_intersection_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  intersection_id_ = value;
}
inline void IntersectionTrafficLightData::set_intersection_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_intersection_id(value);
  // @@protoc_insertion_point(field_set:apollo.v2x.IntersectionTrafficLightData.intersection_id)
}

// optional double confidence = 4;
inline bool IntersectionTrafficLightData::_internal_has_confidence() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool IntersectionTrafficLightData::has_confidence() const {
  return _internal_has_confidence();
}
inline void IntersectionTrafficLightData::clear_confidence() {
  confidence_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double IntersectionTrafficLightData::_internal_confidence() const {
  return confidence_;
}
inline double IntersectionTrafficLightData::confidence() const {
  // @@protoc_insertion_point(field_get:apollo.v2x.IntersectionTrafficLightData.confidence)
  return _internal_confidence();
}
inline void IntersectionTrafficLightData::_internal_set_confidence(double value) {
  _has_bits_[0] |= 0x00000002u;
  confidence_ = value;
}
inline void IntersectionTrafficLightData::set_confidence(double value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:apollo.v2x.IntersectionTrafficLightData.confidence)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v2x
}  // namespace apollo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::apollo::v2x::SingleTrafficLight_Color> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::v2x::SingleTrafficLight_Color>() {
  return ::apollo::v2x::SingleTrafficLight_Color_descriptor();
}
template <> struct is_proto_enum< ::apollo::v2x::SingleTrafficLight_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::v2x::SingleTrafficLight_Type>() {
  return ::apollo::v2x::SingleTrafficLight_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_2eproto
