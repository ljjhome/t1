// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/v2x/proto/v2x_obu_rsi.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fv2x_2fproto_2fv2x_5fobu_5frsi_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fv2x_2fproto_2fv2x_5fobu_5frsi_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "modules/common/proto/header.pb.h"
#include "modules/common/proto/geometry.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fv2x_2fproto_2fv2x_5fobu_5frsi_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fv2x_2fproto_2fv2x_5fobu_5frsi_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fv2x_2fproto_2fv2x_5fobu_5frsi_2eproto;
namespace apollo {
namespace v2x {
namespace obu {
class ObuRsi;
struct ObuRsiDefaultTypeInternal;
extern ObuRsiDefaultTypeInternal _ObuRsi_default_instance_;
}  // namespace obu
}  // namespace v2x
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::v2x::obu::ObuRsi* Arena::CreateMaybeMessage<::apollo::v2x::obu::ObuRsi>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace v2x {
namespace obu {

// ===================================================================

class ObuRsi final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.v2x.obu.ObuRsi) */ {
 public:
  inline ObuRsi() : ObuRsi(nullptr) {}
  ~ObuRsi() override;
  explicit constexpr ObuRsi(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObuRsi(const ObuRsi& from);
  ObuRsi(ObuRsi&& from) noexcept
    : ObuRsi() {
    *this = ::std::move(from);
  }

  inline ObuRsi& operator=(const ObuRsi& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObuRsi& operator=(ObuRsi&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObuRsi& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObuRsi* internal_default_instance() {
    return reinterpret_cast<const ObuRsi*>(
               &_ObuRsi_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ObuRsi& a, ObuRsi& b) {
    a.Swap(&b);
  }
  inline void Swap(ObuRsi* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObuRsi* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObuRsi* New() const final {
    return new ObuRsi();
  }

  ObuRsi* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObuRsi>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ObuRsi& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ObuRsi& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObuRsi* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.v2x.obu.ObuRsi";
  }
  protected:
  explicit ObuRsi(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 7,
    kRsuIdFieldNumber = 2,
    kDescriptionFieldNumber = 5,
    kHeaderFieldNumber = 1,
    kRefPointFieldNumber = 6,
    kRsiIdFieldNumber = 3,
    kAlterTypeFieldNumber = 4,
    kRadiusFieldNumber = 8,
    kMsgCntFieldNumber = 9,
  };
  // repeated .apollo.common.Point2D points = 7;
  int points_size() const;
  private:
  int _internal_points_size() const;
  public:
  void clear_points();
  ::apollo::common::Point2D* mutable_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::Point2D >*
      mutable_points();
  private:
  const ::apollo::common::Point2D& _internal_points(int index) const;
  ::apollo::common::Point2D* _internal_add_points();
  public:
  const ::apollo::common::Point2D& points(int index) const;
  ::apollo::common::Point2D* add_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::Point2D >&
      points() const;

  // optional bytes rsu_id = 2;
  bool has_rsu_id() const;
  private:
  bool _internal_has_rsu_id() const;
  public:
  void clear_rsu_id();
  const std::string& rsu_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rsu_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rsu_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_rsu_id();
  void set_allocated_rsu_id(std::string* rsu_id);
  private:
  const std::string& _internal_rsu_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rsu_id(const std::string& value);
  std::string* _internal_mutable_rsu_id();
  public:

  // optional string description = 5;
  bool has_description() const;
  private:
  bool _internal_has_description() const;
  public:
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_MUST_USE_RESULT std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // optional .apollo.common.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::apollo::common::Header& header() const;
  PROTOBUF_MUST_USE_RESULT ::apollo::common::Header* release_header();
  ::apollo::common::Header* mutable_header();
  void set_allocated_header(::apollo::common::Header* header);
  private:
  const ::apollo::common::Header& _internal_header() const;
  ::apollo::common::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::apollo::common::Header* header);
  ::apollo::common::Header* unsafe_arena_release_header();

  // optional .apollo.common.Point2D ref_point = 6;
  bool has_ref_point() const;
  private:
  bool _internal_has_ref_point() const;
  public:
  void clear_ref_point();
  const ::apollo::common::Point2D& ref_point() const;
  PROTOBUF_MUST_USE_RESULT ::apollo::common::Point2D* release_ref_point();
  ::apollo::common::Point2D* mutable_ref_point();
  void set_allocated_ref_point(::apollo::common::Point2D* ref_point);
  private:
  const ::apollo::common::Point2D& _internal_ref_point() const;
  ::apollo::common::Point2D* _internal_mutable_ref_point();
  public:
  void unsafe_arena_set_allocated_ref_point(
      ::apollo::common::Point2D* ref_point);
  ::apollo::common::Point2D* unsafe_arena_release_ref_point();

  // optional int32 rsi_id = 3;
  bool has_rsi_id() const;
  private:
  bool _internal_has_rsi_id() const;
  public:
  void clear_rsi_id();
  ::PROTOBUF_NAMESPACE_ID::int32 rsi_id() const;
  void set_rsi_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rsi_id() const;
  void _internal_set_rsi_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 alter_type = 4;
  bool has_alter_type() const;
  private:
  bool _internal_has_alter_type() const;
  public:
  void clear_alter_type();
  ::PROTOBUF_NAMESPACE_ID::int32 alter_type() const;
  void set_alter_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_alter_type() const;
  void _internal_set_alter_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 radius = 8;
  bool has_radius() const;
  private:
  bool _internal_has_radius() const;
  public:
  void clear_radius();
  ::PROTOBUF_NAMESPACE_ID::int32 radius() const;
  void set_radius(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_radius() const;
  void _internal_set_radius(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 msg_cnt = 9;
  bool has_msg_cnt() const;
  private:
  bool _internal_has_msg_cnt() const;
  public:
  void clear_msg_cnt();
  ::PROTOBUF_NAMESPACE_ID::int32 msg_cnt() const;
  void set_msg_cnt(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_msg_cnt() const;
  void _internal_set_msg_cnt(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.v2x.obu.ObuRsi)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::Point2D > points_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rsu_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::apollo::common::Header* header_;
  ::apollo::common::Point2D* ref_point_;
  ::PROTOBUF_NAMESPACE_ID::int32 rsi_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 alter_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 radius_;
  ::PROTOBUF_NAMESPACE_ID::int32 msg_cnt_;
  friend struct ::TableStruct_modules_2fv2x_2fproto_2fv2x_5fobu_5frsi_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ObuRsi

// optional .apollo.common.Header header = 1;
inline bool ObuRsi::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || header_ != nullptr);
  return value;
}
inline bool ObuRsi::has_header() const {
  return _internal_has_header();
}
inline const ::apollo::common::Header& ObuRsi::_internal_header() const {
  const ::apollo::common::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::common::Header&>(
      ::apollo::common::_Header_default_instance_);
}
inline const ::apollo::common::Header& ObuRsi::header() const {
  // @@protoc_insertion_point(field_get:apollo.v2x.obu.ObuRsi.header)
  return _internal_header();
}
inline void ObuRsi::unsafe_arena_set_allocated_header(
    ::apollo::common::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.v2x.obu.ObuRsi.header)
}
inline ::apollo::common::Header* ObuRsi::release_header() {
  _has_bits_[0] &= ~0x00000004u;
  ::apollo::common::Header* temp = header_;
  header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::common::Header* ObuRsi::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:apollo.v2x.obu.ObuRsi.header)
  _has_bits_[0] &= ~0x00000004u;
  ::apollo::common::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::apollo::common::Header* ObuRsi::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000004u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Header>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::apollo::common::Header* ObuRsi::mutable_header() {
  ::apollo::common::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:apollo.v2x.obu.ObuRsi.header)
  return _msg;
}
inline void ObuRsi::set_allocated_header(::apollo::common::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:apollo.v2x.obu.ObuRsi.header)
}

// optional bytes rsu_id = 2;
inline bool ObuRsi::_internal_has_rsu_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ObuRsi::has_rsu_id() const {
  return _internal_has_rsu_id();
}
inline void ObuRsi::clear_rsu_id() {
  rsu_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ObuRsi::rsu_id() const {
  // @@protoc_insertion_point(field_get:apollo.v2x.obu.ObuRsi.rsu_id)
  return _internal_rsu_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ObuRsi::set_rsu_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 rsu_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.v2x.obu.ObuRsi.rsu_id)
}
inline std::string* ObuRsi::mutable_rsu_id() {
  std::string* _s = _internal_mutable_rsu_id();
  // @@protoc_insertion_point(field_mutable:apollo.v2x.obu.ObuRsi.rsu_id)
  return _s;
}
inline const std::string& ObuRsi::_internal_rsu_id() const {
  return rsu_id_.Get();
}
inline void ObuRsi::_internal_set_rsu_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  rsu_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ObuRsi::_internal_mutable_rsu_id() {
  _has_bits_[0] |= 0x00000001u;
  return rsu_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ObuRsi::release_rsu_id() {
  // @@protoc_insertion_point(field_release:apollo.v2x.obu.ObuRsi.rsu_id)
  if (!_internal_has_rsu_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return rsu_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ObuRsi::set_allocated_rsu_id(std::string* rsu_id) {
  if (rsu_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  rsu_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rsu_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:apollo.v2x.obu.ObuRsi.rsu_id)
}

// optional int32 rsi_id = 3;
inline bool ObuRsi::_internal_has_rsi_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ObuRsi::has_rsi_id() const {
  return _internal_has_rsi_id();
}
inline void ObuRsi::clear_rsi_id() {
  rsi_id_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ObuRsi::_internal_rsi_id() const {
  return rsi_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ObuRsi::rsi_id() const {
  // @@protoc_insertion_point(field_get:apollo.v2x.obu.ObuRsi.rsi_id)
  return _internal_rsi_id();
}
inline void ObuRsi::_internal_set_rsi_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  rsi_id_ = value;
}
inline void ObuRsi::set_rsi_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rsi_id(value);
  // @@protoc_insertion_point(field_set:apollo.v2x.obu.ObuRsi.rsi_id)
}

// optional int32 alter_type = 4;
inline bool ObuRsi::_internal_has_alter_type() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ObuRsi::has_alter_type() const {
  return _internal_has_alter_type();
}
inline void ObuRsi::clear_alter_type() {
  alter_type_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ObuRsi::_internal_alter_type() const {
  return alter_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ObuRsi::alter_type() const {
  // @@protoc_insertion_point(field_get:apollo.v2x.obu.ObuRsi.alter_type)
  return _internal_alter_type();
}
inline void ObuRsi::_internal_set_alter_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  alter_type_ = value;
}
inline void ObuRsi::set_alter_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_alter_type(value);
  // @@protoc_insertion_point(field_set:apollo.v2x.obu.ObuRsi.alter_type)
}

// optional string description = 5;
inline bool ObuRsi::_internal_has_description() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ObuRsi::has_description() const {
  return _internal_has_description();
}
inline void ObuRsi::clear_description() {
  description_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ObuRsi::description() const {
  // @@protoc_insertion_point(field_get:apollo.v2x.obu.ObuRsi.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ObuRsi::set_description(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.v2x.obu.ObuRsi.description)
}
inline std::string* ObuRsi::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:apollo.v2x.obu.ObuRsi.description)
  return _s;
}
inline const std::string& ObuRsi::_internal_description() const {
  return description_.Get();
}
inline void ObuRsi::_internal_set_description(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ObuRsi::_internal_mutable_description() {
  _has_bits_[0] |= 0x00000002u;
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ObuRsi::release_description() {
  // @@protoc_insertion_point(field_release:apollo.v2x.obu.ObuRsi.description)
  if (!_internal_has_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return description_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ObuRsi::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:apollo.v2x.obu.ObuRsi.description)
}

// optional .apollo.common.Point2D ref_point = 6;
inline bool ObuRsi::_internal_has_ref_point() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || ref_point_ != nullptr);
  return value;
}
inline bool ObuRsi::has_ref_point() const {
  return _internal_has_ref_point();
}
inline const ::apollo::common::Point2D& ObuRsi::_internal_ref_point() const {
  const ::apollo::common::Point2D* p = ref_point_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::common::Point2D&>(
      ::apollo::common::_Point2D_default_instance_);
}
inline const ::apollo::common::Point2D& ObuRsi::ref_point() const {
  // @@protoc_insertion_point(field_get:apollo.v2x.obu.ObuRsi.ref_point)
  return _internal_ref_point();
}
inline void ObuRsi::unsafe_arena_set_allocated_ref_point(
    ::apollo::common::Point2D* ref_point) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ref_point_);
  }
  ref_point_ = ref_point;
  if (ref_point) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.v2x.obu.ObuRsi.ref_point)
}
inline ::apollo::common::Point2D* ObuRsi::release_ref_point() {
  _has_bits_[0] &= ~0x00000008u;
  ::apollo::common::Point2D* temp = ref_point_;
  ref_point_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::common::Point2D* ObuRsi::unsafe_arena_release_ref_point() {
  // @@protoc_insertion_point(field_release:apollo.v2x.obu.ObuRsi.ref_point)
  _has_bits_[0] &= ~0x00000008u;
  ::apollo::common::Point2D* temp = ref_point_;
  ref_point_ = nullptr;
  return temp;
}
inline ::apollo::common::Point2D* ObuRsi::_internal_mutable_ref_point() {
  _has_bits_[0] |= 0x00000008u;
  if (ref_point_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Point2D>(GetArenaForAllocation());
    ref_point_ = p;
  }
  return ref_point_;
}
inline ::apollo::common::Point2D* ObuRsi::mutable_ref_point() {
  ::apollo::common::Point2D* _msg = _internal_mutable_ref_point();
  // @@protoc_insertion_point(field_mutable:apollo.v2x.obu.ObuRsi.ref_point)
  return _msg;
}
inline void ObuRsi::set_allocated_ref_point(::apollo::common::Point2D* ref_point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ref_point_);
  }
  if (ref_point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ref_point));
    if (message_arena != submessage_arena) {
      ref_point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ref_point, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  ref_point_ = ref_point;
  // @@protoc_insertion_point(field_set_allocated:apollo.v2x.obu.ObuRsi.ref_point)
}

// repeated .apollo.common.Point2D points = 7;
inline int ObuRsi::_internal_points_size() const {
  return points_.size();
}
inline int ObuRsi::points_size() const {
  return _internal_points_size();
}
inline ::apollo::common::Point2D* ObuRsi::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.v2x.obu.ObuRsi.points)
  return points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::Point2D >*
ObuRsi::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:apollo.v2x.obu.ObuRsi.points)
  return &points_;
}
inline const ::apollo::common::Point2D& ObuRsi::_internal_points(int index) const {
  return points_.Get(index);
}
inline const ::apollo::common::Point2D& ObuRsi::points(int index) const {
  // @@protoc_insertion_point(field_get:apollo.v2x.obu.ObuRsi.points)
  return _internal_points(index);
}
inline ::apollo::common::Point2D* ObuRsi::_internal_add_points() {
  return points_.Add();
}
inline ::apollo::common::Point2D* ObuRsi::add_points() {
  ::apollo::common::Point2D* _add = _internal_add_points();
  // @@protoc_insertion_point(field_add:apollo.v2x.obu.ObuRsi.points)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::Point2D >&
ObuRsi::points() const {
  // @@protoc_insertion_point(field_list:apollo.v2x.obu.ObuRsi.points)
  return points_;
}

// optional int32 radius = 8;
inline bool ObuRsi::_internal_has_radius() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ObuRsi::has_radius() const {
  return _internal_has_radius();
}
inline void ObuRsi::clear_radius() {
  radius_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ObuRsi::_internal_radius() const {
  return radius_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ObuRsi::radius() const {
  // @@protoc_insertion_point(field_get:apollo.v2x.obu.ObuRsi.radius)
  return _internal_radius();
}
inline void ObuRsi::_internal_set_radius(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  radius_ = value;
}
inline void ObuRsi::set_radius(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_radius(value);
  // @@protoc_insertion_point(field_set:apollo.v2x.obu.ObuRsi.radius)
}

// optional int32 msg_cnt = 9;
inline bool ObuRsi::_internal_has_msg_cnt() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ObuRsi::has_msg_cnt() const {
  return _internal_has_msg_cnt();
}
inline void ObuRsi::clear_msg_cnt() {
  msg_cnt_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ObuRsi::_internal_msg_cnt() const {
  return msg_cnt_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ObuRsi::msg_cnt() const {
  // @@protoc_insertion_point(field_get:apollo.v2x.obu.ObuRsi.msg_cnt)
  return _internal_msg_cnt();
}
inline void ObuRsi::_internal_set_msg_cnt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  msg_cnt_ = value;
}
inline void ObuRsi::set_msg_cnt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_msg_cnt(value);
  // @@protoc_insertion_point(field_set:apollo.v2x.obu.ObuRsi.msg_cnt)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace obu
}  // namespace v2x
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fv2x_2fproto_2fv2x_5fobu_5frsi_2eproto
