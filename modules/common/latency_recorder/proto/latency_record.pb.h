// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/common/latency_recorder/proto/latency_record.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fcommon_2flatency_5frecorder_2fproto_2flatency_5frecord_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fcommon_2flatency_5frecorder_2fproto_2flatency_5frecord_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "modules/common/proto/header.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_2flatency_5frecorder_2fproto_2flatency_5frecord_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fcommon_2flatency_5frecorder_2fproto_2flatency_5frecord_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fcommon_2flatency_5frecorder_2fproto_2flatency_5frecord_2eproto;
namespace apollo {
namespace common {
class LatencyRecord;
struct LatencyRecordDefaultTypeInternal;
extern LatencyRecordDefaultTypeInternal _LatencyRecord_default_instance_;
class LatencyRecordMap;
struct LatencyRecordMapDefaultTypeInternal;
extern LatencyRecordMapDefaultTypeInternal _LatencyRecordMap_default_instance_;
class LatencyReport;
struct LatencyReportDefaultTypeInternal;
extern LatencyReportDefaultTypeInternal _LatencyReport_default_instance_;
class LatencyStat;
struct LatencyStatDefaultTypeInternal;
extern LatencyStatDefaultTypeInternal _LatencyStat_default_instance_;
class LatencyTrack;
struct LatencyTrackDefaultTypeInternal;
extern LatencyTrackDefaultTypeInternal _LatencyTrack_default_instance_;
class LatencyTrack_LatencyTrackMessage;
struct LatencyTrack_LatencyTrackMessageDefaultTypeInternal;
extern LatencyTrack_LatencyTrackMessageDefaultTypeInternal _LatencyTrack_LatencyTrackMessage_default_instance_;
}  // namespace common
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::common::LatencyRecord* Arena::CreateMaybeMessage<::apollo::common::LatencyRecord>(Arena*);
template<> ::apollo::common::LatencyRecordMap* Arena::CreateMaybeMessage<::apollo::common::LatencyRecordMap>(Arena*);
template<> ::apollo::common::LatencyReport* Arena::CreateMaybeMessage<::apollo::common::LatencyReport>(Arena*);
template<> ::apollo::common::LatencyStat* Arena::CreateMaybeMessage<::apollo::common::LatencyStat>(Arena*);
template<> ::apollo::common::LatencyTrack* Arena::CreateMaybeMessage<::apollo::common::LatencyTrack>(Arena*);
template<> ::apollo::common::LatencyTrack_LatencyTrackMessage* Arena::CreateMaybeMessage<::apollo::common::LatencyTrack_LatencyTrackMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace common {

// ===================================================================

class LatencyRecord final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.common.LatencyRecord) */ {
 public:
  inline LatencyRecord() : LatencyRecord(nullptr) {}
  ~LatencyRecord() override;
  explicit constexpr LatencyRecord(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LatencyRecord(const LatencyRecord& from);
  LatencyRecord(LatencyRecord&& from) noexcept
    : LatencyRecord() {
    *this = ::std::move(from);
  }

  inline LatencyRecord& operator=(const LatencyRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline LatencyRecord& operator=(LatencyRecord&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LatencyRecord& default_instance() {
    return *internal_default_instance();
  }
  static inline const LatencyRecord* internal_default_instance() {
    return reinterpret_cast<const LatencyRecord*>(
               &_LatencyRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LatencyRecord& a, LatencyRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(LatencyRecord* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LatencyRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LatencyRecord* New() const final {
    return new LatencyRecord();
  }

  LatencyRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LatencyRecord>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LatencyRecord& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LatencyRecord& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LatencyRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.common.LatencyRecord";
  }
  protected:
  explicit LatencyRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBeginTimeFieldNumber = 1,
    kEndTimeFieldNumber = 2,
    kMessageIdFieldNumber = 3,
  };
  // optional uint64 begin_time = 1;
  bool has_begin_time() const;
  private:
  bool _internal_has_begin_time() const;
  public:
  void clear_begin_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 begin_time() const;
  void set_begin_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_begin_time() const;
  void _internal_set_begin_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 end_time = 2;
  bool has_end_time() const;
  private:
  bool _internal_has_end_time() const;
  public:
  void clear_end_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 end_time() const;
  void set_end_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_end_time() const;
  void _internal_set_end_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 message_id = 3;
  bool has_message_id() const;
  private:
  bool _internal_has_message_id() const;
  public:
  void clear_message_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 message_id() const;
  void set_message_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_message_id() const;
  void _internal_set_message_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.common.LatencyRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 begin_time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 end_time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 message_id_;
  friend struct ::TableStruct_modules_2fcommon_2flatency_5frecorder_2fproto_2flatency_5frecord_2eproto;
};
// -------------------------------------------------------------------

class LatencyRecordMap final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.common.LatencyRecordMap) */ {
 public:
  inline LatencyRecordMap() : LatencyRecordMap(nullptr) {}
  ~LatencyRecordMap() override;
  explicit constexpr LatencyRecordMap(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LatencyRecordMap(const LatencyRecordMap& from);
  LatencyRecordMap(LatencyRecordMap&& from) noexcept
    : LatencyRecordMap() {
    *this = ::std::move(from);
  }

  inline LatencyRecordMap& operator=(const LatencyRecordMap& from) {
    CopyFrom(from);
    return *this;
  }
  inline LatencyRecordMap& operator=(LatencyRecordMap&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LatencyRecordMap& default_instance() {
    return *internal_default_instance();
  }
  static inline const LatencyRecordMap* internal_default_instance() {
    return reinterpret_cast<const LatencyRecordMap*>(
               &_LatencyRecordMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LatencyRecordMap& a, LatencyRecordMap& b) {
    a.Swap(&b);
  }
  inline void Swap(LatencyRecordMap* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LatencyRecordMap* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LatencyRecordMap* New() const final {
    return new LatencyRecordMap();
  }

  LatencyRecordMap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LatencyRecordMap>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LatencyRecordMap& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LatencyRecordMap& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LatencyRecordMap* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.common.LatencyRecordMap";
  }
  protected:
  explicit LatencyRecordMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatencyRecordsFieldNumber = 3,
    kModuleNameFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // repeated .apollo.common.LatencyRecord latency_records = 3;
  int latency_records_size() const;
  private:
  int _internal_latency_records_size() const;
  public:
  void clear_latency_records();
  ::apollo::common::LatencyRecord* mutable_latency_records(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::LatencyRecord >*
      mutable_latency_records();
  private:
  const ::apollo::common::LatencyRecord& _internal_latency_records(int index) const;
  ::apollo::common::LatencyRecord* _internal_add_latency_records();
  public:
  const ::apollo::common::LatencyRecord& latency_records(int index) const;
  ::apollo::common::LatencyRecord* add_latency_records();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::LatencyRecord >&
      latency_records() const;

  // optional string module_name = 2;
  bool has_module_name() const;
  private:
  bool _internal_has_module_name() const;
  public:
  void clear_module_name();
  const std::string& module_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_module_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_module_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_module_name();
  void set_allocated_module_name(std::string* module_name);
  private:
  const std::string& _internal_module_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_module_name(const std::string& value);
  std::string* _internal_mutable_module_name();
  public:

  // optional .apollo.common.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::apollo::common::Header& header() const;
  PROTOBUF_MUST_USE_RESULT ::apollo::common::Header* release_header();
  ::apollo::common::Header* mutable_header();
  void set_allocated_header(::apollo::common::Header* header);
  private:
  const ::apollo::common::Header& _internal_header() const;
  ::apollo::common::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::apollo::common::Header* header);
  ::apollo::common::Header* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:apollo.common.LatencyRecordMap)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::LatencyRecord > latency_records_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr module_name_;
  ::apollo::common::Header* header_;
  friend struct ::TableStruct_modules_2fcommon_2flatency_5frecorder_2fproto_2flatency_5frecord_2eproto;
};
// -------------------------------------------------------------------

class LatencyStat final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.common.LatencyStat) */ {
 public:
  inline LatencyStat() : LatencyStat(nullptr) {}
  ~LatencyStat() override;
  explicit constexpr LatencyStat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LatencyStat(const LatencyStat& from);
  LatencyStat(LatencyStat&& from) noexcept
    : LatencyStat() {
    *this = ::std::move(from);
  }

  inline LatencyStat& operator=(const LatencyStat& from) {
    CopyFrom(from);
    return *this;
  }
  inline LatencyStat& operator=(LatencyStat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LatencyStat& default_instance() {
    return *internal_default_instance();
  }
  static inline const LatencyStat* internal_default_instance() {
    return reinterpret_cast<const LatencyStat*>(
               &_LatencyStat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LatencyStat& a, LatencyStat& b) {
    a.Swap(&b);
  }
  inline void Swap(LatencyStat* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LatencyStat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LatencyStat* New() const final {
    return new LatencyStat();
  }

  LatencyStat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LatencyStat>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LatencyStat& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LatencyStat& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LatencyStat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.common.LatencyStat";
  }
  protected:
  explicit LatencyStat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaxDurationFieldNumber = 2,
    kAverDurationFieldNumber = 3,
    kSampleSizeFieldNumber = 4,
    kMinDurationFieldNumber = 1,
  };
  // optional uint64 max_duration = 2;
  bool has_max_duration() const;
  private:
  bool _internal_has_max_duration() const;
  public:
  void clear_max_duration();
  ::PROTOBUF_NAMESPACE_ID::uint64 max_duration() const;
  void set_max_duration(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_max_duration() const;
  void _internal_set_max_duration(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 aver_duration = 3;
  bool has_aver_duration() const;
  private:
  bool _internal_has_aver_duration() const;
  public:
  void clear_aver_duration();
  ::PROTOBUF_NAMESPACE_ID::uint64 aver_duration() const;
  void set_aver_duration(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_aver_duration() const;
  void _internal_set_aver_duration(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 sample_size = 4;
  bool has_sample_size() const;
  private:
  bool _internal_has_sample_size() const;
  public:
  void clear_sample_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 sample_size() const;
  void set_sample_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sample_size() const;
  void _internal_set_sample_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 min_duration = 1 [default = 9223372036854775808];
  bool has_min_duration() const;
  private:
  bool _internal_has_min_duration() const;
  public:
  void clear_min_duration();
  ::PROTOBUF_NAMESPACE_ID::uint64 min_duration() const;
  void set_min_duration(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_min_duration() const;
  void _internal_set_min_duration(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.common.LatencyStat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 max_duration_;
  ::PROTOBUF_NAMESPACE_ID::uint64 aver_duration_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sample_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 min_duration_;
  friend struct ::TableStruct_modules_2fcommon_2flatency_5frecorder_2fproto_2flatency_5frecord_2eproto;
};
// -------------------------------------------------------------------

class LatencyTrack_LatencyTrackMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.common.LatencyTrack.LatencyTrackMessage) */ {
 public:
  inline LatencyTrack_LatencyTrackMessage() : LatencyTrack_LatencyTrackMessage(nullptr) {}
  ~LatencyTrack_LatencyTrackMessage() override;
  explicit constexpr LatencyTrack_LatencyTrackMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LatencyTrack_LatencyTrackMessage(const LatencyTrack_LatencyTrackMessage& from);
  LatencyTrack_LatencyTrackMessage(LatencyTrack_LatencyTrackMessage&& from) noexcept
    : LatencyTrack_LatencyTrackMessage() {
    *this = ::std::move(from);
  }

  inline LatencyTrack_LatencyTrackMessage& operator=(const LatencyTrack_LatencyTrackMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline LatencyTrack_LatencyTrackMessage& operator=(LatencyTrack_LatencyTrackMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LatencyTrack_LatencyTrackMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const LatencyTrack_LatencyTrackMessage* internal_default_instance() {
    return reinterpret_cast<const LatencyTrack_LatencyTrackMessage*>(
               &_LatencyTrack_LatencyTrackMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(LatencyTrack_LatencyTrackMessage& a, LatencyTrack_LatencyTrackMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(LatencyTrack_LatencyTrackMessage* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LatencyTrack_LatencyTrackMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LatencyTrack_LatencyTrackMessage* New() const final {
    return new LatencyTrack_LatencyTrackMessage();
  }

  LatencyTrack_LatencyTrackMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LatencyTrack_LatencyTrackMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LatencyTrack_LatencyTrackMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LatencyTrack_LatencyTrackMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LatencyTrack_LatencyTrackMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.common.LatencyTrack.LatencyTrackMessage";
  }
  protected:
  explicit LatencyTrack_LatencyTrackMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatencyNameFieldNumber = 1,
    kLatencyStatFieldNumber = 2,
  };
  // optional string latency_name = 1;
  bool has_latency_name() const;
  private:
  bool _internal_has_latency_name() const;
  public:
  void clear_latency_name();
  const std::string& latency_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_latency_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_latency_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_latency_name();
  void set_allocated_latency_name(std::string* latency_name);
  private:
  const std::string& _internal_latency_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_latency_name(const std::string& value);
  std::string* _internal_mutable_latency_name();
  public:

  // optional .apollo.common.LatencyStat latency_stat = 2;
  bool has_latency_stat() const;
  private:
  bool _internal_has_latency_stat() const;
  public:
  void clear_latency_stat();
  const ::apollo::common::LatencyStat& latency_stat() const;
  PROTOBUF_MUST_USE_RESULT ::apollo::common::LatencyStat* release_latency_stat();
  ::apollo::common::LatencyStat* mutable_latency_stat();
  void set_allocated_latency_stat(::apollo::common::LatencyStat* latency_stat);
  private:
  const ::apollo::common::LatencyStat& _internal_latency_stat() const;
  ::apollo::common::LatencyStat* _internal_mutable_latency_stat();
  public:
  void unsafe_arena_set_allocated_latency_stat(
      ::apollo::common::LatencyStat* latency_stat);
  ::apollo::common::LatencyStat* unsafe_arena_release_latency_stat();

  // @@protoc_insertion_point(class_scope:apollo.common.LatencyTrack.LatencyTrackMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr latency_name_;
  ::apollo::common::LatencyStat* latency_stat_;
  friend struct ::TableStruct_modules_2fcommon_2flatency_5frecorder_2fproto_2flatency_5frecord_2eproto;
};
// -------------------------------------------------------------------

class LatencyTrack final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.common.LatencyTrack) */ {
 public:
  inline LatencyTrack() : LatencyTrack(nullptr) {}
  ~LatencyTrack() override;
  explicit constexpr LatencyTrack(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LatencyTrack(const LatencyTrack& from);
  LatencyTrack(LatencyTrack&& from) noexcept
    : LatencyTrack() {
    *this = ::std::move(from);
  }

  inline LatencyTrack& operator=(const LatencyTrack& from) {
    CopyFrom(from);
    return *this;
  }
  inline LatencyTrack& operator=(LatencyTrack&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LatencyTrack& default_instance() {
    return *internal_default_instance();
  }
  static inline const LatencyTrack* internal_default_instance() {
    return reinterpret_cast<const LatencyTrack*>(
               &_LatencyTrack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(LatencyTrack& a, LatencyTrack& b) {
    a.Swap(&b);
  }
  inline void Swap(LatencyTrack* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LatencyTrack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LatencyTrack* New() const final {
    return new LatencyTrack();
  }

  LatencyTrack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LatencyTrack>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LatencyTrack& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LatencyTrack& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LatencyTrack* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.common.LatencyTrack";
  }
  protected:
  explicit LatencyTrack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LatencyTrack_LatencyTrackMessage LatencyTrackMessage;

  // accessors -------------------------------------------------------

  enum : int {
    kLatencyTrackFieldNumber = 1,
  };
  // repeated .apollo.common.LatencyTrack.LatencyTrackMessage latency_track = 1;
  int latency_track_size() const;
  private:
  int _internal_latency_track_size() const;
  public:
  void clear_latency_track();
  ::apollo::common::LatencyTrack_LatencyTrackMessage* mutable_latency_track(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::LatencyTrack_LatencyTrackMessage >*
      mutable_latency_track();
  private:
  const ::apollo::common::LatencyTrack_LatencyTrackMessage& _internal_latency_track(int index) const;
  ::apollo::common::LatencyTrack_LatencyTrackMessage* _internal_add_latency_track();
  public:
  const ::apollo::common::LatencyTrack_LatencyTrackMessage& latency_track(int index) const;
  ::apollo::common::LatencyTrack_LatencyTrackMessage* add_latency_track();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::LatencyTrack_LatencyTrackMessage >&
      latency_track() const;

  // @@protoc_insertion_point(class_scope:apollo.common.LatencyTrack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::LatencyTrack_LatencyTrackMessage > latency_track_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_modules_2fcommon_2flatency_5frecorder_2fproto_2flatency_5frecord_2eproto;
};
// -------------------------------------------------------------------

class LatencyReport final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.common.LatencyReport) */ {
 public:
  inline LatencyReport() : LatencyReport(nullptr) {}
  ~LatencyReport() override;
  explicit constexpr LatencyReport(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LatencyReport(const LatencyReport& from);
  LatencyReport(LatencyReport&& from) noexcept
    : LatencyReport() {
    *this = ::std::move(from);
  }

  inline LatencyReport& operator=(const LatencyReport& from) {
    CopyFrom(from);
    return *this;
  }
  inline LatencyReport& operator=(LatencyReport&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LatencyReport& default_instance() {
    return *internal_default_instance();
  }
  static inline const LatencyReport* internal_default_instance() {
    return reinterpret_cast<const LatencyReport*>(
               &_LatencyReport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(LatencyReport& a, LatencyReport& b) {
    a.Swap(&b);
  }
  inline void Swap(LatencyReport* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LatencyReport* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LatencyReport* New() const final {
    return new LatencyReport();
  }

  LatencyReport* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LatencyReport>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LatencyReport& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LatencyReport& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LatencyReport* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.common.LatencyReport";
  }
  protected:
  explicit LatencyReport(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kE2EsLatencyFieldNumber = 2,
    kModulesLatencyFieldNumber = 3,
  };
  // optional .apollo.common.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::apollo::common::Header& header() const;
  PROTOBUF_MUST_USE_RESULT ::apollo::common::Header* release_header();
  ::apollo::common::Header* mutable_header();
  void set_allocated_header(::apollo::common::Header* header);
  private:
  const ::apollo::common::Header& _internal_header() const;
  ::apollo::common::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::apollo::common::Header* header);
  ::apollo::common::Header* unsafe_arena_release_header();

  // optional .apollo.common.LatencyTrack e2es_latency = 2;
  bool has_e2es_latency() const;
  private:
  bool _internal_has_e2es_latency() const;
  public:
  void clear_e2es_latency();
  const ::apollo::common::LatencyTrack& e2es_latency() const;
  PROTOBUF_MUST_USE_RESULT ::apollo::common::LatencyTrack* release_e2es_latency();
  ::apollo::common::LatencyTrack* mutable_e2es_latency();
  void set_allocated_e2es_latency(::apollo::common::LatencyTrack* e2es_latency);
  private:
  const ::apollo::common::LatencyTrack& _internal_e2es_latency() const;
  ::apollo::common::LatencyTrack* _internal_mutable_e2es_latency();
  public:
  void unsafe_arena_set_allocated_e2es_latency(
      ::apollo::common::LatencyTrack* e2es_latency);
  ::apollo::common::LatencyTrack* unsafe_arena_release_e2es_latency();

  // optional .apollo.common.LatencyTrack modules_latency = 3;
  bool has_modules_latency() const;
  private:
  bool _internal_has_modules_latency() const;
  public:
  void clear_modules_latency();
  const ::apollo::common::LatencyTrack& modules_latency() const;
  PROTOBUF_MUST_USE_RESULT ::apollo::common::LatencyTrack* release_modules_latency();
  ::apollo::common::LatencyTrack* mutable_modules_latency();
  void set_allocated_modules_latency(::apollo::common::LatencyTrack* modules_latency);
  private:
  const ::apollo::common::LatencyTrack& _internal_modules_latency() const;
  ::apollo::common::LatencyTrack* _internal_mutable_modules_latency();
  public:
  void unsafe_arena_set_allocated_modules_latency(
      ::apollo::common::LatencyTrack* modules_latency);
  ::apollo::common::LatencyTrack* unsafe_arena_release_modules_latency();

  // @@protoc_insertion_point(class_scope:apollo.common.LatencyReport)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::apollo::common::Header* header_;
  ::apollo::common::LatencyTrack* e2es_latency_;
  ::apollo::common::LatencyTrack* modules_latency_;
  friend struct ::TableStruct_modules_2fcommon_2flatency_5frecorder_2fproto_2flatency_5frecord_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LatencyRecord

// optional uint64 begin_time = 1;
inline bool LatencyRecord::_internal_has_begin_time() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LatencyRecord::has_begin_time() const {
  return _internal_has_begin_time();
}
inline void LatencyRecord::clear_begin_time() {
  begin_time_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LatencyRecord::_internal_begin_time() const {
  return begin_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LatencyRecord::begin_time() const {
  // @@protoc_insertion_point(field_get:apollo.common.LatencyRecord.begin_time)
  return _internal_begin_time();
}
inline void LatencyRecord::_internal_set_begin_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  begin_time_ = value;
}
inline void LatencyRecord::set_begin_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_begin_time(value);
  // @@protoc_insertion_point(field_set:apollo.common.LatencyRecord.begin_time)
}

// optional uint64 end_time = 2;
inline bool LatencyRecord::_internal_has_end_time() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LatencyRecord::has_end_time() const {
  return _internal_has_end_time();
}
inline void LatencyRecord::clear_end_time() {
  end_time_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LatencyRecord::_internal_end_time() const {
  return end_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LatencyRecord::end_time() const {
  // @@protoc_insertion_point(field_get:apollo.common.LatencyRecord.end_time)
  return _internal_end_time();
}
inline void LatencyRecord::_internal_set_end_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  end_time_ = value;
}
inline void LatencyRecord::set_end_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_end_time(value);
  // @@protoc_insertion_point(field_set:apollo.common.LatencyRecord.end_time)
}

// optional uint64 message_id = 3;
inline bool LatencyRecord::_internal_has_message_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LatencyRecord::has_message_id() const {
  return _internal_has_message_id();
}
inline void LatencyRecord::clear_message_id() {
  message_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LatencyRecord::_internal_message_id() const {
  return message_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LatencyRecord::message_id() const {
  // @@protoc_insertion_point(field_get:apollo.common.LatencyRecord.message_id)
  return _internal_message_id();
}
inline void LatencyRecord::_internal_set_message_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  message_id_ = value;
}
inline void LatencyRecord::set_message_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_message_id(value);
  // @@protoc_insertion_point(field_set:apollo.common.LatencyRecord.message_id)
}

// -------------------------------------------------------------------

// LatencyRecordMap

// optional .apollo.common.Header header = 1;
inline bool LatencyRecordMap::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || header_ != nullptr);
  return value;
}
inline bool LatencyRecordMap::has_header() const {
  return _internal_has_header();
}
inline const ::apollo::common::Header& LatencyRecordMap::_internal_header() const {
  const ::apollo::common::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::common::Header&>(
      ::apollo::common::_Header_default_instance_);
}
inline const ::apollo::common::Header& LatencyRecordMap::header() const {
  // @@protoc_insertion_point(field_get:apollo.common.LatencyRecordMap.header)
  return _internal_header();
}
inline void LatencyRecordMap::unsafe_arena_set_allocated_header(
    ::apollo::common::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.common.LatencyRecordMap.header)
}
inline ::apollo::common::Header* LatencyRecordMap::release_header() {
  _has_bits_[0] &= ~0x00000002u;
  ::apollo::common::Header* temp = header_;
  header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::common::Header* LatencyRecordMap::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:apollo.common.LatencyRecordMap.header)
  _has_bits_[0] &= ~0x00000002u;
  ::apollo::common::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::apollo::common::Header* LatencyRecordMap::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000002u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Header>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::apollo::common::Header* LatencyRecordMap::mutable_header() {
  ::apollo::common::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:apollo.common.LatencyRecordMap.header)
  return _msg;
}
inline void LatencyRecordMap::set_allocated_header(::apollo::common::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:apollo.common.LatencyRecordMap.header)
}

// optional string module_name = 2;
inline bool LatencyRecordMap::_internal_has_module_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LatencyRecordMap::has_module_name() const {
  return _internal_has_module_name();
}
inline void LatencyRecordMap::clear_module_name() {
  module_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LatencyRecordMap::module_name() const {
  // @@protoc_insertion_point(field_get:apollo.common.LatencyRecordMap.module_name)
  return _internal_module_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LatencyRecordMap::set_module_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 module_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.common.LatencyRecordMap.module_name)
}
inline std::string* LatencyRecordMap::mutable_module_name() {
  std::string* _s = _internal_mutable_module_name();
  // @@protoc_insertion_point(field_mutable:apollo.common.LatencyRecordMap.module_name)
  return _s;
}
inline const std::string& LatencyRecordMap::_internal_module_name() const {
  return module_name_.Get();
}
inline void LatencyRecordMap::_internal_set_module_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  module_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LatencyRecordMap::_internal_mutable_module_name() {
  _has_bits_[0] |= 0x00000001u;
  return module_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LatencyRecordMap::release_module_name() {
  // @@protoc_insertion_point(field_release:apollo.common.LatencyRecordMap.module_name)
  if (!_internal_has_module_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return module_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LatencyRecordMap::set_allocated_module_name(std::string* module_name) {
  if (module_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  module_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), module_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:apollo.common.LatencyRecordMap.module_name)
}

// repeated .apollo.common.LatencyRecord latency_records = 3;
inline int LatencyRecordMap::_internal_latency_records_size() const {
  return latency_records_.size();
}
inline int LatencyRecordMap::latency_records_size() const {
  return _internal_latency_records_size();
}
inline void LatencyRecordMap::clear_latency_records() {
  latency_records_.Clear();
}
inline ::apollo::common::LatencyRecord* LatencyRecordMap::mutable_latency_records(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.common.LatencyRecordMap.latency_records)
  return latency_records_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::LatencyRecord >*
LatencyRecordMap::mutable_latency_records() {
  // @@protoc_insertion_point(field_mutable_list:apollo.common.LatencyRecordMap.latency_records)
  return &latency_records_;
}
inline const ::apollo::common::LatencyRecord& LatencyRecordMap::_internal_latency_records(int index) const {
  return latency_records_.Get(index);
}
inline const ::apollo::common::LatencyRecord& LatencyRecordMap::latency_records(int index) const {
  // @@protoc_insertion_point(field_get:apollo.common.LatencyRecordMap.latency_records)
  return _internal_latency_records(index);
}
inline ::apollo::common::LatencyRecord* LatencyRecordMap::_internal_add_latency_records() {
  return latency_records_.Add();
}
inline ::apollo::common::LatencyRecord* LatencyRecordMap::add_latency_records() {
  ::apollo::common::LatencyRecord* _add = _internal_add_latency_records();
  // @@protoc_insertion_point(field_add:apollo.common.LatencyRecordMap.latency_records)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::LatencyRecord >&
LatencyRecordMap::latency_records() const {
  // @@protoc_insertion_point(field_list:apollo.common.LatencyRecordMap.latency_records)
  return latency_records_;
}

// -------------------------------------------------------------------

// LatencyStat

// optional uint64 min_duration = 1 [default = 9223372036854775808];
inline bool LatencyStat::_internal_has_min_duration() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LatencyStat::has_min_duration() const {
  return _internal_has_min_duration();
}
inline void LatencyStat::clear_min_duration() {
  min_duration_ = uint64_t{9223372036854775808u};
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LatencyStat::_internal_min_duration() const {
  return min_duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LatencyStat::min_duration() const {
  // @@protoc_insertion_point(field_get:apollo.common.LatencyStat.min_duration)
  return _internal_min_duration();
}
inline void LatencyStat::_internal_set_min_duration(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  min_duration_ = value;
}
inline void LatencyStat::set_min_duration(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_min_duration(value);
  // @@protoc_insertion_point(field_set:apollo.common.LatencyStat.min_duration)
}

// optional uint64 max_duration = 2;
inline bool LatencyStat::_internal_has_max_duration() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LatencyStat::has_max_duration() const {
  return _internal_has_max_duration();
}
inline void LatencyStat::clear_max_duration() {
  max_duration_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LatencyStat::_internal_max_duration() const {
  return max_duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LatencyStat::max_duration() const {
  // @@protoc_insertion_point(field_get:apollo.common.LatencyStat.max_duration)
  return _internal_max_duration();
}
inline void LatencyStat::_internal_set_max_duration(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  max_duration_ = value;
}
inline void LatencyStat::set_max_duration(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_max_duration(value);
  // @@protoc_insertion_point(field_set:apollo.common.LatencyStat.max_duration)
}

// optional uint64 aver_duration = 3;
inline bool LatencyStat::_internal_has_aver_duration() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LatencyStat::has_aver_duration() const {
  return _internal_has_aver_duration();
}
inline void LatencyStat::clear_aver_duration() {
  aver_duration_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LatencyStat::_internal_aver_duration() const {
  return aver_duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LatencyStat::aver_duration() const {
  // @@protoc_insertion_point(field_get:apollo.common.LatencyStat.aver_duration)
  return _internal_aver_duration();
}
inline void LatencyStat::_internal_set_aver_duration(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  aver_duration_ = value;
}
inline void LatencyStat::set_aver_duration(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_aver_duration(value);
  // @@protoc_insertion_point(field_set:apollo.common.LatencyStat.aver_duration)
}

// optional uint32 sample_size = 4;
inline bool LatencyStat::_internal_has_sample_size() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LatencyStat::has_sample_size() const {
  return _internal_has_sample_size();
}
inline void LatencyStat::clear_sample_size() {
  sample_size_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LatencyStat::_internal_sample_size() const {
  return sample_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LatencyStat::sample_size() const {
  // @@protoc_insertion_point(field_get:apollo.common.LatencyStat.sample_size)
  return _internal_sample_size();
}
inline void LatencyStat::_internal_set_sample_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  sample_size_ = value;
}
inline void LatencyStat::set_sample_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sample_size(value);
  // @@protoc_insertion_point(field_set:apollo.common.LatencyStat.sample_size)
}

// -------------------------------------------------------------------

// LatencyTrack_LatencyTrackMessage

// optional string latency_name = 1;
inline bool LatencyTrack_LatencyTrackMessage::_internal_has_latency_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LatencyTrack_LatencyTrackMessage::has_latency_name() const {
  return _internal_has_latency_name();
}
inline void LatencyTrack_LatencyTrackMessage::clear_latency_name() {
  latency_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LatencyTrack_LatencyTrackMessage::latency_name() const {
  // @@protoc_insertion_point(field_get:apollo.common.LatencyTrack.LatencyTrackMessage.latency_name)
  return _internal_latency_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LatencyTrack_LatencyTrackMessage::set_latency_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 latency_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.common.LatencyTrack.LatencyTrackMessage.latency_name)
}
inline std::string* LatencyTrack_LatencyTrackMessage::mutable_latency_name() {
  std::string* _s = _internal_mutable_latency_name();
  // @@protoc_insertion_point(field_mutable:apollo.common.LatencyTrack.LatencyTrackMessage.latency_name)
  return _s;
}
inline const std::string& LatencyTrack_LatencyTrackMessage::_internal_latency_name() const {
  return latency_name_.Get();
}
inline void LatencyTrack_LatencyTrackMessage::_internal_set_latency_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  latency_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LatencyTrack_LatencyTrackMessage::_internal_mutable_latency_name() {
  _has_bits_[0] |= 0x00000001u;
  return latency_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LatencyTrack_LatencyTrackMessage::release_latency_name() {
  // @@protoc_insertion_point(field_release:apollo.common.LatencyTrack.LatencyTrackMessage.latency_name)
  if (!_internal_has_latency_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return latency_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LatencyTrack_LatencyTrackMessage::set_allocated_latency_name(std::string* latency_name) {
  if (latency_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  latency_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), latency_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:apollo.common.LatencyTrack.LatencyTrackMessage.latency_name)
}

// optional .apollo.common.LatencyStat latency_stat = 2;
inline bool LatencyTrack_LatencyTrackMessage::_internal_has_latency_stat() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || latency_stat_ != nullptr);
  return value;
}
inline bool LatencyTrack_LatencyTrackMessage::has_latency_stat() const {
  return _internal_has_latency_stat();
}
inline void LatencyTrack_LatencyTrackMessage::clear_latency_stat() {
  if (latency_stat_ != nullptr) latency_stat_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::common::LatencyStat& LatencyTrack_LatencyTrackMessage::_internal_latency_stat() const {
  const ::apollo::common::LatencyStat* p = latency_stat_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::common::LatencyStat&>(
      ::apollo::common::_LatencyStat_default_instance_);
}
inline const ::apollo::common::LatencyStat& LatencyTrack_LatencyTrackMessage::latency_stat() const {
  // @@protoc_insertion_point(field_get:apollo.common.LatencyTrack.LatencyTrackMessage.latency_stat)
  return _internal_latency_stat();
}
inline void LatencyTrack_LatencyTrackMessage::unsafe_arena_set_allocated_latency_stat(
    ::apollo::common::LatencyStat* latency_stat) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(latency_stat_);
  }
  latency_stat_ = latency_stat;
  if (latency_stat) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.common.LatencyTrack.LatencyTrackMessage.latency_stat)
}
inline ::apollo::common::LatencyStat* LatencyTrack_LatencyTrackMessage::release_latency_stat() {
  _has_bits_[0] &= ~0x00000002u;
  ::apollo::common::LatencyStat* temp = latency_stat_;
  latency_stat_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::common::LatencyStat* LatencyTrack_LatencyTrackMessage::unsafe_arena_release_latency_stat() {
  // @@protoc_insertion_point(field_release:apollo.common.LatencyTrack.LatencyTrackMessage.latency_stat)
  _has_bits_[0] &= ~0x00000002u;
  ::apollo::common::LatencyStat* temp = latency_stat_;
  latency_stat_ = nullptr;
  return temp;
}
inline ::apollo::common::LatencyStat* LatencyTrack_LatencyTrackMessage::_internal_mutable_latency_stat() {
  _has_bits_[0] |= 0x00000002u;
  if (latency_stat_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::LatencyStat>(GetArenaForAllocation());
    latency_stat_ = p;
  }
  return latency_stat_;
}
inline ::apollo::common::LatencyStat* LatencyTrack_LatencyTrackMessage::mutable_latency_stat() {
  ::apollo::common::LatencyStat* _msg = _internal_mutable_latency_stat();
  // @@protoc_insertion_point(field_mutable:apollo.common.LatencyTrack.LatencyTrackMessage.latency_stat)
  return _msg;
}
inline void LatencyTrack_LatencyTrackMessage::set_allocated_latency_stat(::apollo::common::LatencyStat* latency_stat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete latency_stat_;
  }
  if (latency_stat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::apollo::common::LatencyStat>::GetOwningArena(latency_stat);
    if (message_arena != submessage_arena) {
      latency_stat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, latency_stat, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  latency_stat_ = latency_stat;
  // @@protoc_insertion_point(field_set_allocated:apollo.common.LatencyTrack.LatencyTrackMessage.latency_stat)
}

// -------------------------------------------------------------------

// LatencyTrack

// repeated .apollo.common.LatencyTrack.LatencyTrackMessage latency_track = 1;
inline int LatencyTrack::_internal_latency_track_size() const {
  return latency_track_.size();
}
inline int LatencyTrack::latency_track_size() const {
  return _internal_latency_track_size();
}
inline void LatencyTrack::clear_latency_track() {
  latency_track_.Clear();
}
inline ::apollo::common::LatencyTrack_LatencyTrackMessage* LatencyTrack::mutable_latency_track(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.common.LatencyTrack.latency_track)
  return latency_track_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::LatencyTrack_LatencyTrackMessage >*
LatencyTrack::mutable_latency_track() {
  // @@protoc_insertion_point(field_mutable_list:apollo.common.LatencyTrack.latency_track)
  return &latency_track_;
}
inline const ::apollo::common::LatencyTrack_LatencyTrackMessage& LatencyTrack::_internal_latency_track(int index) const {
  return latency_track_.Get(index);
}
inline const ::apollo::common::LatencyTrack_LatencyTrackMessage& LatencyTrack::latency_track(int index) const {
  // @@protoc_insertion_point(field_get:apollo.common.LatencyTrack.latency_track)
  return _internal_latency_track(index);
}
inline ::apollo::common::LatencyTrack_LatencyTrackMessage* LatencyTrack::_internal_add_latency_track() {
  return latency_track_.Add();
}
inline ::apollo::common::LatencyTrack_LatencyTrackMessage* LatencyTrack::add_latency_track() {
  ::apollo::common::LatencyTrack_LatencyTrackMessage* _add = _internal_add_latency_track();
  // @@protoc_insertion_point(field_add:apollo.common.LatencyTrack.latency_track)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::LatencyTrack_LatencyTrackMessage >&
LatencyTrack::latency_track() const {
  // @@protoc_insertion_point(field_list:apollo.common.LatencyTrack.latency_track)
  return latency_track_;
}

// -------------------------------------------------------------------

// LatencyReport

// optional .apollo.common.Header header = 1;
inline bool LatencyReport::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || header_ != nullptr);
  return value;
}
inline bool LatencyReport::has_header() const {
  return _internal_has_header();
}
inline const ::apollo::common::Header& LatencyReport::_internal_header() const {
  const ::apollo::common::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::common::Header&>(
      ::apollo::common::_Header_default_instance_);
}
inline const ::apollo::common::Header& LatencyReport::header() const {
  // @@protoc_insertion_point(field_get:apollo.common.LatencyReport.header)
  return _internal_header();
}
inline void LatencyReport::unsafe_arena_set_allocated_header(
    ::apollo::common::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.common.LatencyReport.header)
}
inline ::apollo::common::Header* LatencyReport::release_header() {
  _has_bits_[0] &= ~0x00000001u;
  ::apollo::common::Header* temp = header_;
  header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::common::Header* LatencyReport::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:apollo.common.LatencyReport.header)
  _has_bits_[0] &= ~0x00000001u;
  ::apollo::common::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::apollo::common::Header* LatencyReport::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000001u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Header>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::apollo::common::Header* LatencyReport::mutable_header() {
  ::apollo::common::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:apollo.common.LatencyReport.header)
  return _msg;
}
inline void LatencyReport::set_allocated_header(::apollo::common::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:apollo.common.LatencyReport.header)
}

// optional .apollo.common.LatencyTrack e2es_latency = 2;
inline bool LatencyReport::_internal_has_e2es_latency() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || e2es_latency_ != nullptr);
  return value;
}
inline bool LatencyReport::has_e2es_latency() const {
  return _internal_has_e2es_latency();
}
inline void LatencyReport::clear_e2es_latency() {
  if (e2es_latency_ != nullptr) e2es_latency_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::common::LatencyTrack& LatencyReport::_internal_e2es_latency() const {
  const ::apollo::common::LatencyTrack* p = e2es_latency_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::common::LatencyTrack&>(
      ::apollo::common::_LatencyTrack_default_instance_);
}
inline const ::apollo::common::LatencyTrack& LatencyReport::e2es_latency() const {
  // @@protoc_insertion_point(field_get:apollo.common.LatencyReport.e2es_latency)
  return _internal_e2es_latency();
}
inline void LatencyReport::unsafe_arena_set_allocated_e2es_latency(
    ::apollo::common::LatencyTrack* e2es_latency) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(e2es_latency_);
  }
  e2es_latency_ = e2es_latency;
  if (e2es_latency) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.common.LatencyReport.e2es_latency)
}
inline ::apollo::common::LatencyTrack* LatencyReport::release_e2es_latency() {
  _has_bits_[0] &= ~0x00000002u;
  ::apollo::common::LatencyTrack* temp = e2es_latency_;
  e2es_latency_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::common::LatencyTrack* LatencyReport::unsafe_arena_release_e2es_latency() {
  // @@protoc_insertion_point(field_release:apollo.common.LatencyReport.e2es_latency)
  _has_bits_[0] &= ~0x00000002u;
  ::apollo::common::LatencyTrack* temp = e2es_latency_;
  e2es_latency_ = nullptr;
  return temp;
}
inline ::apollo::common::LatencyTrack* LatencyReport::_internal_mutable_e2es_latency() {
  _has_bits_[0] |= 0x00000002u;
  if (e2es_latency_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::LatencyTrack>(GetArenaForAllocation());
    e2es_latency_ = p;
  }
  return e2es_latency_;
}
inline ::apollo::common::LatencyTrack* LatencyReport::mutable_e2es_latency() {
  ::apollo::common::LatencyTrack* _msg = _internal_mutable_e2es_latency();
  // @@protoc_insertion_point(field_mutable:apollo.common.LatencyReport.e2es_latency)
  return _msg;
}
inline void LatencyReport::set_allocated_e2es_latency(::apollo::common::LatencyTrack* e2es_latency) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete e2es_latency_;
  }
  if (e2es_latency) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::apollo::common::LatencyTrack>::GetOwningArena(e2es_latency);
    if (message_arena != submessage_arena) {
      e2es_latency = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, e2es_latency, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  e2es_latency_ = e2es_latency;
  // @@protoc_insertion_point(field_set_allocated:apollo.common.LatencyReport.e2es_latency)
}

// optional .apollo.common.LatencyTrack modules_latency = 3;
inline bool LatencyReport::_internal_has_modules_latency() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || modules_latency_ != nullptr);
  return value;
}
inline bool LatencyReport::has_modules_latency() const {
  return _internal_has_modules_latency();
}
inline void LatencyReport::clear_modules_latency() {
  if (modules_latency_ != nullptr) modules_latency_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::apollo::common::LatencyTrack& LatencyReport::_internal_modules_latency() const {
  const ::apollo::common::LatencyTrack* p = modules_latency_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::common::LatencyTrack&>(
      ::apollo::common::_LatencyTrack_default_instance_);
}
inline const ::apollo::common::LatencyTrack& LatencyReport::modules_latency() const {
  // @@protoc_insertion_point(field_get:apollo.common.LatencyReport.modules_latency)
  return _internal_modules_latency();
}
inline void LatencyReport::unsafe_arena_set_allocated_modules_latency(
    ::apollo::common::LatencyTrack* modules_latency) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(modules_latency_);
  }
  modules_latency_ = modules_latency;
  if (modules_latency) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.common.LatencyReport.modules_latency)
}
inline ::apollo::common::LatencyTrack* LatencyReport::release_modules_latency() {
  _has_bits_[0] &= ~0x00000004u;
  ::apollo::common::LatencyTrack* temp = modules_latency_;
  modules_latency_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::common::LatencyTrack* LatencyReport::unsafe_arena_release_modules_latency() {
  // @@protoc_insertion_point(field_release:apollo.common.LatencyReport.modules_latency)
  _has_bits_[0] &= ~0x00000004u;
  ::apollo::common::LatencyTrack* temp = modules_latency_;
  modules_latency_ = nullptr;
  return temp;
}
inline ::apollo::common::LatencyTrack* LatencyReport::_internal_mutable_modules_latency() {
  _has_bits_[0] |= 0x00000004u;
  if (modules_latency_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::LatencyTrack>(GetArenaForAllocation());
    modules_latency_ = p;
  }
  return modules_latency_;
}
inline ::apollo::common::LatencyTrack* LatencyReport::mutable_modules_latency() {
  ::apollo::common::LatencyTrack* _msg = _internal_mutable_modules_latency();
  // @@protoc_insertion_point(field_mutable:apollo.common.LatencyReport.modules_latency)
  return _msg;
}
inline void LatencyReport::set_allocated_modules_latency(::apollo::common::LatencyTrack* modules_latency) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete modules_latency_;
  }
  if (modules_latency) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::apollo::common::LatencyTrack>::GetOwningArena(modules_latency);
    if (message_arena != submessage_arena) {
      modules_latency = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, modules_latency, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  modules_latency_ = modules_latency;
  // @@protoc_insertion_point(field_set_allocated:apollo.common.LatencyReport.modules_latency)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fcommon_2flatency_5frecorder_2fproto_2flatency_5frecord_2eproto
