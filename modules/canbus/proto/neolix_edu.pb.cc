// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/canbus/proto/neolix_edu.proto

#include "modules/canbus/proto/neolix_edu.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace apollo {
namespace canbus {
constexpr Aeb_systemstate_11::Aeb_systemstate_11(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : aeb_state_(0)
  , faultrank_(0)
  , currenttemperature_(0)
  , aeb_brakestate_(false)
  , pas_f1_stop_(false)
  , pas_f2_stop_(false)
  , pas_f3_stop_(false)
  , pas_f4_stop_(false)
  , pas_b1_stop_(false)
  , pas_b2_stop_(false)
  , pas_b3_stop_(false)
  , pas_b4_stop_(false)
  , aeb_livecounter_rear_(0)
  , aeb_cheksum_(0){}
struct Aeb_systemstate_11DefaultTypeInternal {
  constexpr Aeb_systemstate_11DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Aeb_systemstate_11DefaultTypeInternal() {}
  union {
    Aeb_systemstate_11 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Aeb_systemstate_11DefaultTypeInternal _Aeb_systemstate_11_default_instance_;
constexpr Vcu_vehicle_fault_response_201::Vcu_vehicle_fault_response_201(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : vehicle_error_indicationsvcu_(0)
  , brake_system_errorehb_(0)
  , eps_error_(0)
  , motor_error_(0)
  , epb_error_(0)
  , high_voltage_battery_errorbcu_(0)
  , automode_exit_reason_losscommuni_(false)
  , automode_exit_reason_reqsignalno_(false)
  , automode_exit_reason_low_power_(false)
  , automode_exit_reason_highvolt_(false)
  , automode_exit_reason_vehicle_flt_(false)
  , automode_exit_reason_press_emerg_(false)
  , automode_exit_reason_press_remot_(false)
  , automode_exit_reason_pdu_control_(false)
  , vcu_faultrept_alivecounter_(0)
  , vcu_faultrept_checksum_(0){}
struct Vcu_vehicle_fault_response_201DefaultTypeInternal {
  constexpr Vcu_vehicle_fault_response_201DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Vcu_vehicle_fault_response_201DefaultTypeInternal() {}
  union {
    Vcu_vehicle_fault_response_201 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Vcu_vehicle_fault_response_201DefaultTypeInternal _Vcu_vehicle_fault_response_201_default_instance_;
constexpr Vcu_powerstatus_214::Vcu_powerstatus_214(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : vcu_powermode_(0)
  , vcu_powermodevalid_(0)
  , replacebatterystateindication_(false)
  , forbidden_aeb_signal_(false)
  , vcu_driverinfo_alivecounter_(0)
  , bcu_chargedischargecurrent_(0)
  , bcu_batt_internalvoltage_(0)
  , vcu_driverinfo_checksum_(0){}
struct Vcu_powerstatus_214DefaultTypeInternal {
  constexpr Vcu_powerstatus_214DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Vcu_powerstatus_214DefaultTypeInternal() {}
  union {
    Vcu_powerstatus_214 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Vcu_powerstatus_214DefaultTypeInternal _Vcu_powerstatus_214_default_instance_;
constexpr Ads_light_horn_command_310::Ads_light_horn_command_310(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : turn_right_light_command_(false)
  , turn_left_light_command_(false)
  , horn_command_(false)
  , beam_command_(0)
  , auto_drivercmd_alivecounter_(0)
  , auto_drivercmd_checksum_(0){}
struct Ads_light_horn_command_310DefaultTypeInternal {
  constexpr Ads_light_horn_command_310DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Ads_light_horn_command_310DefaultTypeInternal() {}
  union {
    Ads_light_horn_command_310 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Ads_light_horn_command_310DefaultTypeInternal _Ads_light_horn_command_310_default_instance_;
constexpr Ads_brake_command_46::Ads_brake_command_46(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : auto_brake_command_(0)
  , drive_enable_(false)
  , auto_parking_command_(false)
  , epb_rampauxiliarycommand_(false)
  , auto_drivercmd_alivecounter_(0)
  , auto_drivercmd_checksum_(0){}
struct Ads_brake_command_46DefaultTypeInternal {
  constexpr Ads_brake_command_46DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Ads_brake_command_46DefaultTypeInternal() {}
  union {
    Ads_brake_command_46 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Ads_brake_command_46DefaultTypeInternal _Ads_brake_command_46_default_instance_;
constexpr Vcu_brake_report_47::Vcu_brake_report_47(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : control_mode_resp_(0)

  , vcu_real_brake_(0)
  , brake_enable_resp_(false)
  , vcu_real_brake_valid_(false)
  , vcu_real_parking_valid_(false)
  , rampauxiliaryindication_(false)
  , vcu_real_parking_status_(0)
  , vehicleslope_(0)
  , vcu_brakerept_alivecounter_(0)
  , vcu_brakerept_checksum_(0){}
struct Vcu_brake_report_47DefaultTypeInternal {
  constexpr Vcu_brake_report_47DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Vcu_brake_report_47DefaultTypeInternal() {}
  union {
    Vcu_brake_report_47 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Vcu_brake_report_47DefaultTypeInternal _Vcu_brake_report_47_default_instance_;
constexpr Vcu_eps_report_57::Vcu_eps_report_57(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : control_mode_resp_(0)

  , drive_enable_resp_(false)
  , vcu_eps_report_(false)
  , vcu_real_angle_valid_(false)
  , vcu_target_angle_valid_(false)
  , vcu_real_angle_(0)
  , vcu_target_angle_(0)
  , vcu_eps_rept_alivecounter_(0)
  , vcu_eps_rept_checksum_(0){}
struct Vcu_eps_report_57DefaultTypeInternal {
  constexpr Vcu_eps_report_57DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Vcu_eps_report_57DefaultTypeInternal() {}
  union {
    Vcu_eps_report_57 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Vcu_eps_report_57DefaultTypeInternal _Vcu_eps_report_57_default_instance_;
constexpr Ads_eps_command_56::Ads_eps_command_56(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : auto_target_angle_(0)
  , drive_enable_(false)
  , auto_drivercmd_alivecounter_(0)
  , auto_drivercmd_checksum_(0){}
struct Ads_eps_command_56DefaultTypeInternal {
  constexpr Ads_eps_command_56DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Ads_eps_command_56DefaultTypeInternal() {}
  union {
    Ads_eps_command_56 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Ads_eps_command_56DefaultTypeInternal _Ads_eps_command_56_default_instance_;
constexpr Ads_drive_command_50::Ads_drive_command_50(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : drive_enable_(false)
  , auto_shift_command_(0)

  , auto_drive_torque_(0)
  , auto_drivercmd_alivecounter_(0)
  , auto_drivercmd_checksum_(0){}
struct Ads_drive_command_50DefaultTypeInternal {
  constexpr Ads_drive_command_50DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Ads_drive_command_50DefaultTypeInternal() {}
  union {
    Ads_drive_command_50 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Ads_drive_command_50DefaultTypeInternal _Ads_drive_command_50_default_instance_;
constexpr Vcu_drive_report_52::Vcu_drive_report_52(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : control_mode_resp_(0)

  , vcu_real_shift_(0)

  , drive_enable_resp_(false)
  , vcu_real_shift_valid_(false)
  , vcu_real_torque_valid_(false)
  , vcu_limitedtorquemode_(false)
  , vcu_driverept_alivecounter_(0)
  , vcu_real_torque_(0)
  , vcu_driverept_checksum_(0){}
struct Vcu_drive_report_52DefaultTypeInternal {
  constexpr Vcu_drive_report_52DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Vcu_drive_report_52DefaultTypeInternal() {}
  union {
    Vcu_drive_report_52 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Vcu_drive_report_52DefaultTypeInternal _Vcu_drive_report_52_default_instance_;
constexpr Ads_diagnosis_628::Ads_diagnosis_628(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : faultrank_(0)
  , adas_fault_code_(0)
  , adas_softwareversion_(0)
  , adas_hardwareversion_(0){}
struct Ads_diagnosis_628DefaultTypeInternal {
  constexpr Ads_diagnosis_628DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Ads_diagnosis_628DefaultTypeInternal() {}
  union {
    Ads_diagnosis_628 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Ads_diagnosis_628DefaultTypeInternal _Ads_diagnosis_628_default_instance_;
constexpr Vcu_nm_401::Vcu_nm_401(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : vcu_sleepcommand_(false){}
struct Vcu_nm_401DefaultTypeInternal {
  constexpr Vcu_nm_401DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Vcu_nm_401DefaultTypeInternal() {}
  union {
    Vcu_nm_401 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Vcu_nm_401DefaultTypeInternal _Vcu_nm_401_default_instance_;
constexpr Vcu_vehicle_status_report_101::Vcu_vehicle_status_report_101(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : control_mode_resp_(0)

  , drive_enable_resp_(false)
  , vcu_highvoltagecircuitstate_(false)
  , vcu_dcdc_enabledstates_(false)
  , vcu_motor_speed_valid_(false)
  , vcu_vehicle_speed_(0)
  , vcu_lowbatterychargingfunctionst_(0)
  , vcu_display_soc_(0)
  , vcu_motor_speed_(0)
  , vcu_motor_direction_(0)
  , vcu_statusrept_alivecounter_(0)
  , vcu_statusrept_checksum_(0){}
struct Vcu_vehicle_status_report_101DefaultTypeInternal {
  constexpr Vcu_vehicle_status_report_101DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Vcu_vehicle_status_report_101DefaultTypeInternal() {}
  union {
    Vcu_vehicle_status_report_101 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Vcu_vehicle_status_report_101DefaultTypeInternal _Vcu_vehicle_status_report_101_default_instance_;
constexpr Vcu_vehicle_info_response_502::Vcu_vehicle_info_response_502(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : vehicle_softwareversion_indicati_(0)
  , project_(0)
  , manufacturer_(0)
  , year_(0)
  , month_(0)
  , day_(0)
  , vehicle_serial_number_(0){}
struct Vcu_vehicle_info_response_502DefaultTypeInternal {
  constexpr Vcu_vehicle_info_response_502DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Vcu_vehicle_info_response_502DefaultTypeInternal() {}
  union {
    Vcu_vehicle_info_response_502 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Vcu_vehicle_info_response_502DefaultTypeInternal _Vcu_vehicle_info_response_502_default_instance_;
constexpr Aeb_diagnosis1_626::Aeb_diagnosis1_626(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : aeb_softwareversion_(0)
  , aeb_hardwareversion_(0){}
struct Aeb_diagnosis1_626DefaultTypeInternal {
  constexpr Aeb_diagnosis1_626DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Aeb_diagnosis1_626DefaultTypeInternal() {}
  union {
    Aeb_diagnosis1_626 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Aeb_diagnosis1_626DefaultTypeInternal _Aeb_diagnosis1_626_default_instance_;
constexpr Aeb_diagresp_718::Aeb_diagresp_718(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : aeb_diagresp_(false){}
struct Aeb_diagresp_718DefaultTypeInternal {
  constexpr Aeb_diagresp_718DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Aeb_diagresp_718DefaultTypeInternal() {}
  union {
    Aeb_diagresp_718 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Aeb_diagresp_718DefaultTypeInternal _Aeb_diagresp_718_default_instance_;
constexpr Pas_1st_data_311::Pas_1st_data_311(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pasdistance4_(0)
  , pasdistance3_(0)
  , pasdistance2_(0)
  , pasdistance1_(0)
  , pas_f1_status_(false)
  , pas_f2_status_(false)
  , pas_f3_status_(false)
  , pas_f4_status_(false){}
struct Pas_1st_data_311DefaultTypeInternal {
  constexpr Pas_1st_data_311DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Pas_1st_data_311DefaultTypeInternal() {}
  union {
    Pas_1st_data_311 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Pas_1st_data_311DefaultTypeInternal _Pas_1st_data_311_default_instance_;
constexpr Pas_2nd_data_312::Pas_2nd_data_312(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pasdistance1_(0)
  , pasdistance2_(0)
  , pasdistance3_(0)
  , pasdistance4_(0)
  , pas_b1_status_(false)
  , pas_b2_status_(false)
  , pas_b3_status_(false)
  , pas_b4_status_(false){}
struct Pas_2nd_data_312DefaultTypeInternal {
  constexpr Pas_2nd_data_312DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Pas_2nd_data_312DefaultTypeInternal() {}
  union {
    Pas_2nd_data_312 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Pas_2nd_data_312DefaultTypeInternal _Pas_2nd_data_312_default_instance_;
constexpr Aeb_wheelimpulse_355::Aeb_wheelimpulse_355(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : flimpulse_(0)
  , frimpulse_(0)
  , rlimpulse_(0)
  , rrimpulse_(0)
  , alivecounter_(0)
  , checksum_(0)
  , flimpulsevalid_(false)
  , frimpulsevalid_(false)
  , rlimpulsevalid_(false)
  , rrimpulsevalid_(false){}
struct Aeb_wheelimpulse_355DefaultTypeInternal {
  constexpr Aeb_wheelimpulse_355DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Aeb_wheelimpulse_355DefaultTypeInternal() {}
  union {
    Aeb_wheelimpulse_355 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Aeb_wheelimpulse_355DefaultTypeInternal _Aeb_wheelimpulse_355_default_instance_;
constexpr Aeb_rearwheelspeed_354::Aeb_rearwheelspeed_354(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : wheelspeed_rl_(0)
  , wheelspeed_rr_(0)
  , wheelspeed_rl_direct_(0)
  , wheelspeed_rr_direct_(0)
  , alivecounter_rear_(0)
  , checksum_rear_(0)
  , wheelspeed_rl_valid_(false)
  , wheelspeed_rr_valid_(false){}
struct Aeb_rearwheelspeed_354DefaultTypeInternal {
  constexpr Aeb_rearwheelspeed_354DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Aeb_rearwheelspeed_354DefaultTypeInternal() {}
  union {
    Aeb_rearwheelspeed_354 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Aeb_rearwheelspeed_354DefaultTypeInternal _Aeb_rearwheelspeed_354_default_instance_;
constexpr Aeb_frontwheelspeed_353::Aeb_frontwheelspeed_353(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : vehiclespeed_(0)
  , vehiclerealdirect_(0)
  , wheelspeed_fl_(0)
  , wheelspeed_fr_(0)
  , wheelspeed_fl_direct_(0)
  , wheelspeed_fr_direct_(0)
  , alivecounter_front_(0)
  , checksum_front_(0)
  , vehiclespeedvalid_(false)
  , wheelspeed_fl_valid_(false)
  , wheelspeed_fr_valid_(false){}
struct Aeb_frontwheelspeed_353DefaultTypeInternal {
  constexpr Aeb_frontwheelspeed_353DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Aeb_frontwheelspeed_353DefaultTypeInternal() {}
  union {
    Aeb_frontwheelspeed_353 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Aeb_frontwheelspeed_353DefaultTypeInternal _Aeb_frontwheelspeed_353_default_instance_;
constexpr Neolix_edu::Neolix_edu(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : aeb_systemstate_11_(nullptr)
  , vcu_vehicle_fault_response_201_(nullptr)
  , vcu_powerstatus_214_(nullptr)
  , ads_light_horn_command_310_(nullptr)
  , ads_brake_command_46_(nullptr)
  , vcu_brake_report_47_(nullptr)
  , vcu_eps_report_57_(nullptr)
  , ads_eps_command_56_(nullptr)
  , ads_drive_command_50_(nullptr)
  , vcu_drive_report_52_(nullptr)
  , ads_diagnosis_628_(nullptr)
  , vcu_nm_401_(nullptr)
  , vcu_vehicle_status_report_101_(nullptr)
  , vcu_vehicle_info_response_502_(nullptr)
  , aeb_diagnosis1_626_(nullptr)
  , aeb_diagresp_718_(nullptr)
  , pas_1st_data_311_(nullptr)
  , pas_2nd_data_312_(nullptr)
  , aeb_wheelimpulse_355_(nullptr)
  , aeb_rearwheelspeed_354_(nullptr)
  , aeb_frontwheelspeed_353_(nullptr){}
struct Neolix_eduDefaultTypeInternal {
  constexpr Neolix_eduDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Neolix_eduDefaultTypeInternal() {}
  union {
    Neolix_edu _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Neolix_eduDefaultTypeInternal _Neolix_edu_default_instance_;
}  // namespace canbus
}  // namespace apollo
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto[22];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Aeb_systemstate_11, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Aeb_systemstate_11, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Aeb_systemstate_11, aeb_state_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Aeb_systemstate_11, aeb_brakestate_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Aeb_systemstate_11, faultrank_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Aeb_systemstate_11, currenttemperature_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Aeb_systemstate_11, pas_f1_stop_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Aeb_systemstate_11, pas_f2_stop_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Aeb_systemstate_11, pas_f3_stop_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Aeb_systemstate_11, pas_f4_stop_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Aeb_systemstate_11, pas_b1_stop_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Aeb_systemstate_11, pas_b2_stop_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Aeb_systemstate_11, pas_b3_stop_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Aeb_systemstate_11, pas_b4_stop_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Aeb_systemstate_11, aeb_livecounter_rear_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Aeb_systemstate_11, aeb_cheksum_),
  0,
  3,
  1,
  2,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vcu_vehicle_fault_response_201, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vcu_vehicle_fault_response_201, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vcu_vehicle_fault_response_201, vehicle_error_indicationsvcu_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vcu_vehicle_fault_response_201, brake_system_errorehb_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vcu_vehicle_fault_response_201, eps_error_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vcu_vehicle_fault_response_201, motor_error_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vcu_vehicle_fault_response_201, epb_error_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vcu_vehicle_fault_response_201, high_voltage_battery_errorbcu_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vcu_vehicle_fault_response_201, automode_exit_reason_losscommuni_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vcu_vehicle_fault_response_201, automode_exit_reason_reqsignalno_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vcu_vehicle_fault_response_201, automode_exit_reason_low_power_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vcu_vehicle_fault_response_201, automode_exit_reason_highvolt_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vcu_vehicle_fault_response_201, automode_exit_reason_vehicle_flt_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vcu_vehicle_fault_response_201, automode_exit_reason_press_emerg_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vcu_vehicle_fault_response_201, automode_exit_reason_press_remot_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vcu_vehicle_fault_response_201, automode_exit_reason_pdu_control_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vcu_vehicle_fault_response_201, vcu_faultrept_alivecounter_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vcu_vehicle_fault_response_201, vcu_faultrept_checksum_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vcu_powerstatus_214, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vcu_powerstatus_214, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vcu_powerstatus_214, vcu_powermode_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vcu_powerstatus_214, vcu_powermodevalid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vcu_powerstatus_214, replacebatterystateindication_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vcu_powerstatus_214, forbidden_aeb_signal_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vcu_powerstatus_214, bcu_chargedischargecurrent_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vcu_powerstatus_214, bcu_batt_internalvoltage_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vcu_powerstatus_214, vcu_driverinfo_alivecounter_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vcu_powerstatus_214, vcu_driverinfo_checksum_),
  0,
  1,
  2,
  3,
  5,
  6,
  4,
  7,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ads_light_horn_command_310, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ads_light_horn_command_310, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ads_light_horn_command_310, turn_right_light_command_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ads_light_horn_command_310, turn_left_light_command_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ads_light_horn_command_310, horn_command_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ads_light_horn_command_310, beam_command_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ads_light_horn_command_310, auto_drivercmd_alivecounter_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ads_light_horn_command_310, auto_drivercmd_checksum_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ads_brake_command_46, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ads_brake_command_46, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ads_brake_command_46, drive_enable_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ads_brake_command_46, auto_brake_command_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ads_brake_command_46, auto_parking_command_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ads_brake_command_46, epb_rampauxiliarycommand_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ads_brake_command_46, auto_drivercmd_alivecounter_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ads_brake_command_46, auto_drivercmd_checksum_),
  1,
  0,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vcu_brake_report_47, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vcu_brake_report_47, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vcu_brake_report_47, brake_enable_resp_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vcu_brake_report_47, control_mode_resp_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vcu_brake_report_47, vcu_real_brake_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vcu_brake_report_47, vcu_real_brake_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vcu_brake_report_47, vcu_real_parking_status_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vcu_brake_report_47, vcu_real_parking_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vcu_brake_report_47, rampauxiliaryindication_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vcu_brake_report_47, vehicleslope_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vcu_brake_report_47, vcu_brakerept_alivecounter_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vcu_brake_report_47, vcu_brakerept_checksum_),
  2,
  0,
  3,
  1,
  6,
  4,
  5,
  7,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vcu_eps_report_57, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vcu_eps_report_57, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vcu_eps_report_57, drive_enable_resp_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vcu_eps_report_57, control_mode_resp_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vcu_eps_report_57, vcu_eps_report_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vcu_eps_report_57, vcu_real_angle_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vcu_eps_report_57, vcu_real_angle_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vcu_eps_report_57, vcu_target_angle_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vcu_eps_report_57, vcu_target_angle_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vcu_eps_report_57, vcu_eps_rept_alivecounter_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vcu_eps_report_57, vcu_eps_rept_checksum_),
  1,
  0,
  2,
  5,
  3,
  4,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ads_eps_command_56, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ads_eps_command_56, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ads_eps_command_56, drive_enable_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ads_eps_command_56, auto_target_angle_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ads_eps_command_56, auto_drivercmd_alivecounter_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ads_eps_command_56, auto_drivercmd_checksum_),
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ads_drive_command_50, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ads_drive_command_50, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ads_drive_command_50, drive_enable_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ads_drive_command_50, auto_shift_command_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ads_drive_command_50, auto_drive_torque_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ads_drive_command_50, auto_drivercmd_alivecounter_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ads_drive_command_50, auto_drivercmd_checksum_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vcu_drive_report_52, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vcu_drive_report_52, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vcu_drive_report_52, drive_enable_resp_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vcu_drive_report_52, control_mode_resp_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vcu_drive_report_52, vcu_real_shift_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vcu_drive_report_52, vcu_real_shift_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vcu_drive_report_52, vcu_real_torque_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vcu_drive_report_52, vcu_real_torque_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vcu_drive_report_52, vcu_limitedtorquemode_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vcu_drive_report_52, vcu_driverept_alivecounter_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vcu_drive_report_52, vcu_driverept_checksum_),
  2,
  0,
  1,
  3,
  4,
  7,
  5,
  6,
  8,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ads_diagnosis_628, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ads_diagnosis_628, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ads_diagnosis_628, faultrank_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ads_diagnosis_628, adas_fault_code_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ads_diagnosis_628, adas_softwareversion_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ads_diagnosis_628, adas_hardwareversion_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vcu_nm_401, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vcu_nm_401, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vcu_nm_401, vcu_sleepcommand_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vcu_vehicle_status_report_101, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vcu_vehicle_status_report_101, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vcu_vehicle_status_report_101, drive_enable_resp_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vcu_vehicle_status_report_101, vcu_highvoltagecircuitstate_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vcu_vehicle_status_report_101, vcu_dcdc_enabledstates_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vcu_vehicle_status_report_101, control_mode_resp_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vcu_vehicle_status_report_101, vcu_vehicle_speed_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vcu_vehicle_status_report_101, vcu_lowbatterychargingfunctionst_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vcu_vehicle_status_report_101, vcu_display_soc_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vcu_vehicle_status_report_101, vcu_motor_speed_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vcu_vehicle_status_report_101, vcu_motor_direction_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vcu_vehicle_status_report_101, vcu_motor_speed_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vcu_vehicle_status_report_101, vcu_statusrept_alivecounter_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vcu_vehicle_status_report_101, vcu_statusrept_checksum_),
  1,
  2,
  3,
  0,
  5,
  6,
  7,
  8,
  9,
  4,
  10,
  11,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vcu_vehicle_info_response_502, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vcu_vehicle_info_response_502, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vcu_vehicle_info_response_502, vehicle_softwareversion_indicati_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vcu_vehicle_info_response_502, project_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vcu_vehicle_info_response_502, manufacturer_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vcu_vehicle_info_response_502, year_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vcu_vehicle_info_response_502, month_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vcu_vehicle_info_response_502, day_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vcu_vehicle_info_response_502, vehicle_serial_number_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Aeb_diagnosis1_626, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Aeb_diagnosis1_626, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Aeb_diagnosis1_626, aeb_softwareversion_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Aeb_diagnosis1_626, aeb_hardwareversion_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Aeb_diagresp_718, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Aeb_diagresp_718, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Aeb_diagresp_718, aeb_diagresp_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Pas_1st_data_311, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Pas_1st_data_311, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Pas_1st_data_311, pasdistance4_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Pas_1st_data_311, pasdistance3_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Pas_1st_data_311, pas_f1_status_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Pas_1st_data_311, pas_f2_status_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Pas_1st_data_311, pas_f3_status_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Pas_1st_data_311, pas_f4_status_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Pas_1st_data_311, pasdistance2_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Pas_1st_data_311, pasdistance1_),
  0,
  1,
  4,
  5,
  6,
  7,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Pas_2nd_data_312, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Pas_2nd_data_312, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Pas_2nd_data_312, pas_b1_status_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Pas_2nd_data_312, pas_b2_status_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Pas_2nd_data_312, pas_b3_status_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Pas_2nd_data_312, pas_b4_status_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Pas_2nd_data_312, pasdistance1_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Pas_2nd_data_312, pasdistance2_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Pas_2nd_data_312, pasdistance3_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Pas_2nd_data_312, pasdistance4_),
  4,
  5,
  6,
  7,
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Aeb_wheelimpulse_355, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Aeb_wheelimpulse_355, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Aeb_wheelimpulse_355, flimpulse_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Aeb_wheelimpulse_355, flimpulsevalid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Aeb_wheelimpulse_355, frimpulse_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Aeb_wheelimpulse_355, frimpulsevalid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Aeb_wheelimpulse_355, rlimpulse_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Aeb_wheelimpulse_355, rlimpulsevalid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Aeb_wheelimpulse_355, rrimpulse_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Aeb_wheelimpulse_355, rrimpulsevalid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Aeb_wheelimpulse_355, alivecounter_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Aeb_wheelimpulse_355, checksum_),
  0,
  6,
  1,
  7,
  2,
  8,
  3,
  9,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Aeb_rearwheelspeed_354, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Aeb_rearwheelspeed_354, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Aeb_rearwheelspeed_354, wheelspeed_rl_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Aeb_rearwheelspeed_354, wheelspeed_rl_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Aeb_rearwheelspeed_354, wheelspeed_rr_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Aeb_rearwheelspeed_354, wheelspeed_rr_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Aeb_rearwheelspeed_354, wheelspeed_rl_direct_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Aeb_rearwheelspeed_354, wheelspeed_rr_direct_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Aeb_rearwheelspeed_354, alivecounter_rear_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Aeb_rearwheelspeed_354, checksum_rear_),
  6,
  0,
  7,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Aeb_frontwheelspeed_353, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Aeb_frontwheelspeed_353, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Aeb_frontwheelspeed_353, vehiclespeedvalid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Aeb_frontwheelspeed_353, vehiclespeed_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Aeb_frontwheelspeed_353, vehiclerealdirect_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Aeb_frontwheelspeed_353, wheelspeed_fl_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Aeb_frontwheelspeed_353, wheelspeed_fl_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Aeb_frontwheelspeed_353, wheelspeed_fr_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Aeb_frontwheelspeed_353, wheelspeed_fr_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Aeb_frontwheelspeed_353, wheelspeed_fl_direct_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Aeb_frontwheelspeed_353, wheelspeed_fr_direct_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Aeb_frontwheelspeed_353, alivecounter_front_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Aeb_frontwheelspeed_353, checksum_front_),
  8,
  0,
  1,
  9,
  2,
  10,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Neolix_edu, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Neolix_edu, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Neolix_edu, aeb_systemstate_11_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Neolix_edu, vcu_vehicle_fault_response_201_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Neolix_edu, vcu_powerstatus_214_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Neolix_edu, ads_light_horn_command_310_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Neolix_edu, ads_brake_command_46_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Neolix_edu, vcu_brake_report_47_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Neolix_edu, vcu_eps_report_57_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Neolix_edu, ads_eps_command_56_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Neolix_edu, ads_drive_command_50_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Neolix_edu, vcu_drive_report_52_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Neolix_edu, ads_diagnosis_628_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Neolix_edu, vcu_nm_401_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Neolix_edu, vcu_vehicle_status_report_101_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Neolix_edu, vcu_vehicle_info_response_502_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Neolix_edu, aeb_diagnosis1_626_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Neolix_edu, aeb_diagresp_718_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Neolix_edu, pas_1st_data_311_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Neolix_edu, pas_2nd_data_312_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Neolix_edu, aeb_wheelimpulse_355_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Neolix_edu, aeb_rearwheelspeed_354_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Neolix_edu, aeb_frontwheelspeed_353_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 20, -1, sizeof(::apollo::canbus::Aeb_systemstate_11)},
  { 34, 56, -1, sizeof(::apollo::canbus::Vcu_vehicle_fault_response_201)},
  { 72, 86, -1, sizeof(::apollo::canbus::Vcu_powerstatus_214)},
  { 94, 106, -1, sizeof(::apollo::canbus::Ads_light_horn_command_310)},
  { 112, 124, -1, sizeof(::apollo::canbus::Ads_brake_command_46)},
  { 130, 146, -1, sizeof(::apollo::canbus::Vcu_brake_report_47)},
  { 156, 171, -1, sizeof(::apollo::canbus::Vcu_eps_report_57)},
  { 180, 190, -1, sizeof(::apollo::canbus::Ads_eps_command_56)},
  { 194, 205, -1, sizeof(::apollo::canbus::Ads_drive_command_50)},
  { 210, 225, -1, sizeof(::apollo::canbus::Vcu_drive_report_52)},
  { 234, 244, -1, sizeof(::apollo::canbus::Ads_diagnosis_628)},
  { 248, 255, -1, sizeof(::apollo::canbus::Vcu_nm_401)},
  { 256, 274, -1, sizeof(::apollo::canbus::Vcu_vehicle_status_report_101)},
  { 286, 299, -1, sizeof(::apollo::canbus::Vcu_vehicle_info_response_502)},
  { 306, 314, -1, sizeof(::apollo::canbus::Aeb_diagnosis1_626)},
  { 316, 323, -1, sizeof(::apollo::canbus::Aeb_diagresp_718)},
  { 324, 338, -1, sizeof(::apollo::canbus::Pas_1st_data_311)},
  { 346, 360, -1, sizeof(::apollo::canbus::Pas_2nd_data_312)},
  { 368, 384, -1, sizeof(::apollo::canbus::Aeb_wheelimpulse_355)},
  { 394, 408, -1, sizeof(::apollo::canbus::Aeb_rearwheelspeed_354)},
  { 416, 433, -1, sizeof(::apollo::canbus::Aeb_frontwheelspeed_353)},
  { 444, 471, -1, sizeof(::apollo::canbus::Neolix_edu)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Aeb_systemstate_11_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Vcu_vehicle_fault_response_201_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Vcu_powerstatus_214_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Ads_light_horn_command_310_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Ads_brake_command_46_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Vcu_brake_report_47_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Vcu_eps_report_57_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Ads_eps_command_56_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Ads_drive_command_50_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Vcu_drive_report_52_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Ads_diagnosis_628_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Vcu_nm_401_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Vcu_vehicle_status_report_101_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Vcu_vehicle_info_response_502_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Aeb_diagnosis1_626_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Aeb_diagresp_718_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Pas_1st_data_311_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Pas_2nd_data_312_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Aeb_wheelimpulse_355_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Aeb_rearwheelspeed_354_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Aeb_frontwheelspeed_353_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Neolix_edu_default_instance_),
};

const char descriptor_table_protodef_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n%modules/canbus/proto/neolix_edu.proto\022"
  "\rapollo.canbus\"\311\002\n\022Aeb_systemstate_11\022\021\n"
  "\taeb_state\030\001 \001(\005\022\026\n\016aeb_brakestate\030\002 \001(\010"
  "\022\021\n\tfaultrank\030\003 \001(\005\022\032\n\022currenttemperatur"
  "e\030\004 \001(\005\022\023\n\013pas_f1_stop\030\005 \001(\010\022\023\n\013pas_f2_s"
  "top\030\006 \001(\010\022\023\n\013pas_f3_stop\030\007 \001(\010\022\023\n\013pas_f4"
  "_stop\030\010 \001(\010\022\023\n\013pas_b1_stop\030\t \001(\010\022\023\n\013pas_"
  "b2_stop\030\n \001(\010\022\023\n\013pas_b3_stop\030\013 \001(\010\022\023\n\013pa"
  "s_b4_stop\030\014 \001(\010\022\034\n\024aeb_livecounter_rear\030"
  "\r \001(\005\022\023\n\013aeb_cheksum\030\016 \001(\005\"\326\004\n\036Vcu_vehic"
  "le_fault_response_201\022$\n\034vehicle_error_i"
  "ndicationsvcu\030\001 \001(\005\022\035\n\025brake_system_erro"
  "rehb\030\002 \001(\005\022\021\n\teps_error\030\003 \001(\005\022\023\n\013motor_e"
  "rror\030\004 \001(\005\022\021\n\tepb_error\030\005 \001(\005\022%\n\035high_vo"
  "ltage_battery_errorbcu\030\006 \001(\005\022(\n automode"
  "_exit_reason_losscommuni\030\007 \001(\010\022(\n automo"
  "de_exit_reason_reqsignalno\030\010 \001(\010\022&\n\036auto"
  "mode_exit_reason_low_power\030\t \001(\010\022%\n\035auto"
  "mode_exit_reason_highvolt\030\n \001(\010\022(\n autom"
  "ode_exit_reason_vehicle_flt\030\013 \001(\010\022(\n aut"
  "omode_exit_reason_press_emerg\030\014 \001(\010\022(\n a"
  "utomode_exit_reason_press_remot\030\r \001(\010\022(\n"
  " automode_exit_reason_pdu_control\030\016 \001(\010\022"
  "\"\n\032vcu_faultrept_alivecounter\030\017 \001(\005\022\036\n\026v"
  "cu_faultrept_checksum\030\020 \001(\005\"\231\002\n\023Vcu_powe"
  "rstatus_214\022\025\n\rvcu_powermode\030\001 \001(\005\022\032\n\022vc"
  "u_powermodevalid\030\002 \001(\005\022%\n\035replacebattery"
  "stateindication\030\003 \001(\010\022\034\n\024forbidden_aeb_s"
  "ignal\030\004 \001(\010\022\"\n\032bcu_chargedischargecurren"
  "t\030\005 \001(\001\022 \n\030bcu_batt_internalvoltage\030\006 \001("
  "\001\022#\n\033vcu_driverinfo_alivecounter\030\007 \001(\005\022\037"
  "\n\027vcu_driverinfo_checksum\030\010 \001(\005\"\321\001\n\032Ads_"
  "light_horn_command_310\022 \n\030turn_right_lig"
  "ht_command\030\001 \001(\010\022\037\n\027turn_left_light_comm"
  "and\030\002 \001(\010\022\024\n\014horn_command\030\003 \001(\010\022\024\n\014beam_"
  "command\030\004 \001(\005\022#\n\033auto_drivercmd_alivecou"
  "nter\030\005 \001(\005\022\037\n\027auto_drivercmd_checksum\030\006 "
  "\001(\005\"\316\001\n\024Ads_brake_command_46\022\024\n\014drive_en"
  "able\030\001 \001(\010\022\032\n\022auto_brake_command\030\002 \001(\005\022\034"
  "\n\024auto_parking_command\030\003 \001(\010\022 \n\030epb_ramp"
  "auxiliarycommand\030\004 \001(\010\022#\n\033auto_drivercmd"
  "_alivecounter\030\005 \001(\005\022\037\n\027auto_drivercmd_ch"
  "ecksum\030\006 \001(\005\"\300\004\n\023Vcu_brake_report_47\022\031\n\021"
  "brake_enable_resp\030\001 \001(\010\022S\n\021control_mode_"
  "resp\030\002 \001(\01628.apollo.canbus.Vcu_brake_rep"
  "ort_47.Control_mode_respType\022\034\n\024vcu_real"
  "_brake_valid\030\003 \001(\010\022\026\n\016vcu_real_brake\030\004 \001"
  "(\005\022\037\n\027vcu_real_parking_status\030\005 \001(\005\022\036\n\026v"
  "cu_real_parking_valid\030\006 \001(\010\022\037\n\027rampauxil"
  "iaryindication\030\007 \001(\010\022\024\n\014vehicleslope\030\010 \001"
  "(\001\022\"\n\032vcu_brakerept_alivecounter\030\t \001(\005\022\036"
  "\n\026vcu_brakerept_checksum\030\n \001(\005\"\306\001\n\025Contr"
  "ol_mode_respType\022\035\n\031CONTROL_MODE_RESP_ST"
  "ANDBY\020\000\022 \n\034CONTROL_MODE_RESP_AUTO_DRIVE\020"
  "\001\022\037\n\033CONTROL_MODE_RESP_NET_DRIVE\020\002\022$\n CO"
  "NTROL_MODE_RESP_REMOTE_CONTROL\020\003\022%\n!CONT"
  "ROL_MODE_RESP_EMERGENCY_BRAKE\020\004\"\224\004\n\021Vcu_"
  "eps_report_57\022\031\n\021drive_enable_resp\030\001 \001(\010"
  "\022Q\n\021control_mode_resp\030\002 \001(\01626.apollo.can"
  "bus.Vcu_eps_report_57.Control_mode_respT"
  "ype\022\026\n\016vcu_eps_report\030\003 \001(\010\022\026\n\016vcu_real_"
  "angle\030\004 \001(\001\022\034\n\024vcu_real_angle_valid\030\005 \001("
  "\010\022\036\n\026vcu_target_angle_valid\030\006 \001(\010\022\030\n\020vcu"
  "_target_angle\030\007 \001(\001\022!\n\031vcu_eps_rept_aliv"
  "ecounter\030\010 \001(\005\022\035\n\025vcu_eps_rept_checksum\030"
  "\t \001(\005\"\306\001\n\025Control_mode_respType\022\035\n\031CONTR"
  "OL_MODE_RESP_STANDBY\020\000\022 \n\034CONTROL_MODE_R"
  "ESP_AUTO_DRIVE\020\001\022\037\n\033CONTROL_MODE_RESP_NE"
  "T_DRIVE\020\002\022$\n CONTROL_MODE_RESP_REMOTE_CO"
  "NTROL\020\003\022%\n!CONTROL_MODE_RESP_EMERGENCY_B"
  "RAKE\020\004\"\213\001\n\022Ads_eps_command_56\022\024\n\014drive_e"
  "nable\030\001 \001(\010\022\031\n\021auto_target_angle\030\002 \001(\001\022#"
  "\n\033auto_drivercmd_alivecounter\030\003 \001(\005\022\037\n\027a"
  "uto_drivercmd_checksum\030\004 \001(\005\"\357\002\n\024Ads_dri"
  "ve_command_50\022\024\n\014drive_enable\030\001 \001(\010\022V\n\022a"
  "uto_shift_command\030\002 \001(\0162:.apollo.canbus."
  "Ads_drive_command_50.Auto_shift_commandT"
  "ype\022\031\n\021auto_drive_torque\030\003 \001(\001\022#\n\033auto_d"
  "rivercmd_alivecounter\030\004 \001(\005\022\037\n\027auto_driv"
  "ercmd_checksum\030\005 \001(\005\"\207\001\n\026Auto_shift_comm"
  "andType\022\030\n\024AUTO_SHIFT_COMMAND_N\020\000\022\030\n\024AUT"
  "O_SHIFT_COMMAND_D\020\001\022\030\n\024AUTO_SHIFT_COMMAN"
  "D_R\020\002\022\037\n\033AUTO_SHIFT_COMMAND_RESERVED\020\003\"\313"
  "\005\n\023Vcu_drive_report_52\022\031\n\021drive_enable_r"
  "esp\030\001 \001(\010\022S\n\021control_mode_resp\030\002 \001(\01628.a"
  "pollo.canbus.Vcu_drive_report_52.Control"
  "_mode_respType\022M\n\016vcu_real_shift\030\003 \001(\01625"
  ".apollo.canbus.Vcu_drive_report_52.Vcu_r"
  "eal_shiftType\022\034\n\024vcu_real_shift_valid\030\004 "
  "\001(\010\022\035\n\025vcu_real_torque_valid\030\005 \001(\010\022\027\n\017vc"
  "u_real_torque\030\006 \001(\001\022\035\n\025vcu_limitedtorque"
  "mode\030\007 \001(\010\022\"\n\032vcu_driverept_alivecounter"
  "\030\010 \001(\005\022\036\n\026vcu_driverept_checksum\030\t \001(\005\"\306"
  "\001\n\025Control_mode_respType\022\035\n\031CONTROL_MODE"
  "_RESP_STANDBY\020\000\022 \n\034CONTROL_MODE_RESP_AUT"
  "O_DRIVE\020\001\022\037\n\033CONTROL_MODE_RESP_NET_DRIVE"
  "\020\002\022$\n CONTROL_MODE_RESP_REMOTE_CONTROL\020\003"
  "\022%\n!CONTROL_MODE_RESP_EMERGENCY_BRAKE\020\004\""
  "s\n\022Vcu_real_shiftType\022\024\n\020VCU_REAL_SHIFT_"
  "N\020\000\022\024\n\020VCU_REAL_SHIFT_D\020\001\022\024\n\020VCU_REAL_SH"
  "IFT_R\020\002\022\033\n\027VCU_REAL_SHIFT_RESERVED\020\003\"{\n\021"
  "Ads_diagnosis_628\022\021\n\tfaultrank\030\001 \001(\005\022\027\n\017"
  "adas_fault_code\030\002 \001(\005\022\034\n\024adas_softwareve"
  "rsion\030\003 \001(\005\022\034\n\024adas_hardwareversion\030\004 \001("
  "\005\"&\n\nVcu_nm_401\022\030\n\020vcu_sleepcommand\030\001 \001("
  "\010\"\240\005\n\035Vcu_vehicle_status_report_101\022\031\n\021d"
  "rive_enable_resp\030\001 \001(\010\022#\n\033vcu_highvoltag"
  "ecircuitstate\030\002 \001(\010\022\036\n\026vcu_dcdc_enableds"
  "tates\030\003 \001(\010\022]\n\021control_mode_resp\030\004 \001(\0162B"
  ".apollo.canbus.Vcu_vehicle_status_report"
  "_101.Control_mode_respType\022\031\n\021vcu_vehicl"
  "e_speed\030\005 \001(\001\022(\n vcu_lowbatterychargingf"
  "unctionst\030\006 \001(\005\022\027\n\017vcu_display_soc\030\007 \001(\005"
  "\022\027\n\017vcu_motor_speed\030\010 \001(\001\022\033\n\023vcu_motor_d"
  "irection\030\t \001(\005\022\035\n\025vcu_motor_speed_valid\030"
  "\n \001(\010\022#\n\033vcu_statusrept_alivecounter\030\013 \001"
  "(\005\022\037\n\027vcu_statusrept_checksum\030\014 \001(\005\"\306\001\n\025"
  "Control_mode_respType\022\035\n\031CONTROL_MODE_RE"
  "SP_STANDBY\020\000\022 \n\034CONTROL_MODE_RESP_AUTO_D"
  "RIVE\020\001\022\037\n\033CONTROL_MODE_RESP_NET_DRIVE\020\002\022"
  "$\n CONTROL_MODE_RESP_REMOTE_CONTROL\020\003\022%\n"
  "!CONTROL_MODE_RESP_EMERGENCY_BRAKE\020\004\"\271\001\n"
  "\035Vcu_vehicle_info_response_502\022(\n vehicl"
  "e_softwareversion_indicati\030\001 \001(\005\022\017\n\007proj"
  "ect\030\002 \001(\005\022\024\n\014manufacturer\030\003 \001(\005\022\014\n\004year\030"
  "\004 \001(\005\022\r\n\005month\030\005 \001(\005\022\013\n\003day\030\006 \001(\005\022\035\n\025veh"
  "icle_serial_number\030\007 \001(\005\"N\n\022Aeb_diagnosi"
  "s1_626\022\033\n\023aeb_softwareversion\030\001 \001(\001\022\033\n\023a"
  "eb_hardwareversion\030\002 \001(\001\"(\n\020Aeb_diagresp"
  "_718\022\024\n\014aeb_diagresp\030\001 \001(\010\"\306\001\n\020Pas_1st_d"
  "ata_311\022\024\n\014pasdistance4\030\001 \001(\001\022\024\n\014pasdist"
  "ance3\030\002 \001(\001\022\025\n\rpas_f1_status\030\003 \001(\010\022\025\n\rpa"
  "s_f2_status\030\004 \001(\010\022\025\n\rpas_f3_status\030\005 \001(\010"
  "\022\025\n\rpas_f4_status\030\006 \001(\010\022\024\n\014pasdistance2\030"
  "\007 \001(\001\022\024\n\014pasdistance1\030\010 \001(\001\"\306\001\n\020Pas_2nd_"
  "data_312\022\025\n\rpas_b1_status\030\001 \001(\010\022\025\n\rpas_b"
  "2_status\030\002 \001(\010\022\025\n\rpas_b3_status\030\003 \001(\010\022\025\n"
  "\rpas_b4_status\030\004 \001(\010\022\024\n\014pasdistance1\030\005 \001"
  "(\001\022\024\n\014pasdistance2\030\006 \001(\001\022\024\n\014pasdistance3"
  "\030\007 \001(\001\022\024\n\014pasdistance4\030\010 \001(\001\"\352\001\n\024Aeb_whe"
  "elimpulse_355\022\021\n\tflimpulse\030\001 \001(\001\022\026\n\016flim"
  "pulsevalid\030\002 \001(\010\022\021\n\tfrimpulse\030\003 \001(\001\022\026\n\016f"
  "rimpulsevalid\030\004 \001(\010\022\021\n\trlimpulse\030\005 \001(\001\022\026"
  "\n\016rlimpulsevalid\030\006 \001(\010\022\021\n\trrimpulse\030\007 \001("
  "\001\022\026\n\016rrimpulsevalid\030\010 \001(\010\022\024\n\014alivecounte"
  "r\030\t \001(\001\022\020\n\010checksum\030\n \001(\001\"\356\001\n\026Aeb_rearwh"
  "eelspeed_354\022\033\n\023wheelspeed_rl_valid\030\001 \001("
  "\010\022\025\n\rwheelspeed_rl\030\002 \001(\001\022\033\n\023wheelspeed_r"
  "r_valid\030\003 \001(\010\022\025\n\rwheelspeed_rr\030\004 \001(\001\022\034\n\024"
  "wheelspeed_rl_direct\030\005 \001(\001\022\034\n\024wheelspeed"
  "_rr_direct\030\006 \001(\001\022\031\n\021alivecounter_rear\030\007 "
  "\001(\001\022\025\n\rchecksum_rear\030\010 \001(\001\"\275\002\n\027Aeb_front"
  "wheelspeed_353\022\031\n\021vehiclespeedvalid\030\001 \001("
  "\010\022\024\n\014vehiclespeed\030\002 \001(\001\022\031\n\021vehiclerealdi"
  "rect\030\003 \001(\001\022\033\n\023wheelspeed_fl_valid\030\004 \001(\010\022"
  "\025\n\rwheelspeed_fl\030\005 \001(\001\022\033\n\023wheelspeed_fr_"
  "valid\030\006 \001(\010\022\025\n\rwheelspeed_fr\030\007 \001(\001\022\034\n\024wh"
  "eelspeed_fl_direct\030\010 \001(\001\022\034\n\024wheelspeed_f"
  "r_direct\030\t \001(\001\022\032\n\022alivecounter_front\030\n \001"
  "(\001\022\026\n\016checksum_front\030\013 \001(\001\"\217\013\n\nNeolix_ed"
  "u\022=\n\022aeb_systemstate_11\030\001 \001(\0132!.apollo.c"
  "anbus.Aeb_systemstate_11\022U\n\036vcu_vehicle_"
  "fault_response_201\030\002 \001(\0132-.apollo.canbus"
  ".Vcu_vehicle_fault_response_201\022\?\n\023vcu_p"
  "owerstatus_214\030\003 \001(\0132\".apollo.canbus.Vcu"
  "_powerstatus_214\022M\n\032ads_light_horn_comma"
  "nd_310\030\004 \001(\0132).apollo.canbus.Ads_light_h"
  "orn_command_310\022A\n\024ads_brake_command_46\030"
  "\005 \001(\0132#.apollo.canbus.Ads_brake_command_"
  "46\022\?\n\023vcu_brake_report_47\030\006 \001(\0132\".apollo"
  ".canbus.Vcu_brake_report_47\022;\n\021vcu_eps_r"
  "eport_57\030\007 \001(\0132 .apollo.canbus.Vcu_eps_r"
  "eport_57\022=\n\022ads_eps_command_56\030\010 \001(\0132!.a"
  "pollo.canbus.Ads_eps_command_56\022A\n\024ads_d"
  "rive_command_50\030\t \001(\0132#.apollo.canbus.Ad"
  "s_drive_command_50\022\?\n\023vcu_drive_report_5"
  "2\030\n \001(\0132\".apollo.canbus.Vcu_drive_report"
  "_52\022;\n\021ads_diagnosis_628\030\013 \001(\0132 .apollo."
  "canbus.Ads_diagnosis_628\022-\n\nvcu_nm_401\030\014"
  " \001(\0132\031.apollo.canbus.Vcu_nm_401\022S\n\035vcu_v"
  "ehicle_status_report_101\030\r \001(\0132,.apollo."
  "canbus.Vcu_vehicle_status_report_101\022S\n\035"
  "vcu_vehicle_info_response_502\030\016 \001(\0132,.ap"
  "ollo.canbus.Vcu_vehicle_info_response_50"
  "2\022=\n\022aeb_diagnosis1_626\030\017 \001(\0132!.apollo.c"
  "anbus.Aeb_diagnosis1_626\0229\n\020aeb_diagresp"
  "_718\030\020 \001(\0132\037.apollo.canbus.Aeb_diagresp_"
  "718\0229\n\020pas_1st_data_311\030\021 \001(\0132\037.apollo.c"
  "anbus.Pas_1st_data_311\0229\n\020pas_2nd_data_3"
  "12\030\022 \001(\0132\037.apollo.canbus.Pas_2nd_data_31"
  "2\022A\n\024aeb_wheelimpulse_355\030\023 \001(\0132#.apollo"
  ".canbus.Aeb_wheelimpulse_355\022E\n\026aeb_rear"
  "wheelspeed_354\030\024 \001(\0132%.apollo.canbus.Aeb"
  "_rearwheelspeed_354\022G\n\027aeb_frontwheelspe"
  "ed_353\030\025 \001(\0132&.apollo.canbus.Aeb_frontwh"
  "eelspeed_353"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto = {
  false, false, 7812, descriptor_table_protodef_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto, "modules/canbus/proto/neolix_edu.proto", 
  &descriptor_table_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto_once, nullptr, 0, 22,
  schemas, file_default_instances, TableStruct_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto::offsets,
  file_level_metadata_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto, file_level_enum_descriptors_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto, file_level_service_descriptors_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto_getter() {
  return &descriptor_table_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto(&descriptor_table_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto);
namespace apollo {
namespace canbus {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Vcu_brake_report_47_Control_mode_respType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto[0];
}
bool Vcu_brake_report_47_Control_mode_respType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Vcu_brake_report_47_Control_mode_respType Vcu_brake_report_47::CONTROL_MODE_RESP_STANDBY;
constexpr Vcu_brake_report_47_Control_mode_respType Vcu_brake_report_47::CONTROL_MODE_RESP_AUTO_DRIVE;
constexpr Vcu_brake_report_47_Control_mode_respType Vcu_brake_report_47::CONTROL_MODE_RESP_NET_DRIVE;
constexpr Vcu_brake_report_47_Control_mode_respType Vcu_brake_report_47::CONTROL_MODE_RESP_REMOTE_CONTROL;
constexpr Vcu_brake_report_47_Control_mode_respType Vcu_brake_report_47::CONTROL_MODE_RESP_EMERGENCY_BRAKE;
constexpr Vcu_brake_report_47_Control_mode_respType Vcu_brake_report_47::Control_mode_respType_MIN;
constexpr Vcu_brake_report_47_Control_mode_respType Vcu_brake_report_47::Control_mode_respType_MAX;
constexpr int Vcu_brake_report_47::Control_mode_respType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Vcu_eps_report_57_Control_mode_respType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto[1];
}
bool Vcu_eps_report_57_Control_mode_respType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Vcu_eps_report_57_Control_mode_respType Vcu_eps_report_57::CONTROL_MODE_RESP_STANDBY;
constexpr Vcu_eps_report_57_Control_mode_respType Vcu_eps_report_57::CONTROL_MODE_RESP_AUTO_DRIVE;
constexpr Vcu_eps_report_57_Control_mode_respType Vcu_eps_report_57::CONTROL_MODE_RESP_NET_DRIVE;
constexpr Vcu_eps_report_57_Control_mode_respType Vcu_eps_report_57::CONTROL_MODE_RESP_REMOTE_CONTROL;
constexpr Vcu_eps_report_57_Control_mode_respType Vcu_eps_report_57::CONTROL_MODE_RESP_EMERGENCY_BRAKE;
constexpr Vcu_eps_report_57_Control_mode_respType Vcu_eps_report_57::Control_mode_respType_MIN;
constexpr Vcu_eps_report_57_Control_mode_respType Vcu_eps_report_57::Control_mode_respType_MAX;
constexpr int Vcu_eps_report_57::Control_mode_respType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Ads_drive_command_50_Auto_shift_commandType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto[2];
}
bool Ads_drive_command_50_Auto_shift_commandType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Ads_drive_command_50_Auto_shift_commandType Ads_drive_command_50::AUTO_SHIFT_COMMAND_N;
constexpr Ads_drive_command_50_Auto_shift_commandType Ads_drive_command_50::AUTO_SHIFT_COMMAND_D;
constexpr Ads_drive_command_50_Auto_shift_commandType Ads_drive_command_50::AUTO_SHIFT_COMMAND_R;
constexpr Ads_drive_command_50_Auto_shift_commandType Ads_drive_command_50::AUTO_SHIFT_COMMAND_RESERVED;
constexpr Ads_drive_command_50_Auto_shift_commandType Ads_drive_command_50::Auto_shift_commandType_MIN;
constexpr Ads_drive_command_50_Auto_shift_commandType Ads_drive_command_50::Auto_shift_commandType_MAX;
constexpr int Ads_drive_command_50::Auto_shift_commandType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Vcu_drive_report_52_Control_mode_respType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto[3];
}
bool Vcu_drive_report_52_Control_mode_respType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Vcu_drive_report_52_Control_mode_respType Vcu_drive_report_52::CONTROL_MODE_RESP_STANDBY;
constexpr Vcu_drive_report_52_Control_mode_respType Vcu_drive_report_52::CONTROL_MODE_RESP_AUTO_DRIVE;
constexpr Vcu_drive_report_52_Control_mode_respType Vcu_drive_report_52::CONTROL_MODE_RESP_NET_DRIVE;
constexpr Vcu_drive_report_52_Control_mode_respType Vcu_drive_report_52::CONTROL_MODE_RESP_REMOTE_CONTROL;
constexpr Vcu_drive_report_52_Control_mode_respType Vcu_drive_report_52::CONTROL_MODE_RESP_EMERGENCY_BRAKE;
constexpr Vcu_drive_report_52_Control_mode_respType Vcu_drive_report_52::Control_mode_respType_MIN;
constexpr Vcu_drive_report_52_Control_mode_respType Vcu_drive_report_52::Control_mode_respType_MAX;
constexpr int Vcu_drive_report_52::Control_mode_respType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Vcu_drive_report_52_Vcu_real_shiftType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto[4];
}
bool Vcu_drive_report_52_Vcu_real_shiftType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Vcu_drive_report_52_Vcu_real_shiftType Vcu_drive_report_52::VCU_REAL_SHIFT_N;
constexpr Vcu_drive_report_52_Vcu_real_shiftType Vcu_drive_report_52::VCU_REAL_SHIFT_D;
constexpr Vcu_drive_report_52_Vcu_real_shiftType Vcu_drive_report_52::VCU_REAL_SHIFT_R;
constexpr Vcu_drive_report_52_Vcu_real_shiftType Vcu_drive_report_52::VCU_REAL_SHIFT_RESERVED;
constexpr Vcu_drive_report_52_Vcu_real_shiftType Vcu_drive_report_52::Vcu_real_shiftType_MIN;
constexpr Vcu_drive_report_52_Vcu_real_shiftType Vcu_drive_report_52::Vcu_real_shiftType_MAX;
constexpr int Vcu_drive_report_52::Vcu_real_shiftType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Vcu_vehicle_status_report_101_Control_mode_respType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto[5];
}
bool Vcu_vehicle_status_report_101_Control_mode_respType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Vcu_vehicle_status_report_101_Control_mode_respType Vcu_vehicle_status_report_101::CONTROL_MODE_RESP_STANDBY;
constexpr Vcu_vehicle_status_report_101_Control_mode_respType Vcu_vehicle_status_report_101::CONTROL_MODE_RESP_AUTO_DRIVE;
constexpr Vcu_vehicle_status_report_101_Control_mode_respType Vcu_vehicle_status_report_101::CONTROL_MODE_RESP_NET_DRIVE;
constexpr Vcu_vehicle_status_report_101_Control_mode_respType Vcu_vehicle_status_report_101::CONTROL_MODE_RESP_REMOTE_CONTROL;
constexpr Vcu_vehicle_status_report_101_Control_mode_respType Vcu_vehicle_status_report_101::CONTROL_MODE_RESP_EMERGENCY_BRAKE;
constexpr Vcu_vehicle_status_report_101_Control_mode_respType Vcu_vehicle_status_report_101::Control_mode_respType_MIN;
constexpr Vcu_vehicle_status_report_101_Control_mode_respType Vcu_vehicle_status_report_101::Control_mode_respType_MAX;
constexpr int Vcu_vehicle_status_report_101::Control_mode_respType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class Aeb_systemstate_11::_Internal {
 public:
  using HasBits = decltype(std::declval<Aeb_systemstate_11>()._has_bits_);
  static void set_has_aeb_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_aeb_brakestate(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_faultrank(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_currenttemperature(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_pas_f1_stop(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_pas_f2_stop(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_pas_f3_stop(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_pas_f4_stop(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_pas_b1_stop(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_pas_b2_stop(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_pas_b3_stop(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_pas_b4_stop(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_aeb_livecounter_rear(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_aeb_cheksum(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
};

Aeb_systemstate_11::Aeb_systemstate_11(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Aeb_systemstate_11)
}
Aeb_systemstate_11::Aeb_systemstate_11(const Aeb_systemstate_11& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&aeb_state_, &from.aeb_state_,
    static_cast<size_t>(reinterpret_cast<char*>(&aeb_cheksum_) -
    reinterpret_cast<char*>(&aeb_state_)) + sizeof(aeb_cheksum_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Aeb_systemstate_11)
}

void Aeb_systemstate_11::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&aeb_state_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&aeb_cheksum_) -
    reinterpret_cast<char*>(&aeb_state_)) + sizeof(aeb_cheksum_));
}

Aeb_systemstate_11::~Aeb_systemstate_11() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Aeb_systemstate_11)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Aeb_systemstate_11::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Aeb_systemstate_11::ArenaDtor(void* object) {
  Aeb_systemstate_11* _this = reinterpret_cast< Aeb_systemstate_11* >(object);
  (void)_this;
}
void Aeb_systemstate_11::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Aeb_systemstate_11::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Aeb_systemstate_11::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Aeb_systemstate_11)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&aeb_state_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pas_f4_stop_) -
        reinterpret_cast<char*>(&aeb_state_)) + sizeof(pas_f4_stop_));
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&pas_b1_stop_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&aeb_cheksum_) -
        reinterpret_cast<char*>(&pas_b1_stop_)) + sizeof(aeb_cheksum_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Aeb_systemstate_11::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 aeb_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_aeb_state(&has_bits);
          aeb_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool aeb_brakestate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_aeb_brakestate(&has_bits);
          aeb_brakestate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 faultrank = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_faultrank(&has_bits);
          faultrank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 currenttemperature = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_currenttemperature(&has_bits);
          currenttemperature_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool pas_f1_stop = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_pas_f1_stop(&has_bits);
          pas_f1_stop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool pas_f2_stop = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_pas_f2_stop(&has_bits);
          pas_f2_stop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool pas_f3_stop = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_pas_f3_stop(&has_bits);
          pas_f3_stop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool pas_f4_stop = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_pas_f4_stop(&has_bits);
          pas_f4_stop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool pas_b1_stop = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_pas_b1_stop(&has_bits);
          pas_b1_stop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool pas_b2_stop = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_pas_b2_stop(&has_bits);
          pas_b2_stop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool pas_b3_stop = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_pas_b3_stop(&has_bits);
          pas_b3_stop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool pas_b4_stop = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_pas_b4_stop(&has_bits);
          pas_b4_stop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 aeb_livecounter_rear = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_aeb_livecounter_rear(&has_bits);
          aeb_livecounter_rear_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 aeb_cheksum = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_aeb_cheksum(&has_bits);
          aeb_cheksum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Aeb_systemstate_11::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Aeb_systemstate_11)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 aeb_state = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_aeb_state(), target);
  }

  // optional bool aeb_brakestate = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_aeb_brakestate(), target);
  }

  // optional int32 faultrank = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_faultrank(), target);
  }

  // optional int32 currenttemperature = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_currenttemperature(), target);
  }

  // optional bool pas_f1_stop = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_pas_f1_stop(), target);
  }

  // optional bool pas_f2_stop = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_pas_f2_stop(), target);
  }

  // optional bool pas_f3_stop = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_pas_f3_stop(), target);
  }

  // optional bool pas_f4_stop = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_pas_f4_stop(), target);
  }

  // optional bool pas_b1_stop = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_pas_b1_stop(), target);
  }

  // optional bool pas_b2_stop = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_pas_b2_stop(), target);
  }

  // optional bool pas_b3_stop = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_pas_b3_stop(), target);
  }

  // optional bool pas_b4_stop = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_pas_b4_stop(), target);
  }

  // optional int32 aeb_livecounter_rear = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_aeb_livecounter_rear(), target);
  }

  // optional int32 aeb_cheksum = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_aeb_cheksum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Aeb_systemstate_11)
  return target;
}

size_t Aeb_systemstate_11::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Aeb_systemstate_11)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 aeb_state = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_aeb_state());
    }

    // optional int32 faultrank = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_faultrank());
    }

    // optional int32 currenttemperature = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_currenttemperature());
    }

    // optional bool aeb_brakestate = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool pas_f1_stop = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool pas_f2_stop = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool pas_f3_stop = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool pas_f4_stop = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional bool pas_b1_stop = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool pas_b2_stop = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool pas_b3_stop = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool pas_b4_stop = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional int32 aeb_livecounter_rear = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_aeb_livecounter_rear());
    }

    // optional int32 aeb_cheksum = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_aeb_cheksum());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Aeb_systemstate_11::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Aeb_systemstate_11::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Aeb_systemstate_11::GetClassData() const { return &_class_data_; }

void Aeb_systemstate_11::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Aeb_systemstate_11 *>(to)->MergeFrom(
      static_cast<const Aeb_systemstate_11 &>(from));
}


void Aeb_systemstate_11::MergeFrom(const Aeb_systemstate_11& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Aeb_systemstate_11)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      aeb_state_ = from.aeb_state_;
    }
    if (cached_has_bits & 0x00000002u) {
      faultrank_ = from.faultrank_;
    }
    if (cached_has_bits & 0x00000004u) {
      currenttemperature_ = from.currenttemperature_;
    }
    if (cached_has_bits & 0x00000008u) {
      aeb_brakestate_ = from.aeb_brakestate_;
    }
    if (cached_has_bits & 0x00000010u) {
      pas_f1_stop_ = from.pas_f1_stop_;
    }
    if (cached_has_bits & 0x00000020u) {
      pas_f2_stop_ = from.pas_f2_stop_;
    }
    if (cached_has_bits & 0x00000040u) {
      pas_f3_stop_ = from.pas_f3_stop_;
    }
    if (cached_has_bits & 0x00000080u) {
      pas_f4_stop_ = from.pas_f4_stop_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      pas_b1_stop_ = from.pas_b1_stop_;
    }
    if (cached_has_bits & 0x00000200u) {
      pas_b2_stop_ = from.pas_b2_stop_;
    }
    if (cached_has_bits & 0x00000400u) {
      pas_b3_stop_ = from.pas_b3_stop_;
    }
    if (cached_has_bits & 0x00000800u) {
      pas_b4_stop_ = from.pas_b4_stop_;
    }
    if (cached_has_bits & 0x00001000u) {
      aeb_livecounter_rear_ = from.aeb_livecounter_rear_;
    }
    if (cached_has_bits & 0x00002000u) {
      aeb_cheksum_ = from.aeb_cheksum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Aeb_systemstate_11::CopyFrom(const Aeb_systemstate_11& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Aeb_systemstate_11)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Aeb_systemstate_11::IsInitialized() const {
  return true;
}

void Aeb_systemstate_11::InternalSwap(Aeb_systemstate_11* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Aeb_systemstate_11, aeb_cheksum_)
      + sizeof(Aeb_systemstate_11::aeb_cheksum_)
      - PROTOBUF_FIELD_OFFSET(Aeb_systemstate_11, aeb_state_)>(
          reinterpret_cast<char*>(&aeb_state_),
          reinterpret_cast<char*>(&other->aeb_state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Aeb_systemstate_11::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto[0]);
}

// ===================================================================

class Vcu_vehicle_fault_response_201::_Internal {
 public:
  using HasBits = decltype(std::declval<Vcu_vehicle_fault_response_201>()._has_bits_);
  static void set_has_vehicle_error_indicationsvcu(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_brake_system_errorehb(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_eps_error(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_motor_error(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_epb_error(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_high_voltage_battery_errorbcu(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_automode_exit_reason_losscommuni(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_automode_exit_reason_reqsignalno(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_automode_exit_reason_low_power(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_automode_exit_reason_highvolt(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_automode_exit_reason_vehicle_flt(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_automode_exit_reason_press_emerg(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_automode_exit_reason_press_remot(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_automode_exit_reason_pdu_control(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_vcu_faultrept_alivecounter(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_vcu_faultrept_checksum(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
};

Vcu_vehicle_fault_response_201::Vcu_vehicle_fault_response_201(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Vcu_vehicle_fault_response_201)
}
Vcu_vehicle_fault_response_201::Vcu_vehicle_fault_response_201(const Vcu_vehicle_fault_response_201& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&vehicle_error_indicationsvcu_, &from.vehicle_error_indicationsvcu_,
    static_cast<size_t>(reinterpret_cast<char*>(&vcu_faultrept_checksum_) -
    reinterpret_cast<char*>(&vehicle_error_indicationsvcu_)) + sizeof(vcu_faultrept_checksum_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Vcu_vehicle_fault_response_201)
}

void Vcu_vehicle_fault_response_201::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&vehicle_error_indicationsvcu_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&vcu_faultrept_checksum_) -
    reinterpret_cast<char*>(&vehicle_error_indicationsvcu_)) + sizeof(vcu_faultrept_checksum_));
}

Vcu_vehicle_fault_response_201::~Vcu_vehicle_fault_response_201() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Vcu_vehicle_fault_response_201)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Vcu_vehicle_fault_response_201::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vcu_vehicle_fault_response_201::ArenaDtor(void* object) {
  Vcu_vehicle_fault_response_201* _this = reinterpret_cast< Vcu_vehicle_fault_response_201* >(object);
  (void)_this;
}
void Vcu_vehicle_fault_response_201::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Vcu_vehicle_fault_response_201::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Vcu_vehicle_fault_response_201::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Vcu_vehicle_fault_response_201)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&vehicle_error_indicationsvcu_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&automode_exit_reason_reqsignalno_) -
        reinterpret_cast<char*>(&vehicle_error_indicationsvcu_)) + sizeof(automode_exit_reason_reqsignalno_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&automode_exit_reason_low_power_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&vcu_faultrept_checksum_) -
        reinterpret_cast<char*>(&automode_exit_reason_low_power_)) + sizeof(vcu_faultrept_checksum_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vcu_vehicle_fault_response_201::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 vehicle_error_indicationsvcu = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_vehicle_error_indicationsvcu(&has_bits);
          vehicle_error_indicationsvcu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 brake_system_errorehb = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_brake_system_errorehb(&has_bits);
          brake_system_errorehb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 eps_error = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_eps_error(&has_bits);
          eps_error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 motor_error = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_motor_error(&has_bits);
          motor_error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 epb_error = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_epb_error(&has_bits);
          epb_error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 high_voltage_battery_errorbcu = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_high_voltage_battery_errorbcu(&has_bits);
          high_voltage_battery_errorbcu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool automode_exit_reason_losscommuni = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_automode_exit_reason_losscommuni(&has_bits);
          automode_exit_reason_losscommuni_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool automode_exit_reason_reqsignalno = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_automode_exit_reason_reqsignalno(&has_bits);
          automode_exit_reason_reqsignalno_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool automode_exit_reason_low_power = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_automode_exit_reason_low_power(&has_bits);
          automode_exit_reason_low_power_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool automode_exit_reason_highvolt = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_automode_exit_reason_highvolt(&has_bits);
          automode_exit_reason_highvolt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool automode_exit_reason_vehicle_flt = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_automode_exit_reason_vehicle_flt(&has_bits);
          automode_exit_reason_vehicle_flt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool automode_exit_reason_press_emerg = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_automode_exit_reason_press_emerg(&has_bits);
          automode_exit_reason_press_emerg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool automode_exit_reason_press_remot = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_automode_exit_reason_press_remot(&has_bits);
          automode_exit_reason_press_remot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool automode_exit_reason_pdu_control = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_automode_exit_reason_pdu_control(&has_bits);
          automode_exit_reason_pdu_control_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 vcu_faultrept_alivecounter = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_vcu_faultrept_alivecounter(&has_bits);
          vcu_faultrept_alivecounter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 vcu_faultrept_checksum = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_vcu_faultrept_checksum(&has_bits);
          vcu_faultrept_checksum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vcu_vehicle_fault_response_201::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Vcu_vehicle_fault_response_201)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 vehicle_error_indicationsvcu = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_vehicle_error_indicationsvcu(), target);
  }

  // optional int32 brake_system_errorehb = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_brake_system_errorehb(), target);
  }

  // optional int32 eps_error = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_eps_error(), target);
  }

  // optional int32 motor_error = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_motor_error(), target);
  }

  // optional int32 epb_error = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_epb_error(), target);
  }

  // optional int32 high_voltage_battery_errorbcu = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_high_voltage_battery_errorbcu(), target);
  }

  // optional bool automode_exit_reason_losscommuni = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_automode_exit_reason_losscommuni(), target);
  }

  // optional bool automode_exit_reason_reqsignalno = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_automode_exit_reason_reqsignalno(), target);
  }

  // optional bool automode_exit_reason_low_power = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_automode_exit_reason_low_power(), target);
  }

  // optional bool automode_exit_reason_highvolt = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_automode_exit_reason_highvolt(), target);
  }

  // optional bool automode_exit_reason_vehicle_flt = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_automode_exit_reason_vehicle_flt(), target);
  }

  // optional bool automode_exit_reason_press_emerg = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_automode_exit_reason_press_emerg(), target);
  }

  // optional bool automode_exit_reason_press_remot = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_automode_exit_reason_press_remot(), target);
  }

  // optional bool automode_exit_reason_pdu_control = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_automode_exit_reason_pdu_control(), target);
  }

  // optional int32 vcu_faultrept_alivecounter = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_vcu_faultrept_alivecounter(), target);
  }

  // optional int32 vcu_faultrept_checksum = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_vcu_faultrept_checksum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Vcu_vehicle_fault_response_201)
  return target;
}

size_t Vcu_vehicle_fault_response_201::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Vcu_vehicle_fault_response_201)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 vehicle_error_indicationsvcu = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_vehicle_error_indicationsvcu());
    }

    // optional int32 brake_system_errorehb = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_brake_system_errorehb());
    }

    // optional int32 eps_error = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_eps_error());
    }

    // optional int32 motor_error = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_motor_error());
    }

    // optional int32 epb_error = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_epb_error());
    }

    // optional int32 high_voltage_battery_errorbcu = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_high_voltage_battery_errorbcu());
    }

    // optional bool automode_exit_reason_losscommuni = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool automode_exit_reason_reqsignalno = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool automode_exit_reason_low_power = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool automode_exit_reason_highvolt = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool automode_exit_reason_vehicle_flt = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool automode_exit_reason_press_emerg = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool automode_exit_reason_press_remot = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional bool automode_exit_reason_pdu_control = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional int32 vcu_faultrept_alivecounter = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_vcu_faultrept_alivecounter());
    }

    // optional int32 vcu_faultrept_checksum = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_vcu_faultrept_checksum());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vcu_vehicle_fault_response_201::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Vcu_vehicle_fault_response_201::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vcu_vehicle_fault_response_201::GetClassData() const { return &_class_data_; }

void Vcu_vehicle_fault_response_201::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Vcu_vehicle_fault_response_201 *>(to)->MergeFrom(
      static_cast<const Vcu_vehicle_fault_response_201 &>(from));
}


void Vcu_vehicle_fault_response_201::MergeFrom(const Vcu_vehicle_fault_response_201& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Vcu_vehicle_fault_response_201)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      vehicle_error_indicationsvcu_ = from.vehicle_error_indicationsvcu_;
    }
    if (cached_has_bits & 0x00000002u) {
      brake_system_errorehb_ = from.brake_system_errorehb_;
    }
    if (cached_has_bits & 0x00000004u) {
      eps_error_ = from.eps_error_;
    }
    if (cached_has_bits & 0x00000008u) {
      motor_error_ = from.motor_error_;
    }
    if (cached_has_bits & 0x00000010u) {
      epb_error_ = from.epb_error_;
    }
    if (cached_has_bits & 0x00000020u) {
      high_voltage_battery_errorbcu_ = from.high_voltage_battery_errorbcu_;
    }
    if (cached_has_bits & 0x00000040u) {
      automode_exit_reason_losscommuni_ = from.automode_exit_reason_losscommuni_;
    }
    if (cached_has_bits & 0x00000080u) {
      automode_exit_reason_reqsignalno_ = from.automode_exit_reason_reqsignalno_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      automode_exit_reason_low_power_ = from.automode_exit_reason_low_power_;
    }
    if (cached_has_bits & 0x00000200u) {
      automode_exit_reason_highvolt_ = from.automode_exit_reason_highvolt_;
    }
    if (cached_has_bits & 0x00000400u) {
      automode_exit_reason_vehicle_flt_ = from.automode_exit_reason_vehicle_flt_;
    }
    if (cached_has_bits & 0x00000800u) {
      automode_exit_reason_press_emerg_ = from.automode_exit_reason_press_emerg_;
    }
    if (cached_has_bits & 0x00001000u) {
      automode_exit_reason_press_remot_ = from.automode_exit_reason_press_remot_;
    }
    if (cached_has_bits & 0x00002000u) {
      automode_exit_reason_pdu_control_ = from.automode_exit_reason_pdu_control_;
    }
    if (cached_has_bits & 0x00004000u) {
      vcu_faultrept_alivecounter_ = from.vcu_faultrept_alivecounter_;
    }
    if (cached_has_bits & 0x00008000u) {
      vcu_faultrept_checksum_ = from.vcu_faultrept_checksum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vcu_vehicle_fault_response_201::CopyFrom(const Vcu_vehicle_fault_response_201& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Vcu_vehicle_fault_response_201)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vcu_vehicle_fault_response_201::IsInitialized() const {
  return true;
}

void Vcu_vehicle_fault_response_201::InternalSwap(Vcu_vehicle_fault_response_201* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vcu_vehicle_fault_response_201, vcu_faultrept_checksum_)
      + sizeof(Vcu_vehicle_fault_response_201::vcu_faultrept_checksum_)
      - PROTOBUF_FIELD_OFFSET(Vcu_vehicle_fault_response_201, vehicle_error_indicationsvcu_)>(
          reinterpret_cast<char*>(&vehicle_error_indicationsvcu_),
          reinterpret_cast<char*>(&other->vehicle_error_indicationsvcu_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vcu_vehicle_fault_response_201::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto[1]);
}

// ===================================================================

class Vcu_powerstatus_214::_Internal {
 public:
  using HasBits = decltype(std::declval<Vcu_powerstatus_214>()._has_bits_);
  static void set_has_vcu_powermode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_vcu_powermodevalid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_replacebatterystateindication(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_forbidden_aeb_signal(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_bcu_chargedischargecurrent(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_bcu_batt_internalvoltage(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_vcu_driverinfo_alivecounter(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_vcu_driverinfo_checksum(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

Vcu_powerstatus_214::Vcu_powerstatus_214(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Vcu_powerstatus_214)
}
Vcu_powerstatus_214::Vcu_powerstatus_214(const Vcu_powerstatus_214& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&vcu_powermode_, &from.vcu_powermode_,
    static_cast<size_t>(reinterpret_cast<char*>(&vcu_driverinfo_checksum_) -
    reinterpret_cast<char*>(&vcu_powermode_)) + sizeof(vcu_driverinfo_checksum_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Vcu_powerstatus_214)
}

void Vcu_powerstatus_214::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&vcu_powermode_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&vcu_driverinfo_checksum_) -
    reinterpret_cast<char*>(&vcu_powermode_)) + sizeof(vcu_driverinfo_checksum_));
}

Vcu_powerstatus_214::~Vcu_powerstatus_214() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Vcu_powerstatus_214)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Vcu_powerstatus_214::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vcu_powerstatus_214::ArenaDtor(void* object) {
  Vcu_powerstatus_214* _this = reinterpret_cast< Vcu_powerstatus_214* >(object);
  (void)_this;
}
void Vcu_powerstatus_214::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Vcu_powerstatus_214::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Vcu_powerstatus_214::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Vcu_powerstatus_214)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&vcu_powermode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&vcu_driverinfo_checksum_) -
        reinterpret_cast<char*>(&vcu_powermode_)) + sizeof(vcu_driverinfo_checksum_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vcu_powerstatus_214::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 vcu_powermode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_vcu_powermode(&has_bits);
          vcu_powermode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 vcu_powermodevalid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_vcu_powermodevalid(&has_bits);
          vcu_powermodevalid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool replacebatterystateindication = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_replacebatterystateindication(&has_bits);
          replacebatterystateindication_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool forbidden_aeb_signal = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_forbidden_aeb_signal(&has_bits);
          forbidden_aeb_signal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double bcu_chargedischargecurrent = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_bcu_chargedischargecurrent(&has_bits);
          bcu_chargedischargecurrent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double bcu_batt_internalvoltage = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_bcu_batt_internalvoltage(&has_bits);
          bcu_batt_internalvoltage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional int32 vcu_driverinfo_alivecounter = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_vcu_driverinfo_alivecounter(&has_bits);
          vcu_driverinfo_alivecounter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 vcu_driverinfo_checksum = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_vcu_driverinfo_checksum(&has_bits);
          vcu_driverinfo_checksum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vcu_powerstatus_214::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Vcu_powerstatus_214)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 vcu_powermode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_vcu_powermode(), target);
  }

  // optional int32 vcu_powermodevalid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_vcu_powermodevalid(), target);
  }

  // optional bool replacebatterystateindication = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_replacebatterystateindication(), target);
  }

  // optional bool forbidden_aeb_signal = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_forbidden_aeb_signal(), target);
  }

  // optional double bcu_chargedischargecurrent = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_bcu_chargedischargecurrent(), target);
  }

  // optional double bcu_batt_internalvoltage = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_bcu_batt_internalvoltage(), target);
  }

  // optional int32 vcu_driverinfo_alivecounter = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_vcu_driverinfo_alivecounter(), target);
  }

  // optional int32 vcu_driverinfo_checksum = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_vcu_driverinfo_checksum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Vcu_powerstatus_214)
  return target;
}

size_t Vcu_powerstatus_214::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Vcu_powerstatus_214)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 vcu_powermode = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_vcu_powermode());
    }

    // optional int32 vcu_powermodevalid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_vcu_powermodevalid());
    }

    // optional bool replacebatterystateindication = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool forbidden_aeb_signal = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional int32 vcu_driverinfo_alivecounter = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_vcu_driverinfo_alivecounter());
    }

    // optional double bcu_chargedischargecurrent = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double bcu_batt_internalvoltage = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional int32 vcu_driverinfo_checksum = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_vcu_driverinfo_checksum());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vcu_powerstatus_214::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Vcu_powerstatus_214::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vcu_powerstatus_214::GetClassData() const { return &_class_data_; }

void Vcu_powerstatus_214::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Vcu_powerstatus_214 *>(to)->MergeFrom(
      static_cast<const Vcu_powerstatus_214 &>(from));
}


void Vcu_powerstatus_214::MergeFrom(const Vcu_powerstatus_214& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Vcu_powerstatus_214)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      vcu_powermode_ = from.vcu_powermode_;
    }
    if (cached_has_bits & 0x00000002u) {
      vcu_powermodevalid_ = from.vcu_powermodevalid_;
    }
    if (cached_has_bits & 0x00000004u) {
      replacebatterystateindication_ = from.replacebatterystateindication_;
    }
    if (cached_has_bits & 0x00000008u) {
      forbidden_aeb_signal_ = from.forbidden_aeb_signal_;
    }
    if (cached_has_bits & 0x00000010u) {
      vcu_driverinfo_alivecounter_ = from.vcu_driverinfo_alivecounter_;
    }
    if (cached_has_bits & 0x00000020u) {
      bcu_chargedischargecurrent_ = from.bcu_chargedischargecurrent_;
    }
    if (cached_has_bits & 0x00000040u) {
      bcu_batt_internalvoltage_ = from.bcu_batt_internalvoltage_;
    }
    if (cached_has_bits & 0x00000080u) {
      vcu_driverinfo_checksum_ = from.vcu_driverinfo_checksum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vcu_powerstatus_214::CopyFrom(const Vcu_powerstatus_214& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Vcu_powerstatus_214)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vcu_powerstatus_214::IsInitialized() const {
  return true;
}

void Vcu_powerstatus_214::InternalSwap(Vcu_powerstatus_214* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vcu_powerstatus_214, vcu_driverinfo_checksum_)
      + sizeof(Vcu_powerstatus_214::vcu_driverinfo_checksum_)
      - PROTOBUF_FIELD_OFFSET(Vcu_powerstatus_214, vcu_powermode_)>(
          reinterpret_cast<char*>(&vcu_powermode_),
          reinterpret_cast<char*>(&other->vcu_powermode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vcu_powerstatus_214::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto[2]);
}

// ===================================================================

class Ads_light_horn_command_310::_Internal {
 public:
  using HasBits = decltype(std::declval<Ads_light_horn_command_310>()._has_bits_);
  static void set_has_turn_right_light_command(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_turn_left_light_command(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_horn_command(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_beam_command(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_auto_drivercmd_alivecounter(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_auto_drivercmd_checksum(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

Ads_light_horn_command_310::Ads_light_horn_command_310(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Ads_light_horn_command_310)
}
Ads_light_horn_command_310::Ads_light_horn_command_310(const Ads_light_horn_command_310& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&turn_right_light_command_, &from.turn_right_light_command_,
    static_cast<size_t>(reinterpret_cast<char*>(&auto_drivercmd_checksum_) -
    reinterpret_cast<char*>(&turn_right_light_command_)) + sizeof(auto_drivercmd_checksum_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Ads_light_horn_command_310)
}

void Ads_light_horn_command_310::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&turn_right_light_command_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&auto_drivercmd_checksum_) -
    reinterpret_cast<char*>(&turn_right_light_command_)) + sizeof(auto_drivercmd_checksum_));
}

Ads_light_horn_command_310::~Ads_light_horn_command_310() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Ads_light_horn_command_310)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Ads_light_horn_command_310::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Ads_light_horn_command_310::ArenaDtor(void* object) {
  Ads_light_horn_command_310* _this = reinterpret_cast< Ads_light_horn_command_310* >(object);
  (void)_this;
}
void Ads_light_horn_command_310::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Ads_light_horn_command_310::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Ads_light_horn_command_310::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Ads_light_horn_command_310)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&turn_right_light_command_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&auto_drivercmd_checksum_) -
        reinterpret_cast<char*>(&turn_right_light_command_)) + sizeof(auto_drivercmd_checksum_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Ads_light_horn_command_310::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool turn_right_light_command = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_turn_right_light_command(&has_bits);
          turn_right_light_command_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool turn_left_light_command = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_turn_left_light_command(&has_bits);
          turn_left_light_command_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool horn_command = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_horn_command(&has_bits);
          horn_command_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 beam_command = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_beam_command(&has_bits);
          beam_command_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 auto_drivercmd_alivecounter = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_auto_drivercmd_alivecounter(&has_bits);
          auto_drivercmd_alivecounter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 auto_drivercmd_checksum = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_auto_drivercmd_checksum(&has_bits);
          auto_drivercmd_checksum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Ads_light_horn_command_310::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Ads_light_horn_command_310)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool turn_right_light_command = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_turn_right_light_command(), target);
  }

  // optional bool turn_left_light_command = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_turn_left_light_command(), target);
  }

  // optional bool horn_command = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_horn_command(), target);
  }

  // optional int32 beam_command = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_beam_command(), target);
  }

  // optional int32 auto_drivercmd_alivecounter = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_auto_drivercmd_alivecounter(), target);
  }

  // optional int32 auto_drivercmd_checksum = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_auto_drivercmd_checksum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Ads_light_horn_command_310)
  return target;
}

size_t Ads_light_horn_command_310::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Ads_light_horn_command_310)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional bool turn_right_light_command = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool turn_left_light_command = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool horn_command = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional int32 beam_command = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_beam_command());
    }

    // optional int32 auto_drivercmd_alivecounter = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_auto_drivercmd_alivecounter());
    }

    // optional int32 auto_drivercmd_checksum = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_auto_drivercmd_checksum());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Ads_light_horn_command_310::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Ads_light_horn_command_310::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Ads_light_horn_command_310::GetClassData() const { return &_class_data_; }

void Ads_light_horn_command_310::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Ads_light_horn_command_310 *>(to)->MergeFrom(
      static_cast<const Ads_light_horn_command_310 &>(from));
}


void Ads_light_horn_command_310::MergeFrom(const Ads_light_horn_command_310& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Ads_light_horn_command_310)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      turn_right_light_command_ = from.turn_right_light_command_;
    }
    if (cached_has_bits & 0x00000002u) {
      turn_left_light_command_ = from.turn_left_light_command_;
    }
    if (cached_has_bits & 0x00000004u) {
      horn_command_ = from.horn_command_;
    }
    if (cached_has_bits & 0x00000008u) {
      beam_command_ = from.beam_command_;
    }
    if (cached_has_bits & 0x00000010u) {
      auto_drivercmd_alivecounter_ = from.auto_drivercmd_alivecounter_;
    }
    if (cached_has_bits & 0x00000020u) {
      auto_drivercmd_checksum_ = from.auto_drivercmd_checksum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Ads_light_horn_command_310::CopyFrom(const Ads_light_horn_command_310& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Ads_light_horn_command_310)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ads_light_horn_command_310::IsInitialized() const {
  return true;
}

void Ads_light_horn_command_310::InternalSwap(Ads_light_horn_command_310* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Ads_light_horn_command_310, auto_drivercmd_checksum_)
      + sizeof(Ads_light_horn_command_310::auto_drivercmd_checksum_)
      - PROTOBUF_FIELD_OFFSET(Ads_light_horn_command_310, turn_right_light_command_)>(
          reinterpret_cast<char*>(&turn_right_light_command_),
          reinterpret_cast<char*>(&other->turn_right_light_command_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Ads_light_horn_command_310::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto[3]);
}

// ===================================================================

class Ads_brake_command_46::_Internal {
 public:
  using HasBits = decltype(std::declval<Ads_brake_command_46>()._has_bits_);
  static void set_has_drive_enable(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_auto_brake_command(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_auto_parking_command(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_epb_rampauxiliarycommand(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_auto_drivercmd_alivecounter(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_auto_drivercmd_checksum(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

Ads_brake_command_46::Ads_brake_command_46(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Ads_brake_command_46)
}
Ads_brake_command_46::Ads_brake_command_46(const Ads_brake_command_46& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&auto_brake_command_, &from.auto_brake_command_,
    static_cast<size_t>(reinterpret_cast<char*>(&auto_drivercmd_checksum_) -
    reinterpret_cast<char*>(&auto_brake_command_)) + sizeof(auto_drivercmd_checksum_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Ads_brake_command_46)
}

void Ads_brake_command_46::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&auto_brake_command_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&auto_drivercmd_checksum_) -
    reinterpret_cast<char*>(&auto_brake_command_)) + sizeof(auto_drivercmd_checksum_));
}

Ads_brake_command_46::~Ads_brake_command_46() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Ads_brake_command_46)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Ads_brake_command_46::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Ads_brake_command_46::ArenaDtor(void* object) {
  Ads_brake_command_46* _this = reinterpret_cast< Ads_brake_command_46* >(object);
  (void)_this;
}
void Ads_brake_command_46::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Ads_brake_command_46::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Ads_brake_command_46::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Ads_brake_command_46)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&auto_brake_command_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&auto_drivercmd_checksum_) -
        reinterpret_cast<char*>(&auto_brake_command_)) + sizeof(auto_drivercmd_checksum_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Ads_brake_command_46::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool drive_enable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_drive_enable(&has_bits);
          drive_enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 auto_brake_command = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_auto_brake_command(&has_bits);
          auto_brake_command_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool auto_parking_command = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_auto_parking_command(&has_bits);
          auto_parking_command_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool epb_rampauxiliarycommand = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_epb_rampauxiliarycommand(&has_bits);
          epb_rampauxiliarycommand_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 auto_drivercmd_alivecounter = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_auto_drivercmd_alivecounter(&has_bits);
          auto_drivercmd_alivecounter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 auto_drivercmd_checksum = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_auto_drivercmd_checksum(&has_bits);
          auto_drivercmd_checksum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Ads_brake_command_46::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Ads_brake_command_46)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool drive_enable = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_drive_enable(), target);
  }

  // optional int32 auto_brake_command = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_auto_brake_command(), target);
  }

  // optional bool auto_parking_command = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_auto_parking_command(), target);
  }

  // optional bool epb_rampauxiliarycommand = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_epb_rampauxiliarycommand(), target);
  }

  // optional int32 auto_drivercmd_alivecounter = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_auto_drivercmd_alivecounter(), target);
  }

  // optional int32 auto_drivercmd_checksum = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_auto_drivercmd_checksum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Ads_brake_command_46)
  return target;
}

size_t Ads_brake_command_46::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Ads_brake_command_46)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional int32 auto_brake_command = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_auto_brake_command());
    }

    // optional bool drive_enable = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool auto_parking_command = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool epb_rampauxiliarycommand = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional int32 auto_drivercmd_alivecounter = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_auto_drivercmd_alivecounter());
    }

    // optional int32 auto_drivercmd_checksum = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_auto_drivercmd_checksum());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Ads_brake_command_46::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Ads_brake_command_46::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Ads_brake_command_46::GetClassData() const { return &_class_data_; }

void Ads_brake_command_46::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Ads_brake_command_46 *>(to)->MergeFrom(
      static_cast<const Ads_brake_command_46 &>(from));
}


void Ads_brake_command_46::MergeFrom(const Ads_brake_command_46& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Ads_brake_command_46)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      auto_brake_command_ = from.auto_brake_command_;
    }
    if (cached_has_bits & 0x00000002u) {
      drive_enable_ = from.drive_enable_;
    }
    if (cached_has_bits & 0x00000004u) {
      auto_parking_command_ = from.auto_parking_command_;
    }
    if (cached_has_bits & 0x00000008u) {
      epb_rampauxiliarycommand_ = from.epb_rampauxiliarycommand_;
    }
    if (cached_has_bits & 0x00000010u) {
      auto_drivercmd_alivecounter_ = from.auto_drivercmd_alivecounter_;
    }
    if (cached_has_bits & 0x00000020u) {
      auto_drivercmd_checksum_ = from.auto_drivercmd_checksum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Ads_brake_command_46::CopyFrom(const Ads_brake_command_46& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Ads_brake_command_46)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ads_brake_command_46::IsInitialized() const {
  return true;
}

void Ads_brake_command_46::InternalSwap(Ads_brake_command_46* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Ads_brake_command_46, auto_drivercmd_checksum_)
      + sizeof(Ads_brake_command_46::auto_drivercmd_checksum_)
      - PROTOBUF_FIELD_OFFSET(Ads_brake_command_46, auto_brake_command_)>(
          reinterpret_cast<char*>(&auto_brake_command_),
          reinterpret_cast<char*>(&other->auto_brake_command_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Ads_brake_command_46::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto[4]);
}

// ===================================================================

class Vcu_brake_report_47::_Internal {
 public:
  using HasBits = decltype(std::declval<Vcu_brake_report_47>()._has_bits_);
  static void set_has_brake_enable_resp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_control_mode_resp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_vcu_real_brake_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_vcu_real_brake(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_vcu_real_parking_status(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_vcu_real_parking_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_rampauxiliaryindication(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_vehicleslope(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_vcu_brakerept_alivecounter(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_vcu_brakerept_checksum(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

Vcu_brake_report_47::Vcu_brake_report_47(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Vcu_brake_report_47)
}
Vcu_brake_report_47::Vcu_brake_report_47(const Vcu_brake_report_47& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&control_mode_resp_, &from.control_mode_resp_,
    static_cast<size_t>(reinterpret_cast<char*>(&vcu_brakerept_checksum_) -
    reinterpret_cast<char*>(&control_mode_resp_)) + sizeof(vcu_brakerept_checksum_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Vcu_brake_report_47)
}

void Vcu_brake_report_47::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&control_mode_resp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&vcu_brakerept_checksum_) -
    reinterpret_cast<char*>(&control_mode_resp_)) + sizeof(vcu_brakerept_checksum_));
}

Vcu_brake_report_47::~Vcu_brake_report_47() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Vcu_brake_report_47)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Vcu_brake_report_47::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vcu_brake_report_47::ArenaDtor(void* object) {
  Vcu_brake_report_47* _this = reinterpret_cast< Vcu_brake_report_47* >(object);
  (void)_this;
}
void Vcu_brake_report_47::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Vcu_brake_report_47::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Vcu_brake_report_47::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Vcu_brake_report_47)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&control_mode_resp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&vehicleslope_) -
        reinterpret_cast<char*>(&control_mode_resp_)) + sizeof(vehicleslope_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&vcu_brakerept_alivecounter_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&vcu_brakerept_checksum_) -
        reinterpret_cast<char*>(&vcu_brakerept_alivecounter_)) + sizeof(vcu_brakerept_checksum_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vcu_brake_report_47::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool brake_enable_resp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_brake_enable_resp(&has_bits);
          brake_enable_resp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Vcu_brake_report_47.Control_mode_respType control_mode_resp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Vcu_brake_report_47_Control_mode_respType_IsValid(val))) {
            _internal_set_control_mode_resp(static_cast<::apollo::canbus::Vcu_brake_report_47_Control_mode_respType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool vcu_real_brake_valid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_vcu_real_brake_valid(&has_bits);
          vcu_real_brake_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 vcu_real_brake = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_vcu_real_brake(&has_bits);
          vcu_real_brake_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 vcu_real_parking_status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_vcu_real_parking_status(&has_bits);
          vcu_real_parking_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool vcu_real_parking_valid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_vcu_real_parking_valid(&has_bits);
          vcu_real_parking_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool rampauxiliaryindication = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_rampauxiliaryindication(&has_bits);
          rampauxiliaryindication_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double vehicleslope = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_vehicleslope(&has_bits);
          vehicleslope_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional int32 vcu_brakerept_alivecounter = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_vcu_brakerept_alivecounter(&has_bits);
          vcu_brakerept_alivecounter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 vcu_brakerept_checksum = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_vcu_brakerept_checksum(&has_bits);
          vcu_brakerept_checksum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vcu_brake_report_47::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Vcu_brake_report_47)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool brake_enable_resp = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_brake_enable_resp(), target);
  }

  // optional .apollo.canbus.Vcu_brake_report_47.Control_mode_respType control_mode_resp = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_control_mode_resp(), target);
  }

  // optional bool vcu_real_brake_valid = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_vcu_real_brake_valid(), target);
  }

  // optional int32 vcu_real_brake = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_vcu_real_brake(), target);
  }

  // optional int32 vcu_real_parking_status = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_vcu_real_parking_status(), target);
  }

  // optional bool vcu_real_parking_valid = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_vcu_real_parking_valid(), target);
  }

  // optional bool rampauxiliaryindication = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_rampauxiliaryindication(), target);
  }

  // optional double vehicleslope = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_vehicleslope(), target);
  }

  // optional int32 vcu_brakerept_alivecounter = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_vcu_brakerept_alivecounter(), target);
  }

  // optional int32 vcu_brakerept_checksum = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_vcu_brakerept_checksum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Vcu_brake_report_47)
  return target;
}

size_t Vcu_brake_report_47::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Vcu_brake_report_47)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.canbus.Vcu_brake_report_47.Control_mode_respType control_mode_resp = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_control_mode_resp());
    }

    // optional int32 vcu_real_brake = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_vcu_real_brake());
    }

    // optional bool brake_enable_resp = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool vcu_real_brake_valid = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool vcu_real_parking_valid = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool rampauxiliaryindication = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional int32 vcu_real_parking_status = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_vcu_real_parking_status());
    }

    // optional double vehicleslope = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional int32 vcu_brakerept_alivecounter = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_vcu_brakerept_alivecounter());
    }

    // optional int32 vcu_brakerept_checksum = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_vcu_brakerept_checksum());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vcu_brake_report_47::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Vcu_brake_report_47::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vcu_brake_report_47::GetClassData() const { return &_class_data_; }

void Vcu_brake_report_47::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Vcu_brake_report_47 *>(to)->MergeFrom(
      static_cast<const Vcu_brake_report_47 &>(from));
}


void Vcu_brake_report_47::MergeFrom(const Vcu_brake_report_47& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Vcu_brake_report_47)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      control_mode_resp_ = from.control_mode_resp_;
    }
    if (cached_has_bits & 0x00000002u) {
      vcu_real_brake_ = from.vcu_real_brake_;
    }
    if (cached_has_bits & 0x00000004u) {
      brake_enable_resp_ = from.brake_enable_resp_;
    }
    if (cached_has_bits & 0x00000008u) {
      vcu_real_brake_valid_ = from.vcu_real_brake_valid_;
    }
    if (cached_has_bits & 0x00000010u) {
      vcu_real_parking_valid_ = from.vcu_real_parking_valid_;
    }
    if (cached_has_bits & 0x00000020u) {
      rampauxiliaryindication_ = from.rampauxiliaryindication_;
    }
    if (cached_has_bits & 0x00000040u) {
      vcu_real_parking_status_ = from.vcu_real_parking_status_;
    }
    if (cached_has_bits & 0x00000080u) {
      vehicleslope_ = from.vehicleslope_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      vcu_brakerept_alivecounter_ = from.vcu_brakerept_alivecounter_;
    }
    if (cached_has_bits & 0x00000200u) {
      vcu_brakerept_checksum_ = from.vcu_brakerept_checksum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vcu_brake_report_47::CopyFrom(const Vcu_brake_report_47& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Vcu_brake_report_47)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vcu_brake_report_47::IsInitialized() const {
  return true;
}

void Vcu_brake_report_47::InternalSwap(Vcu_brake_report_47* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vcu_brake_report_47, vcu_brakerept_checksum_)
      + sizeof(Vcu_brake_report_47::vcu_brakerept_checksum_)
      - PROTOBUF_FIELD_OFFSET(Vcu_brake_report_47, control_mode_resp_)>(
          reinterpret_cast<char*>(&control_mode_resp_),
          reinterpret_cast<char*>(&other->control_mode_resp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vcu_brake_report_47::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto[5]);
}

// ===================================================================

class Vcu_eps_report_57::_Internal {
 public:
  using HasBits = decltype(std::declval<Vcu_eps_report_57>()._has_bits_);
  static void set_has_drive_enable_resp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_control_mode_resp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_vcu_eps_report(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_vcu_real_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_vcu_real_angle_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_vcu_target_angle_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_vcu_target_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_vcu_eps_rept_alivecounter(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_vcu_eps_rept_checksum(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

Vcu_eps_report_57::Vcu_eps_report_57(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Vcu_eps_report_57)
}
Vcu_eps_report_57::Vcu_eps_report_57(const Vcu_eps_report_57& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&control_mode_resp_, &from.control_mode_resp_,
    static_cast<size_t>(reinterpret_cast<char*>(&vcu_eps_rept_checksum_) -
    reinterpret_cast<char*>(&control_mode_resp_)) + sizeof(vcu_eps_rept_checksum_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Vcu_eps_report_57)
}

void Vcu_eps_report_57::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&control_mode_resp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&vcu_eps_rept_checksum_) -
    reinterpret_cast<char*>(&control_mode_resp_)) + sizeof(vcu_eps_rept_checksum_));
}

Vcu_eps_report_57::~Vcu_eps_report_57() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Vcu_eps_report_57)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Vcu_eps_report_57::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vcu_eps_report_57::ArenaDtor(void* object) {
  Vcu_eps_report_57* _this = reinterpret_cast< Vcu_eps_report_57* >(object);
  (void)_this;
}
void Vcu_eps_report_57::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Vcu_eps_report_57::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Vcu_eps_report_57::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Vcu_eps_report_57)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&control_mode_resp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&vcu_eps_rept_alivecounter_) -
        reinterpret_cast<char*>(&control_mode_resp_)) + sizeof(vcu_eps_rept_alivecounter_));
  }
  vcu_eps_rept_checksum_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vcu_eps_report_57::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool drive_enable_resp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_drive_enable_resp(&has_bits);
          drive_enable_resp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Vcu_eps_report_57.Control_mode_respType control_mode_resp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Vcu_eps_report_57_Control_mode_respType_IsValid(val))) {
            _internal_set_control_mode_resp(static_cast<::apollo::canbus::Vcu_eps_report_57_Control_mode_respType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool vcu_eps_report = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_vcu_eps_report(&has_bits);
          vcu_eps_report_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double vcu_real_angle = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_vcu_real_angle(&has_bits);
          vcu_real_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool vcu_real_angle_valid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_vcu_real_angle_valid(&has_bits);
          vcu_real_angle_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool vcu_target_angle_valid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_vcu_target_angle_valid(&has_bits);
          vcu_target_angle_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double vcu_target_angle = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_vcu_target_angle(&has_bits);
          vcu_target_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional int32 vcu_eps_rept_alivecounter = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_vcu_eps_rept_alivecounter(&has_bits);
          vcu_eps_rept_alivecounter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 vcu_eps_rept_checksum = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_vcu_eps_rept_checksum(&has_bits);
          vcu_eps_rept_checksum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vcu_eps_report_57::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Vcu_eps_report_57)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool drive_enable_resp = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_drive_enable_resp(), target);
  }

  // optional .apollo.canbus.Vcu_eps_report_57.Control_mode_respType control_mode_resp = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_control_mode_resp(), target);
  }

  // optional bool vcu_eps_report = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_vcu_eps_report(), target);
  }

  // optional double vcu_real_angle = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_vcu_real_angle(), target);
  }

  // optional bool vcu_real_angle_valid = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_vcu_real_angle_valid(), target);
  }

  // optional bool vcu_target_angle_valid = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_vcu_target_angle_valid(), target);
  }

  // optional double vcu_target_angle = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_vcu_target_angle(), target);
  }

  // optional int32 vcu_eps_rept_alivecounter = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_vcu_eps_rept_alivecounter(), target);
  }

  // optional int32 vcu_eps_rept_checksum = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_vcu_eps_rept_checksum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Vcu_eps_report_57)
  return target;
}

size_t Vcu_eps_report_57::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Vcu_eps_report_57)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.canbus.Vcu_eps_report_57.Control_mode_respType control_mode_resp = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_control_mode_resp());
    }

    // optional bool drive_enable_resp = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool vcu_eps_report = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool vcu_real_angle_valid = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool vcu_target_angle_valid = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional double vcu_real_angle = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double vcu_target_angle = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional int32 vcu_eps_rept_alivecounter = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_vcu_eps_rept_alivecounter());
    }

  }
  // optional int32 vcu_eps_rept_checksum = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_vcu_eps_rept_checksum());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vcu_eps_report_57::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Vcu_eps_report_57::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vcu_eps_report_57::GetClassData() const { return &_class_data_; }

void Vcu_eps_report_57::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Vcu_eps_report_57 *>(to)->MergeFrom(
      static_cast<const Vcu_eps_report_57 &>(from));
}


void Vcu_eps_report_57::MergeFrom(const Vcu_eps_report_57& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Vcu_eps_report_57)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      control_mode_resp_ = from.control_mode_resp_;
    }
    if (cached_has_bits & 0x00000002u) {
      drive_enable_resp_ = from.drive_enable_resp_;
    }
    if (cached_has_bits & 0x00000004u) {
      vcu_eps_report_ = from.vcu_eps_report_;
    }
    if (cached_has_bits & 0x00000008u) {
      vcu_real_angle_valid_ = from.vcu_real_angle_valid_;
    }
    if (cached_has_bits & 0x00000010u) {
      vcu_target_angle_valid_ = from.vcu_target_angle_valid_;
    }
    if (cached_has_bits & 0x00000020u) {
      vcu_real_angle_ = from.vcu_real_angle_;
    }
    if (cached_has_bits & 0x00000040u) {
      vcu_target_angle_ = from.vcu_target_angle_;
    }
    if (cached_has_bits & 0x00000080u) {
      vcu_eps_rept_alivecounter_ = from.vcu_eps_rept_alivecounter_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_vcu_eps_rept_checksum(from._internal_vcu_eps_rept_checksum());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vcu_eps_report_57::CopyFrom(const Vcu_eps_report_57& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Vcu_eps_report_57)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vcu_eps_report_57::IsInitialized() const {
  return true;
}

void Vcu_eps_report_57::InternalSwap(Vcu_eps_report_57* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vcu_eps_report_57, vcu_eps_rept_checksum_)
      + sizeof(Vcu_eps_report_57::vcu_eps_rept_checksum_)
      - PROTOBUF_FIELD_OFFSET(Vcu_eps_report_57, control_mode_resp_)>(
          reinterpret_cast<char*>(&control_mode_resp_),
          reinterpret_cast<char*>(&other->control_mode_resp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vcu_eps_report_57::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto[6]);
}

// ===================================================================

class Ads_eps_command_56::_Internal {
 public:
  using HasBits = decltype(std::declval<Ads_eps_command_56>()._has_bits_);
  static void set_has_drive_enable(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_auto_target_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_auto_drivercmd_alivecounter(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_auto_drivercmd_checksum(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

Ads_eps_command_56::Ads_eps_command_56(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Ads_eps_command_56)
}
Ads_eps_command_56::Ads_eps_command_56(const Ads_eps_command_56& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&auto_target_angle_, &from.auto_target_angle_,
    static_cast<size_t>(reinterpret_cast<char*>(&auto_drivercmd_checksum_) -
    reinterpret_cast<char*>(&auto_target_angle_)) + sizeof(auto_drivercmd_checksum_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Ads_eps_command_56)
}

void Ads_eps_command_56::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&auto_target_angle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&auto_drivercmd_checksum_) -
    reinterpret_cast<char*>(&auto_target_angle_)) + sizeof(auto_drivercmd_checksum_));
}

Ads_eps_command_56::~Ads_eps_command_56() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Ads_eps_command_56)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Ads_eps_command_56::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Ads_eps_command_56::ArenaDtor(void* object) {
  Ads_eps_command_56* _this = reinterpret_cast< Ads_eps_command_56* >(object);
  (void)_this;
}
void Ads_eps_command_56::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Ads_eps_command_56::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Ads_eps_command_56::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Ads_eps_command_56)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&auto_target_angle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&auto_drivercmd_checksum_) -
        reinterpret_cast<char*>(&auto_target_angle_)) + sizeof(auto_drivercmd_checksum_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Ads_eps_command_56::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool drive_enable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_drive_enable(&has_bits);
          drive_enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double auto_target_angle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_auto_target_angle(&has_bits);
          auto_target_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional int32 auto_drivercmd_alivecounter = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_auto_drivercmd_alivecounter(&has_bits);
          auto_drivercmd_alivecounter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 auto_drivercmd_checksum = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_auto_drivercmd_checksum(&has_bits);
          auto_drivercmd_checksum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Ads_eps_command_56::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Ads_eps_command_56)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool drive_enable = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_drive_enable(), target);
  }

  // optional double auto_target_angle = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_auto_target_angle(), target);
  }

  // optional int32 auto_drivercmd_alivecounter = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_auto_drivercmd_alivecounter(), target);
  }

  // optional int32 auto_drivercmd_checksum = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_auto_drivercmd_checksum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Ads_eps_command_56)
  return target;
}

size_t Ads_eps_command_56::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Ads_eps_command_56)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional double auto_target_angle = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional bool drive_enable = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional int32 auto_drivercmd_alivecounter = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_auto_drivercmd_alivecounter());
    }

    // optional int32 auto_drivercmd_checksum = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_auto_drivercmd_checksum());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Ads_eps_command_56::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Ads_eps_command_56::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Ads_eps_command_56::GetClassData() const { return &_class_data_; }

void Ads_eps_command_56::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Ads_eps_command_56 *>(to)->MergeFrom(
      static_cast<const Ads_eps_command_56 &>(from));
}


void Ads_eps_command_56::MergeFrom(const Ads_eps_command_56& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Ads_eps_command_56)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      auto_target_angle_ = from.auto_target_angle_;
    }
    if (cached_has_bits & 0x00000002u) {
      drive_enable_ = from.drive_enable_;
    }
    if (cached_has_bits & 0x00000004u) {
      auto_drivercmd_alivecounter_ = from.auto_drivercmd_alivecounter_;
    }
    if (cached_has_bits & 0x00000008u) {
      auto_drivercmd_checksum_ = from.auto_drivercmd_checksum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Ads_eps_command_56::CopyFrom(const Ads_eps_command_56& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Ads_eps_command_56)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ads_eps_command_56::IsInitialized() const {
  return true;
}

void Ads_eps_command_56::InternalSwap(Ads_eps_command_56* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Ads_eps_command_56, auto_drivercmd_checksum_)
      + sizeof(Ads_eps_command_56::auto_drivercmd_checksum_)
      - PROTOBUF_FIELD_OFFSET(Ads_eps_command_56, auto_target_angle_)>(
          reinterpret_cast<char*>(&auto_target_angle_),
          reinterpret_cast<char*>(&other->auto_target_angle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Ads_eps_command_56::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto[7]);
}

// ===================================================================

class Ads_drive_command_50::_Internal {
 public:
  using HasBits = decltype(std::declval<Ads_drive_command_50>()._has_bits_);
  static void set_has_drive_enable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_auto_shift_command(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_auto_drive_torque(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_auto_drivercmd_alivecounter(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_auto_drivercmd_checksum(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

Ads_drive_command_50::Ads_drive_command_50(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Ads_drive_command_50)
}
Ads_drive_command_50::Ads_drive_command_50(const Ads_drive_command_50& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&drive_enable_, &from.drive_enable_,
    static_cast<size_t>(reinterpret_cast<char*>(&auto_drivercmd_checksum_) -
    reinterpret_cast<char*>(&drive_enable_)) + sizeof(auto_drivercmd_checksum_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Ads_drive_command_50)
}

void Ads_drive_command_50::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&drive_enable_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&auto_drivercmd_checksum_) -
    reinterpret_cast<char*>(&drive_enable_)) + sizeof(auto_drivercmd_checksum_));
}

Ads_drive_command_50::~Ads_drive_command_50() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Ads_drive_command_50)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Ads_drive_command_50::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Ads_drive_command_50::ArenaDtor(void* object) {
  Ads_drive_command_50* _this = reinterpret_cast< Ads_drive_command_50* >(object);
  (void)_this;
}
void Ads_drive_command_50::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Ads_drive_command_50::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Ads_drive_command_50::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Ads_drive_command_50)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&drive_enable_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&auto_drivercmd_checksum_) -
        reinterpret_cast<char*>(&drive_enable_)) + sizeof(auto_drivercmd_checksum_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Ads_drive_command_50::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool drive_enable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_drive_enable(&has_bits);
          drive_enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Ads_drive_command_50.Auto_shift_commandType auto_shift_command = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Ads_drive_command_50_Auto_shift_commandType_IsValid(val))) {
            _internal_set_auto_shift_command(static_cast<::apollo::canbus::Ads_drive_command_50_Auto_shift_commandType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional double auto_drive_torque = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_auto_drive_torque(&has_bits);
          auto_drive_torque_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional int32 auto_drivercmd_alivecounter = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_auto_drivercmd_alivecounter(&has_bits);
          auto_drivercmd_alivecounter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 auto_drivercmd_checksum = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_auto_drivercmd_checksum(&has_bits);
          auto_drivercmd_checksum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Ads_drive_command_50::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Ads_drive_command_50)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool drive_enable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_drive_enable(), target);
  }

  // optional .apollo.canbus.Ads_drive_command_50.Auto_shift_commandType auto_shift_command = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_auto_shift_command(), target);
  }

  // optional double auto_drive_torque = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_auto_drive_torque(), target);
  }

  // optional int32 auto_drivercmd_alivecounter = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_auto_drivercmd_alivecounter(), target);
  }

  // optional int32 auto_drivercmd_checksum = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_auto_drivercmd_checksum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Ads_drive_command_50)
  return target;
}

size_t Ads_drive_command_50::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Ads_drive_command_50)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bool drive_enable = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional .apollo.canbus.Ads_drive_command_50.Auto_shift_commandType auto_shift_command = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_auto_shift_command());
    }

    // optional double auto_drive_torque = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional int32 auto_drivercmd_alivecounter = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_auto_drivercmd_alivecounter());
    }

    // optional int32 auto_drivercmd_checksum = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_auto_drivercmd_checksum());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Ads_drive_command_50::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Ads_drive_command_50::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Ads_drive_command_50::GetClassData() const { return &_class_data_; }

void Ads_drive_command_50::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Ads_drive_command_50 *>(to)->MergeFrom(
      static_cast<const Ads_drive_command_50 &>(from));
}


void Ads_drive_command_50::MergeFrom(const Ads_drive_command_50& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Ads_drive_command_50)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      drive_enable_ = from.drive_enable_;
    }
    if (cached_has_bits & 0x00000002u) {
      auto_shift_command_ = from.auto_shift_command_;
    }
    if (cached_has_bits & 0x00000004u) {
      auto_drive_torque_ = from.auto_drive_torque_;
    }
    if (cached_has_bits & 0x00000008u) {
      auto_drivercmd_alivecounter_ = from.auto_drivercmd_alivecounter_;
    }
    if (cached_has_bits & 0x00000010u) {
      auto_drivercmd_checksum_ = from.auto_drivercmd_checksum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Ads_drive_command_50::CopyFrom(const Ads_drive_command_50& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Ads_drive_command_50)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ads_drive_command_50::IsInitialized() const {
  return true;
}

void Ads_drive_command_50::InternalSwap(Ads_drive_command_50* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Ads_drive_command_50, auto_drivercmd_checksum_)
      + sizeof(Ads_drive_command_50::auto_drivercmd_checksum_)
      - PROTOBUF_FIELD_OFFSET(Ads_drive_command_50, drive_enable_)>(
          reinterpret_cast<char*>(&drive_enable_),
          reinterpret_cast<char*>(&other->drive_enable_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Ads_drive_command_50::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto[8]);
}

// ===================================================================

class Vcu_drive_report_52::_Internal {
 public:
  using HasBits = decltype(std::declval<Vcu_drive_report_52>()._has_bits_);
  static void set_has_drive_enable_resp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_control_mode_resp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_vcu_real_shift(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_vcu_real_shift_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_vcu_real_torque_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_vcu_real_torque(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_vcu_limitedtorquemode(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_vcu_driverept_alivecounter(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_vcu_driverept_checksum(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

Vcu_drive_report_52::Vcu_drive_report_52(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Vcu_drive_report_52)
}
Vcu_drive_report_52::Vcu_drive_report_52(const Vcu_drive_report_52& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&control_mode_resp_, &from.control_mode_resp_,
    static_cast<size_t>(reinterpret_cast<char*>(&vcu_driverept_checksum_) -
    reinterpret_cast<char*>(&control_mode_resp_)) + sizeof(vcu_driverept_checksum_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Vcu_drive_report_52)
}

void Vcu_drive_report_52::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&control_mode_resp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&vcu_driverept_checksum_) -
    reinterpret_cast<char*>(&control_mode_resp_)) + sizeof(vcu_driverept_checksum_));
}

Vcu_drive_report_52::~Vcu_drive_report_52() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Vcu_drive_report_52)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Vcu_drive_report_52::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vcu_drive_report_52::ArenaDtor(void* object) {
  Vcu_drive_report_52* _this = reinterpret_cast< Vcu_drive_report_52* >(object);
  (void)_this;
}
void Vcu_drive_report_52::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Vcu_drive_report_52::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Vcu_drive_report_52::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Vcu_drive_report_52)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&control_mode_resp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&vcu_real_torque_) -
        reinterpret_cast<char*>(&control_mode_resp_)) + sizeof(vcu_real_torque_));
  }
  vcu_driverept_checksum_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vcu_drive_report_52::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool drive_enable_resp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_drive_enable_resp(&has_bits);
          drive_enable_resp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Vcu_drive_report_52.Control_mode_respType control_mode_resp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Vcu_drive_report_52_Control_mode_respType_IsValid(val))) {
            _internal_set_control_mode_resp(static_cast<::apollo::canbus::Vcu_drive_report_52_Control_mode_respType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Vcu_drive_report_52.Vcu_real_shiftType vcu_real_shift = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Vcu_drive_report_52_Vcu_real_shiftType_IsValid(val))) {
            _internal_set_vcu_real_shift(static_cast<::apollo::canbus::Vcu_drive_report_52_Vcu_real_shiftType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool vcu_real_shift_valid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_vcu_real_shift_valid(&has_bits);
          vcu_real_shift_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool vcu_real_torque_valid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_vcu_real_torque_valid(&has_bits);
          vcu_real_torque_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double vcu_real_torque = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_vcu_real_torque(&has_bits);
          vcu_real_torque_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool vcu_limitedtorquemode = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_vcu_limitedtorquemode(&has_bits);
          vcu_limitedtorquemode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 vcu_driverept_alivecounter = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_vcu_driverept_alivecounter(&has_bits);
          vcu_driverept_alivecounter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 vcu_driverept_checksum = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_vcu_driverept_checksum(&has_bits);
          vcu_driverept_checksum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vcu_drive_report_52::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Vcu_drive_report_52)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool drive_enable_resp = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_drive_enable_resp(), target);
  }

  // optional .apollo.canbus.Vcu_drive_report_52.Control_mode_respType control_mode_resp = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_control_mode_resp(), target);
  }

  // optional .apollo.canbus.Vcu_drive_report_52.Vcu_real_shiftType vcu_real_shift = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_vcu_real_shift(), target);
  }

  // optional bool vcu_real_shift_valid = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_vcu_real_shift_valid(), target);
  }

  // optional bool vcu_real_torque_valid = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_vcu_real_torque_valid(), target);
  }

  // optional double vcu_real_torque = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_vcu_real_torque(), target);
  }

  // optional bool vcu_limitedtorquemode = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_vcu_limitedtorquemode(), target);
  }

  // optional int32 vcu_driverept_alivecounter = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_vcu_driverept_alivecounter(), target);
  }

  // optional int32 vcu_driverept_checksum = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_vcu_driverept_checksum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Vcu_drive_report_52)
  return target;
}

size_t Vcu_drive_report_52::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Vcu_drive_report_52)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.canbus.Vcu_drive_report_52.Control_mode_respType control_mode_resp = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_control_mode_resp());
    }

    // optional .apollo.canbus.Vcu_drive_report_52.Vcu_real_shiftType vcu_real_shift = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_vcu_real_shift());
    }

    // optional bool drive_enable_resp = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool vcu_real_shift_valid = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool vcu_real_torque_valid = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool vcu_limitedtorquemode = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional int32 vcu_driverept_alivecounter = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_vcu_driverept_alivecounter());
    }

    // optional double vcu_real_torque = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  // optional int32 vcu_driverept_checksum = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_vcu_driverept_checksum());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vcu_drive_report_52::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Vcu_drive_report_52::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vcu_drive_report_52::GetClassData() const { return &_class_data_; }

void Vcu_drive_report_52::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Vcu_drive_report_52 *>(to)->MergeFrom(
      static_cast<const Vcu_drive_report_52 &>(from));
}


void Vcu_drive_report_52::MergeFrom(const Vcu_drive_report_52& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Vcu_drive_report_52)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      control_mode_resp_ = from.control_mode_resp_;
    }
    if (cached_has_bits & 0x00000002u) {
      vcu_real_shift_ = from.vcu_real_shift_;
    }
    if (cached_has_bits & 0x00000004u) {
      drive_enable_resp_ = from.drive_enable_resp_;
    }
    if (cached_has_bits & 0x00000008u) {
      vcu_real_shift_valid_ = from.vcu_real_shift_valid_;
    }
    if (cached_has_bits & 0x00000010u) {
      vcu_real_torque_valid_ = from.vcu_real_torque_valid_;
    }
    if (cached_has_bits & 0x00000020u) {
      vcu_limitedtorquemode_ = from.vcu_limitedtorquemode_;
    }
    if (cached_has_bits & 0x00000040u) {
      vcu_driverept_alivecounter_ = from.vcu_driverept_alivecounter_;
    }
    if (cached_has_bits & 0x00000080u) {
      vcu_real_torque_ = from.vcu_real_torque_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_vcu_driverept_checksum(from._internal_vcu_driverept_checksum());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vcu_drive_report_52::CopyFrom(const Vcu_drive_report_52& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Vcu_drive_report_52)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vcu_drive_report_52::IsInitialized() const {
  return true;
}

void Vcu_drive_report_52::InternalSwap(Vcu_drive_report_52* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vcu_drive_report_52, vcu_driverept_checksum_)
      + sizeof(Vcu_drive_report_52::vcu_driverept_checksum_)
      - PROTOBUF_FIELD_OFFSET(Vcu_drive_report_52, control_mode_resp_)>(
          reinterpret_cast<char*>(&control_mode_resp_),
          reinterpret_cast<char*>(&other->control_mode_resp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vcu_drive_report_52::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto[9]);
}

// ===================================================================

class Ads_diagnosis_628::_Internal {
 public:
  using HasBits = decltype(std::declval<Ads_diagnosis_628>()._has_bits_);
  static void set_has_faultrank(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_adas_fault_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_adas_softwareversion(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_adas_hardwareversion(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

Ads_diagnosis_628::Ads_diagnosis_628(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Ads_diagnosis_628)
}
Ads_diagnosis_628::Ads_diagnosis_628(const Ads_diagnosis_628& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&faultrank_, &from.faultrank_,
    static_cast<size_t>(reinterpret_cast<char*>(&adas_hardwareversion_) -
    reinterpret_cast<char*>(&faultrank_)) + sizeof(adas_hardwareversion_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Ads_diagnosis_628)
}

void Ads_diagnosis_628::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&faultrank_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&adas_hardwareversion_) -
    reinterpret_cast<char*>(&faultrank_)) + sizeof(adas_hardwareversion_));
}

Ads_diagnosis_628::~Ads_diagnosis_628() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Ads_diagnosis_628)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Ads_diagnosis_628::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Ads_diagnosis_628::ArenaDtor(void* object) {
  Ads_diagnosis_628* _this = reinterpret_cast< Ads_diagnosis_628* >(object);
  (void)_this;
}
void Ads_diagnosis_628::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Ads_diagnosis_628::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Ads_diagnosis_628::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Ads_diagnosis_628)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&faultrank_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&adas_hardwareversion_) -
        reinterpret_cast<char*>(&faultrank_)) + sizeof(adas_hardwareversion_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Ads_diagnosis_628::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 faultrank = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_faultrank(&has_bits);
          faultrank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 adas_fault_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_adas_fault_code(&has_bits);
          adas_fault_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 adas_softwareversion = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_adas_softwareversion(&has_bits);
          adas_softwareversion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 adas_hardwareversion = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_adas_hardwareversion(&has_bits);
          adas_hardwareversion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Ads_diagnosis_628::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Ads_diagnosis_628)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 faultrank = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_faultrank(), target);
  }

  // optional int32 adas_fault_code = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_adas_fault_code(), target);
  }

  // optional int32 adas_softwareversion = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_adas_softwareversion(), target);
  }

  // optional int32 adas_hardwareversion = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_adas_hardwareversion(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Ads_diagnosis_628)
  return target;
}

size_t Ads_diagnosis_628::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Ads_diagnosis_628)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int32 faultrank = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_faultrank());
    }

    // optional int32 adas_fault_code = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_adas_fault_code());
    }

    // optional int32 adas_softwareversion = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_adas_softwareversion());
    }

    // optional int32 adas_hardwareversion = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_adas_hardwareversion());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Ads_diagnosis_628::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Ads_diagnosis_628::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Ads_diagnosis_628::GetClassData() const { return &_class_data_; }

void Ads_diagnosis_628::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Ads_diagnosis_628 *>(to)->MergeFrom(
      static_cast<const Ads_diagnosis_628 &>(from));
}


void Ads_diagnosis_628::MergeFrom(const Ads_diagnosis_628& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Ads_diagnosis_628)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      faultrank_ = from.faultrank_;
    }
    if (cached_has_bits & 0x00000002u) {
      adas_fault_code_ = from.adas_fault_code_;
    }
    if (cached_has_bits & 0x00000004u) {
      adas_softwareversion_ = from.adas_softwareversion_;
    }
    if (cached_has_bits & 0x00000008u) {
      adas_hardwareversion_ = from.adas_hardwareversion_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Ads_diagnosis_628::CopyFrom(const Ads_diagnosis_628& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Ads_diagnosis_628)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ads_diagnosis_628::IsInitialized() const {
  return true;
}

void Ads_diagnosis_628::InternalSwap(Ads_diagnosis_628* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Ads_diagnosis_628, adas_hardwareversion_)
      + sizeof(Ads_diagnosis_628::adas_hardwareversion_)
      - PROTOBUF_FIELD_OFFSET(Ads_diagnosis_628, faultrank_)>(
          reinterpret_cast<char*>(&faultrank_),
          reinterpret_cast<char*>(&other->faultrank_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Ads_diagnosis_628::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto[10]);
}

// ===================================================================

class Vcu_nm_401::_Internal {
 public:
  using HasBits = decltype(std::declval<Vcu_nm_401>()._has_bits_);
  static void set_has_vcu_sleepcommand(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Vcu_nm_401::Vcu_nm_401(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Vcu_nm_401)
}
Vcu_nm_401::Vcu_nm_401(const Vcu_nm_401& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  vcu_sleepcommand_ = from.vcu_sleepcommand_;
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Vcu_nm_401)
}

void Vcu_nm_401::SharedCtor() {
vcu_sleepcommand_ = false;
}

Vcu_nm_401::~Vcu_nm_401() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Vcu_nm_401)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Vcu_nm_401::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vcu_nm_401::ArenaDtor(void* object) {
  Vcu_nm_401* _this = reinterpret_cast< Vcu_nm_401* >(object);
  (void)_this;
}
void Vcu_nm_401::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Vcu_nm_401::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Vcu_nm_401::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Vcu_nm_401)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vcu_sleepcommand_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vcu_nm_401::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool vcu_sleepcommand = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_vcu_sleepcommand(&has_bits);
          vcu_sleepcommand_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vcu_nm_401::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Vcu_nm_401)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool vcu_sleepcommand = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_vcu_sleepcommand(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Vcu_nm_401)
  return target;
}

size_t Vcu_nm_401::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Vcu_nm_401)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool vcu_sleepcommand = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vcu_nm_401::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Vcu_nm_401::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vcu_nm_401::GetClassData() const { return &_class_data_; }

void Vcu_nm_401::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Vcu_nm_401 *>(to)->MergeFrom(
      static_cast<const Vcu_nm_401 &>(from));
}


void Vcu_nm_401::MergeFrom(const Vcu_nm_401& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Vcu_nm_401)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_vcu_sleepcommand()) {
    _internal_set_vcu_sleepcommand(from._internal_vcu_sleepcommand());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vcu_nm_401::CopyFrom(const Vcu_nm_401& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Vcu_nm_401)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vcu_nm_401::IsInitialized() const {
  return true;
}

void Vcu_nm_401::InternalSwap(Vcu_nm_401* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(vcu_sleepcommand_, other->vcu_sleepcommand_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Vcu_nm_401::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto[11]);
}

// ===================================================================

class Vcu_vehicle_status_report_101::_Internal {
 public:
  using HasBits = decltype(std::declval<Vcu_vehicle_status_report_101>()._has_bits_);
  static void set_has_drive_enable_resp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_vcu_highvoltagecircuitstate(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_vcu_dcdc_enabledstates(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_control_mode_resp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_vcu_vehicle_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_vcu_lowbatterychargingfunctionst(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_vcu_display_soc(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_vcu_motor_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_vcu_motor_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_vcu_motor_speed_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_vcu_statusrept_alivecounter(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_vcu_statusrept_checksum(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

Vcu_vehicle_status_report_101::Vcu_vehicle_status_report_101(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Vcu_vehicle_status_report_101)
}
Vcu_vehicle_status_report_101::Vcu_vehicle_status_report_101(const Vcu_vehicle_status_report_101& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&control_mode_resp_, &from.control_mode_resp_,
    static_cast<size_t>(reinterpret_cast<char*>(&vcu_statusrept_checksum_) -
    reinterpret_cast<char*>(&control_mode_resp_)) + sizeof(vcu_statusrept_checksum_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Vcu_vehicle_status_report_101)
}

void Vcu_vehicle_status_report_101::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&control_mode_resp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&vcu_statusrept_checksum_) -
    reinterpret_cast<char*>(&control_mode_resp_)) + sizeof(vcu_statusrept_checksum_));
}

Vcu_vehicle_status_report_101::~Vcu_vehicle_status_report_101() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Vcu_vehicle_status_report_101)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Vcu_vehicle_status_report_101::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vcu_vehicle_status_report_101::ArenaDtor(void* object) {
  Vcu_vehicle_status_report_101* _this = reinterpret_cast< Vcu_vehicle_status_report_101* >(object);
  (void)_this;
}
void Vcu_vehicle_status_report_101::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Vcu_vehicle_status_report_101::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Vcu_vehicle_status_report_101::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Vcu_vehicle_status_report_101)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&control_mode_resp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&vcu_display_soc_) -
        reinterpret_cast<char*>(&control_mode_resp_)) + sizeof(vcu_display_soc_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&vcu_motor_speed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&vcu_statusrept_checksum_) -
        reinterpret_cast<char*>(&vcu_motor_speed_)) + sizeof(vcu_statusrept_checksum_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vcu_vehicle_status_report_101::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool drive_enable_resp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_drive_enable_resp(&has_bits);
          drive_enable_resp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool vcu_highvoltagecircuitstate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_vcu_highvoltagecircuitstate(&has_bits);
          vcu_highvoltagecircuitstate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool vcu_dcdc_enabledstates = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_vcu_dcdc_enabledstates(&has_bits);
          vcu_dcdc_enabledstates_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Vcu_vehicle_status_report_101.Control_mode_respType control_mode_resp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Vcu_vehicle_status_report_101_Control_mode_respType_IsValid(val))) {
            _internal_set_control_mode_resp(static_cast<::apollo::canbus::Vcu_vehicle_status_report_101_Control_mode_respType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional double vcu_vehicle_speed = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_vcu_vehicle_speed(&has_bits);
          vcu_vehicle_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional int32 vcu_lowbatterychargingfunctionst = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_vcu_lowbatterychargingfunctionst(&has_bits);
          vcu_lowbatterychargingfunctionst_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 vcu_display_soc = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_vcu_display_soc(&has_bits);
          vcu_display_soc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double vcu_motor_speed = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_vcu_motor_speed(&has_bits);
          vcu_motor_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional int32 vcu_motor_direction = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_vcu_motor_direction(&has_bits);
          vcu_motor_direction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool vcu_motor_speed_valid = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_vcu_motor_speed_valid(&has_bits);
          vcu_motor_speed_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 vcu_statusrept_alivecounter = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_vcu_statusrept_alivecounter(&has_bits);
          vcu_statusrept_alivecounter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 vcu_statusrept_checksum = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_vcu_statusrept_checksum(&has_bits);
          vcu_statusrept_checksum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vcu_vehicle_status_report_101::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Vcu_vehicle_status_report_101)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool drive_enable_resp = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_drive_enable_resp(), target);
  }

  // optional bool vcu_highvoltagecircuitstate = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_vcu_highvoltagecircuitstate(), target);
  }

  // optional bool vcu_dcdc_enabledstates = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_vcu_dcdc_enabledstates(), target);
  }

  // optional .apollo.canbus.Vcu_vehicle_status_report_101.Control_mode_respType control_mode_resp = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_control_mode_resp(), target);
  }

  // optional double vcu_vehicle_speed = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_vcu_vehicle_speed(), target);
  }

  // optional int32 vcu_lowbatterychargingfunctionst = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_vcu_lowbatterychargingfunctionst(), target);
  }

  // optional int32 vcu_display_soc = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_vcu_display_soc(), target);
  }

  // optional double vcu_motor_speed = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_vcu_motor_speed(), target);
  }

  // optional int32 vcu_motor_direction = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_vcu_motor_direction(), target);
  }

  // optional bool vcu_motor_speed_valid = 10;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_vcu_motor_speed_valid(), target);
  }

  // optional int32 vcu_statusrept_alivecounter = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_vcu_statusrept_alivecounter(), target);
  }

  // optional int32 vcu_statusrept_checksum = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_vcu_statusrept_checksum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Vcu_vehicle_status_report_101)
  return target;
}

size_t Vcu_vehicle_status_report_101::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Vcu_vehicle_status_report_101)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.canbus.Vcu_vehicle_status_report_101.Control_mode_respType control_mode_resp = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_control_mode_resp());
    }

    // optional bool drive_enable_resp = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool vcu_highvoltagecircuitstate = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool vcu_dcdc_enabledstates = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool vcu_motor_speed_valid = 10;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional double vcu_vehicle_speed = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional int32 vcu_lowbatterychargingfunctionst = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_vcu_lowbatterychargingfunctionst());
    }

    // optional int32 vcu_display_soc = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_vcu_display_soc());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional double vcu_motor_speed = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional int32 vcu_motor_direction = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_vcu_motor_direction());
    }

    // optional int32 vcu_statusrept_alivecounter = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_vcu_statusrept_alivecounter());
    }

    // optional int32 vcu_statusrept_checksum = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_vcu_statusrept_checksum());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vcu_vehicle_status_report_101::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Vcu_vehicle_status_report_101::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vcu_vehicle_status_report_101::GetClassData() const { return &_class_data_; }

void Vcu_vehicle_status_report_101::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Vcu_vehicle_status_report_101 *>(to)->MergeFrom(
      static_cast<const Vcu_vehicle_status_report_101 &>(from));
}


void Vcu_vehicle_status_report_101::MergeFrom(const Vcu_vehicle_status_report_101& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Vcu_vehicle_status_report_101)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      control_mode_resp_ = from.control_mode_resp_;
    }
    if (cached_has_bits & 0x00000002u) {
      drive_enable_resp_ = from.drive_enable_resp_;
    }
    if (cached_has_bits & 0x00000004u) {
      vcu_highvoltagecircuitstate_ = from.vcu_highvoltagecircuitstate_;
    }
    if (cached_has_bits & 0x00000008u) {
      vcu_dcdc_enabledstates_ = from.vcu_dcdc_enabledstates_;
    }
    if (cached_has_bits & 0x00000010u) {
      vcu_motor_speed_valid_ = from.vcu_motor_speed_valid_;
    }
    if (cached_has_bits & 0x00000020u) {
      vcu_vehicle_speed_ = from.vcu_vehicle_speed_;
    }
    if (cached_has_bits & 0x00000040u) {
      vcu_lowbatterychargingfunctionst_ = from.vcu_lowbatterychargingfunctionst_;
    }
    if (cached_has_bits & 0x00000080u) {
      vcu_display_soc_ = from.vcu_display_soc_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      vcu_motor_speed_ = from.vcu_motor_speed_;
    }
    if (cached_has_bits & 0x00000200u) {
      vcu_motor_direction_ = from.vcu_motor_direction_;
    }
    if (cached_has_bits & 0x00000400u) {
      vcu_statusrept_alivecounter_ = from.vcu_statusrept_alivecounter_;
    }
    if (cached_has_bits & 0x00000800u) {
      vcu_statusrept_checksum_ = from.vcu_statusrept_checksum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vcu_vehicle_status_report_101::CopyFrom(const Vcu_vehicle_status_report_101& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Vcu_vehicle_status_report_101)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vcu_vehicle_status_report_101::IsInitialized() const {
  return true;
}

void Vcu_vehicle_status_report_101::InternalSwap(Vcu_vehicle_status_report_101* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vcu_vehicle_status_report_101, vcu_statusrept_checksum_)
      + sizeof(Vcu_vehicle_status_report_101::vcu_statusrept_checksum_)
      - PROTOBUF_FIELD_OFFSET(Vcu_vehicle_status_report_101, control_mode_resp_)>(
          reinterpret_cast<char*>(&control_mode_resp_),
          reinterpret_cast<char*>(&other->control_mode_resp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vcu_vehicle_status_report_101::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto[12]);
}

// ===================================================================

class Vcu_vehicle_info_response_502::_Internal {
 public:
  using HasBits = decltype(std::declval<Vcu_vehicle_info_response_502>()._has_bits_);
  static void set_has_vehicle_softwareversion_indicati(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_project(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_manufacturer(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_year(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_month(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_day(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_vehicle_serial_number(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

Vcu_vehicle_info_response_502::Vcu_vehicle_info_response_502(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Vcu_vehicle_info_response_502)
}
Vcu_vehicle_info_response_502::Vcu_vehicle_info_response_502(const Vcu_vehicle_info_response_502& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&vehicle_softwareversion_indicati_, &from.vehicle_softwareversion_indicati_,
    static_cast<size_t>(reinterpret_cast<char*>(&vehicle_serial_number_) -
    reinterpret_cast<char*>(&vehicle_softwareversion_indicati_)) + sizeof(vehicle_serial_number_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Vcu_vehicle_info_response_502)
}

void Vcu_vehicle_info_response_502::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&vehicle_softwareversion_indicati_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&vehicle_serial_number_) -
    reinterpret_cast<char*>(&vehicle_softwareversion_indicati_)) + sizeof(vehicle_serial_number_));
}

Vcu_vehicle_info_response_502::~Vcu_vehicle_info_response_502() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Vcu_vehicle_info_response_502)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Vcu_vehicle_info_response_502::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vcu_vehicle_info_response_502::ArenaDtor(void* object) {
  Vcu_vehicle_info_response_502* _this = reinterpret_cast< Vcu_vehicle_info_response_502* >(object);
  (void)_this;
}
void Vcu_vehicle_info_response_502::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Vcu_vehicle_info_response_502::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Vcu_vehicle_info_response_502::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Vcu_vehicle_info_response_502)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&vehicle_softwareversion_indicati_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&vehicle_serial_number_) -
        reinterpret_cast<char*>(&vehicle_softwareversion_indicati_)) + sizeof(vehicle_serial_number_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vcu_vehicle_info_response_502::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 vehicle_softwareversion_indicati = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_vehicle_softwareversion_indicati(&has_bits);
          vehicle_softwareversion_indicati_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 project = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_project(&has_bits);
          project_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 manufacturer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_manufacturer(&has_bits);
          manufacturer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 year = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_year(&has_bits);
          year_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 month = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_month(&has_bits);
          month_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 day = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_day(&has_bits);
          day_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 vehicle_serial_number = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_vehicle_serial_number(&has_bits);
          vehicle_serial_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vcu_vehicle_info_response_502::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Vcu_vehicle_info_response_502)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 vehicle_softwareversion_indicati = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_vehicle_softwareversion_indicati(), target);
  }

  // optional int32 project = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_project(), target);
  }

  // optional int32 manufacturer = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_manufacturer(), target);
  }

  // optional int32 year = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_year(), target);
  }

  // optional int32 month = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_month(), target);
  }

  // optional int32 day = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_day(), target);
  }

  // optional int32 vehicle_serial_number = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_vehicle_serial_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Vcu_vehicle_info_response_502)
  return target;
}

size_t Vcu_vehicle_info_response_502::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Vcu_vehicle_info_response_502)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional int32 vehicle_softwareversion_indicati = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_vehicle_softwareversion_indicati());
    }

    // optional int32 project = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_project());
    }

    // optional int32 manufacturer = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_manufacturer());
    }

    // optional int32 year = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_year());
    }

    // optional int32 month = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_month());
    }

    // optional int32 day = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_day());
    }

    // optional int32 vehicle_serial_number = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_vehicle_serial_number());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vcu_vehicle_info_response_502::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Vcu_vehicle_info_response_502::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vcu_vehicle_info_response_502::GetClassData() const { return &_class_data_; }

void Vcu_vehicle_info_response_502::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Vcu_vehicle_info_response_502 *>(to)->MergeFrom(
      static_cast<const Vcu_vehicle_info_response_502 &>(from));
}


void Vcu_vehicle_info_response_502::MergeFrom(const Vcu_vehicle_info_response_502& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Vcu_vehicle_info_response_502)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      vehicle_softwareversion_indicati_ = from.vehicle_softwareversion_indicati_;
    }
    if (cached_has_bits & 0x00000002u) {
      project_ = from.project_;
    }
    if (cached_has_bits & 0x00000004u) {
      manufacturer_ = from.manufacturer_;
    }
    if (cached_has_bits & 0x00000008u) {
      year_ = from.year_;
    }
    if (cached_has_bits & 0x00000010u) {
      month_ = from.month_;
    }
    if (cached_has_bits & 0x00000020u) {
      day_ = from.day_;
    }
    if (cached_has_bits & 0x00000040u) {
      vehicle_serial_number_ = from.vehicle_serial_number_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vcu_vehicle_info_response_502::CopyFrom(const Vcu_vehicle_info_response_502& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Vcu_vehicle_info_response_502)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vcu_vehicle_info_response_502::IsInitialized() const {
  return true;
}

void Vcu_vehicle_info_response_502::InternalSwap(Vcu_vehicle_info_response_502* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vcu_vehicle_info_response_502, vehicle_serial_number_)
      + sizeof(Vcu_vehicle_info_response_502::vehicle_serial_number_)
      - PROTOBUF_FIELD_OFFSET(Vcu_vehicle_info_response_502, vehicle_softwareversion_indicati_)>(
          reinterpret_cast<char*>(&vehicle_softwareversion_indicati_),
          reinterpret_cast<char*>(&other->vehicle_softwareversion_indicati_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vcu_vehicle_info_response_502::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto[13]);
}

// ===================================================================

class Aeb_diagnosis1_626::_Internal {
 public:
  using HasBits = decltype(std::declval<Aeb_diagnosis1_626>()._has_bits_);
  static void set_has_aeb_softwareversion(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_aeb_hardwareversion(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Aeb_diagnosis1_626::Aeb_diagnosis1_626(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Aeb_diagnosis1_626)
}
Aeb_diagnosis1_626::Aeb_diagnosis1_626(const Aeb_diagnosis1_626& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&aeb_softwareversion_, &from.aeb_softwareversion_,
    static_cast<size_t>(reinterpret_cast<char*>(&aeb_hardwareversion_) -
    reinterpret_cast<char*>(&aeb_softwareversion_)) + sizeof(aeb_hardwareversion_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Aeb_diagnosis1_626)
}

void Aeb_diagnosis1_626::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&aeb_softwareversion_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&aeb_hardwareversion_) -
    reinterpret_cast<char*>(&aeb_softwareversion_)) + sizeof(aeb_hardwareversion_));
}

Aeb_diagnosis1_626::~Aeb_diagnosis1_626() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Aeb_diagnosis1_626)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Aeb_diagnosis1_626::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Aeb_diagnosis1_626::ArenaDtor(void* object) {
  Aeb_diagnosis1_626* _this = reinterpret_cast< Aeb_diagnosis1_626* >(object);
  (void)_this;
}
void Aeb_diagnosis1_626::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Aeb_diagnosis1_626::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Aeb_diagnosis1_626::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Aeb_diagnosis1_626)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&aeb_softwareversion_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&aeb_hardwareversion_) -
        reinterpret_cast<char*>(&aeb_softwareversion_)) + sizeof(aeb_hardwareversion_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Aeb_diagnosis1_626::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double aeb_softwareversion = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_aeb_softwareversion(&has_bits);
          aeb_softwareversion_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double aeb_hardwareversion = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_aeb_hardwareversion(&has_bits);
          aeb_hardwareversion_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Aeb_diagnosis1_626::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Aeb_diagnosis1_626)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double aeb_softwareversion = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_aeb_softwareversion(), target);
  }

  // optional double aeb_hardwareversion = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_aeb_hardwareversion(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Aeb_diagnosis1_626)
  return target;
}

size_t Aeb_diagnosis1_626::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Aeb_diagnosis1_626)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double aeb_softwareversion = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double aeb_hardwareversion = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Aeb_diagnosis1_626::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Aeb_diagnosis1_626::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Aeb_diagnosis1_626::GetClassData() const { return &_class_data_; }

void Aeb_diagnosis1_626::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Aeb_diagnosis1_626 *>(to)->MergeFrom(
      static_cast<const Aeb_diagnosis1_626 &>(from));
}


void Aeb_diagnosis1_626::MergeFrom(const Aeb_diagnosis1_626& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Aeb_diagnosis1_626)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      aeb_softwareversion_ = from.aeb_softwareversion_;
    }
    if (cached_has_bits & 0x00000002u) {
      aeb_hardwareversion_ = from.aeb_hardwareversion_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Aeb_diagnosis1_626::CopyFrom(const Aeb_diagnosis1_626& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Aeb_diagnosis1_626)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Aeb_diagnosis1_626::IsInitialized() const {
  return true;
}

void Aeb_diagnosis1_626::InternalSwap(Aeb_diagnosis1_626* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Aeb_diagnosis1_626, aeb_hardwareversion_)
      + sizeof(Aeb_diagnosis1_626::aeb_hardwareversion_)
      - PROTOBUF_FIELD_OFFSET(Aeb_diagnosis1_626, aeb_softwareversion_)>(
          reinterpret_cast<char*>(&aeb_softwareversion_),
          reinterpret_cast<char*>(&other->aeb_softwareversion_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Aeb_diagnosis1_626::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto[14]);
}

// ===================================================================

class Aeb_diagresp_718::_Internal {
 public:
  using HasBits = decltype(std::declval<Aeb_diagresp_718>()._has_bits_);
  static void set_has_aeb_diagresp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Aeb_diagresp_718::Aeb_diagresp_718(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Aeb_diagresp_718)
}
Aeb_diagresp_718::Aeb_diagresp_718(const Aeb_diagresp_718& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  aeb_diagresp_ = from.aeb_diagresp_;
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Aeb_diagresp_718)
}

void Aeb_diagresp_718::SharedCtor() {
aeb_diagresp_ = false;
}

Aeb_diagresp_718::~Aeb_diagresp_718() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Aeb_diagresp_718)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Aeb_diagresp_718::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Aeb_diagresp_718::ArenaDtor(void* object) {
  Aeb_diagresp_718* _this = reinterpret_cast< Aeb_diagresp_718* >(object);
  (void)_this;
}
void Aeb_diagresp_718::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Aeb_diagresp_718::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Aeb_diagresp_718::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Aeb_diagresp_718)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  aeb_diagresp_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Aeb_diagresp_718::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool aeb_diagresp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_aeb_diagresp(&has_bits);
          aeb_diagresp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Aeb_diagresp_718::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Aeb_diagresp_718)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool aeb_diagresp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_aeb_diagresp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Aeb_diagresp_718)
  return target;
}

size_t Aeb_diagresp_718::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Aeb_diagresp_718)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool aeb_diagresp = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Aeb_diagresp_718::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Aeb_diagresp_718::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Aeb_diagresp_718::GetClassData() const { return &_class_data_; }

void Aeb_diagresp_718::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Aeb_diagresp_718 *>(to)->MergeFrom(
      static_cast<const Aeb_diagresp_718 &>(from));
}


void Aeb_diagresp_718::MergeFrom(const Aeb_diagresp_718& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Aeb_diagresp_718)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_aeb_diagresp()) {
    _internal_set_aeb_diagresp(from._internal_aeb_diagresp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Aeb_diagresp_718::CopyFrom(const Aeb_diagresp_718& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Aeb_diagresp_718)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Aeb_diagresp_718::IsInitialized() const {
  return true;
}

void Aeb_diagresp_718::InternalSwap(Aeb_diagresp_718* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(aeb_diagresp_, other->aeb_diagresp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Aeb_diagresp_718::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto[15]);
}

// ===================================================================

class Pas_1st_data_311::_Internal {
 public:
  using HasBits = decltype(std::declval<Pas_1st_data_311>()._has_bits_);
  static void set_has_pasdistance4(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pasdistance3(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_pas_f1_status(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_pas_f2_status(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_pas_f3_status(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_pas_f4_status(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_pasdistance2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_pasdistance1(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

Pas_1st_data_311::Pas_1st_data_311(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Pas_1st_data_311)
}
Pas_1st_data_311::Pas_1st_data_311(const Pas_1st_data_311& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&pasdistance4_, &from.pasdistance4_,
    static_cast<size_t>(reinterpret_cast<char*>(&pas_f4_status_) -
    reinterpret_cast<char*>(&pasdistance4_)) + sizeof(pas_f4_status_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Pas_1st_data_311)
}

void Pas_1st_data_311::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pasdistance4_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pas_f4_status_) -
    reinterpret_cast<char*>(&pasdistance4_)) + sizeof(pas_f4_status_));
}

Pas_1st_data_311::~Pas_1st_data_311() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Pas_1st_data_311)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Pas_1st_data_311::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Pas_1st_data_311::ArenaDtor(void* object) {
  Pas_1st_data_311* _this = reinterpret_cast< Pas_1st_data_311* >(object);
  (void)_this;
}
void Pas_1st_data_311::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Pas_1st_data_311::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Pas_1st_data_311::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Pas_1st_data_311)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&pasdistance4_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pas_f4_status_) -
        reinterpret_cast<char*>(&pasdistance4_)) + sizeof(pas_f4_status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pas_1st_data_311::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double pasdistance4 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_pasdistance4(&has_bits);
          pasdistance4_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double pasdistance3 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_pasdistance3(&has_bits);
          pasdistance3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool pas_f1_status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_pas_f1_status(&has_bits);
          pas_f1_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool pas_f2_status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_pas_f2_status(&has_bits);
          pas_f2_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool pas_f3_status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_pas_f3_status(&has_bits);
          pas_f3_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool pas_f4_status = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_pas_f4_status(&has_bits);
          pas_f4_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double pasdistance2 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_pasdistance2(&has_bits);
          pasdistance2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double pasdistance1 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_pasdistance1(&has_bits);
          pasdistance1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Pas_1st_data_311::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Pas_1st_data_311)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double pasdistance4 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_pasdistance4(), target);
  }

  // optional double pasdistance3 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_pasdistance3(), target);
  }

  // optional bool pas_f1_status = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_pas_f1_status(), target);
  }

  // optional bool pas_f2_status = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_pas_f2_status(), target);
  }

  // optional bool pas_f3_status = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_pas_f3_status(), target);
  }

  // optional bool pas_f4_status = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_pas_f4_status(), target);
  }

  // optional double pasdistance2 = 7;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_pasdistance2(), target);
  }

  // optional double pasdistance1 = 8;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_pasdistance1(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Pas_1st_data_311)
  return target;
}

size_t Pas_1st_data_311::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Pas_1st_data_311)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional double pasdistance4 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double pasdistance3 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double pasdistance2 = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double pasdistance1 = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional bool pas_f1_status = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool pas_f2_status = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool pas_f3_status = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool pas_f4_status = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Pas_1st_data_311::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Pas_1st_data_311::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Pas_1st_data_311::GetClassData() const { return &_class_data_; }

void Pas_1st_data_311::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Pas_1st_data_311 *>(to)->MergeFrom(
      static_cast<const Pas_1st_data_311 &>(from));
}


void Pas_1st_data_311::MergeFrom(const Pas_1st_data_311& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Pas_1st_data_311)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      pasdistance4_ = from.pasdistance4_;
    }
    if (cached_has_bits & 0x00000002u) {
      pasdistance3_ = from.pasdistance3_;
    }
    if (cached_has_bits & 0x00000004u) {
      pasdistance2_ = from.pasdistance2_;
    }
    if (cached_has_bits & 0x00000008u) {
      pasdistance1_ = from.pasdistance1_;
    }
    if (cached_has_bits & 0x00000010u) {
      pas_f1_status_ = from.pas_f1_status_;
    }
    if (cached_has_bits & 0x00000020u) {
      pas_f2_status_ = from.pas_f2_status_;
    }
    if (cached_has_bits & 0x00000040u) {
      pas_f3_status_ = from.pas_f3_status_;
    }
    if (cached_has_bits & 0x00000080u) {
      pas_f4_status_ = from.pas_f4_status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Pas_1st_data_311::CopyFrom(const Pas_1st_data_311& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Pas_1st_data_311)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pas_1st_data_311::IsInitialized() const {
  return true;
}

void Pas_1st_data_311::InternalSwap(Pas_1st_data_311* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Pas_1st_data_311, pas_f4_status_)
      + sizeof(Pas_1st_data_311::pas_f4_status_)
      - PROTOBUF_FIELD_OFFSET(Pas_1st_data_311, pasdistance4_)>(
          reinterpret_cast<char*>(&pasdistance4_),
          reinterpret_cast<char*>(&other->pasdistance4_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Pas_1st_data_311::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto[16]);
}

// ===================================================================

class Pas_2nd_data_312::_Internal {
 public:
  using HasBits = decltype(std::declval<Pas_2nd_data_312>()._has_bits_);
  static void set_has_pas_b1_status(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_pas_b2_status(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_pas_b3_status(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_pas_b4_status(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_pasdistance1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pasdistance2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_pasdistance3(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_pasdistance4(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

Pas_2nd_data_312::Pas_2nd_data_312(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Pas_2nd_data_312)
}
Pas_2nd_data_312::Pas_2nd_data_312(const Pas_2nd_data_312& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&pasdistance1_, &from.pasdistance1_,
    static_cast<size_t>(reinterpret_cast<char*>(&pas_b4_status_) -
    reinterpret_cast<char*>(&pasdistance1_)) + sizeof(pas_b4_status_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Pas_2nd_data_312)
}

void Pas_2nd_data_312::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pasdistance1_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pas_b4_status_) -
    reinterpret_cast<char*>(&pasdistance1_)) + sizeof(pas_b4_status_));
}

Pas_2nd_data_312::~Pas_2nd_data_312() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Pas_2nd_data_312)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Pas_2nd_data_312::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Pas_2nd_data_312::ArenaDtor(void* object) {
  Pas_2nd_data_312* _this = reinterpret_cast< Pas_2nd_data_312* >(object);
  (void)_this;
}
void Pas_2nd_data_312::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Pas_2nd_data_312::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Pas_2nd_data_312::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Pas_2nd_data_312)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&pasdistance1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pas_b4_status_) -
        reinterpret_cast<char*>(&pasdistance1_)) + sizeof(pas_b4_status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pas_2nd_data_312::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool pas_b1_status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_pas_b1_status(&has_bits);
          pas_b1_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool pas_b2_status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_pas_b2_status(&has_bits);
          pas_b2_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool pas_b3_status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_pas_b3_status(&has_bits);
          pas_b3_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool pas_b4_status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_pas_b4_status(&has_bits);
          pas_b4_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double pasdistance1 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_pasdistance1(&has_bits);
          pasdistance1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double pasdistance2 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_pasdistance2(&has_bits);
          pasdistance2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double pasdistance3 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_pasdistance3(&has_bits);
          pasdistance3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double pasdistance4 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_pasdistance4(&has_bits);
          pasdistance4_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Pas_2nd_data_312::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Pas_2nd_data_312)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool pas_b1_status = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_pas_b1_status(), target);
  }

  // optional bool pas_b2_status = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_pas_b2_status(), target);
  }

  // optional bool pas_b3_status = 3;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_pas_b3_status(), target);
  }

  // optional bool pas_b4_status = 4;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_pas_b4_status(), target);
  }

  // optional double pasdistance1 = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_pasdistance1(), target);
  }

  // optional double pasdistance2 = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_pasdistance2(), target);
  }

  // optional double pasdistance3 = 7;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_pasdistance3(), target);
  }

  // optional double pasdistance4 = 8;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_pasdistance4(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Pas_2nd_data_312)
  return target;
}

size_t Pas_2nd_data_312::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Pas_2nd_data_312)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional double pasdistance1 = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double pasdistance2 = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double pasdistance3 = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double pasdistance4 = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional bool pas_b1_status = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool pas_b2_status = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool pas_b3_status = 3;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool pas_b4_status = 4;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Pas_2nd_data_312::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Pas_2nd_data_312::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Pas_2nd_data_312::GetClassData() const { return &_class_data_; }

void Pas_2nd_data_312::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Pas_2nd_data_312 *>(to)->MergeFrom(
      static_cast<const Pas_2nd_data_312 &>(from));
}


void Pas_2nd_data_312::MergeFrom(const Pas_2nd_data_312& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Pas_2nd_data_312)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      pasdistance1_ = from.pasdistance1_;
    }
    if (cached_has_bits & 0x00000002u) {
      pasdistance2_ = from.pasdistance2_;
    }
    if (cached_has_bits & 0x00000004u) {
      pasdistance3_ = from.pasdistance3_;
    }
    if (cached_has_bits & 0x00000008u) {
      pasdistance4_ = from.pasdistance4_;
    }
    if (cached_has_bits & 0x00000010u) {
      pas_b1_status_ = from.pas_b1_status_;
    }
    if (cached_has_bits & 0x00000020u) {
      pas_b2_status_ = from.pas_b2_status_;
    }
    if (cached_has_bits & 0x00000040u) {
      pas_b3_status_ = from.pas_b3_status_;
    }
    if (cached_has_bits & 0x00000080u) {
      pas_b4_status_ = from.pas_b4_status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Pas_2nd_data_312::CopyFrom(const Pas_2nd_data_312& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Pas_2nd_data_312)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pas_2nd_data_312::IsInitialized() const {
  return true;
}

void Pas_2nd_data_312::InternalSwap(Pas_2nd_data_312* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Pas_2nd_data_312, pas_b4_status_)
      + sizeof(Pas_2nd_data_312::pas_b4_status_)
      - PROTOBUF_FIELD_OFFSET(Pas_2nd_data_312, pasdistance1_)>(
          reinterpret_cast<char*>(&pasdistance1_),
          reinterpret_cast<char*>(&other->pasdistance1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Pas_2nd_data_312::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto[17]);
}

// ===================================================================

class Aeb_wheelimpulse_355::_Internal {
 public:
  using HasBits = decltype(std::declval<Aeb_wheelimpulse_355>()._has_bits_);
  static void set_has_flimpulse(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_flimpulsevalid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_frimpulse(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_frimpulsevalid(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_rlimpulse(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_rlimpulsevalid(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_rrimpulse(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_rrimpulsevalid(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_alivecounter(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_checksum(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

Aeb_wheelimpulse_355::Aeb_wheelimpulse_355(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Aeb_wheelimpulse_355)
}
Aeb_wheelimpulse_355::Aeb_wheelimpulse_355(const Aeb_wheelimpulse_355& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&flimpulse_, &from.flimpulse_,
    static_cast<size_t>(reinterpret_cast<char*>(&rrimpulsevalid_) -
    reinterpret_cast<char*>(&flimpulse_)) + sizeof(rrimpulsevalid_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Aeb_wheelimpulse_355)
}

void Aeb_wheelimpulse_355::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&flimpulse_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&rrimpulsevalid_) -
    reinterpret_cast<char*>(&flimpulse_)) + sizeof(rrimpulsevalid_));
}

Aeb_wheelimpulse_355::~Aeb_wheelimpulse_355() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Aeb_wheelimpulse_355)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Aeb_wheelimpulse_355::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Aeb_wheelimpulse_355::ArenaDtor(void* object) {
  Aeb_wheelimpulse_355* _this = reinterpret_cast< Aeb_wheelimpulse_355* >(object);
  (void)_this;
}
void Aeb_wheelimpulse_355::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Aeb_wheelimpulse_355::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Aeb_wheelimpulse_355::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Aeb_wheelimpulse_355)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&flimpulse_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&frimpulsevalid_) -
        reinterpret_cast<char*>(&flimpulse_)) + sizeof(frimpulsevalid_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&rlimpulsevalid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rrimpulsevalid_) -
        reinterpret_cast<char*>(&rlimpulsevalid_)) + sizeof(rrimpulsevalid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Aeb_wheelimpulse_355::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double flimpulse = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_flimpulse(&has_bits);
          flimpulse_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool flimpulsevalid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_flimpulsevalid(&has_bits);
          flimpulsevalid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double frimpulse = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_frimpulse(&has_bits);
          frimpulse_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool frimpulsevalid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_frimpulsevalid(&has_bits);
          frimpulsevalid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double rlimpulse = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_rlimpulse(&has_bits);
          rlimpulse_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool rlimpulsevalid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_rlimpulsevalid(&has_bits);
          rlimpulsevalid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double rrimpulse = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_rrimpulse(&has_bits);
          rrimpulse_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool rrimpulsevalid = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_rrimpulsevalid(&has_bits);
          rrimpulsevalid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double alivecounter = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_alivecounter(&has_bits);
          alivecounter_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double checksum = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_checksum(&has_bits);
          checksum_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Aeb_wheelimpulse_355::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Aeb_wheelimpulse_355)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double flimpulse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_flimpulse(), target);
  }

  // optional bool flimpulsevalid = 2;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_flimpulsevalid(), target);
  }

  // optional double frimpulse = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_frimpulse(), target);
  }

  // optional bool frimpulsevalid = 4;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_frimpulsevalid(), target);
  }

  // optional double rlimpulse = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_rlimpulse(), target);
  }

  // optional bool rlimpulsevalid = 6;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_rlimpulsevalid(), target);
  }

  // optional double rrimpulse = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_rrimpulse(), target);
  }

  // optional bool rrimpulsevalid = 8;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_rrimpulsevalid(), target);
  }

  // optional double alivecounter = 9;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_alivecounter(), target);
  }

  // optional double checksum = 10;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_checksum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Aeb_wheelimpulse_355)
  return target;
}

size_t Aeb_wheelimpulse_355::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Aeb_wheelimpulse_355)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional double flimpulse = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double frimpulse = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double rlimpulse = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double rrimpulse = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double alivecounter = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double checksum = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional bool flimpulsevalid = 2;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool frimpulsevalid = 4;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional bool rlimpulsevalid = 6;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool rrimpulsevalid = 8;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Aeb_wheelimpulse_355::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Aeb_wheelimpulse_355::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Aeb_wheelimpulse_355::GetClassData() const { return &_class_data_; }

void Aeb_wheelimpulse_355::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Aeb_wheelimpulse_355 *>(to)->MergeFrom(
      static_cast<const Aeb_wheelimpulse_355 &>(from));
}


void Aeb_wheelimpulse_355::MergeFrom(const Aeb_wheelimpulse_355& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Aeb_wheelimpulse_355)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      flimpulse_ = from.flimpulse_;
    }
    if (cached_has_bits & 0x00000002u) {
      frimpulse_ = from.frimpulse_;
    }
    if (cached_has_bits & 0x00000004u) {
      rlimpulse_ = from.rlimpulse_;
    }
    if (cached_has_bits & 0x00000008u) {
      rrimpulse_ = from.rrimpulse_;
    }
    if (cached_has_bits & 0x00000010u) {
      alivecounter_ = from.alivecounter_;
    }
    if (cached_has_bits & 0x00000020u) {
      checksum_ = from.checksum_;
    }
    if (cached_has_bits & 0x00000040u) {
      flimpulsevalid_ = from.flimpulsevalid_;
    }
    if (cached_has_bits & 0x00000080u) {
      frimpulsevalid_ = from.frimpulsevalid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      rlimpulsevalid_ = from.rlimpulsevalid_;
    }
    if (cached_has_bits & 0x00000200u) {
      rrimpulsevalid_ = from.rrimpulsevalid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Aeb_wheelimpulse_355::CopyFrom(const Aeb_wheelimpulse_355& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Aeb_wheelimpulse_355)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Aeb_wheelimpulse_355::IsInitialized() const {
  return true;
}

void Aeb_wheelimpulse_355::InternalSwap(Aeb_wheelimpulse_355* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Aeb_wheelimpulse_355, rrimpulsevalid_)
      + sizeof(Aeb_wheelimpulse_355::rrimpulsevalid_)
      - PROTOBUF_FIELD_OFFSET(Aeb_wheelimpulse_355, flimpulse_)>(
          reinterpret_cast<char*>(&flimpulse_),
          reinterpret_cast<char*>(&other->flimpulse_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Aeb_wheelimpulse_355::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto[18]);
}

// ===================================================================

class Aeb_rearwheelspeed_354::_Internal {
 public:
  using HasBits = decltype(std::declval<Aeb_rearwheelspeed_354>()._has_bits_);
  static void set_has_wheelspeed_rl_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_wheelspeed_rl(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_wheelspeed_rr_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_wheelspeed_rr(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_wheelspeed_rl_direct(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_wheelspeed_rr_direct(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_alivecounter_rear(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_checksum_rear(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

Aeb_rearwheelspeed_354::Aeb_rearwheelspeed_354(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Aeb_rearwheelspeed_354)
}
Aeb_rearwheelspeed_354::Aeb_rearwheelspeed_354(const Aeb_rearwheelspeed_354& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&wheelspeed_rl_, &from.wheelspeed_rl_,
    static_cast<size_t>(reinterpret_cast<char*>(&wheelspeed_rr_valid_) -
    reinterpret_cast<char*>(&wheelspeed_rl_)) + sizeof(wheelspeed_rr_valid_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Aeb_rearwheelspeed_354)
}

void Aeb_rearwheelspeed_354::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&wheelspeed_rl_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&wheelspeed_rr_valid_) -
    reinterpret_cast<char*>(&wheelspeed_rl_)) + sizeof(wheelspeed_rr_valid_));
}

Aeb_rearwheelspeed_354::~Aeb_rearwheelspeed_354() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Aeb_rearwheelspeed_354)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Aeb_rearwheelspeed_354::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Aeb_rearwheelspeed_354::ArenaDtor(void* object) {
  Aeb_rearwheelspeed_354* _this = reinterpret_cast< Aeb_rearwheelspeed_354* >(object);
  (void)_this;
}
void Aeb_rearwheelspeed_354::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Aeb_rearwheelspeed_354::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Aeb_rearwheelspeed_354::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Aeb_rearwheelspeed_354)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&wheelspeed_rl_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&wheelspeed_rr_valid_) -
        reinterpret_cast<char*>(&wheelspeed_rl_)) + sizeof(wheelspeed_rr_valid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Aeb_rearwheelspeed_354::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool wheelspeed_rl_valid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_wheelspeed_rl_valid(&has_bits);
          wheelspeed_rl_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double wheelspeed_rl = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_wheelspeed_rl(&has_bits);
          wheelspeed_rl_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool wheelspeed_rr_valid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_wheelspeed_rr_valid(&has_bits);
          wheelspeed_rr_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double wheelspeed_rr = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_wheelspeed_rr(&has_bits);
          wheelspeed_rr_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double wheelspeed_rl_direct = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_wheelspeed_rl_direct(&has_bits);
          wheelspeed_rl_direct_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double wheelspeed_rr_direct = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_wheelspeed_rr_direct(&has_bits);
          wheelspeed_rr_direct_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double alivecounter_rear = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_alivecounter_rear(&has_bits);
          alivecounter_rear_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double checksum_rear = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_checksum_rear(&has_bits);
          checksum_rear_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Aeb_rearwheelspeed_354::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Aeb_rearwheelspeed_354)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool wheelspeed_rl_valid = 1;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_wheelspeed_rl_valid(), target);
  }

  // optional double wheelspeed_rl = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_wheelspeed_rl(), target);
  }

  // optional bool wheelspeed_rr_valid = 3;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_wheelspeed_rr_valid(), target);
  }

  // optional double wheelspeed_rr = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_wheelspeed_rr(), target);
  }

  // optional double wheelspeed_rl_direct = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_wheelspeed_rl_direct(), target);
  }

  // optional double wheelspeed_rr_direct = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_wheelspeed_rr_direct(), target);
  }

  // optional double alivecounter_rear = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_alivecounter_rear(), target);
  }

  // optional double checksum_rear = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_checksum_rear(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Aeb_rearwheelspeed_354)
  return target;
}

size_t Aeb_rearwheelspeed_354::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Aeb_rearwheelspeed_354)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional double wheelspeed_rl = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double wheelspeed_rr = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double wheelspeed_rl_direct = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double wheelspeed_rr_direct = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double alivecounter_rear = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double checksum_rear = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional bool wheelspeed_rl_valid = 1;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool wheelspeed_rr_valid = 3;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Aeb_rearwheelspeed_354::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Aeb_rearwheelspeed_354::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Aeb_rearwheelspeed_354::GetClassData() const { return &_class_data_; }

void Aeb_rearwheelspeed_354::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Aeb_rearwheelspeed_354 *>(to)->MergeFrom(
      static_cast<const Aeb_rearwheelspeed_354 &>(from));
}


void Aeb_rearwheelspeed_354::MergeFrom(const Aeb_rearwheelspeed_354& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Aeb_rearwheelspeed_354)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      wheelspeed_rl_ = from.wheelspeed_rl_;
    }
    if (cached_has_bits & 0x00000002u) {
      wheelspeed_rr_ = from.wheelspeed_rr_;
    }
    if (cached_has_bits & 0x00000004u) {
      wheelspeed_rl_direct_ = from.wheelspeed_rl_direct_;
    }
    if (cached_has_bits & 0x00000008u) {
      wheelspeed_rr_direct_ = from.wheelspeed_rr_direct_;
    }
    if (cached_has_bits & 0x00000010u) {
      alivecounter_rear_ = from.alivecounter_rear_;
    }
    if (cached_has_bits & 0x00000020u) {
      checksum_rear_ = from.checksum_rear_;
    }
    if (cached_has_bits & 0x00000040u) {
      wheelspeed_rl_valid_ = from.wheelspeed_rl_valid_;
    }
    if (cached_has_bits & 0x00000080u) {
      wheelspeed_rr_valid_ = from.wheelspeed_rr_valid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Aeb_rearwheelspeed_354::CopyFrom(const Aeb_rearwheelspeed_354& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Aeb_rearwheelspeed_354)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Aeb_rearwheelspeed_354::IsInitialized() const {
  return true;
}

void Aeb_rearwheelspeed_354::InternalSwap(Aeb_rearwheelspeed_354* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Aeb_rearwheelspeed_354, wheelspeed_rr_valid_)
      + sizeof(Aeb_rearwheelspeed_354::wheelspeed_rr_valid_)
      - PROTOBUF_FIELD_OFFSET(Aeb_rearwheelspeed_354, wheelspeed_rl_)>(
          reinterpret_cast<char*>(&wheelspeed_rl_),
          reinterpret_cast<char*>(&other->wheelspeed_rl_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Aeb_rearwheelspeed_354::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto[19]);
}

// ===================================================================

class Aeb_frontwheelspeed_353::_Internal {
 public:
  using HasBits = decltype(std::declval<Aeb_frontwheelspeed_353>()._has_bits_);
  static void set_has_vehiclespeedvalid(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_vehiclespeed(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_vehiclerealdirect(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_wheelspeed_fl_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_wheelspeed_fl(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_wheelspeed_fr_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_wheelspeed_fr(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_wheelspeed_fl_direct(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_wheelspeed_fr_direct(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_alivecounter_front(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_checksum_front(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

Aeb_frontwheelspeed_353::Aeb_frontwheelspeed_353(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Aeb_frontwheelspeed_353)
}
Aeb_frontwheelspeed_353::Aeb_frontwheelspeed_353(const Aeb_frontwheelspeed_353& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&vehiclespeed_, &from.vehiclespeed_,
    static_cast<size_t>(reinterpret_cast<char*>(&wheelspeed_fr_valid_) -
    reinterpret_cast<char*>(&vehiclespeed_)) + sizeof(wheelspeed_fr_valid_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Aeb_frontwheelspeed_353)
}

void Aeb_frontwheelspeed_353::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&vehiclespeed_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&wheelspeed_fr_valid_) -
    reinterpret_cast<char*>(&vehiclespeed_)) + sizeof(wheelspeed_fr_valid_));
}

Aeb_frontwheelspeed_353::~Aeb_frontwheelspeed_353() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Aeb_frontwheelspeed_353)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Aeb_frontwheelspeed_353::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Aeb_frontwheelspeed_353::ArenaDtor(void* object) {
  Aeb_frontwheelspeed_353* _this = reinterpret_cast< Aeb_frontwheelspeed_353* >(object);
  (void)_this;
}
void Aeb_frontwheelspeed_353::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Aeb_frontwheelspeed_353::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Aeb_frontwheelspeed_353::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Aeb_frontwheelspeed_353)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&vehiclespeed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&checksum_front_) -
        reinterpret_cast<char*>(&vehiclespeed_)) + sizeof(checksum_front_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&vehiclespeedvalid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&wheelspeed_fr_valid_) -
        reinterpret_cast<char*>(&vehiclespeedvalid_)) + sizeof(wheelspeed_fr_valid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Aeb_frontwheelspeed_353::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool vehiclespeedvalid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_vehiclespeedvalid(&has_bits);
          vehiclespeedvalid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double vehiclespeed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_vehiclespeed(&has_bits);
          vehiclespeed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double vehiclerealdirect = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_vehiclerealdirect(&has_bits);
          vehiclerealdirect_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool wheelspeed_fl_valid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_wheelspeed_fl_valid(&has_bits);
          wheelspeed_fl_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double wheelspeed_fl = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_wheelspeed_fl(&has_bits);
          wheelspeed_fl_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool wheelspeed_fr_valid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_wheelspeed_fr_valid(&has_bits);
          wheelspeed_fr_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double wheelspeed_fr = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_wheelspeed_fr(&has_bits);
          wheelspeed_fr_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double wheelspeed_fl_direct = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_wheelspeed_fl_direct(&has_bits);
          wheelspeed_fl_direct_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double wheelspeed_fr_direct = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_wheelspeed_fr_direct(&has_bits);
          wheelspeed_fr_direct_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double alivecounter_front = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_alivecounter_front(&has_bits);
          alivecounter_front_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double checksum_front = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_checksum_front(&has_bits);
          checksum_front_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Aeb_frontwheelspeed_353::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Aeb_frontwheelspeed_353)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool vehiclespeedvalid = 1;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_vehiclespeedvalid(), target);
  }

  // optional double vehiclespeed = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_vehiclespeed(), target);
  }

  // optional double vehiclerealdirect = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_vehiclerealdirect(), target);
  }

  // optional bool wheelspeed_fl_valid = 4;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_wheelspeed_fl_valid(), target);
  }

  // optional double wheelspeed_fl = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_wheelspeed_fl(), target);
  }

  // optional bool wheelspeed_fr_valid = 6;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_wheelspeed_fr_valid(), target);
  }

  // optional double wheelspeed_fr = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_wheelspeed_fr(), target);
  }

  // optional double wheelspeed_fl_direct = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_wheelspeed_fl_direct(), target);
  }

  // optional double wheelspeed_fr_direct = 9;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_wheelspeed_fr_direct(), target);
  }

  // optional double alivecounter_front = 10;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_alivecounter_front(), target);
  }

  // optional double checksum_front = 11;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_checksum_front(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Aeb_frontwheelspeed_353)
  return target;
}

size_t Aeb_frontwheelspeed_353::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Aeb_frontwheelspeed_353)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional double vehiclespeed = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double vehiclerealdirect = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double wheelspeed_fl = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double wheelspeed_fr = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double wheelspeed_fl_direct = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double wheelspeed_fr_direct = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double alivecounter_front = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double checksum_front = 11;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional bool vehiclespeedvalid = 1;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool wheelspeed_fl_valid = 4;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool wheelspeed_fr_valid = 6;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Aeb_frontwheelspeed_353::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Aeb_frontwheelspeed_353::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Aeb_frontwheelspeed_353::GetClassData() const { return &_class_data_; }

void Aeb_frontwheelspeed_353::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Aeb_frontwheelspeed_353 *>(to)->MergeFrom(
      static_cast<const Aeb_frontwheelspeed_353 &>(from));
}


void Aeb_frontwheelspeed_353::MergeFrom(const Aeb_frontwheelspeed_353& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Aeb_frontwheelspeed_353)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      vehiclespeed_ = from.vehiclespeed_;
    }
    if (cached_has_bits & 0x00000002u) {
      vehiclerealdirect_ = from.vehiclerealdirect_;
    }
    if (cached_has_bits & 0x00000004u) {
      wheelspeed_fl_ = from.wheelspeed_fl_;
    }
    if (cached_has_bits & 0x00000008u) {
      wheelspeed_fr_ = from.wheelspeed_fr_;
    }
    if (cached_has_bits & 0x00000010u) {
      wheelspeed_fl_direct_ = from.wheelspeed_fl_direct_;
    }
    if (cached_has_bits & 0x00000020u) {
      wheelspeed_fr_direct_ = from.wheelspeed_fr_direct_;
    }
    if (cached_has_bits & 0x00000040u) {
      alivecounter_front_ = from.alivecounter_front_;
    }
    if (cached_has_bits & 0x00000080u) {
      checksum_front_ = from.checksum_front_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      vehiclespeedvalid_ = from.vehiclespeedvalid_;
    }
    if (cached_has_bits & 0x00000200u) {
      wheelspeed_fl_valid_ = from.wheelspeed_fl_valid_;
    }
    if (cached_has_bits & 0x00000400u) {
      wheelspeed_fr_valid_ = from.wheelspeed_fr_valid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Aeb_frontwheelspeed_353::CopyFrom(const Aeb_frontwheelspeed_353& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Aeb_frontwheelspeed_353)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Aeb_frontwheelspeed_353::IsInitialized() const {
  return true;
}

void Aeb_frontwheelspeed_353::InternalSwap(Aeb_frontwheelspeed_353* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Aeb_frontwheelspeed_353, wheelspeed_fr_valid_)
      + sizeof(Aeb_frontwheelspeed_353::wheelspeed_fr_valid_)
      - PROTOBUF_FIELD_OFFSET(Aeb_frontwheelspeed_353, vehiclespeed_)>(
          reinterpret_cast<char*>(&vehiclespeed_),
          reinterpret_cast<char*>(&other->vehiclespeed_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Aeb_frontwheelspeed_353::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto[20]);
}

// ===================================================================

class Neolix_edu::_Internal {
 public:
  using HasBits = decltype(std::declval<Neolix_edu>()._has_bits_);
  static const ::apollo::canbus::Aeb_systemstate_11& aeb_systemstate_11(const Neolix_edu* msg);
  static void set_has_aeb_systemstate_11(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::canbus::Vcu_vehicle_fault_response_201& vcu_vehicle_fault_response_201(const Neolix_edu* msg);
  static void set_has_vcu_vehicle_fault_response_201(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::canbus::Vcu_powerstatus_214& vcu_powerstatus_214(const Neolix_edu* msg);
  static void set_has_vcu_powerstatus_214(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::canbus::Ads_light_horn_command_310& ads_light_horn_command_310(const Neolix_edu* msg);
  static void set_has_ads_light_horn_command_310(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::apollo::canbus::Ads_brake_command_46& ads_brake_command_46(const Neolix_edu* msg);
  static void set_has_ads_brake_command_46(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::apollo::canbus::Vcu_brake_report_47& vcu_brake_report_47(const Neolix_edu* msg);
  static void set_has_vcu_brake_report_47(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::apollo::canbus::Vcu_eps_report_57& vcu_eps_report_57(const Neolix_edu* msg);
  static void set_has_vcu_eps_report_57(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::apollo::canbus::Ads_eps_command_56& ads_eps_command_56(const Neolix_edu* msg);
  static void set_has_ads_eps_command_56(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::apollo::canbus::Ads_drive_command_50& ads_drive_command_50(const Neolix_edu* msg);
  static void set_has_ads_drive_command_50(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::apollo::canbus::Vcu_drive_report_52& vcu_drive_report_52(const Neolix_edu* msg);
  static void set_has_vcu_drive_report_52(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::apollo::canbus::Ads_diagnosis_628& ads_diagnosis_628(const Neolix_edu* msg);
  static void set_has_ads_diagnosis_628(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::apollo::canbus::Vcu_nm_401& vcu_nm_401(const Neolix_edu* msg);
  static void set_has_vcu_nm_401(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::apollo::canbus::Vcu_vehicle_status_report_101& vcu_vehicle_status_report_101(const Neolix_edu* msg);
  static void set_has_vcu_vehicle_status_report_101(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::apollo::canbus::Vcu_vehicle_info_response_502& vcu_vehicle_info_response_502(const Neolix_edu* msg);
  static void set_has_vcu_vehicle_info_response_502(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::apollo::canbus::Aeb_diagnosis1_626& aeb_diagnosis1_626(const Neolix_edu* msg);
  static void set_has_aeb_diagnosis1_626(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::apollo::canbus::Aeb_diagresp_718& aeb_diagresp_718(const Neolix_edu* msg);
  static void set_has_aeb_diagresp_718(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::apollo::canbus::Pas_1st_data_311& pas_1st_data_311(const Neolix_edu* msg);
  static void set_has_pas_1st_data_311(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::apollo::canbus::Pas_2nd_data_312& pas_2nd_data_312(const Neolix_edu* msg);
  static void set_has_pas_2nd_data_312(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::apollo::canbus::Aeb_wheelimpulse_355& aeb_wheelimpulse_355(const Neolix_edu* msg);
  static void set_has_aeb_wheelimpulse_355(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static const ::apollo::canbus::Aeb_rearwheelspeed_354& aeb_rearwheelspeed_354(const Neolix_edu* msg);
  static void set_has_aeb_rearwheelspeed_354(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static const ::apollo::canbus::Aeb_frontwheelspeed_353& aeb_frontwheelspeed_353(const Neolix_edu* msg);
  static void set_has_aeb_frontwheelspeed_353(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
};

const ::apollo::canbus::Aeb_systemstate_11&
Neolix_edu::_Internal::aeb_systemstate_11(const Neolix_edu* msg) {
  return *msg->aeb_systemstate_11_;
}
const ::apollo::canbus::Vcu_vehicle_fault_response_201&
Neolix_edu::_Internal::vcu_vehicle_fault_response_201(const Neolix_edu* msg) {
  return *msg->vcu_vehicle_fault_response_201_;
}
const ::apollo::canbus::Vcu_powerstatus_214&
Neolix_edu::_Internal::vcu_powerstatus_214(const Neolix_edu* msg) {
  return *msg->vcu_powerstatus_214_;
}
const ::apollo::canbus::Ads_light_horn_command_310&
Neolix_edu::_Internal::ads_light_horn_command_310(const Neolix_edu* msg) {
  return *msg->ads_light_horn_command_310_;
}
const ::apollo::canbus::Ads_brake_command_46&
Neolix_edu::_Internal::ads_brake_command_46(const Neolix_edu* msg) {
  return *msg->ads_brake_command_46_;
}
const ::apollo::canbus::Vcu_brake_report_47&
Neolix_edu::_Internal::vcu_brake_report_47(const Neolix_edu* msg) {
  return *msg->vcu_brake_report_47_;
}
const ::apollo::canbus::Vcu_eps_report_57&
Neolix_edu::_Internal::vcu_eps_report_57(const Neolix_edu* msg) {
  return *msg->vcu_eps_report_57_;
}
const ::apollo::canbus::Ads_eps_command_56&
Neolix_edu::_Internal::ads_eps_command_56(const Neolix_edu* msg) {
  return *msg->ads_eps_command_56_;
}
const ::apollo::canbus::Ads_drive_command_50&
Neolix_edu::_Internal::ads_drive_command_50(const Neolix_edu* msg) {
  return *msg->ads_drive_command_50_;
}
const ::apollo::canbus::Vcu_drive_report_52&
Neolix_edu::_Internal::vcu_drive_report_52(const Neolix_edu* msg) {
  return *msg->vcu_drive_report_52_;
}
const ::apollo::canbus::Ads_diagnosis_628&
Neolix_edu::_Internal::ads_diagnosis_628(const Neolix_edu* msg) {
  return *msg->ads_diagnosis_628_;
}
const ::apollo::canbus::Vcu_nm_401&
Neolix_edu::_Internal::vcu_nm_401(const Neolix_edu* msg) {
  return *msg->vcu_nm_401_;
}
const ::apollo::canbus::Vcu_vehicle_status_report_101&
Neolix_edu::_Internal::vcu_vehicle_status_report_101(const Neolix_edu* msg) {
  return *msg->vcu_vehicle_status_report_101_;
}
const ::apollo::canbus::Vcu_vehicle_info_response_502&
Neolix_edu::_Internal::vcu_vehicle_info_response_502(const Neolix_edu* msg) {
  return *msg->vcu_vehicle_info_response_502_;
}
const ::apollo::canbus::Aeb_diagnosis1_626&
Neolix_edu::_Internal::aeb_diagnosis1_626(const Neolix_edu* msg) {
  return *msg->aeb_diagnosis1_626_;
}
const ::apollo::canbus::Aeb_diagresp_718&
Neolix_edu::_Internal::aeb_diagresp_718(const Neolix_edu* msg) {
  return *msg->aeb_diagresp_718_;
}
const ::apollo::canbus::Pas_1st_data_311&
Neolix_edu::_Internal::pas_1st_data_311(const Neolix_edu* msg) {
  return *msg->pas_1st_data_311_;
}
const ::apollo::canbus::Pas_2nd_data_312&
Neolix_edu::_Internal::pas_2nd_data_312(const Neolix_edu* msg) {
  return *msg->pas_2nd_data_312_;
}
const ::apollo::canbus::Aeb_wheelimpulse_355&
Neolix_edu::_Internal::aeb_wheelimpulse_355(const Neolix_edu* msg) {
  return *msg->aeb_wheelimpulse_355_;
}
const ::apollo::canbus::Aeb_rearwheelspeed_354&
Neolix_edu::_Internal::aeb_rearwheelspeed_354(const Neolix_edu* msg) {
  return *msg->aeb_rearwheelspeed_354_;
}
const ::apollo::canbus::Aeb_frontwheelspeed_353&
Neolix_edu::_Internal::aeb_frontwheelspeed_353(const Neolix_edu* msg) {
  return *msg->aeb_frontwheelspeed_353_;
}
Neolix_edu::Neolix_edu(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.canbus.Neolix_edu)
}
Neolix_edu::Neolix_edu(const Neolix_edu& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_aeb_systemstate_11()) {
    aeb_systemstate_11_ = new ::apollo::canbus::Aeb_systemstate_11(*from.aeb_systemstate_11_);
  } else {
    aeb_systemstate_11_ = nullptr;
  }
  if (from._internal_has_vcu_vehicle_fault_response_201()) {
    vcu_vehicle_fault_response_201_ = new ::apollo::canbus::Vcu_vehicle_fault_response_201(*from.vcu_vehicle_fault_response_201_);
  } else {
    vcu_vehicle_fault_response_201_ = nullptr;
  }
  if (from._internal_has_vcu_powerstatus_214()) {
    vcu_powerstatus_214_ = new ::apollo::canbus::Vcu_powerstatus_214(*from.vcu_powerstatus_214_);
  } else {
    vcu_powerstatus_214_ = nullptr;
  }
  if (from._internal_has_ads_light_horn_command_310()) {
    ads_light_horn_command_310_ = new ::apollo::canbus::Ads_light_horn_command_310(*from.ads_light_horn_command_310_);
  } else {
    ads_light_horn_command_310_ = nullptr;
  }
  if (from._internal_has_ads_brake_command_46()) {
    ads_brake_command_46_ = new ::apollo::canbus::Ads_brake_command_46(*from.ads_brake_command_46_);
  } else {
    ads_brake_command_46_ = nullptr;
  }
  if (from._internal_has_vcu_brake_report_47()) {
    vcu_brake_report_47_ = new ::apollo::canbus::Vcu_brake_report_47(*from.vcu_brake_report_47_);
  } else {
    vcu_brake_report_47_ = nullptr;
  }
  if (from._internal_has_vcu_eps_report_57()) {
    vcu_eps_report_57_ = new ::apollo::canbus::Vcu_eps_report_57(*from.vcu_eps_report_57_);
  } else {
    vcu_eps_report_57_ = nullptr;
  }
  if (from._internal_has_ads_eps_command_56()) {
    ads_eps_command_56_ = new ::apollo::canbus::Ads_eps_command_56(*from.ads_eps_command_56_);
  } else {
    ads_eps_command_56_ = nullptr;
  }
  if (from._internal_has_ads_drive_command_50()) {
    ads_drive_command_50_ = new ::apollo::canbus::Ads_drive_command_50(*from.ads_drive_command_50_);
  } else {
    ads_drive_command_50_ = nullptr;
  }
  if (from._internal_has_vcu_drive_report_52()) {
    vcu_drive_report_52_ = new ::apollo::canbus::Vcu_drive_report_52(*from.vcu_drive_report_52_);
  } else {
    vcu_drive_report_52_ = nullptr;
  }
  if (from._internal_has_ads_diagnosis_628()) {
    ads_diagnosis_628_ = new ::apollo::canbus::Ads_diagnosis_628(*from.ads_diagnosis_628_);
  } else {
    ads_diagnosis_628_ = nullptr;
  }
  if (from._internal_has_vcu_nm_401()) {
    vcu_nm_401_ = new ::apollo::canbus::Vcu_nm_401(*from.vcu_nm_401_);
  } else {
    vcu_nm_401_ = nullptr;
  }
  if (from._internal_has_vcu_vehicle_status_report_101()) {
    vcu_vehicle_status_report_101_ = new ::apollo::canbus::Vcu_vehicle_status_report_101(*from.vcu_vehicle_status_report_101_);
  } else {
    vcu_vehicle_status_report_101_ = nullptr;
  }
  if (from._internal_has_vcu_vehicle_info_response_502()) {
    vcu_vehicle_info_response_502_ = new ::apollo::canbus::Vcu_vehicle_info_response_502(*from.vcu_vehicle_info_response_502_);
  } else {
    vcu_vehicle_info_response_502_ = nullptr;
  }
  if (from._internal_has_aeb_diagnosis1_626()) {
    aeb_diagnosis1_626_ = new ::apollo::canbus::Aeb_diagnosis1_626(*from.aeb_diagnosis1_626_);
  } else {
    aeb_diagnosis1_626_ = nullptr;
  }
  if (from._internal_has_aeb_diagresp_718()) {
    aeb_diagresp_718_ = new ::apollo::canbus::Aeb_diagresp_718(*from.aeb_diagresp_718_);
  } else {
    aeb_diagresp_718_ = nullptr;
  }
  if (from._internal_has_pas_1st_data_311()) {
    pas_1st_data_311_ = new ::apollo::canbus::Pas_1st_data_311(*from.pas_1st_data_311_);
  } else {
    pas_1st_data_311_ = nullptr;
  }
  if (from._internal_has_pas_2nd_data_312()) {
    pas_2nd_data_312_ = new ::apollo::canbus::Pas_2nd_data_312(*from.pas_2nd_data_312_);
  } else {
    pas_2nd_data_312_ = nullptr;
  }
  if (from._internal_has_aeb_wheelimpulse_355()) {
    aeb_wheelimpulse_355_ = new ::apollo::canbus::Aeb_wheelimpulse_355(*from.aeb_wheelimpulse_355_);
  } else {
    aeb_wheelimpulse_355_ = nullptr;
  }
  if (from._internal_has_aeb_rearwheelspeed_354()) {
    aeb_rearwheelspeed_354_ = new ::apollo::canbus::Aeb_rearwheelspeed_354(*from.aeb_rearwheelspeed_354_);
  } else {
    aeb_rearwheelspeed_354_ = nullptr;
  }
  if (from._internal_has_aeb_frontwheelspeed_353()) {
    aeb_frontwheelspeed_353_ = new ::apollo::canbus::Aeb_frontwheelspeed_353(*from.aeb_frontwheelspeed_353_);
  } else {
    aeb_frontwheelspeed_353_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Neolix_edu)
}

void Neolix_edu::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&aeb_systemstate_11_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&aeb_frontwheelspeed_353_) -
    reinterpret_cast<char*>(&aeb_systemstate_11_)) + sizeof(aeb_frontwheelspeed_353_));
}

Neolix_edu::~Neolix_edu() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Neolix_edu)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Neolix_edu::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete aeb_systemstate_11_;
  if (this != internal_default_instance()) delete vcu_vehicle_fault_response_201_;
  if (this != internal_default_instance()) delete vcu_powerstatus_214_;
  if (this != internal_default_instance()) delete ads_light_horn_command_310_;
  if (this != internal_default_instance()) delete ads_brake_command_46_;
  if (this != internal_default_instance()) delete vcu_brake_report_47_;
  if (this != internal_default_instance()) delete vcu_eps_report_57_;
  if (this != internal_default_instance()) delete ads_eps_command_56_;
  if (this != internal_default_instance()) delete ads_drive_command_50_;
  if (this != internal_default_instance()) delete vcu_drive_report_52_;
  if (this != internal_default_instance()) delete ads_diagnosis_628_;
  if (this != internal_default_instance()) delete vcu_nm_401_;
  if (this != internal_default_instance()) delete vcu_vehicle_status_report_101_;
  if (this != internal_default_instance()) delete vcu_vehicle_info_response_502_;
  if (this != internal_default_instance()) delete aeb_diagnosis1_626_;
  if (this != internal_default_instance()) delete aeb_diagresp_718_;
  if (this != internal_default_instance()) delete pas_1st_data_311_;
  if (this != internal_default_instance()) delete pas_2nd_data_312_;
  if (this != internal_default_instance()) delete aeb_wheelimpulse_355_;
  if (this != internal_default_instance()) delete aeb_rearwheelspeed_354_;
  if (this != internal_default_instance()) delete aeb_frontwheelspeed_353_;
}

void Neolix_edu::ArenaDtor(void* object) {
  Neolix_edu* _this = reinterpret_cast< Neolix_edu* >(object);
  (void)_this;
}
void Neolix_edu::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Neolix_edu::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Neolix_edu::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Neolix_edu)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(aeb_systemstate_11_ != nullptr);
      aeb_systemstate_11_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(vcu_vehicle_fault_response_201_ != nullptr);
      vcu_vehicle_fault_response_201_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(vcu_powerstatus_214_ != nullptr);
      vcu_powerstatus_214_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(ads_light_horn_command_310_ != nullptr);
      ads_light_horn_command_310_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(ads_brake_command_46_ != nullptr);
      ads_brake_command_46_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(vcu_brake_report_47_ != nullptr);
      vcu_brake_report_47_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(vcu_eps_report_57_ != nullptr);
      vcu_eps_report_57_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(ads_eps_command_56_ != nullptr);
      ads_eps_command_56_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(ads_drive_command_50_ != nullptr);
      ads_drive_command_50_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(vcu_drive_report_52_ != nullptr);
      vcu_drive_report_52_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(ads_diagnosis_628_ != nullptr);
      ads_diagnosis_628_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(vcu_nm_401_ != nullptr);
      vcu_nm_401_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(vcu_vehicle_status_report_101_ != nullptr);
      vcu_vehicle_status_report_101_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(vcu_vehicle_info_response_502_ != nullptr);
      vcu_vehicle_info_response_502_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(aeb_diagnosis1_626_ != nullptr);
      aeb_diagnosis1_626_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(aeb_diagresp_718_ != nullptr);
      aeb_diagresp_718_->Clear();
    }
  }
  if (cached_has_bits & 0x001f0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(pas_1st_data_311_ != nullptr);
      pas_1st_data_311_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(pas_2nd_data_312_ != nullptr);
      pas_2nd_data_312_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(aeb_wheelimpulse_355_ != nullptr);
      aeb_wheelimpulse_355_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(aeb_rearwheelspeed_354_ != nullptr);
      aeb_rearwheelspeed_354_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(aeb_frontwheelspeed_353_ != nullptr);
      aeb_frontwheelspeed_353_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Neolix_edu::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.canbus.Aeb_systemstate_11 aeb_systemstate_11 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_aeb_systemstate_11(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Vcu_vehicle_fault_response_201 vcu_vehicle_fault_response_201 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_vcu_vehicle_fault_response_201(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Vcu_powerstatus_214 vcu_powerstatus_214 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_vcu_powerstatus_214(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Ads_light_horn_command_310 ads_light_horn_command_310 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_ads_light_horn_command_310(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Ads_brake_command_46 ads_brake_command_46 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_ads_brake_command_46(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Vcu_brake_report_47 vcu_brake_report_47 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_vcu_brake_report_47(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Vcu_eps_report_57 vcu_eps_report_57 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_vcu_eps_report_57(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Ads_eps_command_56 ads_eps_command_56 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_ads_eps_command_56(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Ads_drive_command_50 ads_drive_command_50 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_ads_drive_command_50(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Vcu_drive_report_52 vcu_drive_report_52 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_vcu_drive_report_52(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Ads_diagnosis_628 ads_diagnosis_628 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_ads_diagnosis_628(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Vcu_nm_401 vcu_nm_401 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_vcu_nm_401(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Vcu_vehicle_status_report_101 vcu_vehicle_status_report_101 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_vcu_vehicle_status_report_101(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Vcu_vehicle_info_response_502 vcu_vehicle_info_response_502 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_vcu_vehicle_info_response_502(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Aeb_diagnosis1_626 aeb_diagnosis1_626 = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_aeb_diagnosis1_626(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Aeb_diagresp_718 aeb_diagresp_718 = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_aeb_diagresp_718(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Pas_1st_data_311 pas_1st_data_311 = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_pas_1st_data_311(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Pas_2nd_data_312 pas_2nd_data_312 = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_pas_2nd_data_312(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Aeb_wheelimpulse_355 aeb_wheelimpulse_355 = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_aeb_wheelimpulse_355(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Aeb_rearwheelspeed_354 aeb_rearwheelspeed_354 = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_aeb_rearwheelspeed_354(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Aeb_frontwheelspeed_353 aeb_frontwheelspeed_353 = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_aeb_frontwheelspeed_353(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Neolix_edu::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Neolix_edu)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.canbus.Aeb_systemstate_11 aeb_systemstate_11 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::aeb_systemstate_11(this), target, stream);
  }

  // optional .apollo.canbus.Vcu_vehicle_fault_response_201 vcu_vehicle_fault_response_201 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::vcu_vehicle_fault_response_201(this), target, stream);
  }

  // optional .apollo.canbus.Vcu_powerstatus_214 vcu_powerstatus_214 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::vcu_powerstatus_214(this), target, stream);
  }

  // optional .apollo.canbus.Ads_light_horn_command_310 ads_light_horn_command_310 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::ads_light_horn_command_310(this), target, stream);
  }

  // optional .apollo.canbus.Ads_brake_command_46 ads_brake_command_46 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::ads_brake_command_46(this), target, stream);
  }

  // optional .apollo.canbus.Vcu_brake_report_47 vcu_brake_report_47 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::vcu_brake_report_47(this), target, stream);
  }

  // optional .apollo.canbus.Vcu_eps_report_57 vcu_eps_report_57 = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::vcu_eps_report_57(this), target, stream);
  }

  // optional .apollo.canbus.Ads_eps_command_56 ads_eps_command_56 = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::ads_eps_command_56(this), target, stream);
  }

  // optional .apollo.canbus.Ads_drive_command_50 ads_drive_command_50 = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::ads_drive_command_50(this), target, stream);
  }

  // optional .apollo.canbus.Vcu_drive_report_52 vcu_drive_report_52 = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::vcu_drive_report_52(this), target, stream);
  }

  // optional .apollo.canbus.Ads_diagnosis_628 ads_diagnosis_628 = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::ads_diagnosis_628(this), target, stream);
  }

  // optional .apollo.canbus.Vcu_nm_401 vcu_nm_401 = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::vcu_nm_401(this), target, stream);
  }

  // optional .apollo.canbus.Vcu_vehicle_status_report_101 vcu_vehicle_status_report_101 = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::vcu_vehicle_status_report_101(this), target, stream);
  }

  // optional .apollo.canbus.Vcu_vehicle_info_response_502 vcu_vehicle_info_response_502 = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::vcu_vehicle_info_response_502(this), target, stream);
  }

  // optional .apollo.canbus.Aeb_diagnosis1_626 aeb_diagnosis1_626 = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::aeb_diagnosis1_626(this), target, stream);
  }

  // optional .apollo.canbus.Aeb_diagresp_718 aeb_diagresp_718 = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::aeb_diagresp_718(this), target, stream);
  }

  // optional .apollo.canbus.Pas_1st_data_311 pas_1st_data_311 = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::pas_1st_data_311(this), target, stream);
  }

  // optional .apollo.canbus.Pas_2nd_data_312 pas_2nd_data_312 = 18;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::pas_2nd_data_312(this), target, stream);
  }

  // optional .apollo.canbus.Aeb_wheelimpulse_355 aeb_wheelimpulse_355 = 19;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::aeb_wheelimpulse_355(this), target, stream);
  }

  // optional .apollo.canbus.Aeb_rearwheelspeed_354 aeb_rearwheelspeed_354 = 20;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::aeb_rearwheelspeed_354(this), target, stream);
  }

  // optional .apollo.canbus.Aeb_frontwheelspeed_353 aeb_frontwheelspeed_353 = 21;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::aeb_frontwheelspeed_353(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Neolix_edu)
  return target;
}

size_t Neolix_edu::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Neolix_edu)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.canbus.Aeb_systemstate_11 aeb_systemstate_11 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *aeb_systemstate_11_);
    }

    // optional .apollo.canbus.Vcu_vehicle_fault_response_201 vcu_vehicle_fault_response_201 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *vcu_vehicle_fault_response_201_);
    }

    // optional .apollo.canbus.Vcu_powerstatus_214 vcu_powerstatus_214 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *vcu_powerstatus_214_);
    }

    // optional .apollo.canbus.Ads_light_horn_command_310 ads_light_horn_command_310 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ads_light_horn_command_310_);
    }

    // optional .apollo.canbus.Ads_brake_command_46 ads_brake_command_46 = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ads_brake_command_46_);
    }

    // optional .apollo.canbus.Vcu_brake_report_47 vcu_brake_report_47 = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *vcu_brake_report_47_);
    }

    // optional .apollo.canbus.Vcu_eps_report_57 vcu_eps_report_57 = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *vcu_eps_report_57_);
    }

    // optional .apollo.canbus.Ads_eps_command_56 ads_eps_command_56 = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ads_eps_command_56_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .apollo.canbus.Ads_drive_command_50 ads_drive_command_50 = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ads_drive_command_50_);
    }

    // optional .apollo.canbus.Vcu_drive_report_52 vcu_drive_report_52 = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *vcu_drive_report_52_);
    }

    // optional .apollo.canbus.Ads_diagnosis_628 ads_diagnosis_628 = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ads_diagnosis_628_);
    }

    // optional .apollo.canbus.Vcu_nm_401 vcu_nm_401 = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *vcu_nm_401_);
    }

    // optional .apollo.canbus.Vcu_vehicle_status_report_101 vcu_vehicle_status_report_101 = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *vcu_vehicle_status_report_101_);
    }

    // optional .apollo.canbus.Vcu_vehicle_info_response_502 vcu_vehicle_info_response_502 = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *vcu_vehicle_info_response_502_);
    }

    // optional .apollo.canbus.Aeb_diagnosis1_626 aeb_diagnosis1_626 = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *aeb_diagnosis1_626_);
    }

    // optional .apollo.canbus.Aeb_diagresp_718 aeb_diagresp_718 = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *aeb_diagresp_718_);
    }

  }
  if (cached_has_bits & 0x001f0000u) {
    // optional .apollo.canbus.Pas_1st_data_311 pas_1st_data_311 = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pas_1st_data_311_);
    }

    // optional .apollo.canbus.Pas_2nd_data_312 pas_2nd_data_312 = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pas_2nd_data_312_);
    }

    // optional .apollo.canbus.Aeb_wheelimpulse_355 aeb_wheelimpulse_355 = 19;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *aeb_wheelimpulse_355_);
    }

    // optional .apollo.canbus.Aeb_rearwheelspeed_354 aeb_rearwheelspeed_354 = 20;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *aeb_rearwheelspeed_354_);
    }

    // optional .apollo.canbus.Aeb_frontwheelspeed_353 aeb_frontwheelspeed_353 = 21;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *aeb_frontwheelspeed_353_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Neolix_edu::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Neolix_edu::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Neolix_edu::GetClassData() const { return &_class_data_; }

void Neolix_edu::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Neolix_edu *>(to)->MergeFrom(
      static_cast<const Neolix_edu &>(from));
}


void Neolix_edu::MergeFrom(const Neolix_edu& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Neolix_edu)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_aeb_systemstate_11()->::apollo::canbus::Aeb_systemstate_11::MergeFrom(from._internal_aeb_systemstate_11());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_vcu_vehicle_fault_response_201()->::apollo::canbus::Vcu_vehicle_fault_response_201::MergeFrom(from._internal_vcu_vehicle_fault_response_201());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_vcu_powerstatus_214()->::apollo::canbus::Vcu_powerstatus_214::MergeFrom(from._internal_vcu_powerstatus_214());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_ads_light_horn_command_310()->::apollo::canbus::Ads_light_horn_command_310::MergeFrom(from._internal_ads_light_horn_command_310());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_ads_brake_command_46()->::apollo::canbus::Ads_brake_command_46::MergeFrom(from._internal_ads_brake_command_46());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_vcu_brake_report_47()->::apollo::canbus::Vcu_brake_report_47::MergeFrom(from._internal_vcu_brake_report_47());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_vcu_eps_report_57()->::apollo::canbus::Vcu_eps_report_57::MergeFrom(from._internal_vcu_eps_report_57());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_ads_eps_command_56()->::apollo::canbus::Ads_eps_command_56::MergeFrom(from._internal_ads_eps_command_56());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_ads_drive_command_50()->::apollo::canbus::Ads_drive_command_50::MergeFrom(from._internal_ads_drive_command_50());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_vcu_drive_report_52()->::apollo::canbus::Vcu_drive_report_52::MergeFrom(from._internal_vcu_drive_report_52());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_ads_diagnosis_628()->::apollo::canbus::Ads_diagnosis_628::MergeFrom(from._internal_ads_diagnosis_628());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_vcu_nm_401()->::apollo::canbus::Vcu_nm_401::MergeFrom(from._internal_vcu_nm_401());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_vcu_vehicle_status_report_101()->::apollo::canbus::Vcu_vehicle_status_report_101::MergeFrom(from._internal_vcu_vehicle_status_report_101());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_mutable_vcu_vehicle_info_response_502()->::apollo::canbus::Vcu_vehicle_info_response_502::MergeFrom(from._internal_vcu_vehicle_info_response_502());
    }
    if (cached_has_bits & 0x00004000u) {
      _internal_mutable_aeb_diagnosis1_626()->::apollo::canbus::Aeb_diagnosis1_626::MergeFrom(from._internal_aeb_diagnosis1_626());
    }
    if (cached_has_bits & 0x00008000u) {
      _internal_mutable_aeb_diagresp_718()->::apollo::canbus::Aeb_diagresp_718::MergeFrom(from._internal_aeb_diagresp_718());
    }
  }
  if (cached_has_bits & 0x001f0000u) {
    if (cached_has_bits & 0x00010000u) {
      _internal_mutable_pas_1st_data_311()->::apollo::canbus::Pas_1st_data_311::MergeFrom(from._internal_pas_1st_data_311());
    }
    if (cached_has_bits & 0x00020000u) {
      _internal_mutable_pas_2nd_data_312()->::apollo::canbus::Pas_2nd_data_312::MergeFrom(from._internal_pas_2nd_data_312());
    }
    if (cached_has_bits & 0x00040000u) {
      _internal_mutable_aeb_wheelimpulse_355()->::apollo::canbus::Aeb_wheelimpulse_355::MergeFrom(from._internal_aeb_wheelimpulse_355());
    }
    if (cached_has_bits & 0x00080000u) {
      _internal_mutable_aeb_rearwheelspeed_354()->::apollo::canbus::Aeb_rearwheelspeed_354::MergeFrom(from._internal_aeb_rearwheelspeed_354());
    }
    if (cached_has_bits & 0x00100000u) {
      _internal_mutable_aeb_frontwheelspeed_353()->::apollo::canbus::Aeb_frontwheelspeed_353::MergeFrom(from._internal_aeb_frontwheelspeed_353());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Neolix_edu::CopyFrom(const Neolix_edu& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Neolix_edu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Neolix_edu::IsInitialized() const {
  return true;
}

void Neolix_edu::InternalSwap(Neolix_edu* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Neolix_edu, aeb_frontwheelspeed_353_)
      + sizeof(Neolix_edu::aeb_frontwheelspeed_353_)
      - PROTOBUF_FIELD_OFFSET(Neolix_edu, aeb_systemstate_11_)>(
          reinterpret_cast<char*>(&aeb_systemstate_11_),
          reinterpret_cast<char*>(&other->aeb_systemstate_11_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Neolix_edu::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto_getter, &descriptor_table_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto_once,
      file_level_metadata_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto[21]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace canbus
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::canbus::Aeb_systemstate_11* Arena::CreateMaybeMessage< ::apollo::canbus::Aeb_systemstate_11 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Aeb_systemstate_11 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Vcu_vehicle_fault_response_201* Arena::CreateMaybeMessage< ::apollo::canbus::Vcu_vehicle_fault_response_201 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Vcu_vehicle_fault_response_201 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Vcu_powerstatus_214* Arena::CreateMaybeMessage< ::apollo::canbus::Vcu_powerstatus_214 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Vcu_powerstatus_214 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Ads_light_horn_command_310* Arena::CreateMaybeMessage< ::apollo::canbus::Ads_light_horn_command_310 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Ads_light_horn_command_310 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Ads_brake_command_46* Arena::CreateMaybeMessage< ::apollo::canbus::Ads_brake_command_46 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Ads_brake_command_46 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Vcu_brake_report_47* Arena::CreateMaybeMessage< ::apollo::canbus::Vcu_brake_report_47 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Vcu_brake_report_47 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Vcu_eps_report_57* Arena::CreateMaybeMessage< ::apollo::canbus::Vcu_eps_report_57 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Vcu_eps_report_57 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Ads_eps_command_56* Arena::CreateMaybeMessage< ::apollo::canbus::Ads_eps_command_56 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Ads_eps_command_56 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Ads_drive_command_50* Arena::CreateMaybeMessage< ::apollo::canbus::Ads_drive_command_50 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Ads_drive_command_50 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Vcu_drive_report_52* Arena::CreateMaybeMessage< ::apollo::canbus::Vcu_drive_report_52 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Vcu_drive_report_52 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Ads_diagnosis_628* Arena::CreateMaybeMessage< ::apollo::canbus::Ads_diagnosis_628 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Ads_diagnosis_628 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Vcu_nm_401* Arena::CreateMaybeMessage< ::apollo::canbus::Vcu_nm_401 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Vcu_nm_401 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Vcu_vehicle_status_report_101* Arena::CreateMaybeMessage< ::apollo::canbus::Vcu_vehicle_status_report_101 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Vcu_vehicle_status_report_101 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Vcu_vehicle_info_response_502* Arena::CreateMaybeMessage< ::apollo::canbus::Vcu_vehicle_info_response_502 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Vcu_vehicle_info_response_502 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Aeb_diagnosis1_626* Arena::CreateMaybeMessage< ::apollo::canbus::Aeb_diagnosis1_626 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Aeb_diagnosis1_626 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Aeb_diagresp_718* Arena::CreateMaybeMessage< ::apollo::canbus::Aeb_diagresp_718 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Aeb_diagresp_718 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Pas_1st_data_311* Arena::CreateMaybeMessage< ::apollo::canbus::Pas_1st_data_311 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Pas_1st_data_311 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Pas_2nd_data_312* Arena::CreateMaybeMessage< ::apollo::canbus::Pas_2nd_data_312 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Pas_2nd_data_312 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Aeb_wheelimpulse_355* Arena::CreateMaybeMessage< ::apollo::canbus::Aeb_wheelimpulse_355 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Aeb_wheelimpulse_355 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Aeb_rearwheelspeed_354* Arena::CreateMaybeMessage< ::apollo::canbus::Aeb_rearwheelspeed_354 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Aeb_rearwheelspeed_354 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Aeb_frontwheelspeed_353* Arena::CreateMaybeMessage< ::apollo::canbus::Aeb_frontwheelspeed_353 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Aeb_frontwheelspeed_353 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Neolix_edu* Arena::CreateMaybeMessage< ::apollo::canbus::Neolix_edu >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::canbus::Neolix_edu >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
