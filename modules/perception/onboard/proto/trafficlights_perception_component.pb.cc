// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/onboard/proto/trafficlights_perception_component.proto

#include "modules/perception/onboard/proto/trafficlights_perception_component.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace apollo {
namespace perception {
namespace onboard {
constexpr TrafficLight::TrafficLight(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tl_tf2_frame_id_(nullptr)
  , tl_tf2_child_frame_id_(nullptr)
  , camera_names_(nullptr)
  , camera_channel_names_(nullptr)
  , camera_traffic_light_perception_conf_dir_(nullptr)
  , camera_traffic_light_perception_conf_file_(nullptr)
  , traffic_light_output_channel_name_(nullptr)
  , simulation_channel_name_(nullptr)
  , v2x_trafficlights_input_channel_name_(nullptr)
  , tl_preprocessor_name_(nullptr)
  , tl_image_timestamp_offset_(0)
  , max_v2x_msg_buff_size_(50)
  , tf2_timeout_second_(0.01)
  , query_tf_interval_seconds_(0.3)
  , valid_hdmap_interval_(1.5)
  , image_sys_ts_diff_threshold_(0.5)
  , max_process_image_fps_(8)
  , default_image_border_size_(100)
  , sync_interval_seconds_(0.5)
  , v2x_sync_interval_seconds_(0.1){}
struct TrafficLightDefaultTypeInternal {
  constexpr TrafficLightDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TrafficLightDefaultTypeInternal() {}
  union {
    TrafficLight _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TrafficLightDefaultTypeInternal _TrafficLight_default_instance_;
}  // namespace onboard
}  // namespace perception
}  // namespace apollo
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fperception_2fonboard_2fproto_2ftrafficlights_5fperception_5fcomponent_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_modules_2fperception_2fonboard_2fproto_2ftrafficlights_5fperception_5fcomponent_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fperception_2fonboard_2fproto_2ftrafficlights_5fperception_5fcomponent_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fperception_2fonboard_2fproto_2ftrafficlights_5fperception_5fcomponent_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::TrafficLight, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::TrafficLight, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::TrafficLight, tl_tf2_frame_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::TrafficLight, tl_tf2_child_frame_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::TrafficLight, tf2_timeout_second_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::TrafficLight, camera_names_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::TrafficLight, camera_channel_names_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::TrafficLight, tl_image_timestamp_offset_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::TrafficLight, max_process_image_fps_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::TrafficLight, query_tf_interval_seconds_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::TrafficLight, valid_hdmap_interval_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::TrafficLight, image_sys_ts_diff_threshold_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::TrafficLight, sync_interval_seconds_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::TrafficLight, camera_traffic_light_perception_conf_dir_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::TrafficLight, camera_traffic_light_perception_conf_file_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::TrafficLight, default_image_border_size_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::TrafficLight, traffic_light_output_channel_name_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::TrafficLight, simulation_channel_name_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::TrafficLight, v2x_trafficlights_input_channel_name_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::TrafficLight, v2x_sync_interval_seconds_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::TrafficLight, max_v2x_msg_buff_size_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::TrafficLight, tl_preprocessor_name_),
  0,
  1,
  12,
  2,
  3,
  10,
  16,
  13,
  14,
  15,
  18,
  4,
  5,
  17,
  6,
  7,
  8,
  19,
  11,
  9,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 26, -1, sizeof(::apollo::perception::onboard::TrafficLight)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::onboard::_TrafficLight_default_instance_),
};

const char descriptor_table_protodef_modules_2fperception_2fonboard_2fproto_2ftrafficlights_5fperception_5fcomponent_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\nImodules/perception/onboard/proto/traff"
  "iclights_perception_component.proto\022\031apo"
  "llo.perception.onboard\"\216\010\n\014TrafficLight\022"
  "\036\n\017tl_tf2_frame_id\030\001 \001(\t:\005world\022<\n\025tl_tf"
  "2_child_frame_id\030\002 \001(\t:\035perception_local"
  "ization_100hz\022 \n\022tf2_timeout_second\030\003 \001("
  "\001:\0040.01\022*\n\014camera_names\030\004 \001(\t:\024front_6mm"
  ",front_12mm\022^\n\024camera_channel_names\030\005 \001("
  "\t:@/apollo/sensor/camera/front_6mm,/apol"
  "lo/sensor/camera/front_12mm\022$\n\031tl_image_"
  "timestamp_offset\030\006 \001(\001:\0010\022 \n\025max_process"
  "_image_fps\030\007 \001(\005:\0018\022&\n\031query_tf_interval"
  "_seconds\030\010 \001(\001:\0030.3\022!\n\024valid_hdmap_inter"
  "val\030\t \001(\001:\0031.5\022(\n\033image_sys_ts_diff_thre"
  "shold\030\n \001(\001:\0030.5\022\"\n\025sync_interval_second"
  "s\030\013 \001(\001:\0030.5\022H\n(camera_traffic_light_per"
  "ception_conf_dir\030\014 \001(\t:\026conf/perception/"
  "camera\022B\n)camera_traffic_light_perceptio"
  "n_conf_file\030\r \001(\t:\017trafficlight.pt\022&\n\031de"
  "fault_image_border_size\030\016 \001(\005:\003100\022K\n!tr"
  "affic_light_output_channel_name\030\017 \001(\t: /"
  "apollo/perception/traffic_light\022L\n\027simul"
  "ation_channel_name\030\020 \001(\t:+/apollo/percep"
  "tion/traffic_light_simulation\022G\n$v2x_tra"
  "fficlights_input_channel_name\030\021 \001(\t:\031/ap"
  "ollo/v2x/traffic_light\022&\n\031v2x_sync_inter"
  "val_seconds\030\022 \001(\001:\0030.1\022!\n\025max_v2x_msg_bu"
  "ff_size\030\023 \001(\005:\00250\022,\n\024tl_preprocessor_nam"
  "e\030\024 \001(\t:\016TLPreprocessor"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fperception_2fonboard_2fproto_2ftrafficlights_5fperception_5fcomponent_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fperception_2fonboard_2fproto_2ftrafficlights_5fperception_5fcomponent_2eproto = {
  false, false, 1143, descriptor_table_protodef_modules_2fperception_2fonboard_2fproto_2ftrafficlights_5fperception_5fcomponent_2eproto, "modules/perception/onboard/proto/trafficlights_perception_component.proto", 
  &descriptor_table_modules_2fperception_2fonboard_2fproto_2ftrafficlights_5fperception_5fcomponent_2eproto_once, nullptr, 0, 1,
  schemas, file_default_instances, TableStruct_modules_2fperception_2fonboard_2fproto_2ftrafficlights_5fperception_5fcomponent_2eproto::offsets,
  file_level_metadata_modules_2fperception_2fonboard_2fproto_2ftrafficlights_5fperception_5fcomponent_2eproto, file_level_enum_descriptors_modules_2fperception_2fonboard_2fproto_2ftrafficlights_5fperception_5fcomponent_2eproto, file_level_service_descriptors_modules_2fperception_2fonboard_2fproto_2ftrafficlights_5fperception_5fcomponent_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_modules_2fperception_2fonboard_2fproto_2ftrafficlights_5fperception_5fcomponent_2eproto_getter() {
  return &descriptor_table_modules_2fperception_2fonboard_2fproto_2ftrafficlights_5fperception_5fcomponent_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_modules_2fperception_2fonboard_2fproto_2ftrafficlights_5fperception_5fcomponent_2eproto(&descriptor_table_modules_2fperception_2fonboard_2fproto_2ftrafficlights_5fperception_5fcomponent_2eproto);
namespace apollo {
namespace perception {
namespace onboard {

// ===================================================================

class TrafficLight::_Internal {
 public:
  using HasBits = decltype(std::declval<TrafficLight>()._has_bits_);
  static void set_has_tl_tf2_frame_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tl_tf2_child_frame_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_tf2_timeout_second(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_camera_names(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_camera_channel_names(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_tl_image_timestamp_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_max_process_image_fps(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_query_tf_interval_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_valid_hdmap_interval(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_image_sys_ts_diff_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_sync_interval_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_camera_traffic_light_perception_conf_dir(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_camera_traffic_light_perception_conf_file(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_default_image_border_size(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_traffic_light_output_channel_name(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_simulation_channel_name(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_v2x_trafficlights_input_channel_name(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_v2x_sync_interval_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_max_v2x_msg_buff_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_tl_preprocessor_name(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::internal::LazyString TrafficLight::_i_give_permission_to_break_this_code_default_tl_tf2_frame_id_{{{"world", 5}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString TrafficLight::_i_give_permission_to_break_this_code_default_tl_tf2_child_frame_id_{{{"perception_localization_100hz", 29}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString TrafficLight::_i_give_permission_to_break_this_code_default_camera_names_{{{"front_6mm,front_12mm", 20}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString TrafficLight::_i_give_permission_to_break_this_code_default_camera_channel_names_{{{"/apollo/sensor/camera/front_6mm,/apollo/sensor/camera/front_12mm", 64}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString TrafficLight::_i_give_permission_to_break_this_code_default_camera_traffic_light_perception_conf_dir_{{{"conf/perception/camera", 22}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString TrafficLight::_i_give_permission_to_break_this_code_default_camera_traffic_light_perception_conf_file_{{{"trafficlight.pt", 15}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString TrafficLight::_i_give_permission_to_break_this_code_default_traffic_light_output_channel_name_{{{"/apollo/perception/traffic_light", 32}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString TrafficLight::_i_give_permission_to_break_this_code_default_simulation_channel_name_{{{"/apollo/perception/traffic_light_simulation", 43}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString TrafficLight::_i_give_permission_to_break_this_code_default_v2x_trafficlights_input_channel_name_{{{"/apollo/v2x/traffic_light", 25}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString TrafficLight::_i_give_permission_to_break_this_code_default_tl_preprocessor_name_{{{"TLPreprocessor", 14}}, {nullptr}};
TrafficLight::TrafficLight(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.perception.onboard.TrafficLight)
}
TrafficLight::TrafficLight(const TrafficLight& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tl_tf2_frame_id_.UnsafeSetDefault(nullptr);
  if (from._internal_has_tl_tf2_frame_id()) {
    tl_tf2_frame_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_tl_tf2_frame_id(), 
      GetArenaForAllocation());
  }
  tl_tf2_child_frame_id_.UnsafeSetDefault(nullptr);
  if (from._internal_has_tl_tf2_child_frame_id()) {
    tl_tf2_child_frame_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_tl_tf2_child_frame_id(), 
      GetArenaForAllocation());
  }
  camera_names_.UnsafeSetDefault(nullptr);
  if (from._internal_has_camera_names()) {
    camera_names_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_camera_names(), 
      GetArenaForAllocation());
  }
  camera_channel_names_.UnsafeSetDefault(nullptr);
  if (from._internal_has_camera_channel_names()) {
    camera_channel_names_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_camera_channel_names(), 
      GetArenaForAllocation());
  }
  camera_traffic_light_perception_conf_dir_.UnsafeSetDefault(nullptr);
  if (from._internal_has_camera_traffic_light_perception_conf_dir()) {
    camera_traffic_light_perception_conf_dir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_camera_traffic_light_perception_conf_dir(), 
      GetArenaForAllocation());
  }
  camera_traffic_light_perception_conf_file_.UnsafeSetDefault(nullptr);
  if (from._internal_has_camera_traffic_light_perception_conf_file()) {
    camera_traffic_light_perception_conf_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_camera_traffic_light_perception_conf_file(), 
      GetArenaForAllocation());
  }
  traffic_light_output_channel_name_.UnsafeSetDefault(nullptr);
  if (from._internal_has_traffic_light_output_channel_name()) {
    traffic_light_output_channel_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_traffic_light_output_channel_name(), 
      GetArenaForAllocation());
  }
  simulation_channel_name_.UnsafeSetDefault(nullptr);
  if (from._internal_has_simulation_channel_name()) {
    simulation_channel_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_simulation_channel_name(), 
      GetArenaForAllocation());
  }
  v2x_trafficlights_input_channel_name_.UnsafeSetDefault(nullptr);
  if (from._internal_has_v2x_trafficlights_input_channel_name()) {
    v2x_trafficlights_input_channel_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_v2x_trafficlights_input_channel_name(), 
      GetArenaForAllocation());
  }
  tl_preprocessor_name_.UnsafeSetDefault(nullptr);
  if (from._internal_has_tl_preprocessor_name()) {
    tl_preprocessor_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_tl_preprocessor_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&tl_image_timestamp_offset_, &from.tl_image_timestamp_offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&v2x_sync_interval_seconds_) -
    reinterpret_cast<char*>(&tl_image_timestamp_offset_)) + sizeof(v2x_sync_interval_seconds_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.onboard.TrafficLight)
}

void TrafficLight::SharedCtor() {
tl_tf2_frame_id_.UnsafeSetDefault(nullptr);
tl_tf2_child_frame_id_.UnsafeSetDefault(nullptr);
camera_names_.UnsafeSetDefault(nullptr);
camera_channel_names_.UnsafeSetDefault(nullptr);
camera_traffic_light_perception_conf_dir_.UnsafeSetDefault(nullptr);
camera_traffic_light_perception_conf_file_.UnsafeSetDefault(nullptr);
traffic_light_output_channel_name_.UnsafeSetDefault(nullptr);
simulation_channel_name_.UnsafeSetDefault(nullptr);
v2x_trafficlights_input_channel_name_.UnsafeSetDefault(nullptr);
tl_preprocessor_name_.UnsafeSetDefault(nullptr);
tl_image_timestamp_offset_ = 0;
max_v2x_msg_buff_size_ = 50;
tf2_timeout_second_ = 0.01;
query_tf_interval_seconds_ = 0.3;
valid_hdmap_interval_ = 1.5;
image_sys_ts_diff_threshold_ = 0.5;
max_process_image_fps_ = 8;
default_image_border_size_ = 100;
sync_interval_seconds_ = 0.5;
v2x_sync_interval_seconds_ = 0.1;
}

TrafficLight::~TrafficLight() {
  // @@protoc_insertion_point(destructor:apollo.perception.onboard.TrafficLight)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TrafficLight::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  tl_tf2_frame_id_.DestroyNoArena(nullptr);
  tl_tf2_child_frame_id_.DestroyNoArena(nullptr);
  camera_names_.DestroyNoArena(nullptr);
  camera_channel_names_.DestroyNoArena(nullptr);
  camera_traffic_light_perception_conf_dir_.DestroyNoArena(nullptr);
  camera_traffic_light_perception_conf_file_.DestroyNoArena(nullptr);
  traffic_light_output_channel_name_.DestroyNoArena(nullptr);
  simulation_channel_name_.DestroyNoArena(nullptr);
  v2x_trafficlights_input_channel_name_.DestroyNoArena(nullptr);
  tl_preprocessor_name_.DestroyNoArena(nullptr);
}

void TrafficLight::ArenaDtor(void* object) {
  TrafficLight* _this = reinterpret_cast< TrafficLight* >(object);
  (void)_this;
}
void TrafficLight::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrafficLight::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrafficLight::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.onboard.TrafficLight)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      tl_tf2_frame_id_.ClearToDefault(::apollo::perception::onboard::TrafficLight::_i_give_permission_to_break_this_code_default_tl_tf2_frame_id_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000002u) {
      tl_tf2_child_frame_id_.ClearToDefault(::apollo::perception::onboard::TrafficLight::_i_give_permission_to_break_this_code_default_tl_tf2_child_frame_id_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000004u) {
      camera_names_.ClearToDefault(::apollo::perception::onboard::TrafficLight::_i_give_permission_to_break_this_code_default_camera_names_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000008u) {
      camera_channel_names_.ClearToDefault(::apollo::perception::onboard::TrafficLight::_i_give_permission_to_break_this_code_default_camera_channel_names_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000010u) {
      camera_traffic_light_perception_conf_dir_.ClearToDefault(::apollo::perception::onboard::TrafficLight::_i_give_permission_to_break_this_code_default_camera_traffic_light_perception_conf_dir_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000020u) {
      camera_traffic_light_perception_conf_file_.ClearToDefault(::apollo::perception::onboard::TrafficLight::_i_give_permission_to_break_this_code_default_camera_traffic_light_perception_conf_file_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000040u) {
      traffic_light_output_channel_name_.ClearToDefault(::apollo::perception::onboard::TrafficLight::_i_give_permission_to_break_this_code_default_traffic_light_output_channel_name_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000080u) {
      simulation_channel_name_.ClearToDefault(::apollo::perception::onboard::TrafficLight::_i_give_permission_to_break_this_code_default_simulation_channel_name_, GetArenaForAllocation());
       }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      v2x_trafficlights_input_channel_name_.ClearToDefault(::apollo::perception::onboard::TrafficLight::_i_give_permission_to_break_this_code_default_v2x_trafficlights_input_channel_name_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000200u) {
      tl_preprocessor_name_.ClearToDefault(::apollo::perception::onboard::TrafficLight::_i_give_permission_to_break_this_code_default_tl_preprocessor_name_, GetArenaForAllocation());
       }
  }
  if (cached_has_bits & 0x0000fc00u) {
    tl_image_timestamp_offset_ = 0;
    max_v2x_msg_buff_size_ = 50;
    tf2_timeout_second_ = 0.01;
    query_tf_interval_seconds_ = 0.3;
    valid_hdmap_interval_ = 1.5;
    image_sys_ts_diff_threshold_ = 0.5;
  }
  if (cached_has_bits & 0x000f0000u) {
    max_process_image_fps_ = 8;
    default_image_border_size_ = 100;
    sync_interval_seconds_ = 0.5;
    v2x_sync_interval_seconds_ = 0.1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrafficLight::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string tl_tf2_frame_id = 1 [default = "world"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_tl_tf2_frame_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.onboard.TrafficLight.tl_tf2_frame_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string tl_tf2_child_frame_id = 2 [default = "perception_localization_100hz"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_tl_tf2_child_frame_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.onboard.TrafficLight.tl_tf2_child_frame_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double tf2_timeout_second = 3 [default = 0.01];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_tf2_timeout_second(&has_bits);
          tf2_timeout_second_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional string camera_names = 4 [default = "front_6mm,front_12mm"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_camera_names();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.onboard.TrafficLight.camera_names");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string camera_channel_names = 5 [default = "/apollo/sensor/camera/front_6mm,/apollo/sensor/camera/front_12mm"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_camera_channel_names();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.onboard.TrafficLight.camera_channel_names");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double tl_image_timestamp_offset = 6 [default = 0];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_tl_image_timestamp_offset(&has_bits);
          tl_image_timestamp_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional int32 max_process_image_fps = 7 [default = 8];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_max_process_image_fps(&has_bits);
          max_process_image_fps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double query_tf_interval_seconds = 8 [default = 0.3];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_query_tf_interval_seconds(&has_bits);
          query_tf_interval_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double valid_hdmap_interval = 9 [default = 1.5];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_valid_hdmap_interval(&has_bits);
          valid_hdmap_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double image_sys_ts_diff_threshold = 10 [default = 0.5];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_image_sys_ts_diff_threshold(&has_bits);
          image_sys_ts_diff_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double sync_interval_seconds = 11 [default = 0.5];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_sync_interval_seconds(&has_bits);
          sync_interval_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional string camera_traffic_light_perception_conf_dir = 12 [default = "conf/perception/camera"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_camera_traffic_light_perception_conf_dir();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.onboard.TrafficLight.camera_traffic_light_perception_conf_dir");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string camera_traffic_light_perception_conf_file = 13 [default = "trafficlight.pt"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_camera_traffic_light_perception_conf_file();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.onboard.TrafficLight.camera_traffic_light_perception_conf_file");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 default_image_border_size = 14 [default = 100];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_default_image_border_size(&has_bits);
          default_image_border_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string traffic_light_output_channel_name = 15 [default = "/apollo/perception/traffic_light"];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_traffic_light_output_channel_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.onboard.TrafficLight.traffic_light_output_channel_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string simulation_channel_name = 16 [default = "/apollo/perception/traffic_light_simulation"];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_simulation_channel_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.onboard.TrafficLight.simulation_channel_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string v2x_trafficlights_input_channel_name = 17 [default = "/apollo/v2x/traffic_light"];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_v2x_trafficlights_input_channel_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.onboard.TrafficLight.v2x_trafficlights_input_channel_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double v2x_sync_interval_seconds = 18 [default = 0.1];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 145)) {
          _Internal::set_has_v2x_sync_interval_seconds(&has_bits);
          v2x_sync_interval_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional int32 max_v2x_msg_buff_size = 19 [default = 50];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_max_v2x_msg_buff_size(&has_bits);
          max_v2x_msg_buff_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string tl_preprocessor_name = 20 [default = "TLPreprocessor"];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_tl_preprocessor_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.onboard.TrafficLight.tl_preprocessor_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrafficLight::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.onboard.TrafficLight)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string tl_tf2_frame_id = 1 [default = "world"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tl_tf2_frame_id().data(), static_cast<int>(this->_internal_tl_tf2_frame_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.onboard.TrafficLight.tl_tf2_frame_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tl_tf2_frame_id(), target);
  }

  // optional string tl_tf2_child_frame_id = 2 [default = "perception_localization_100hz"];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tl_tf2_child_frame_id().data(), static_cast<int>(this->_internal_tl_tf2_child_frame_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.onboard.TrafficLight.tl_tf2_child_frame_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_tl_tf2_child_frame_id(), target);
  }

  // optional double tf2_timeout_second = 3 [default = 0.01];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_tf2_timeout_second(), target);
  }

  // optional string camera_names = 4 [default = "front_6mm,front_12mm"];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_camera_names().data(), static_cast<int>(this->_internal_camera_names().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.onboard.TrafficLight.camera_names");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_camera_names(), target);
  }

  // optional string camera_channel_names = 5 [default = "/apollo/sensor/camera/front_6mm,/apollo/sensor/camera/front_12mm"];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_camera_channel_names().data(), static_cast<int>(this->_internal_camera_channel_names().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.onboard.TrafficLight.camera_channel_names");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_camera_channel_names(), target);
  }

  // optional double tl_image_timestamp_offset = 6 [default = 0];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_tl_image_timestamp_offset(), target);
  }

  // optional int32 max_process_image_fps = 7 [default = 8];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_max_process_image_fps(), target);
  }

  // optional double query_tf_interval_seconds = 8 [default = 0.3];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_query_tf_interval_seconds(), target);
  }

  // optional double valid_hdmap_interval = 9 [default = 1.5];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_valid_hdmap_interval(), target);
  }

  // optional double image_sys_ts_diff_threshold = 10 [default = 0.5];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_image_sys_ts_diff_threshold(), target);
  }

  // optional double sync_interval_seconds = 11 [default = 0.5];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_sync_interval_seconds(), target);
  }

  // optional string camera_traffic_light_perception_conf_dir = 12 [default = "conf/perception/camera"];
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_camera_traffic_light_perception_conf_dir().data(), static_cast<int>(this->_internal_camera_traffic_light_perception_conf_dir().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.onboard.TrafficLight.camera_traffic_light_perception_conf_dir");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_camera_traffic_light_perception_conf_dir(), target);
  }

  // optional string camera_traffic_light_perception_conf_file = 13 [default = "trafficlight.pt"];
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_camera_traffic_light_perception_conf_file().data(), static_cast<int>(this->_internal_camera_traffic_light_perception_conf_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.onboard.TrafficLight.camera_traffic_light_perception_conf_file");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_camera_traffic_light_perception_conf_file(), target);
  }

  // optional int32 default_image_border_size = 14 [default = 100];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_default_image_border_size(), target);
  }

  // optional string traffic_light_output_channel_name = 15 [default = "/apollo/perception/traffic_light"];
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_traffic_light_output_channel_name().data(), static_cast<int>(this->_internal_traffic_light_output_channel_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.onboard.TrafficLight.traffic_light_output_channel_name");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_traffic_light_output_channel_name(), target);
  }

  // optional string simulation_channel_name = 16 [default = "/apollo/perception/traffic_light_simulation"];
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_simulation_channel_name().data(), static_cast<int>(this->_internal_simulation_channel_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.onboard.TrafficLight.simulation_channel_name");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_simulation_channel_name(), target);
  }

  // optional string v2x_trafficlights_input_channel_name = 17 [default = "/apollo/v2x/traffic_light"];
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_v2x_trafficlights_input_channel_name().data(), static_cast<int>(this->_internal_v2x_trafficlights_input_channel_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.onboard.TrafficLight.v2x_trafficlights_input_channel_name");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_v2x_trafficlights_input_channel_name(), target);
  }

  // optional double v2x_sync_interval_seconds = 18 [default = 0.1];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(18, this->_internal_v2x_sync_interval_seconds(), target);
  }

  // optional int32 max_v2x_msg_buff_size = 19 [default = 50];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(19, this->_internal_max_v2x_msg_buff_size(), target);
  }

  // optional string tl_preprocessor_name = 20 [default = "TLPreprocessor"];
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tl_preprocessor_name().data(), static_cast<int>(this->_internal_tl_preprocessor_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.onboard.TrafficLight.tl_preprocessor_name");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_tl_preprocessor_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.onboard.TrafficLight)
  return target;
}

size_t TrafficLight::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.onboard.TrafficLight)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string tl_tf2_frame_id = 1 [default = "world"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tl_tf2_frame_id());
    }

    // optional string tl_tf2_child_frame_id = 2 [default = "perception_localization_100hz"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tl_tf2_child_frame_id());
    }

    // optional string camera_names = 4 [default = "front_6mm,front_12mm"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_camera_names());
    }

    // optional string camera_channel_names = 5 [default = "/apollo/sensor/camera/front_6mm,/apollo/sensor/camera/front_12mm"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_camera_channel_names());
    }

    // optional string camera_traffic_light_perception_conf_dir = 12 [default = "conf/perception/camera"];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_camera_traffic_light_perception_conf_dir());
    }

    // optional string camera_traffic_light_perception_conf_file = 13 [default = "trafficlight.pt"];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_camera_traffic_light_perception_conf_file());
    }

    // optional string traffic_light_output_channel_name = 15 [default = "/apollo/perception/traffic_light"];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_traffic_light_output_channel_name());
    }

    // optional string simulation_channel_name = 16 [default = "/apollo/perception/traffic_light_simulation"];
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_simulation_channel_name());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional string v2x_trafficlights_input_channel_name = 17 [default = "/apollo/v2x/traffic_light"];
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_v2x_trafficlights_input_channel_name());
    }

    // optional string tl_preprocessor_name = 20 [default = "TLPreprocessor"];
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tl_preprocessor_name());
    }

    // optional double tl_image_timestamp_offset = 6 [default = 0];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional int32 max_v2x_msg_buff_size = 19 [default = 50];
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_max_v2x_msg_buff_size());
    }

    // optional double tf2_timeout_second = 3 [default = 0.01];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 8;
    }

    // optional double query_tf_interval_seconds = 8 [default = 0.3];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 8;
    }

    // optional double valid_hdmap_interval = 9 [default = 1.5];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 8;
    }

    // optional double image_sys_ts_diff_threshold = 10 [default = 0.5];
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x000f0000u) {
    // optional int32 max_process_image_fps = 7 [default = 8];
    if (cached_has_bits & 0x00010000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_max_process_image_fps());
    }

    // optional int32 default_image_border_size = 14 [default = 100];
    if (cached_has_bits & 0x00020000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_default_image_border_size());
    }

    // optional double sync_interval_seconds = 11 [default = 0.5];
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 + 8;
    }

    // optional double v2x_sync_interval_seconds = 18 [default = 0.1];
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrafficLight::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TrafficLight::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrafficLight::GetClassData() const { return &_class_data_; }

void TrafficLight::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TrafficLight *>(to)->MergeFrom(
      static_cast<const TrafficLight &>(from));
}


void TrafficLight::MergeFrom(const TrafficLight& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.onboard.TrafficLight)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_tl_tf2_frame_id(from._internal_tl_tf2_frame_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_tl_tf2_child_frame_id(from._internal_tl_tf2_child_frame_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_camera_names(from._internal_camera_names());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_camera_channel_names(from._internal_camera_channel_names());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_camera_traffic_light_perception_conf_dir(from._internal_camera_traffic_light_perception_conf_dir());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_camera_traffic_light_perception_conf_file(from._internal_camera_traffic_light_perception_conf_file());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_traffic_light_output_channel_name(from._internal_traffic_light_output_channel_name());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_simulation_channel_name(from._internal_simulation_channel_name());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_set_v2x_trafficlights_input_channel_name(from._internal_v2x_trafficlights_input_channel_name());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_set_tl_preprocessor_name(from._internal_tl_preprocessor_name());
    }
    if (cached_has_bits & 0x00000400u) {
      tl_image_timestamp_offset_ = from.tl_image_timestamp_offset_;
    }
    if (cached_has_bits & 0x00000800u) {
      max_v2x_msg_buff_size_ = from.max_v2x_msg_buff_size_;
    }
    if (cached_has_bits & 0x00001000u) {
      tf2_timeout_second_ = from.tf2_timeout_second_;
    }
    if (cached_has_bits & 0x00002000u) {
      query_tf_interval_seconds_ = from.query_tf_interval_seconds_;
    }
    if (cached_has_bits & 0x00004000u) {
      valid_hdmap_interval_ = from.valid_hdmap_interval_;
    }
    if (cached_has_bits & 0x00008000u) {
      image_sys_ts_diff_threshold_ = from.image_sys_ts_diff_threshold_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x000f0000u) {
    if (cached_has_bits & 0x00010000u) {
      max_process_image_fps_ = from.max_process_image_fps_;
    }
    if (cached_has_bits & 0x00020000u) {
      default_image_border_size_ = from.default_image_border_size_;
    }
    if (cached_has_bits & 0x00040000u) {
      sync_interval_seconds_ = from.sync_interval_seconds_;
    }
    if (cached_has_bits & 0x00080000u) {
      v2x_sync_interval_seconds_ = from.v2x_sync_interval_seconds_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrafficLight::CopyFrom(const TrafficLight& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.onboard.TrafficLight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficLight::IsInitialized() const {
  return true;
}

void TrafficLight::InternalSwap(TrafficLight* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      nullptr,
      &tl_tf2_frame_id_, lhs_arena,
      &other->tl_tf2_frame_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      nullptr,
      &tl_tf2_child_frame_id_, lhs_arena,
      &other->tl_tf2_child_frame_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      nullptr,
      &camera_names_, lhs_arena,
      &other->camera_names_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      nullptr,
      &camera_channel_names_, lhs_arena,
      &other->camera_channel_names_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      nullptr,
      &camera_traffic_light_perception_conf_dir_, lhs_arena,
      &other->camera_traffic_light_perception_conf_dir_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      nullptr,
      &camera_traffic_light_perception_conf_file_, lhs_arena,
      &other->camera_traffic_light_perception_conf_file_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      nullptr,
      &traffic_light_output_channel_name_, lhs_arena,
      &other->traffic_light_output_channel_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      nullptr,
      &simulation_channel_name_, lhs_arena,
      &other->simulation_channel_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      nullptr,
      &v2x_trafficlights_input_channel_name_, lhs_arena,
      &other->v2x_trafficlights_input_channel_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      nullptr,
      &tl_preprocessor_name_, lhs_arena,
      &other->tl_preprocessor_name_, rhs_arena
  );
  swap(tl_image_timestamp_offset_, other->tl_image_timestamp_offset_);
  swap(max_v2x_msg_buff_size_, other->max_v2x_msg_buff_size_);
  swap(tf2_timeout_second_, other->tf2_timeout_second_);
  swap(query_tf_interval_seconds_, other->query_tf_interval_seconds_);
  swap(valid_hdmap_interval_, other->valid_hdmap_interval_);
  swap(image_sys_ts_diff_threshold_, other->image_sys_ts_diff_threshold_);
  swap(max_process_image_fps_, other->max_process_image_fps_);
  swap(default_image_border_size_, other->default_image_border_size_);
  swap(sync_interval_seconds_, other->sync_interval_seconds_);
  swap(v2x_sync_interval_seconds_, other->v2x_sync_interval_seconds_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficLight::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fonboard_2fproto_2ftrafficlights_5fperception_5fcomponent_2eproto_getter, &descriptor_table_modules_2fperception_2fonboard_2fproto_2ftrafficlights_5fperception_5fcomponent_2eproto_once,
      file_level_metadata_modules_2fperception_2fonboard_2fproto_2ftrafficlights_5fperception_5fcomponent_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace onboard
}  // namespace perception
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::perception::onboard::TrafficLight* Arena::CreateMaybeMessage< ::apollo::perception::onboard::TrafficLight >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::onboard::TrafficLight >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
