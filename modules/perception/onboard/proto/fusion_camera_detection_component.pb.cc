// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/onboard/proto/fusion_camera_detection_component.proto

#include "modules/perception/onboard/proto/fusion_camera_detection_component.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace apollo {
namespace perception {
namespace onboard {
constexpr FusionCameraDetection::FusionCameraDetection(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : camera_names_(nullptr)
  , input_camera_channel_names_(nullptr)
  , camera_obstacle_perception_conf_dir_(nullptr)
  , camera_obstacle_perception_conf_file_(nullptr)
  , output_obstacles_channel_name_(nullptr)
  , camera_perception_viz_message_channel_name_(nullptr)
  , prefused_channel_name_(nullptr)
  , lane_calibration_working_sensor_name_(nullptr)
  , calibrator_method_(nullptr)
  , calib_service_name_(nullptr)
  , camera_debug_channel_name_(nullptr)
  , visual_debug_folder_(nullptr)
  , visual_camera_(nullptr)
  , cipv_(nullptr)
  , timestamp_offset_(0)
  , default_camera_pitch_(0)
  , enable_undistortion_(false)
  , enable_visualization_(false)
  , output_camera_debug_msg_(false)
  , output_final_obstacles_(false)
  , write_visual_img_(false)
  , image_based_cipv_(false)
  , enable_cipv_(false)
  , debug_level_(0)
  , run_calib_service_(true)
  , frame_capacity_(20)
  , image_channel_num_(3)
  , default_camera_height_(1.5)
  , ts_diff_(0.1)
  , min_laneline_length_for_cipv_(2)
  , average_lane_width_in_meter_(3.7)
  , max_vehicle_width_in_meter_(2.5)
  , average_frame_rate_(0.05){}
struct FusionCameraDetectionDefaultTypeInternal {
  constexpr FusionCameraDetectionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FusionCameraDetectionDefaultTypeInternal() {}
  union {
    FusionCameraDetection _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FusionCameraDetectionDefaultTypeInternal _FusionCameraDetection_default_instance_;
}  // namespace onboard
}  // namespace perception
}  // namespace apollo
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fperception_2fonboard_2fproto_2ffusion_5fcamera_5fdetection_5fcomponent_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_modules_2fperception_2fonboard_2fproto_2ffusion_5fcamera_5fdetection_5fcomponent_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fperception_2fonboard_2fproto_2ffusion_5fcamera_5fdetection_5fcomponent_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fperception_2fonboard_2fproto_2ffusion_5fcamera_5fdetection_5fcomponent_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::FusionCameraDetection, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::FusionCameraDetection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::FusionCameraDetection, camera_names_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::FusionCameraDetection, input_camera_channel_names_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::FusionCameraDetection, timestamp_offset_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::FusionCameraDetection, camera_obstacle_perception_conf_dir_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::FusionCameraDetection, camera_obstacle_perception_conf_file_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::FusionCameraDetection, frame_capacity_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::FusionCameraDetection, image_channel_num_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::FusionCameraDetection, enable_undistortion_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::FusionCameraDetection, enable_visualization_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::FusionCameraDetection, output_obstacles_channel_name_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::FusionCameraDetection, camera_perception_viz_message_channel_name_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::FusionCameraDetection, prefused_channel_name_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::FusionCameraDetection, default_camera_pitch_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::FusionCameraDetection, default_camera_height_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::FusionCameraDetection, lane_calibration_working_sensor_name_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::FusionCameraDetection, calibrator_method_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::FusionCameraDetection, calib_service_name_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::FusionCameraDetection, run_calib_service_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::FusionCameraDetection, output_camera_debug_msg_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::FusionCameraDetection, camera_debug_channel_name_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::FusionCameraDetection, ts_diff_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::FusionCameraDetection, output_final_obstacles_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::FusionCameraDetection, visual_debug_folder_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::FusionCameraDetection, visual_camera_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::FusionCameraDetection, write_visual_img_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::FusionCameraDetection, min_laneline_length_for_cipv_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::FusionCameraDetection, average_lane_width_in_meter_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::FusionCameraDetection, max_vehicle_width_in_meter_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::FusionCameraDetection, average_frame_rate_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::FusionCameraDetection, image_based_cipv_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::FusionCameraDetection, debug_level_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::FusionCameraDetection, enable_cipv_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::FusionCameraDetection, cipv_),
  0,
  1,
  14,
  2,
  3,
  25,
  26,
  16,
  17,
  4,
  5,
  6,
  15,
  27,
  7,
  8,
  9,
  24,
  18,
  10,
  28,
  19,
  11,
  12,
  20,
  29,
  30,
  31,
  32,
  21,
  23,
  22,
  13,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 39, -1, sizeof(::apollo::perception::onboard::FusionCameraDetection)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::onboard::_FusionCameraDetection_default_instance_),
};

const char descriptor_table_protodef_modules_2fperception_2fonboard_2fproto_2ffusion_5fcamera_5fdetection_5fcomponent_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\nHmodules/perception/onboard/proto/fusio"
  "n_camera_detection_component.proto\022\031apol"
  "lo.perception.onboard\"\311\013\n\025FusionCameraDe"
  "tection\022*\n\014camera_names\030\001 \001(\t:\024front_6mm"
  ",front_12mm\022k\n\032input_camera_channel_name"
  "s\030\002 \001(\t:G/sensor/camera/traffic/image_sh"
  "ort,/sensor/camera/obstacle/image_narrow"
  "\022\033\n\020timestamp_offset\030\003 \001(\001:\0010\022C\n#camera_"
  "obstacle_perception_conf_dir\030\004 \001(\t:\026conf"
  "/perception/camera\0229\n$camera_obstacle_pe"
  "rception_conf_file\030\005 \001(\t:\013obstacle.pt\022\032\n"
  "\016frame_capacity\030\006 \001(\005:\00220\022\034\n\021image_chann"
  "el_num\030\007 \001(\005:\0013\022\"\n\023enable_undistortion\030\010"
  " \001(\010:\005false\022#\n\024enable_visualization\030\t \001("
  "\010:\005false\022<\n\035output_obstacles_channel_nam"
  "e\030\n \001(\t:\025/perception/obstacles\022T\n*camera"
  "_perception_viz_message_channel_name\030\013 \001"
  "(\t: /perception/inner/camera_viz_msg\022@\n\025"
  "prefused_channel_name\030\014 \001(\t:!/perception"
  "/inner/PrefusedObjects\022\037\n\024default_camera"
  "_pitch\030\r \001(\001:\0010\022\"\n\025default_camera_height"
  "\030\016 \001(\001:\0031.5\0227\n$lane_calibration_working_"
  "sensor_name\030\017 \001(\t:\tfront_6mm\022-\n\021calibrat"
  "or_method\030\020 \001(\t:\022LaneLineCalibrator\0224\n\022c"
  "alib_service_name\030\021 \001(\t:\030OnlineCalibrati"
  "onService\022\037\n\021run_calib_service\030\022 \001(\010:\004tr"
  "ue\022&\n\027output_camera_debug_msg\030\023 \001(\010:\005fal"
  "se\022;\n\031camera_debug_channel_name\030\024 \001(\t:\030/"
  "perception/camera_debug\022\024\n\007ts_diff\030\025 \001(\001"
  ":\0030.1\022%\n\026output_final_obstacles\030\026 \001(\010:\005f"
  "alse\0221\n\023visual_debug_folder\030\027 \001(\t:\024/apol"
  "lo/debug_output\022 \n\rvisual_camera\030\030 \001(\t:\t"
  "front_6mm\022\037\n\020write_visual_img\030\031 \001(\010:\005fal"
  "se\022\'\n\034min_laneline_length_for_cipv\030\032 \001(\001"
  ":\0012\022(\n\033average_lane_width_in_meter\030\033 \001(\001"
  ":\0033.7\022\'\n\032max_vehicle_width_in_meter\030\034 \001("
  "\001:\0032.5\022 \n\022average_frame_rate\030\035 \001(\001:\0040.05"
  "\022\037\n\020image_based_cipv\030\036 \001(\010:\005false\022\026\n\013deb"
  "ug_level\030\037 \001(\005:\0010\022\032\n\013enable_cipv\030  \001(\010:\005"
  "false\022\022\n\004cipv\030! \001(\t:\004Cipv"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fperception_2fonboard_2fproto_2ffusion_5fcamera_5fdetection_5fcomponent_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fperception_2fonboard_2fproto_2ffusion_5fcamera_5fdetection_5fcomponent_2eproto = {
  false, false, 1585, descriptor_table_protodef_modules_2fperception_2fonboard_2fproto_2ffusion_5fcamera_5fdetection_5fcomponent_2eproto, "modules/perception/onboard/proto/fusion_camera_detection_component.proto", 
  &descriptor_table_modules_2fperception_2fonboard_2fproto_2ffusion_5fcamera_5fdetection_5fcomponent_2eproto_once, nullptr, 0, 1,
  schemas, file_default_instances, TableStruct_modules_2fperception_2fonboard_2fproto_2ffusion_5fcamera_5fdetection_5fcomponent_2eproto::offsets,
  file_level_metadata_modules_2fperception_2fonboard_2fproto_2ffusion_5fcamera_5fdetection_5fcomponent_2eproto, file_level_enum_descriptors_modules_2fperception_2fonboard_2fproto_2ffusion_5fcamera_5fdetection_5fcomponent_2eproto, file_level_service_descriptors_modules_2fperception_2fonboard_2fproto_2ffusion_5fcamera_5fdetection_5fcomponent_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_modules_2fperception_2fonboard_2fproto_2ffusion_5fcamera_5fdetection_5fcomponent_2eproto_getter() {
  return &descriptor_table_modules_2fperception_2fonboard_2fproto_2ffusion_5fcamera_5fdetection_5fcomponent_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_modules_2fperception_2fonboard_2fproto_2ffusion_5fcamera_5fdetection_5fcomponent_2eproto(&descriptor_table_modules_2fperception_2fonboard_2fproto_2ffusion_5fcamera_5fdetection_5fcomponent_2eproto);
namespace apollo {
namespace perception {
namespace onboard {

// ===================================================================

class FusionCameraDetection::_Internal {
 public:
  using HasBits = decltype(std::declval<FusionCameraDetection>()._has_bits_);
  static void set_has_camera_names(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_input_camera_channel_names(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_timestamp_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_camera_obstacle_perception_conf_dir(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_camera_obstacle_perception_conf_file(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_frame_capacity(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_image_channel_num(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_enable_undistortion(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_enable_visualization(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_output_obstacles_channel_name(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_camera_perception_viz_message_channel_name(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_prefused_channel_name(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_default_camera_pitch(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_default_camera_height(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_lane_calibration_working_sensor_name(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_calibrator_method(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_calib_service_name(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_run_calib_service(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_output_camera_debug_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_camera_debug_channel_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_ts_diff(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_output_final_obstacles(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_visual_debug_folder(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_visual_camera(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_write_visual_img(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_min_laneline_length_for_cipv(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_average_lane_width_in_meter(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_max_vehicle_width_in_meter(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_average_frame_rate(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_image_based_cipv(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_debug_level(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_enable_cipv(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_cipv(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::internal::LazyString FusionCameraDetection::_i_give_permission_to_break_this_code_default_camera_names_{{{"front_6mm,front_12mm", 20}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString FusionCameraDetection::_i_give_permission_to_break_this_code_default_input_camera_channel_names_{{{"/sensor/camera/traffic/image_short,/sensor/camera/obstacle/image_narrow", 71}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString FusionCameraDetection::_i_give_permission_to_break_this_code_default_camera_obstacle_perception_conf_dir_{{{"conf/perception/camera", 22}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString FusionCameraDetection::_i_give_permission_to_break_this_code_default_camera_obstacle_perception_conf_file_{{{"obstacle.pt", 11}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString FusionCameraDetection::_i_give_permission_to_break_this_code_default_output_obstacles_channel_name_{{{"/perception/obstacles", 21}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString FusionCameraDetection::_i_give_permission_to_break_this_code_default_camera_perception_viz_message_channel_name_{{{"/perception/inner/camera_viz_msg", 32}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString FusionCameraDetection::_i_give_permission_to_break_this_code_default_prefused_channel_name_{{{"/perception/inner/PrefusedObjects", 33}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString FusionCameraDetection::_i_give_permission_to_break_this_code_default_lane_calibration_working_sensor_name_{{{"front_6mm", 9}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString FusionCameraDetection::_i_give_permission_to_break_this_code_default_calibrator_method_{{{"LaneLineCalibrator", 18}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString FusionCameraDetection::_i_give_permission_to_break_this_code_default_calib_service_name_{{{"OnlineCalibrationService", 24}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString FusionCameraDetection::_i_give_permission_to_break_this_code_default_camera_debug_channel_name_{{{"/perception/camera_debug", 24}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString FusionCameraDetection::_i_give_permission_to_break_this_code_default_visual_debug_folder_{{{"/apollo/debug_output", 20}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString FusionCameraDetection::_i_give_permission_to_break_this_code_default_visual_camera_{{{"front_6mm", 9}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString FusionCameraDetection::_i_give_permission_to_break_this_code_default_cipv_{{{"Cipv", 4}}, {nullptr}};
FusionCameraDetection::FusionCameraDetection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.perception.onboard.FusionCameraDetection)
}
FusionCameraDetection::FusionCameraDetection(const FusionCameraDetection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  camera_names_.UnsafeSetDefault(nullptr);
  if (from._internal_has_camera_names()) {
    camera_names_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_camera_names(), 
      GetArenaForAllocation());
  }
  input_camera_channel_names_.UnsafeSetDefault(nullptr);
  if (from._internal_has_input_camera_channel_names()) {
    input_camera_channel_names_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_input_camera_channel_names(), 
      GetArenaForAllocation());
  }
  camera_obstacle_perception_conf_dir_.UnsafeSetDefault(nullptr);
  if (from._internal_has_camera_obstacle_perception_conf_dir()) {
    camera_obstacle_perception_conf_dir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_camera_obstacle_perception_conf_dir(), 
      GetArenaForAllocation());
  }
  camera_obstacle_perception_conf_file_.UnsafeSetDefault(nullptr);
  if (from._internal_has_camera_obstacle_perception_conf_file()) {
    camera_obstacle_perception_conf_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_camera_obstacle_perception_conf_file(), 
      GetArenaForAllocation());
  }
  output_obstacles_channel_name_.UnsafeSetDefault(nullptr);
  if (from._internal_has_output_obstacles_channel_name()) {
    output_obstacles_channel_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_output_obstacles_channel_name(), 
      GetArenaForAllocation());
  }
  camera_perception_viz_message_channel_name_.UnsafeSetDefault(nullptr);
  if (from._internal_has_camera_perception_viz_message_channel_name()) {
    camera_perception_viz_message_channel_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_camera_perception_viz_message_channel_name(), 
      GetArenaForAllocation());
  }
  prefused_channel_name_.UnsafeSetDefault(nullptr);
  if (from._internal_has_prefused_channel_name()) {
    prefused_channel_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_prefused_channel_name(), 
      GetArenaForAllocation());
  }
  lane_calibration_working_sensor_name_.UnsafeSetDefault(nullptr);
  if (from._internal_has_lane_calibration_working_sensor_name()) {
    lane_calibration_working_sensor_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_lane_calibration_working_sensor_name(), 
      GetArenaForAllocation());
  }
  calibrator_method_.UnsafeSetDefault(nullptr);
  if (from._internal_has_calibrator_method()) {
    calibrator_method_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_calibrator_method(), 
      GetArenaForAllocation());
  }
  calib_service_name_.UnsafeSetDefault(nullptr);
  if (from._internal_has_calib_service_name()) {
    calib_service_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_calib_service_name(), 
      GetArenaForAllocation());
  }
  camera_debug_channel_name_.UnsafeSetDefault(nullptr);
  if (from._internal_has_camera_debug_channel_name()) {
    camera_debug_channel_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_camera_debug_channel_name(), 
      GetArenaForAllocation());
  }
  visual_debug_folder_.UnsafeSetDefault(nullptr);
  if (from._internal_has_visual_debug_folder()) {
    visual_debug_folder_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_visual_debug_folder(), 
      GetArenaForAllocation());
  }
  visual_camera_.UnsafeSetDefault(nullptr);
  if (from._internal_has_visual_camera()) {
    visual_camera_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_visual_camera(), 
      GetArenaForAllocation());
  }
  cipv_.UnsafeSetDefault(nullptr);
  if (from._internal_has_cipv()) {
    cipv_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_cipv(), 
      GetArenaForAllocation());
  }
  ::memcpy(&timestamp_offset_, &from.timestamp_offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&average_frame_rate_) -
    reinterpret_cast<char*>(&timestamp_offset_)) + sizeof(average_frame_rate_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.onboard.FusionCameraDetection)
}

void FusionCameraDetection::SharedCtor() {
camera_names_.UnsafeSetDefault(nullptr);
input_camera_channel_names_.UnsafeSetDefault(nullptr);
camera_obstacle_perception_conf_dir_.UnsafeSetDefault(nullptr);
camera_obstacle_perception_conf_file_.UnsafeSetDefault(nullptr);
output_obstacles_channel_name_.UnsafeSetDefault(nullptr);
camera_perception_viz_message_channel_name_.UnsafeSetDefault(nullptr);
prefused_channel_name_.UnsafeSetDefault(nullptr);
lane_calibration_working_sensor_name_.UnsafeSetDefault(nullptr);
calibrator_method_.UnsafeSetDefault(nullptr);
calib_service_name_.UnsafeSetDefault(nullptr);
camera_debug_channel_name_.UnsafeSetDefault(nullptr);
visual_debug_folder_.UnsafeSetDefault(nullptr);
visual_camera_.UnsafeSetDefault(nullptr);
cipv_.UnsafeSetDefault(nullptr);
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&timestamp_offset_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&debug_level_) -
    reinterpret_cast<char*>(&timestamp_offset_)) + sizeof(debug_level_));
run_calib_service_ = true;
frame_capacity_ = 20;
image_channel_num_ = 3;
default_camera_height_ = 1.5;
ts_diff_ = 0.1;
min_laneline_length_for_cipv_ = 2;
average_lane_width_in_meter_ = 3.7;
max_vehicle_width_in_meter_ = 2.5;
average_frame_rate_ = 0.05;
}

FusionCameraDetection::~FusionCameraDetection() {
  // @@protoc_insertion_point(destructor:apollo.perception.onboard.FusionCameraDetection)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FusionCameraDetection::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  camera_names_.DestroyNoArena(nullptr);
  input_camera_channel_names_.DestroyNoArena(nullptr);
  camera_obstacle_perception_conf_dir_.DestroyNoArena(nullptr);
  camera_obstacle_perception_conf_file_.DestroyNoArena(nullptr);
  output_obstacles_channel_name_.DestroyNoArena(nullptr);
  camera_perception_viz_message_channel_name_.DestroyNoArena(nullptr);
  prefused_channel_name_.DestroyNoArena(nullptr);
  lane_calibration_working_sensor_name_.DestroyNoArena(nullptr);
  calibrator_method_.DestroyNoArena(nullptr);
  calib_service_name_.DestroyNoArena(nullptr);
  camera_debug_channel_name_.DestroyNoArena(nullptr);
  visual_debug_folder_.DestroyNoArena(nullptr);
  visual_camera_.DestroyNoArena(nullptr);
  cipv_.DestroyNoArena(nullptr);
}

void FusionCameraDetection::ArenaDtor(void* object) {
  FusionCameraDetection* _this = reinterpret_cast< FusionCameraDetection* >(object);
  (void)_this;
}
void FusionCameraDetection::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FusionCameraDetection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FusionCameraDetection::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.onboard.FusionCameraDetection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      camera_names_.ClearToDefault(::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_camera_names_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000002u) {
      input_camera_channel_names_.ClearToDefault(::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_input_camera_channel_names_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000004u) {
      camera_obstacle_perception_conf_dir_.ClearToDefault(::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_camera_obstacle_perception_conf_dir_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000008u) {
      camera_obstacle_perception_conf_file_.ClearToDefault(::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_camera_obstacle_perception_conf_file_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000010u) {
      output_obstacles_channel_name_.ClearToDefault(::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_output_obstacles_channel_name_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000020u) {
      camera_perception_viz_message_channel_name_.ClearToDefault(::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_camera_perception_viz_message_channel_name_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000040u) {
      prefused_channel_name_.ClearToDefault(::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_prefused_channel_name_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000080u) {
      lane_calibration_working_sensor_name_.ClearToDefault(::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_lane_calibration_working_sensor_name_, GetArenaForAllocation());
       }
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      calibrator_method_.ClearToDefault(::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_calibrator_method_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000200u) {
      calib_service_name_.ClearToDefault(::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_calib_service_name_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000400u) {
      camera_debug_channel_name_.ClearToDefault(::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_camera_debug_channel_name_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000800u) {
      visual_debug_folder_.ClearToDefault(::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_visual_debug_folder_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00001000u) {
      visual_camera_.ClearToDefault(::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_visual_camera_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00002000u) {
      cipv_.ClearToDefault(::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_cipv_, GetArenaForAllocation());
       }
  }
  if (cached_has_bits & 0x0000c000u) {
    ::memset(&timestamp_offset_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&default_camera_pitch_) -
        reinterpret_cast<char*>(&timestamp_offset_)) + sizeof(default_camera_pitch_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&enable_undistortion_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&debug_level_) -
        reinterpret_cast<char*>(&enable_undistortion_)) + sizeof(debug_level_));
  }
  if (cached_has_bits & 0xff000000u) {
    run_calib_service_ = true;
    frame_capacity_ = 20;
    image_channel_num_ = 3;
    default_camera_height_ = 1.5;
    ts_diff_ = 0.1;
    min_laneline_length_for_cipv_ = 2;
    average_lane_width_in_meter_ = 3.7;
    max_vehicle_width_in_meter_ = 2.5;
  }
  average_frame_rate_ = 0.05;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FusionCameraDetection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string camera_names = 1 [default = "front_6mm,front_12mm"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_camera_names();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.onboard.FusionCameraDetection.camera_names");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string input_camera_channel_names = 2 [default = "/sensor/camera/traffic/image_short,/sensor/camera/obstacle/image_narrow"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_input_camera_channel_names();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.onboard.FusionCameraDetection.input_camera_channel_names");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double timestamp_offset = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_timestamp_offset(&_has_bits_);
          timestamp_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional string camera_obstacle_perception_conf_dir = 4 [default = "conf/perception/camera"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_camera_obstacle_perception_conf_dir();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.onboard.FusionCameraDetection.camera_obstacle_perception_conf_dir");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string camera_obstacle_perception_conf_file = 5 [default = "obstacle.pt"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_camera_obstacle_perception_conf_file();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.onboard.FusionCameraDetection.camera_obstacle_perception_conf_file");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 frame_capacity = 6 [default = 20];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_frame_capacity(&_has_bits_);
          frame_capacity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 image_channel_num = 7 [default = 3];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_image_channel_num(&_has_bits_);
          image_channel_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_undistortion = 8 [default = false];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_enable_undistortion(&_has_bits_);
          enable_undistortion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_visualization = 9 [default = false];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_enable_visualization(&_has_bits_);
          enable_visualization_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string output_obstacles_channel_name = 10 [default = "/perception/obstacles"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_output_obstacles_channel_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.onboard.FusionCameraDetection.output_obstacles_channel_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string camera_perception_viz_message_channel_name = 11 [default = "/perception/inner/camera_viz_msg"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_camera_perception_viz_message_channel_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.onboard.FusionCameraDetection.camera_perception_viz_message_channel_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string prefused_channel_name = 12 [default = "/perception/inner/PrefusedObjects"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_prefused_channel_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.onboard.FusionCameraDetection.prefused_channel_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double default_camera_pitch = 13 [default = 0];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          _Internal::set_has_default_camera_pitch(&_has_bits_);
          default_camera_pitch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double default_camera_height = 14 [default = 1.5];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          _Internal::set_has_default_camera_height(&_has_bits_);
          default_camera_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional string lane_calibration_working_sensor_name = 15 [default = "front_6mm"];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_lane_calibration_working_sensor_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.onboard.FusionCameraDetection.lane_calibration_working_sensor_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string calibrator_method = 16 [default = "LaneLineCalibrator"];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_calibrator_method();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.onboard.FusionCameraDetection.calibrator_method");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string calib_service_name = 17 [default = "OnlineCalibrationService"];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_calib_service_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.onboard.FusionCameraDetection.calib_service_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool run_calib_service = 18 [default = true];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_run_calib_service(&_has_bits_);
          run_calib_service_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool output_camera_debug_msg = 19 [default = false];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_output_camera_debug_msg(&_has_bits_);
          output_camera_debug_msg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string camera_debug_channel_name = 20 [default = "/perception/camera_debug"];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_camera_debug_channel_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.onboard.FusionCameraDetection.camera_debug_channel_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double ts_diff = 21 [default = 0.1];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 169)) {
          _Internal::set_has_ts_diff(&_has_bits_);
          ts_diff_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool output_final_obstacles = 22 [default = false];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_output_final_obstacles(&_has_bits_);
          output_final_obstacles_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string visual_debug_folder = 23 [default = "/apollo/debug_output"];
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          auto str = _internal_mutable_visual_debug_folder();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.onboard.FusionCameraDetection.visual_debug_folder");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string visual_camera = 24 [default = "front_6mm"];
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          auto str = _internal_mutable_visual_camera();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.onboard.FusionCameraDetection.visual_camera");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool write_visual_img = 25 [default = false];
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_write_visual_img(&_has_bits_);
          write_visual_img_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double min_laneline_length_for_cipv = 26 [default = 2];
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 209)) {
          _Internal::set_has_min_laneline_length_for_cipv(&_has_bits_);
          min_laneline_length_for_cipv_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double average_lane_width_in_meter = 27 [default = 3.7];
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 217)) {
          _Internal::set_has_average_lane_width_in_meter(&_has_bits_);
          average_lane_width_in_meter_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double max_vehicle_width_in_meter = 28 [default = 2.5];
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 225)) {
          _Internal::set_has_max_vehicle_width_in_meter(&_has_bits_);
          max_vehicle_width_in_meter_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double average_frame_rate = 29 [default = 0.05];
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 233)) {
          _Internal::set_has_average_frame_rate(&_has_bits_);
          average_frame_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool image_based_cipv = 30 [default = false];
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_image_based_cipv(&_has_bits_);
          image_based_cipv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 debug_level = 31 [default = 0];
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_debug_level(&_has_bits_);
          debug_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_cipv = 32 [default = false];
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_enable_cipv(&_has_bits_);
          enable_cipv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string cipv = 33 [default = "Cipv"];
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_cipv();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.onboard.FusionCameraDetection.cipv");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FusionCameraDetection::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.onboard.FusionCameraDetection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string camera_names = 1 [default = "front_6mm,front_12mm"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_camera_names().data(), static_cast<int>(this->_internal_camera_names().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.onboard.FusionCameraDetection.camera_names");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_camera_names(), target);
  }

  // optional string input_camera_channel_names = 2 [default = "/sensor/camera/traffic/image_short,/sensor/camera/obstacle/image_narrow"];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_input_camera_channel_names().data(), static_cast<int>(this->_internal_input_camera_channel_names().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.onboard.FusionCameraDetection.input_camera_channel_names");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_input_camera_channel_names(), target);
  }

  // optional double timestamp_offset = 3 [default = 0];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_timestamp_offset(), target);
  }

  // optional string camera_obstacle_perception_conf_dir = 4 [default = "conf/perception/camera"];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_camera_obstacle_perception_conf_dir().data(), static_cast<int>(this->_internal_camera_obstacle_perception_conf_dir().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.onboard.FusionCameraDetection.camera_obstacle_perception_conf_dir");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_camera_obstacle_perception_conf_dir(), target);
  }

  // optional string camera_obstacle_perception_conf_file = 5 [default = "obstacle.pt"];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_camera_obstacle_perception_conf_file().data(), static_cast<int>(this->_internal_camera_obstacle_perception_conf_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.onboard.FusionCameraDetection.camera_obstacle_perception_conf_file");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_camera_obstacle_perception_conf_file(), target);
  }

  // optional int32 frame_capacity = 6 [default = 20];
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_frame_capacity(), target);
  }

  // optional int32 image_channel_num = 7 [default = 3];
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_image_channel_num(), target);
  }

  // optional bool enable_undistortion = 8 [default = false];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_enable_undistortion(), target);
  }

  // optional bool enable_visualization = 9 [default = false];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_enable_visualization(), target);
  }

  // optional string output_obstacles_channel_name = 10 [default = "/perception/obstacles"];
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_output_obstacles_channel_name().data(), static_cast<int>(this->_internal_output_obstacles_channel_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.onboard.FusionCameraDetection.output_obstacles_channel_name");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_output_obstacles_channel_name(), target);
  }

  // optional string camera_perception_viz_message_channel_name = 11 [default = "/perception/inner/camera_viz_msg"];
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_camera_perception_viz_message_channel_name().data(), static_cast<int>(this->_internal_camera_perception_viz_message_channel_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.onboard.FusionCameraDetection.camera_perception_viz_message_channel_name");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_camera_perception_viz_message_channel_name(), target);
  }

  // optional string prefused_channel_name = 12 [default = "/perception/inner/PrefusedObjects"];
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_prefused_channel_name().data(), static_cast<int>(this->_internal_prefused_channel_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.onboard.FusionCameraDetection.prefused_channel_name");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_prefused_channel_name(), target);
  }

  // optional double default_camera_pitch = 13 [default = 0];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_default_camera_pitch(), target);
  }

  // optional double default_camera_height = 14 [default = 1.5];
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_default_camera_height(), target);
  }

  // optional string lane_calibration_working_sensor_name = 15 [default = "front_6mm"];
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_lane_calibration_working_sensor_name().data(), static_cast<int>(this->_internal_lane_calibration_working_sensor_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.onboard.FusionCameraDetection.lane_calibration_working_sensor_name");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_lane_calibration_working_sensor_name(), target);
  }

  // optional string calibrator_method = 16 [default = "LaneLineCalibrator"];
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_calibrator_method().data(), static_cast<int>(this->_internal_calibrator_method().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.onboard.FusionCameraDetection.calibrator_method");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_calibrator_method(), target);
  }

  // optional string calib_service_name = 17 [default = "OnlineCalibrationService"];
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_calib_service_name().data(), static_cast<int>(this->_internal_calib_service_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.onboard.FusionCameraDetection.calib_service_name");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_calib_service_name(), target);
  }

  // optional bool run_calib_service = 18 [default = true];
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18, this->_internal_run_calib_service(), target);
  }

  // optional bool output_camera_debug_msg = 19 [default = false];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->_internal_output_camera_debug_msg(), target);
  }

  // optional string camera_debug_channel_name = 20 [default = "/perception/camera_debug"];
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_camera_debug_channel_name().data(), static_cast<int>(this->_internal_camera_debug_channel_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.onboard.FusionCameraDetection.camera_debug_channel_name");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_camera_debug_channel_name(), target);
  }

  // optional double ts_diff = 21 [default = 0.1];
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(21, this->_internal_ts_diff(), target);
  }

  // optional bool output_final_obstacles = 22 [default = false];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(22, this->_internal_output_final_obstacles(), target);
  }

  // optional string visual_debug_folder = 23 [default = "/apollo/debug_output"];
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_visual_debug_folder().data(), static_cast<int>(this->_internal_visual_debug_folder().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.onboard.FusionCameraDetection.visual_debug_folder");
    target = stream->WriteStringMaybeAliased(
        23, this->_internal_visual_debug_folder(), target);
  }

  // optional string visual_camera = 24 [default = "front_6mm"];
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_visual_camera().data(), static_cast<int>(this->_internal_visual_camera().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.onboard.FusionCameraDetection.visual_camera");
    target = stream->WriteStringMaybeAliased(
        24, this->_internal_visual_camera(), target);
  }

  // optional bool write_visual_img = 25 [default = false];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(25, this->_internal_write_visual_img(), target);
  }

  // optional double min_laneline_length_for_cipv = 26 [default = 2];
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(26, this->_internal_min_laneline_length_for_cipv(), target);
  }

  // optional double average_lane_width_in_meter = 27 [default = 3.7];
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(27, this->_internal_average_lane_width_in_meter(), target);
  }

  // optional double max_vehicle_width_in_meter = 28 [default = 2.5];
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(28, this->_internal_max_vehicle_width_in_meter(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional double average_frame_rate = 29 [default = 0.05];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(29, this->_internal_average_frame_rate(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool image_based_cipv = 30 [default = false];
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(30, this->_internal_image_based_cipv(), target);
  }

  // optional int32 debug_level = 31 [default = 0];
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(31, this->_internal_debug_level(), target);
  }

  // optional bool enable_cipv = 32 [default = false];
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(32, this->_internal_enable_cipv(), target);
  }

  // optional string cipv = 33 [default = "Cipv"];
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_cipv().data(), static_cast<int>(this->_internal_cipv().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.onboard.FusionCameraDetection.cipv");
    target = stream->WriteStringMaybeAliased(
        33, this->_internal_cipv(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.onboard.FusionCameraDetection)
  return target;
}

size_t FusionCameraDetection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.onboard.FusionCameraDetection)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string camera_names = 1 [default = "front_6mm,front_12mm"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_camera_names());
    }

    // optional string input_camera_channel_names = 2 [default = "/sensor/camera/traffic/image_short,/sensor/camera/obstacle/image_narrow"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_input_camera_channel_names());
    }

    // optional string camera_obstacle_perception_conf_dir = 4 [default = "conf/perception/camera"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_camera_obstacle_perception_conf_dir());
    }

    // optional string camera_obstacle_perception_conf_file = 5 [default = "obstacle.pt"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_camera_obstacle_perception_conf_file());
    }

    // optional string output_obstacles_channel_name = 10 [default = "/perception/obstacles"];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_output_obstacles_channel_name());
    }

    // optional string camera_perception_viz_message_channel_name = 11 [default = "/perception/inner/camera_viz_msg"];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_camera_perception_viz_message_channel_name());
    }

    // optional string prefused_channel_name = 12 [default = "/perception/inner/PrefusedObjects"];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_prefused_channel_name());
    }

    // optional string lane_calibration_working_sensor_name = 15 [default = "front_6mm"];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_lane_calibration_working_sensor_name());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional string calibrator_method = 16 [default = "LaneLineCalibrator"];
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_calibrator_method());
    }

    // optional string calib_service_name = 17 [default = "OnlineCalibrationService"];
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_calib_service_name());
    }

    // optional string camera_debug_channel_name = 20 [default = "/perception/camera_debug"];
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_camera_debug_channel_name());
    }

    // optional string visual_debug_folder = 23 [default = "/apollo/debug_output"];
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_visual_debug_folder());
    }

    // optional string visual_camera = 24 [default = "front_6mm"];
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_visual_camera());
    }

    // optional string cipv = 33 [default = "Cipv"];
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_cipv());
    }

    // optional double timestamp_offset = 3 [default = 0];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 8;
    }

    // optional double default_camera_pitch = 13 [default = 0];
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional bool enable_undistortion = 8 [default = false];
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 1;
    }

    // optional bool enable_visualization = 9 [default = false];
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 + 1;
    }

    // optional bool output_camera_debug_msg = 19 [default = false];
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

    // optional bool output_final_obstacles = 22 [default = false];
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 1;
    }

    // optional bool write_visual_img = 25 [default = false];
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 1;
    }

    // optional bool image_based_cipv = 30 [default = false];
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 1;
    }

    // optional bool enable_cipv = 32 [default = false];
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 1;
    }

    // optional int32 debug_level = 31 [default = 0];
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_debug_level());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional bool run_calib_service = 18 [default = true];
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 1;
    }

    // optional int32 frame_capacity = 6 [default = 20];
    if (cached_has_bits & 0x02000000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_frame_capacity());
    }

    // optional int32 image_channel_num = 7 [default = 3];
    if (cached_has_bits & 0x04000000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_image_channel_num());
    }

    // optional double default_camera_height = 14 [default = 1.5];
    if (cached_has_bits & 0x08000000u) {
      total_size += 1 + 8;
    }

    // optional double ts_diff = 21 [default = 0.1];
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 8;
    }

    // optional double min_laneline_length_for_cipv = 26 [default = 2];
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 8;
    }

    // optional double average_lane_width_in_meter = 27 [default = 3.7];
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 8;
    }

    // optional double max_vehicle_width_in_meter = 28 [default = 2.5];
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 8;
    }

  }
  // optional double average_frame_rate = 29 [default = 0.05];
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FusionCameraDetection::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FusionCameraDetection::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FusionCameraDetection::GetClassData() const { return &_class_data_; }

void FusionCameraDetection::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FusionCameraDetection *>(to)->MergeFrom(
      static_cast<const FusionCameraDetection &>(from));
}


void FusionCameraDetection::MergeFrom(const FusionCameraDetection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.onboard.FusionCameraDetection)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_camera_names(from._internal_camera_names());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_input_camera_channel_names(from._internal_input_camera_channel_names());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_camera_obstacle_perception_conf_dir(from._internal_camera_obstacle_perception_conf_dir());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_camera_obstacle_perception_conf_file(from._internal_camera_obstacle_perception_conf_file());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_output_obstacles_channel_name(from._internal_output_obstacles_channel_name());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_camera_perception_viz_message_channel_name(from._internal_camera_perception_viz_message_channel_name());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_prefused_channel_name(from._internal_prefused_channel_name());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_lane_calibration_working_sensor_name(from._internal_lane_calibration_working_sensor_name());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_set_calibrator_method(from._internal_calibrator_method());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_set_calib_service_name(from._internal_calib_service_name());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_set_camera_debug_channel_name(from._internal_camera_debug_channel_name());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_set_visual_debug_folder(from._internal_visual_debug_folder());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_set_visual_camera(from._internal_visual_camera());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_set_cipv(from._internal_cipv());
    }
    if (cached_has_bits & 0x00004000u) {
      timestamp_offset_ = from.timestamp_offset_;
    }
    if (cached_has_bits & 0x00008000u) {
      default_camera_pitch_ = from.default_camera_pitch_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      enable_undistortion_ = from.enable_undistortion_;
    }
    if (cached_has_bits & 0x00020000u) {
      enable_visualization_ = from.enable_visualization_;
    }
    if (cached_has_bits & 0x00040000u) {
      output_camera_debug_msg_ = from.output_camera_debug_msg_;
    }
    if (cached_has_bits & 0x00080000u) {
      output_final_obstacles_ = from.output_final_obstacles_;
    }
    if (cached_has_bits & 0x00100000u) {
      write_visual_img_ = from.write_visual_img_;
    }
    if (cached_has_bits & 0x00200000u) {
      image_based_cipv_ = from.image_based_cipv_;
    }
    if (cached_has_bits & 0x00400000u) {
      enable_cipv_ = from.enable_cipv_;
    }
    if (cached_has_bits & 0x00800000u) {
      debug_level_ = from.debug_level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      run_calib_service_ = from.run_calib_service_;
    }
    if (cached_has_bits & 0x02000000u) {
      frame_capacity_ = from.frame_capacity_;
    }
    if (cached_has_bits & 0x04000000u) {
      image_channel_num_ = from.image_channel_num_;
    }
    if (cached_has_bits & 0x08000000u) {
      default_camera_height_ = from.default_camera_height_;
    }
    if (cached_has_bits & 0x10000000u) {
      ts_diff_ = from.ts_diff_;
    }
    if (cached_has_bits & 0x20000000u) {
      min_laneline_length_for_cipv_ = from.min_laneline_length_for_cipv_;
    }
    if (cached_has_bits & 0x40000000u) {
      average_lane_width_in_meter_ = from.average_lane_width_in_meter_;
    }
    if (cached_has_bits & 0x80000000u) {
      max_vehicle_width_in_meter_ = from.max_vehicle_width_in_meter_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (from._internal_has_average_frame_rate()) {
    _internal_set_average_frame_rate(from._internal_average_frame_rate());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FusionCameraDetection::CopyFrom(const FusionCameraDetection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.onboard.FusionCameraDetection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FusionCameraDetection::IsInitialized() const {
  return true;
}

void FusionCameraDetection::InternalSwap(FusionCameraDetection* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      nullptr,
      &camera_names_, lhs_arena,
      &other->camera_names_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      nullptr,
      &input_camera_channel_names_, lhs_arena,
      &other->input_camera_channel_names_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      nullptr,
      &camera_obstacle_perception_conf_dir_, lhs_arena,
      &other->camera_obstacle_perception_conf_dir_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      nullptr,
      &camera_obstacle_perception_conf_file_, lhs_arena,
      &other->camera_obstacle_perception_conf_file_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      nullptr,
      &output_obstacles_channel_name_, lhs_arena,
      &other->output_obstacles_channel_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      nullptr,
      &camera_perception_viz_message_channel_name_, lhs_arena,
      &other->camera_perception_viz_message_channel_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      nullptr,
      &prefused_channel_name_, lhs_arena,
      &other->prefused_channel_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      nullptr,
      &lane_calibration_working_sensor_name_, lhs_arena,
      &other->lane_calibration_working_sensor_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      nullptr,
      &calibrator_method_, lhs_arena,
      &other->calibrator_method_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      nullptr,
      &calib_service_name_, lhs_arena,
      &other->calib_service_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      nullptr,
      &camera_debug_channel_name_, lhs_arena,
      &other->camera_debug_channel_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      nullptr,
      &visual_debug_folder_, lhs_arena,
      &other->visual_debug_folder_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      nullptr,
      &visual_camera_, lhs_arena,
      &other->visual_camera_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      nullptr,
      &cipv_, lhs_arena,
      &other->cipv_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FusionCameraDetection, debug_level_)
      + sizeof(FusionCameraDetection::debug_level_)
      - PROTOBUF_FIELD_OFFSET(FusionCameraDetection, timestamp_offset_)>(
          reinterpret_cast<char*>(&timestamp_offset_),
          reinterpret_cast<char*>(&other->timestamp_offset_));
  swap(run_calib_service_, other->run_calib_service_);
  swap(frame_capacity_, other->frame_capacity_);
  swap(image_channel_num_, other->image_channel_num_);
  swap(default_camera_height_, other->default_camera_height_);
  swap(ts_diff_, other->ts_diff_);
  swap(min_laneline_length_for_cipv_, other->min_laneline_length_for_cipv_);
  swap(average_lane_width_in_meter_, other->average_lane_width_in_meter_);
  swap(max_vehicle_width_in_meter_, other->max_vehicle_width_in_meter_);
  swap(average_frame_rate_, other->average_frame_rate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FusionCameraDetection::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fonboard_2fproto_2ffusion_5fcamera_5fdetection_5fcomponent_2eproto_getter, &descriptor_table_modules_2fperception_2fonboard_2fproto_2ffusion_5fcamera_5fdetection_5fcomponent_2eproto_once,
      file_level_metadata_modules_2fperception_2fonboard_2fproto_2ffusion_5fcamera_5fdetection_5fcomponent_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace onboard
}  // namespace perception
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::perception::onboard::FusionCameraDetection* Arena::CreateMaybeMessage< ::apollo::perception::onboard::FusionCameraDetection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::onboard::FusionCameraDetection >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
