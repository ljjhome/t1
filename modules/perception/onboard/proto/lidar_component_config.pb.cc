// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/onboard/proto/lidar_component_config.proto

#include "modules/perception/onboard/proto/lidar_component_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace apollo {
namespace perception {
namespace onboard {
constexpr LidarDetectionComponentConfig::LidarDetectionComponentConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sensor_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , detector_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , lidar2novatel_tf2_child_frame_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , output_channel_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , lidar_query_tf_offset_(0)
  , enable_hdmap_(false){}
struct LidarDetectionComponentConfigDefaultTypeInternal {
  constexpr LidarDetectionComponentConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LidarDetectionComponentConfigDefaultTypeInternal() {}
  union {
    LidarDetectionComponentConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LidarDetectionComponentConfigDefaultTypeInternal _LidarDetectionComponentConfig_default_instance_;
constexpr LidarRecognitionComponentConfig::LidarRecognitionComponentConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : main_sensor_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , output_channel_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct LidarRecognitionComponentConfigDefaultTypeInternal {
  constexpr LidarRecognitionComponentConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LidarRecognitionComponentConfigDefaultTypeInternal() {}
  union {
    LidarRecognitionComponentConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LidarRecognitionComponentConfigDefaultTypeInternal _LidarRecognitionComponentConfig_default_instance_;
}  // namespace onboard
}  // namespace perception
}  // namespace apollo
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fperception_2fonboard_2fproto_2flidar_5fcomponent_5fconfig_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_modules_2fperception_2fonboard_2fproto_2flidar_5fcomponent_5fconfig_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fperception_2fonboard_2fproto_2flidar_5fcomponent_5fconfig_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fperception_2fonboard_2fproto_2flidar_5fcomponent_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::LidarDetectionComponentConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::LidarDetectionComponentConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::LidarDetectionComponentConfig, sensor_name_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::LidarDetectionComponentConfig, detector_name_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::LidarDetectionComponentConfig, enable_hdmap_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::LidarDetectionComponentConfig, lidar_query_tf_offset_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::LidarDetectionComponentConfig, lidar2novatel_tf2_child_frame_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::LidarDetectionComponentConfig, output_channel_name_),
  0,
  1,
  5,
  4,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::LidarRecognitionComponentConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::LidarRecognitionComponentConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::LidarRecognitionComponentConfig, main_sensor_name_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::LidarRecognitionComponentConfig, output_channel_name_),
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, -1, sizeof(::apollo::perception::onboard::LidarDetectionComponentConfig)},
  { 18, 26, -1, sizeof(::apollo::perception::onboard::LidarRecognitionComponentConfig)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::onboard::_LidarDetectionComponentConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::onboard::_LidarRecognitionComponentConfig_default_instance_),
};

const char descriptor_table_protodef_modules_2fperception_2fonboard_2fproto_2flidar_5fcomponent_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n=modules/perception/onboard/proto/lidar"
  "_component_config.proto\022\031apollo.percepti"
  "on.onboard\"\307\001\n\035LidarDetectionComponentCo"
  "nfig\022\023\n\013sensor_name\030\001 \001(\t\022\025\n\rdetector_na"
  "me\030\002 \001(\t\022\024\n\014enable_hdmap\030\003 \001(\010\022\035\n\025lidar_"
  "query_tf_offset\030\004 \001(\001\022(\n lidar2novatel_t"
  "f2_child_frame_id\030\005 \001(\t\022\033\n\023output_channe"
  "l_name\030\006 \001(\t\"X\n\037LidarRecognitionComponen"
  "tConfig\022\030\n\020main_sensor_name\030\001 \001(\t\022\033\n\023out"
  "put_channel_name\030\002 \001(\t"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fperception_2fonboard_2fproto_2flidar_5fcomponent_5fconfig_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fperception_2fonboard_2fproto_2flidar_5fcomponent_5fconfig_2eproto = {
  false, false, 382, descriptor_table_protodef_modules_2fperception_2fonboard_2fproto_2flidar_5fcomponent_5fconfig_2eproto, "modules/perception/onboard/proto/lidar_component_config.proto", 
  &descriptor_table_modules_2fperception_2fonboard_2fproto_2flidar_5fcomponent_5fconfig_2eproto_once, nullptr, 0, 2,
  schemas, file_default_instances, TableStruct_modules_2fperception_2fonboard_2fproto_2flidar_5fcomponent_5fconfig_2eproto::offsets,
  file_level_metadata_modules_2fperception_2fonboard_2fproto_2flidar_5fcomponent_5fconfig_2eproto, file_level_enum_descriptors_modules_2fperception_2fonboard_2fproto_2flidar_5fcomponent_5fconfig_2eproto, file_level_service_descriptors_modules_2fperception_2fonboard_2fproto_2flidar_5fcomponent_5fconfig_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_modules_2fperception_2fonboard_2fproto_2flidar_5fcomponent_5fconfig_2eproto_getter() {
  return &descriptor_table_modules_2fperception_2fonboard_2fproto_2flidar_5fcomponent_5fconfig_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_modules_2fperception_2fonboard_2fproto_2flidar_5fcomponent_5fconfig_2eproto(&descriptor_table_modules_2fperception_2fonboard_2fproto_2flidar_5fcomponent_5fconfig_2eproto);
namespace apollo {
namespace perception {
namespace onboard {

// ===================================================================

class LidarDetectionComponentConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<LidarDetectionComponentConfig>()._has_bits_);
  static void set_has_sensor_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_detector_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_enable_hdmap(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_lidar_query_tf_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_lidar2novatel_tf2_child_frame_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_output_channel_name(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

LidarDetectionComponentConfig::LidarDetectionComponentConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.perception.onboard.LidarDetectionComponentConfig)
}
LidarDetectionComponentConfig::LidarDetectionComponentConfig(const LidarDetectionComponentConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sensor_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sensor_name()) {
    sensor_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sensor_name(), 
      GetArenaForAllocation());
  }
  detector_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_detector_name()) {
    detector_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_detector_name(), 
      GetArenaForAllocation());
  }
  lidar2novatel_tf2_child_frame_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_lidar2novatel_tf2_child_frame_id()) {
    lidar2novatel_tf2_child_frame_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_lidar2novatel_tf2_child_frame_id(), 
      GetArenaForAllocation());
  }
  output_channel_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_output_channel_name()) {
    output_channel_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_output_channel_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&lidar_query_tf_offset_, &from.lidar_query_tf_offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&enable_hdmap_) -
    reinterpret_cast<char*>(&lidar_query_tf_offset_)) + sizeof(enable_hdmap_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.onboard.LidarDetectionComponentConfig)
}

void LidarDetectionComponentConfig::SharedCtor() {
sensor_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
detector_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
lidar2novatel_tf2_child_frame_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
output_channel_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&lidar_query_tf_offset_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&enable_hdmap_) -
    reinterpret_cast<char*>(&lidar_query_tf_offset_)) + sizeof(enable_hdmap_));
}

LidarDetectionComponentConfig::~LidarDetectionComponentConfig() {
  // @@protoc_insertion_point(destructor:apollo.perception.onboard.LidarDetectionComponentConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LidarDetectionComponentConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  sensor_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  detector_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lidar2novatel_tf2_child_frame_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  output_channel_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LidarDetectionComponentConfig::ArenaDtor(void* object) {
  LidarDetectionComponentConfig* _this = reinterpret_cast< LidarDetectionComponentConfig* >(object);
  (void)_this;
}
void LidarDetectionComponentConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LidarDetectionComponentConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LidarDetectionComponentConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.onboard.LidarDetectionComponentConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      sensor_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      detector_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      lidar2novatel_tf2_child_frame_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      output_channel_name_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    ::memset(&lidar_query_tf_offset_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&enable_hdmap_) -
        reinterpret_cast<char*>(&lidar_query_tf_offset_)) + sizeof(enable_hdmap_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LidarDetectionComponentConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string sensor_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_sensor_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.onboard.LidarDetectionComponentConfig.sensor_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string detector_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_detector_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.onboard.LidarDetectionComponentConfig.detector_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_hdmap = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_enable_hdmap(&has_bits);
          enable_hdmap_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double lidar_query_tf_offset = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_lidar_query_tf_offset(&has_bits);
          lidar_query_tf_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional string lidar2novatel_tf2_child_frame_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_lidar2novatel_tf2_child_frame_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.onboard.LidarDetectionComponentConfig.lidar2novatel_tf2_child_frame_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string output_channel_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_output_channel_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.onboard.LidarDetectionComponentConfig.output_channel_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LidarDetectionComponentConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.onboard.LidarDetectionComponentConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string sensor_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sensor_name().data(), static_cast<int>(this->_internal_sensor_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.onboard.LidarDetectionComponentConfig.sensor_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sensor_name(), target);
  }

  // optional string detector_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_detector_name().data(), static_cast<int>(this->_internal_detector_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.onboard.LidarDetectionComponentConfig.detector_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_detector_name(), target);
  }

  // optional bool enable_hdmap = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_enable_hdmap(), target);
  }

  // optional double lidar_query_tf_offset = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_lidar_query_tf_offset(), target);
  }

  // optional string lidar2novatel_tf2_child_frame_id = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_lidar2novatel_tf2_child_frame_id().data(), static_cast<int>(this->_internal_lidar2novatel_tf2_child_frame_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.onboard.LidarDetectionComponentConfig.lidar2novatel_tf2_child_frame_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_lidar2novatel_tf2_child_frame_id(), target);
  }

  // optional string output_channel_name = 6;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_output_channel_name().data(), static_cast<int>(this->_internal_output_channel_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.onboard.LidarDetectionComponentConfig.output_channel_name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_output_channel_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.onboard.LidarDetectionComponentConfig)
  return target;
}

size_t LidarDetectionComponentConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.onboard.LidarDetectionComponentConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string sensor_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sensor_name());
    }

    // optional string detector_name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_detector_name());
    }

    // optional string lidar2novatel_tf2_child_frame_id = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_lidar2novatel_tf2_child_frame_id());
    }

    // optional string output_channel_name = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_output_channel_name());
    }

    // optional double lidar_query_tf_offset = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional bool enable_hdmap = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LidarDetectionComponentConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LidarDetectionComponentConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LidarDetectionComponentConfig::GetClassData() const { return &_class_data_; }

void LidarDetectionComponentConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LidarDetectionComponentConfig *>(to)->MergeFrom(
      static_cast<const LidarDetectionComponentConfig &>(from));
}


void LidarDetectionComponentConfig::MergeFrom(const LidarDetectionComponentConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.onboard.LidarDetectionComponentConfig)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_sensor_name(from._internal_sensor_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_detector_name(from._internal_detector_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_lidar2novatel_tf2_child_frame_id(from._internal_lidar2novatel_tf2_child_frame_id());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_output_channel_name(from._internal_output_channel_name());
    }
    if (cached_has_bits & 0x00000010u) {
      lidar_query_tf_offset_ = from.lidar_query_tf_offset_;
    }
    if (cached_has_bits & 0x00000020u) {
      enable_hdmap_ = from.enable_hdmap_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LidarDetectionComponentConfig::CopyFrom(const LidarDetectionComponentConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.onboard.LidarDetectionComponentConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LidarDetectionComponentConfig::IsInitialized() const {
  return true;
}

void LidarDetectionComponentConfig::InternalSwap(LidarDetectionComponentConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sensor_name_, lhs_arena,
      &other->sensor_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &detector_name_, lhs_arena,
      &other->detector_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &lidar2novatel_tf2_child_frame_id_, lhs_arena,
      &other->lidar2novatel_tf2_child_frame_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &output_channel_name_, lhs_arena,
      &other->output_channel_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LidarDetectionComponentConfig, enable_hdmap_)
      + sizeof(LidarDetectionComponentConfig::enable_hdmap_)
      - PROTOBUF_FIELD_OFFSET(LidarDetectionComponentConfig, lidar_query_tf_offset_)>(
          reinterpret_cast<char*>(&lidar_query_tf_offset_),
          reinterpret_cast<char*>(&other->lidar_query_tf_offset_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LidarDetectionComponentConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fonboard_2fproto_2flidar_5fcomponent_5fconfig_2eproto_getter, &descriptor_table_modules_2fperception_2fonboard_2fproto_2flidar_5fcomponent_5fconfig_2eproto_once,
      file_level_metadata_modules_2fperception_2fonboard_2fproto_2flidar_5fcomponent_5fconfig_2eproto[0]);
}

// ===================================================================

class LidarRecognitionComponentConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<LidarRecognitionComponentConfig>()._has_bits_);
  static void set_has_main_sensor_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_output_channel_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

LidarRecognitionComponentConfig::LidarRecognitionComponentConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.perception.onboard.LidarRecognitionComponentConfig)
}
LidarRecognitionComponentConfig::LidarRecognitionComponentConfig(const LidarRecognitionComponentConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  main_sensor_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_main_sensor_name()) {
    main_sensor_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_main_sensor_name(), 
      GetArenaForAllocation());
  }
  output_channel_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_output_channel_name()) {
    output_channel_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_output_channel_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:apollo.perception.onboard.LidarRecognitionComponentConfig)
}

void LidarRecognitionComponentConfig::SharedCtor() {
main_sensor_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
output_channel_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

LidarRecognitionComponentConfig::~LidarRecognitionComponentConfig() {
  // @@protoc_insertion_point(destructor:apollo.perception.onboard.LidarRecognitionComponentConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LidarRecognitionComponentConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  main_sensor_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  output_channel_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LidarRecognitionComponentConfig::ArenaDtor(void* object) {
  LidarRecognitionComponentConfig* _this = reinterpret_cast< LidarRecognitionComponentConfig* >(object);
  (void)_this;
}
void LidarRecognitionComponentConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LidarRecognitionComponentConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LidarRecognitionComponentConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.onboard.LidarRecognitionComponentConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      main_sensor_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      output_channel_name_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LidarRecognitionComponentConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string main_sensor_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_main_sensor_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.onboard.LidarRecognitionComponentConfig.main_sensor_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string output_channel_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_output_channel_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.onboard.LidarRecognitionComponentConfig.output_channel_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LidarRecognitionComponentConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.onboard.LidarRecognitionComponentConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string main_sensor_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_main_sensor_name().data(), static_cast<int>(this->_internal_main_sensor_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.onboard.LidarRecognitionComponentConfig.main_sensor_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_main_sensor_name(), target);
  }

  // optional string output_channel_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_output_channel_name().data(), static_cast<int>(this->_internal_output_channel_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.onboard.LidarRecognitionComponentConfig.output_channel_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_output_channel_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.onboard.LidarRecognitionComponentConfig)
  return target;
}

size_t LidarRecognitionComponentConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.onboard.LidarRecognitionComponentConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string main_sensor_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_main_sensor_name());
    }

    // optional string output_channel_name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_output_channel_name());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LidarRecognitionComponentConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LidarRecognitionComponentConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LidarRecognitionComponentConfig::GetClassData() const { return &_class_data_; }

void LidarRecognitionComponentConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LidarRecognitionComponentConfig *>(to)->MergeFrom(
      static_cast<const LidarRecognitionComponentConfig &>(from));
}


void LidarRecognitionComponentConfig::MergeFrom(const LidarRecognitionComponentConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.onboard.LidarRecognitionComponentConfig)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_main_sensor_name(from._internal_main_sensor_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_output_channel_name(from._internal_output_channel_name());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LidarRecognitionComponentConfig::CopyFrom(const LidarRecognitionComponentConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.onboard.LidarRecognitionComponentConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LidarRecognitionComponentConfig::IsInitialized() const {
  return true;
}

void LidarRecognitionComponentConfig::InternalSwap(LidarRecognitionComponentConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &main_sensor_name_, lhs_arena,
      &other->main_sensor_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &output_channel_name_, lhs_arena,
      &other->output_channel_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata LidarRecognitionComponentConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fonboard_2fproto_2flidar_5fcomponent_5fconfig_2eproto_getter, &descriptor_table_modules_2fperception_2fonboard_2fproto_2flidar_5fcomponent_5fconfig_2eproto_once,
      file_level_metadata_modules_2fperception_2fonboard_2fproto_2flidar_5fcomponent_5fconfig_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace onboard
}  // namespace perception
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::perception::onboard::LidarDetectionComponentConfig* Arena::CreateMaybeMessage< ::apollo::perception::onboard::LidarDetectionComponentConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::onboard::LidarDetectionComponentConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::onboard::LidarRecognitionComponentConfig* Arena::CreateMaybeMessage< ::apollo::perception::onboard::LidarRecognitionComponentConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::onboard::LidarRecognitionComponentConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
