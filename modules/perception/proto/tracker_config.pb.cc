// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/proto/tracker_config.proto

#include "modules/perception/proto/tracker_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr MatcherConfig::MatcherConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : max_match_distance_(2.5)
  , bound_match_distance_(10){}
struct MatcherConfigDefaultTypeInternal {
  constexpr MatcherConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MatcherConfigDefaultTypeInternal() {}
  union {
    MatcherConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MatcherConfigDefaultTypeInternal _MatcherConfig_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fperception_2fproto_2ftracker_5fconfig_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_modules_2fperception_2fproto_2ftracker_5fconfig_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fperception_2fproto_2ftracker_5fconfig_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fperception_2fproto_2ftracker_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::MatcherConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::MatcherConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::MatcherConfig, max_match_distance_),
  PROTOBUF_FIELD_OFFSET(::MatcherConfig, bound_match_distance_),
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::MatcherConfig)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MatcherConfig_default_instance_),
};

const char descriptor_table_protodef_modules_2fperception_2fproto_2ftracker_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n-modules/perception/proto/tracker_confi"
  "g.proto\"R\n\rMatcherConfig\022\037\n\022max_match_di"
  "stance\030\001 \001(\001:\0032.5\022 \n\024bound_match_distanc"
  "e\030\002 \001(\001:\00210"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fperception_2fproto_2ftracker_5fconfig_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fperception_2fproto_2ftracker_5fconfig_2eproto = {
  false, false, 131, descriptor_table_protodef_modules_2fperception_2fproto_2ftracker_5fconfig_2eproto, "modules/perception/proto/tracker_config.proto", 
  &descriptor_table_modules_2fperception_2fproto_2ftracker_5fconfig_2eproto_once, nullptr, 0, 1,
  schemas, file_default_instances, TableStruct_modules_2fperception_2fproto_2ftracker_5fconfig_2eproto::offsets,
  file_level_metadata_modules_2fperception_2fproto_2ftracker_5fconfig_2eproto, file_level_enum_descriptors_modules_2fperception_2fproto_2ftracker_5fconfig_2eproto, file_level_service_descriptors_modules_2fperception_2fproto_2ftracker_5fconfig_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_modules_2fperception_2fproto_2ftracker_5fconfig_2eproto_getter() {
  return &descriptor_table_modules_2fperception_2fproto_2ftracker_5fconfig_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_modules_2fperception_2fproto_2ftracker_5fconfig_2eproto(&descriptor_table_modules_2fperception_2fproto_2ftracker_5fconfig_2eproto);

// ===================================================================

class MatcherConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<MatcherConfig>()._has_bits_);
  static void set_has_max_match_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_bound_match_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MatcherConfig::MatcherConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:MatcherConfig)
}
MatcherConfig::MatcherConfig(const MatcherConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&max_match_distance_, &from.max_match_distance_,
    static_cast<size_t>(reinterpret_cast<char*>(&bound_match_distance_) -
    reinterpret_cast<char*>(&max_match_distance_)) + sizeof(bound_match_distance_));
  // @@protoc_insertion_point(copy_constructor:MatcherConfig)
}

void MatcherConfig::SharedCtor() {
max_match_distance_ = 2.5;
bound_match_distance_ = 10;
}

MatcherConfig::~MatcherConfig() {
  // @@protoc_insertion_point(destructor:MatcherConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MatcherConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MatcherConfig::ArenaDtor(void* object) {
  MatcherConfig* _this = reinterpret_cast< MatcherConfig* >(object);
  (void)_this;
}
void MatcherConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MatcherConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MatcherConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:MatcherConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    max_match_distance_ = 2.5;
    bound_match_distance_ = 10;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MatcherConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double max_match_distance = 1 [default = 2.5];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_max_match_distance(&has_bits);
          max_match_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double bound_match_distance = 2 [default = 10];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_bound_match_distance(&has_bits);
          bound_match_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MatcherConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MatcherConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double max_match_distance = 1 [default = 2.5];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_max_match_distance(), target);
  }

  // optional double bound_match_distance = 2 [default = 10];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_bound_match_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MatcherConfig)
  return target;
}

size_t MatcherConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MatcherConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double max_match_distance = 1 [default = 2.5];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double bound_match_distance = 2 [default = 10];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MatcherConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MatcherConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MatcherConfig::GetClassData() const { return &_class_data_; }

void MatcherConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MatcherConfig *>(to)->MergeFrom(
      static_cast<const MatcherConfig &>(from));
}


void MatcherConfig::MergeFrom(const MatcherConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MatcherConfig)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      max_match_distance_ = from.max_match_distance_;
    }
    if (cached_has_bits & 0x00000002u) {
      bound_match_distance_ = from.bound_match_distance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MatcherConfig::CopyFrom(const MatcherConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MatcherConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatcherConfig::IsInitialized() const {
  return true;
}

void MatcherConfig::InternalSwap(MatcherConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(max_match_distance_, other->max_match_distance_);
  swap(bound_match_distance_, other->bound_match_distance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MatcherConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2ftracker_5fconfig_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2ftracker_5fconfig_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2ftracker_5fconfig_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::MatcherConfig* Arena::CreateMaybeMessage< ::MatcherConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MatcherConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
