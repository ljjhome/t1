// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/lidar/lib/scene_manager/roi_service/proto/roi_service.proto

#include "modules/perception/lidar/lib/scene_manager/roi_service/proto/roi_service.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace apollo {
namespace perception {
namespace lidar {
constexpr ROIServiceConfig::ROIServiceConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : range_(120)
  , cell_size_(0.25){}
struct ROIServiceConfigDefaultTypeInternal {
  constexpr ROIServiceConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ROIServiceConfigDefaultTypeInternal() {}
  union {
    ROIServiceConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ROIServiceConfigDefaultTypeInternal _ROIServiceConfig_default_instance_;
}  // namespace lidar
}  // namespace perception
}  // namespace apollo
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fperception_2flidar_2flib_2fscene_5fmanager_2froi_5fservice_2fproto_2froi_5fservice_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_modules_2fperception_2flidar_2flib_2fscene_5fmanager_2froi_5fservice_2fproto_2froi_5fservice_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fperception_2flidar_2flib_2fscene_5fmanager_2froi_5fservice_2fproto_2froi_5fservice_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fperception_2flidar_2flib_2fscene_5fmanager_2froi_5fservice_2fproto_2froi_5fservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::ROIServiceConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::ROIServiceConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::ROIServiceConfig, range_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::ROIServiceConfig, cell_size_),
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::apollo::perception::lidar::ROIServiceConfig)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::lidar::_ROIServiceConfig_default_instance_),
};

const char descriptor_table_protodef_modules_2fperception_2flidar_2flib_2fscene_5fmanager_2froi_5fservice_2fproto_2froi_5fservice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\nNmodules/perception/lidar/lib/scene_man"
  "ager/roi_service/proto/roi_service.proto"
  "\022\027apollo.perception.lidar\"\?\n\020ROIServiceC"
  "onfig\022\022\n\005range\030\001 \001(\001:\003120\022\027\n\tcell_size\030\002"
  " \001(\001:\0040.25"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fperception_2flidar_2flib_2fscene_5fmanager_2froi_5fservice_2fproto_2froi_5fservice_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fperception_2flidar_2flib_2fscene_5fmanager_2froi_5fservice_2fproto_2froi_5fservice_2eproto = {
  false, false, 170, descriptor_table_protodef_modules_2fperception_2flidar_2flib_2fscene_5fmanager_2froi_5fservice_2fproto_2froi_5fservice_2eproto, "modules/perception/lidar/lib/scene_manager/roi_service/proto/roi_service.proto", 
  &descriptor_table_modules_2fperception_2flidar_2flib_2fscene_5fmanager_2froi_5fservice_2fproto_2froi_5fservice_2eproto_once, nullptr, 0, 1,
  schemas, file_default_instances, TableStruct_modules_2fperception_2flidar_2flib_2fscene_5fmanager_2froi_5fservice_2fproto_2froi_5fservice_2eproto::offsets,
  file_level_metadata_modules_2fperception_2flidar_2flib_2fscene_5fmanager_2froi_5fservice_2fproto_2froi_5fservice_2eproto, file_level_enum_descriptors_modules_2fperception_2flidar_2flib_2fscene_5fmanager_2froi_5fservice_2fproto_2froi_5fservice_2eproto, file_level_service_descriptors_modules_2fperception_2flidar_2flib_2fscene_5fmanager_2froi_5fservice_2fproto_2froi_5fservice_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_modules_2fperception_2flidar_2flib_2fscene_5fmanager_2froi_5fservice_2fproto_2froi_5fservice_2eproto_getter() {
  return &descriptor_table_modules_2fperception_2flidar_2flib_2fscene_5fmanager_2froi_5fservice_2fproto_2froi_5fservice_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_modules_2fperception_2flidar_2flib_2fscene_5fmanager_2froi_5fservice_2fproto_2froi_5fservice_2eproto(&descriptor_table_modules_2fperception_2flidar_2flib_2fscene_5fmanager_2froi_5fservice_2fproto_2froi_5fservice_2eproto);
namespace apollo {
namespace perception {
namespace lidar {

// ===================================================================

class ROIServiceConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<ROIServiceConfig>()._has_bits_);
  static void set_has_range(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cell_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ROIServiceConfig::ROIServiceConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.perception.lidar.ROIServiceConfig)
}
ROIServiceConfig::ROIServiceConfig(const ROIServiceConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&range_, &from.range_,
    static_cast<size_t>(reinterpret_cast<char*>(&cell_size_) -
    reinterpret_cast<char*>(&range_)) + sizeof(cell_size_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.lidar.ROIServiceConfig)
}

void ROIServiceConfig::SharedCtor() {
range_ = 120;
cell_size_ = 0.25;
}

ROIServiceConfig::~ROIServiceConfig() {
  // @@protoc_insertion_point(destructor:apollo.perception.lidar.ROIServiceConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ROIServiceConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ROIServiceConfig::ArenaDtor(void* object) {
  ROIServiceConfig* _this = reinterpret_cast< ROIServiceConfig* >(object);
  (void)_this;
}
void ROIServiceConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ROIServiceConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ROIServiceConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.lidar.ROIServiceConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    range_ = 120;
    cell_size_ = 0.25;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ROIServiceConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double range = 1 [default = 120];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_range(&has_bits);
          range_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double cell_size = 2 [default = 0.25];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_cell_size(&has_bits);
          cell_size_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ROIServiceConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.lidar.ROIServiceConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double range = 1 [default = 120];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_range(), target);
  }

  // optional double cell_size = 2 [default = 0.25];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_cell_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.lidar.ROIServiceConfig)
  return target;
}

size_t ROIServiceConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.lidar.ROIServiceConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double range = 1 [default = 120];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double cell_size = 2 [default = 0.25];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ROIServiceConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ROIServiceConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ROIServiceConfig::GetClassData() const { return &_class_data_; }

void ROIServiceConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ROIServiceConfig *>(to)->MergeFrom(
      static_cast<const ROIServiceConfig &>(from));
}


void ROIServiceConfig::MergeFrom(const ROIServiceConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.lidar.ROIServiceConfig)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      range_ = from.range_;
    }
    if (cached_has_bits & 0x00000002u) {
      cell_size_ = from.cell_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ROIServiceConfig::CopyFrom(const ROIServiceConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.lidar.ROIServiceConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ROIServiceConfig::IsInitialized() const {
  return true;
}

void ROIServiceConfig::InternalSwap(ROIServiceConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(range_, other->range_);
  swap(cell_size_, other->cell_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ROIServiceConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fperception_2flidar_2flib_2fscene_5fmanager_2froi_5fservice_2fproto_2froi_5fservice_2eproto_getter, &descriptor_table_modules_2fperception_2flidar_2flib_2fscene_5fmanager_2froi_5fservice_2fproto_2froi_5fservice_2eproto_once,
      file_level_metadata_modules_2fperception_2flidar_2flib_2fscene_5fmanager_2froi_5fservice_2fproto_2froi_5fservice_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace lidar
}  // namespace perception
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::perception::lidar::ROIServiceConfig* Arena::CreateMaybeMessage< ::apollo::perception::lidar::ROIServiceConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::lidar::ROIServiceConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
