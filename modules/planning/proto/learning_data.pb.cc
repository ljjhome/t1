// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/learning_data.proto

#include "modules/planning/proto/learning_data.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace apollo {
namespace planning {
constexpr OverlapFeature::OverlapFeature(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , distance_(0){}
struct OverlapFeatureDefaultTypeInternal {
  constexpr OverlapFeatureDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OverlapFeatureDefaultTypeInternal() {}
  union {
    OverlapFeature _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OverlapFeatureDefaultTypeInternal _OverlapFeature_default_instance_;
constexpr PlanningTag::PlanningTag(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : clear_area_(nullptr)
  , crosswalk_(nullptr)
  , pnc_junction_(nullptr)
  , signal_(nullptr)
  , stop_sign_(nullptr)
  , yield_sign_(nullptr)
  , lane_turn_(1)
{}
struct PlanningTagDefaultTypeInternal {
  constexpr PlanningTagDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PlanningTagDefaultTypeInternal() {}
  union {
    PlanningTag _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PlanningTagDefaultTypeInternal _PlanningTag_default_instance_;
constexpr ChassisFeature::ChassisFeature(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_timestamp_sec_(0)
  , speed_mps_(0)
  , throttle_percentage_(0)
  , brake_percentage_(0)
  , steering_percentage_(0)
  , gear_location_(0)
{}
struct ChassisFeatureDefaultTypeInternal {
  constexpr ChassisFeatureDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChassisFeatureDefaultTypeInternal() {}
  union {
    ChassisFeature _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChassisFeatureDefaultTypeInternal _ChassisFeature_default_instance_;
constexpr LocalizationFeature::LocalizationFeature(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : position_(nullptr)
  , linear_velocity_(nullptr)
  , linear_acceleration_(nullptr)
  , angular_velocity_(nullptr)
  , message_timestamp_sec_(0)
  , heading_(0){}
struct LocalizationFeatureDefaultTypeInternal {
  constexpr LocalizationFeatureDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LocalizationFeatureDefaultTypeInternal() {}
  union {
    LocalizationFeature _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LocalizationFeatureDefaultTypeInternal _LocalizationFeature_default_instance_;
constexpr CommonPathPointFeature::CommonPathPointFeature(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : lane_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , x_(0)
  , y_(0)
  , z_(0)
  , theta_(0)
  , s_(0){}
struct CommonPathPointFeatureDefaultTypeInternal {
  constexpr CommonPathPointFeatureDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommonPathPointFeatureDefaultTypeInternal() {}
  union {
    CommonPathPointFeature _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommonPathPointFeatureDefaultTypeInternal _CommonPathPointFeature_default_instance_;
constexpr CommonTrajectoryPointFeature::CommonTrajectoryPointFeature(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : path_point_(nullptr)
  , gaussian_info_(nullptr)
  , v_(0)
  , a_(0)
  , relative_time_(0){}
struct CommonTrajectoryPointFeatureDefaultTypeInternal {
  constexpr CommonTrajectoryPointFeatureDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommonTrajectoryPointFeatureDefaultTypeInternal() {}
  union {
    CommonTrajectoryPointFeature _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommonTrajectoryPointFeatureDefaultTypeInternal _CommonTrajectoryPointFeature_default_instance_;
constexpr TrajectoryPointFeature::TrajectoryPointFeature(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : trajectory_point_(nullptr)
  , timestamp_sec_(0){}
struct TrajectoryPointFeatureDefaultTypeInternal {
  constexpr TrajectoryPointFeatureDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TrajectoryPointFeatureDefaultTypeInternal() {}
  union {
    TrajectoryPointFeature _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TrajectoryPointFeatureDefaultTypeInternal _TrajectoryPointFeature_default_instance_;
constexpr PerceptionObstacleFeature::PerceptionObstacleFeature(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : polygon_point_()
  , position_(nullptr)
  , velocity_(nullptr)
  , acceleration_(nullptr)
  , timestamp_sec_(0)
  , theta_(0){}
struct PerceptionObstacleFeatureDefaultTypeInternal {
  constexpr PerceptionObstacleFeatureDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PerceptionObstacleFeatureDefaultTypeInternal() {}
  union {
    PerceptionObstacleFeature _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PerceptionObstacleFeatureDefaultTypeInternal _PerceptionObstacleFeature_default_instance_;
constexpr ObstacleTrajectoryFeature::ObstacleTrajectoryFeature(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : perception_obstacle_history_()
  , evaluated_trajectory_point_(){}
struct ObstacleTrajectoryFeatureDefaultTypeInternal {
  constexpr ObstacleTrajectoryFeatureDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ObstacleTrajectoryFeatureDefaultTypeInternal() {}
  union {
    ObstacleTrajectoryFeature _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ObstacleTrajectoryFeatureDefaultTypeInternal _ObstacleTrajectoryFeature_default_instance_;
constexpr PredictionTrajectoryFeature::PredictionTrajectoryFeature(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : trajectory_point_()
  , probability_(0){}
struct PredictionTrajectoryFeatureDefaultTypeInternal {
  constexpr PredictionTrajectoryFeatureDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PredictionTrajectoryFeatureDefaultTypeInternal() {}
  union {
    PredictionTrajectoryFeature _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PredictionTrajectoryFeatureDefaultTypeInternal _PredictionTrajectoryFeature_default_instance_;
constexpr PredictionObstacleFeature::PredictionObstacleFeature(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : trajectory_()
  , intent_(nullptr)
  , priority_(nullptr)
  , timestamp_sec_(0)
  , predicted_period_(0)
  , is_static_(false){}
struct PredictionObstacleFeatureDefaultTypeInternal {
  constexpr PredictionObstacleFeatureDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PredictionObstacleFeatureDefaultTypeInternal() {}
  union {
    PredictionObstacleFeature _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PredictionObstacleFeatureDefaultTypeInternal _PredictionObstacleFeature_default_instance_;
constexpr ObstacleFeature::ObstacleFeature(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : obstacle_trajectory_(nullptr)
  , obstacle_prediction_(nullptr)
  , length_(0)
  , width_(0)
  , id_(0)
  , type_(0)

  , height_(0){}
struct ObstacleFeatureDefaultTypeInternal {
  constexpr ObstacleFeatureDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ObstacleFeatureDefaultTypeInternal() {}
  union {
    ObstacleFeature _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ObstacleFeatureDefaultTypeInternal _ObstacleFeature_default_instance_;
constexpr RoutingResponseFeature::RoutingResponseFeature(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : road_()
  , measurement_(nullptr){}
struct RoutingResponseFeatureDefaultTypeInternal {
  constexpr RoutingResponseFeatureDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RoutingResponseFeatureDefaultTypeInternal() {}
  union {
    RoutingResponseFeature _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RoutingResponseFeatureDefaultTypeInternal _RoutingResponseFeature_default_instance_;
constexpr RoutingFeature::RoutingFeature(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : local_routing_lane_id_()
  , routing_response_(nullptr)
  , local_routing_(nullptr){}
struct RoutingFeatureDefaultTypeInternal {
  constexpr RoutingFeatureDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RoutingFeatureDefaultTypeInternal() {}
  union {
    RoutingFeature _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RoutingFeatureDefaultTypeInternal _RoutingFeature_default_instance_;
constexpr TrafficLightFeature::TrafficLightFeature(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , color_(0)

  , blink_(false)
  , tracking_time_(0)
  , remaining_time_(0)
  , confidence_(1){}
struct TrafficLightFeatureDefaultTypeInternal {
  constexpr TrafficLightFeatureDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TrafficLightFeatureDefaultTypeInternal() {}
  union {
    TrafficLightFeature _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TrafficLightFeatureDefaultTypeInternal _TrafficLightFeature_default_instance_;
constexpr TrafficLightDetectionFeature::TrafficLightDetectionFeature(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : traffic_light_()
  , message_timestamp_sec_(0){}
struct TrafficLightDetectionFeatureDefaultTypeInternal {
  constexpr TrafficLightDetectionFeatureDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TrafficLightDetectionFeatureDefaultTypeInternal() {}
  union {
    TrafficLightDetectionFeature _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TrafficLightDetectionFeatureDefaultTypeInternal _TrafficLightDetectionFeature_default_instance_;
constexpr ADCTrajectoryPoint::ADCTrajectoryPoint(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : planning_tag_(nullptr)
  , trajectory_point_(nullptr)
  , timestamp_sec_(0){}
struct ADCTrajectoryPointDefaultTypeInternal {
  constexpr ADCTrajectoryPointDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ADCTrajectoryPointDefaultTypeInternal() {}
  union {
    ADCTrajectoryPoint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ADCTrajectoryPointDefaultTypeInternal _ADCTrajectoryPoint_default_instance_;
constexpr LearningOutput::LearningOutput(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : adc_future_trajectory_point_(){}
struct LearningOutputDefaultTypeInternal {
  constexpr LearningOutputDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LearningOutputDefaultTypeInternal() {}
  union {
    LearningOutput _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LearningOutputDefaultTypeInternal _LearningOutput_default_instance_;
constexpr LearningDataFrame::LearningDataFrame(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : obstacle_()
  , adc_trajectory_point_()
  , map_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , planning_tag_(nullptr)
  , chassis_(nullptr)
  , localization_(nullptr)
  , routing_(nullptr)
  , traffic_light_detection_(nullptr)
  , output_(nullptr)
  , message_timestamp_sec_(0)
  , frame_num_(0u){}
struct LearningDataFrameDefaultTypeInternal {
  constexpr LearningDataFrameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LearningDataFrameDefaultTypeInternal() {}
  union {
    LearningDataFrame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LearningDataFrameDefaultTypeInternal _LearningDataFrame_default_instance_;
constexpr LearningData::LearningData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : learning_data_frame_(){}
struct LearningDataDefaultTypeInternal {
  constexpr LearningDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LearningDataDefaultTypeInternal() {}
  union {
    LearningData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LearningDataDefaultTypeInternal _LearningData_default_instance_;
constexpr PlanningLearningData::PlanningLearningData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_(nullptr)
  , learning_data_frame_(nullptr){}
struct PlanningLearningDataDefaultTypeInternal {
  constexpr PlanningLearningDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PlanningLearningDataDefaultTypeInternal() {}
  union {
    PlanningLearningData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PlanningLearningDataDefaultTypeInternal _PlanningLearningData_default_instance_;
}  // namespace planning
}  // namespace apollo
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fplanning_2fproto_2flearning_5fdata_2eproto[21];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_modules_2fplanning_2fproto_2flearning_5fdata_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fplanning_2fproto_2flearning_5fdata_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OverlapFeature, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OverlapFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OverlapFeature, id_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OverlapFeature, distance_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningTag, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningTag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningTag, lane_turn_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningTag, clear_area_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningTag, crosswalk_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningTag, pnc_junction_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningTag, signal_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningTag, stop_sign_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningTag, yield_sign_),
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ChassisFeature, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ChassisFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ChassisFeature, message_timestamp_sec_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ChassisFeature, speed_mps_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ChassisFeature, throttle_percentage_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ChassisFeature, brake_percentage_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ChassisFeature, steering_percentage_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ChassisFeature, gear_location_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LocalizationFeature, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LocalizationFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LocalizationFeature, message_timestamp_sec_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LocalizationFeature, position_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LocalizationFeature, heading_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LocalizationFeature, linear_velocity_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LocalizationFeature, linear_acceleration_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LocalizationFeature, angular_velocity_),
  4,
  0,
  5,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::CommonPathPointFeature, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::CommonPathPointFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::CommonPathPointFeature, x_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::CommonPathPointFeature, y_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::CommonPathPointFeature, z_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::CommonPathPointFeature, theta_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::CommonPathPointFeature, s_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::CommonPathPointFeature, lane_id_),
  1,
  2,
  3,
  4,
  5,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::CommonTrajectoryPointFeature, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::CommonTrajectoryPointFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::CommonTrajectoryPointFeature, path_point_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::CommonTrajectoryPointFeature, v_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::CommonTrajectoryPointFeature, a_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::CommonTrajectoryPointFeature, relative_time_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::CommonTrajectoryPointFeature, gaussian_info_),
  0,
  2,
  3,
  4,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TrajectoryPointFeature, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TrajectoryPointFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TrajectoryPointFeature, timestamp_sec_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TrajectoryPointFeature, trajectory_point_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PerceptionObstacleFeature, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PerceptionObstacleFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PerceptionObstacleFeature, timestamp_sec_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PerceptionObstacleFeature, position_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PerceptionObstacleFeature, theta_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PerceptionObstacleFeature, velocity_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PerceptionObstacleFeature, acceleration_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PerceptionObstacleFeature, polygon_point_),
  3,
  0,
  4,
  1,
  2,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObstacleTrajectoryFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObstacleTrajectoryFeature, perception_obstacle_history_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObstacleTrajectoryFeature, evaluated_trajectory_point_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PredictionTrajectoryFeature, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PredictionTrajectoryFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PredictionTrajectoryFeature, probability_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PredictionTrajectoryFeature, trajectory_point_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PredictionObstacleFeature, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PredictionObstacleFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PredictionObstacleFeature, timestamp_sec_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PredictionObstacleFeature, predicted_period_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PredictionObstacleFeature, intent_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PredictionObstacleFeature, priority_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PredictionObstacleFeature, is_static_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PredictionObstacleFeature, trajectory_),
  2,
  3,
  0,
  1,
  4,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObstacleFeature, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObstacleFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObstacleFeature, id_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObstacleFeature, length_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObstacleFeature, width_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObstacleFeature, height_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObstacleFeature, type_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObstacleFeature, obstacle_trajectory_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObstacleFeature, obstacle_prediction_),
  4,
  2,
  3,
  6,
  5,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::RoutingResponseFeature, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::RoutingResponseFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::RoutingResponseFeature, road_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::RoutingResponseFeature, measurement_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::RoutingFeature, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::RoutingFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::RoutingFeature, routing_response_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::RoutingFeature, local_routing_lane_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::RoutingFeature, local_routing_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TrafficLightFeature, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TrafficLightFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TrafficLightFeature, color_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TrafficLightFeature, id_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TrafficLightFeature, confidence_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TrafficLightFeature, tracking_time_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TrafficLightFeature, blink_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TrafficLightFeature, remaining_time_),
  1,
  0,
  5,
  3,
  2,
  4,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TrafficLightDetectionFeature, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TrafficLightDetectionFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TrafficLightDetectionFeature, message_timestamp_sec_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TrafficLightDetectionFeature, traffic_light_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ADCTrajectoryPoint, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ADCTrajectoryPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ADCTrajectoryPoint, timestamp_sec_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ADCTrajectoryPoint, planning_tag_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ADCTrajectoryPoint, trajectory_point_),
  2,
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LearningOutput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LearningOutput, adc_future_trajectory_point_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LearningDataFrame, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LearningDataFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LearningDataFrame, message_timestamp_sec_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LearningDataFrame, frame_num_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LearningDataFrame, map_name_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LearningDataFrame, planning_tag_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LearningDataFrame, chassis_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LearningDataFrame, localization_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LearningDataFrame, obstacle_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LearningDataFrame, routing_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LearningDataFrame, traffic_light_detection_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LearningDataFrame, adc_trajectory_point_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LearningDataFrame, output_),
  7,
  8,
  0,
  1,
  2,
  3,
  ~0u,
  4,
  5,
  ~0u,
  6,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LearningData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LearningData, learning_data_frame_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningLearningData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningLearningData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningLearningData, header_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningLearningData, learning_data_frame_),
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::apollo::planning::OverlapFeature)},
  { 10, 23, -1, sizeof(::apollo::planning::PlanningTag)},
  { 30, 42, -1, sizeof(::apollo::planning::ChassisFeature)},
  { 48, 60, -1, sizeof(::apollo::planning::LocalizationFeature)},
  { 66, 78, -1, sizeof(::apollo::planning::CommonPathPointFeature)},
  { 84, 95, -1, sizeof(::apollo::planning::CommonTrajectoryPointFeature)},
  { 100, 108, -1, sizeof(::apollo::planning::TrajectoryPointFeature)},
  { 110, 122, -1, sizeof(::apollo::planning::PerceptionObstacleFeature)},
  { 128, -1, -1, sizeof(::apollo::planning::ObstacleTrajectoryFeature)},
  { 136, 144, -1, sizeof(::apollo::planning::PredictionTrajectoryFeature)},
  { 146, 158, -1, sizeof(::apollo::planning::PredictionObstacleFeature)},
  { 164, 177, -1, sizeof(::apollo::planning::ObstacleFeature)},
  { 184, 192, -1, sizeof(::apollo::planning::RoutingResponseFeature)},
  { 194, 203, -1, sizeof(::apollo::planning::RoutingFeature)},
  { 206, 218, -1, sizeof(::apollo::planning::TrafficLightFeature)},
  { 224, 232, -1, sizeof(::apollo::planning::TrafficLightDetectionFeature)},
  { 234, 243, -1, sizeof(::apollo::planning::ADCTrajectoryPoint)},
  { 246, -1, -1, sizeof(::apollo::planning::LearningOutput)},
  { 253, 270, -1, sizeof(::apollo::planning::LearningDataFrame)},
  { 281, -1, -1, sizeof(::apollo::planning::LearningData)},
  { 288, 296, -1, sizeof(::apollo::planning::PlanningLearningData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_OverlapFeature_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_PlanningTag_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_ChassisFeature_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_LocalizationFeature_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_CommonPathPointFeature_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_CommonTrajectoryPointFeature_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_TrajectoryPointFeature_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_PerceptionObstacleFeature_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_ObstacleTrajectoryFeature_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_PredictionTrajectoryFeature_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_PredictionObstacleFeature_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_ObstacleFeature_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_RoutingResponseFeature_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_RoutingFeature_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_TrafficLightFeature_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_TrafficLightDetectionFeature_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_ADCTrajectoryPoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_LearningOutput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_LearningDataFrame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_LearningData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_PlanningLearningData_default_instance_),
};

const char descriptor_table_protodef_modules_2fplanning_2fproto_2flearning_5fdata_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n*modules/planning/proto/learning_data.p"
  "roto\022\017apollo.planning\032\"modules/canbus/pr"
  "oto/chassis.proto\032#modules/common/proto/"
  "geometry.proto\032!modules/common/proto/hea"
  "der.proto\032$modules/common/proto/pnc_poin"
  "t.proto\032 modules/map/proto/map_lane.prot"
  "o\0322modules/perception/proto/perception_o"
  "bstacle.proto\032&modules/prediction/proto/"
  "feature.proto\0322modules/prediction/proto/"
  "prediction_obstacle.proto\0326modules/perce"
  "ption/proto/traffic_light_detection.prot"
  "o\032#modules/routing/proto/routing.proto\"."
  "\n\016OverlapFeature\022\n\n\002id\030\001 \001(\t\022\020\n\010distance"
  "\030\002 \001(\001\"\367\002\n\013PlanningTag\022.\n\tlane_turn\030\001 \001("
  "\0162\033.apollo.hdmap.Lane.LaneTurn\0223\n\nclear_"
  "area\030\002 \001(\0132\037.apollo.planning.OverlapFeat"
  "ure\0222\n\tcrosswalk\030\003 \001(\0132\037.apollo.planning"
  ".OverlapFeature\0225\n\014pnc_junction\030\004 \001(\0132\037."
  "apollo.planning.OverlapFeature\022/\n\006signal"
  "\030\005 \001(\0132\037.apollo.planning.OverlapFeature\022"
  "2\n\tstop_sign\030\006 \001(\0132\037.apollo.planning.Ove"
  "rlapFeature\0223\n\nyield_sign\030\007 \001(\0132\037.apollo"
  ".planning.OverlapFeature\"\322\001\n\016ChassisFeat"
  "ure\022\035\n\025message_timestamp_sec\030\001 \001(\001\022\021\n\tsp"
  "eed_mps\030\002 \001(\002\022\033\n\023throttle_percentage\030\003 \001"
  "(\002\022\030\n\020brake_percentage\030\004 \001(\002\022\033\n\023steering"
  "_percentage\030\005 \001(\002\022:\n\rgear_location\030\006 \001(\016"
  "2#.apollo.canbus.Chassis.GearPosition\"\210\002"
  "\n\023LocalizationFeature\022\035\n\025message_timesta"
  "mp_sec\030\001 \001(\001\022)\n\010position\030\002 \001(\0132\027.apollo."
  "common.PointENU\022\017\n\007heading\030\003 \001(\001\022/\n\017line"
  "ar_velocity\030\004 \001(\0132\026.apollo.common.Point3"
  "D\0223\n\023linear_acceleration\030\005 \001(\0132\026.apollo."
  "common.Point3D\0220\n\020angular_velocity\030\006 \001(\013"
  "2\026.apollo.common.Point3D\"d\n\026CommonPathPo"
  "intFeature\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 "
  "\001(\001\022\r\n\005theta\030\004 \001(\001\022\t\n\001s\030\005 \001(\001\022\017\n\007lane_id"
  "\030\006 \001(\t\"\274\001\n\034CommonTrajectoryPointFeature\022"
  ";\n\npath_point\030\001 \001(\0132\'.apollo.planning.Co"
  "mmonPathPointFeature\022\t\n\001v\030\002 \001(\001\022\t\n\001a\030\003 \001"
  "(\001\022\025\n\rrelative_time\030\004 \001(\001\0222\n\rgaussian_in"
  "fo\030\005 \001(\0132\033.apollo.common.GaussianInfo\"x\n"
  "\026TrajectoryPointFeature\022\025\n\rtimestamp_sec"
  "\030\001 \001(\001\022G\n\020trajectory_point\030\002 \001(\0132-.apoll"
  "o.planning.CommonTrajectoryPointFeature\""
  "\362\001\n\031PerceptionObstacleFeature\022\025\n\rtimesta"
  "mp_sec\030\001 \001(\001\022(\n\010position\030\002 \001(\0132\026.apollo."
  "common.Point3D\022\r\n\005theta\030\003 \001(\001\022(\n\010velocit"
  "y\030\004 \001(\0132\026.apollo.common.Point3D\022,\n\014accel"
  "eration\030\005 \001(\0132\026.apollo.common.Point3D\022-\n"
  "\rpolygon_point\030\006 \003(\0132\026.apollo.common.Poi"
  "nt3D\"\271\001\n\031ObstacleTrajectoryFeature\022O\n\033pe"
  "rception_obstacle_history\030\001 \003(\0132*.apollo"
  ".planning.PerceptionObstacleFeature\022K\n\032e"
  "valuated_trajectory_point\030\002 \003(\0132\'.apollo"
  ".planning.TrajectoryPointFeature\"u\n\033Pred"
  "ictionTrajectoryFeature\022\023\n\013probability\030\001"
  " \001(\001\022A\n\020trajectory_point\030\002 \003(\0132\'.apollo."
  "planning.TrajectoryPointFeature\"\222\002\n\031Pred"
  "ictionObstacleFeature\022\025\n\rtimestamp_sec\030\001"
  " \001(\001\022\030\n\020predicted_period\030\002 \001(\001\0221\n\006intent"
  "\030\003 \001(\0132!.apollo.prediction.ObstacleInten"
  "t\0225\n\010priority\030\004 \001(\0132#.apollo.prediction."
  "ObstaclePriority\022\030\n\tis_static\030\005 \001(\010:\005fal"
  "se\022@\n\ntrajectory\030\006 \003(\0132,.apollo.planning"
  ".PredictionTrajectoryFeature\"\230\002\n\017Obstacl"
  "eFeature\022\n\n\002id\030\001 \001(\005\022\016\n\006length\030\002 \001(\001\022\r\n\005"
  "width\030\003 \001(\001\022\016\n\006height\030\004 \001(\001\0228\n\004type\030\005 \001("
  "\0162*.apollo.perception.PerceptionObstacle"
  ".Type\022G\n\023obstacle_trajectory\030\006 \001(\0132*.apo"
  "llo.planning.ObstacleTrajectoryFeature\022G"
  "\n\023obstacle_prediction\030\007 \001(\0132*.apollo.pla"
  "nning.PredictionObstacleFeature\"u\n\026Routi"
  "ngResponseFeature\022)\n\004road\030\001 \003(\0132\033.apollo"
  ".routing.RoadSegment\0220\n\013measurement\030\002 \001("
  "\0132\033.apollo.routing.Measurement\"\262\001\n\016Routi"
  "ngFeature\022A\n\020routing_response\030\001 \001(\0132\'.ap"
  "ollo.planning.RoutingResponseFeature\022\035\n\025"
  "local_routing_lane_id\030\002 \003(\t\022>\n\rlocal_rou"
  "ting\030\003 \001(\0132\'.apollo.planning.RoutingResp"
  "onseFeature\"\254\001\n\023TrafficLightFeature\0224\n\005c"
  "olor\030\001 \001(\0162%.apollo.perception.TrafficLi"
  "ght.Color\022\n\n\002id\030\002 \001(\t\022\025\n\nconfidence\030\003 \001("
  "\001:\0011\022\025\n\rtracking_time\030\004 \001(\001\022\r\n\005blink\030\005 \001"
  "(\010\022\026\n\016remaining_time\030\006 \001(\001\"z\n\034TrafficLig"
  "htDetectionFeature\022\035\n\025message_timestamp_"
  "sec\030\001 \001(\001\022;\n\rtraffic_light\030\002 \003(\0132$.apoll"
  "o.planning.TrafficLightFeature\"\250\001\n\022ADCTr"
  "ajectoryPoint\022\025\n\rtimestamp_sec\030\001 \001(\001\0222\n\014"
  "planning_tag\030\002 \001(\0132\034.apollo.planning.Pla"
  "nningTag\022G\n\020trajectory_point\030\003 \001(\0132-.apo"
  "llo.planning.CommonTrajectoryPointFeatur"
  "e\"^\n\016LearningOutput\022L\n\033adc_future_trajec"
  "tory_point\030\001 \003(\0132\'.apollo.planning.Traje"
  "ctoryPointFeature\"\243\004\n\021LearningDataFrame\022"
  "\035\n\025message_timestamp_sec\030\001 \001(\001\022\021\n\tframe_"
  "num\030\002 \001(\r\022\020\n\010map_name\030\003 \001(\t\0222\n\014planning_"
  "tag\030\004 \001(\0132\034.apollo.planning.PlanningTag\022"
  "0\n\007chassis\030\005 \001(\0132\037.apollo.planning.Chass"
  "isFeature\022:\n\014localization\030\006 \001(\0132$.apollo"
  ".planning.LocalizationFeature\0222\n\010obstacl"
  "e\030\007 \003(\0132 .apollo.planning.ObstacleFeatur"
  "e\0220\n\007routing\030\010 \001(\0132\037.apollo.planning.Rou"
  "tingFeature\022N\n\027traffic_light_detection\030\t"
  " \001(\0132-.apollo.planning.TrafficLightDetec"
  "tionFeature\022A\n\024adc_trajectory_point\030\n \003("
  "\0132#.apollo.planning.ADCTrajectoryPoint\022/"
  "\n\006output\030\013 \001(\0132\037.apollo.planning.Learnin"
  "gOutput\"O\n\014LearningData\022\?\n\023learning_data"
  "_frame\030\001 \003(\0132\".apollo.planning.LearningD"
  "ataFrame\"~\n\024PlanningLearningData\022%\n\006head"
  "er\030\001 \001(\0132\025.apollo.common.Header\022\?\n\023learn"
  "ing_data_frame\030\002 \001(\0132\".apollo.planning.L"
  "earningDataFrame"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fplanning_2fproto_2flearning_5fdata_2eproto_deps[10] = {
  &::descriptor_table_modules_2fcanbus_2fproto_2fchassis_2eproto,
  &::descriptor_table_modules_2fcommon_2fproto_2fgeometry_2eproto,
  &::descriptor_table_modules_2fcommon_2fproto_2fheader_2eproto,
  &::descriptor_table_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto,
  &::descriptor_table_modules_2fmap_2fproto_2fmap_5flane_2eproto,
  &::descriptor_table_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto,
  &::descriptor_table_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto,
  &::descriptor_table_modules_2fprediction_2fproto_2ffeature_2eproto,
  &::descriptor_table_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto,
  &::descriptor_table_modules_2frouting_2fproto_2frouting_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fplanning_2fproto_2flearning_5fdata_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fplanning_2fproto_2flearning_5fdata_2eproto = {
  false, false, 4536, descriptor_table_protodef_modules_2fplanning_2fproto_2flearning_5fdata_2eproto, "modules/planning/proto/learning_data.proto", 
  &descriptor_table_modules_2fplanning_2fproto_2flearning_5fdata_2eproto_once, descriptor_table_modules_2fplanning_2fproto_2flearning_5fdata_2eproto_deps, 10, 21,
  schemas, file_default_instances, TableStruct_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::offsets,
  file_level_metadata_modules_2fplanning_2fproto_2flearning_5fdata_2eproto, file_level_enum_descriptors_modules_2fplanning_2fproto_2flearning_5fdata_2eproto, file_level_service_descriptors_modules_2fplanning_2fproto_2flearning_5fdata_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_modules_2fplanning_2fproto_2flearning_5fdata_2eproto_getter() {
  return &descriptor_table_modules_2fplanning_2fproto_2flearning_5fdata_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_modules_2fplanning_2fproto_2flearning_5fdata_2eproto(&descriptor_table_modules_2fplanning_2fproto_2flearning_5fdata_2eproto);
namespace apollo {
namespace planning {

// ===================================================================

class OverlapFeature::_Internal {
 public:
  using HasBits = decltype(std::declval<OverlapFeature>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

OverlapFeature::OverlapFeature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.planning.OverlapFeature)
}
OverlapFeature::OverlapFeature(const OverlapFeature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_id()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  distance_ = from.distance_;
  // @@protoc_insertion_point(copy_constructor:apollo.planning.OverlapFeature)
}

void OverlapFeature::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
distance_ = 0;
}

OverlapFeature::~OverlapFeature() {
  // @@protoc_insertion_point(destructor:apollo.planning.OverlapFeature)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OverlapFeature::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OverlapFeature::ArenaDtor(void* object) {
  OverlapFeature* _this = reinterpret_cast< OverlapFeature* >(object);
  (void)_this;
}
void OverlapFeature::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OverlapFeature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OverlapFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.OverlapFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    id_.ClearNonDefaultToEmpty();
  }
  distance_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OverlapFeature::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.planning.OverlapFeature.id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double distance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_distance(&has_bits);
          distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OverlapFeature::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.OverlapFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.planning.OverlapFeature.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // optional double distance = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.OverlapFeature)
  return target;
}

size_t OverlapFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.OverlapFeature)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
    }

    // optional double distance = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OverlapFeature::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OverlapFeature::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OverlapFeature::GetClassData() const { return &_class_data_; }

void OverlapFeature::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OverlapFeature *>(to)->MergeFrom(
      static_cast<const OverlapFeature &>(from));
}


void OverlapFeature::MergeFrom(const OverlapFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.OverlapFeature)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      distance_ = from.distance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OverlapFeature::CopyFrom(const OverlapFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.OverlapFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OverlapFeature::IsInitialized() const {
  return true;
}

void OverlapFeature::InternalSwap(OverlapFeature* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  swap(distance_, other->distance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OverlapFeature::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2flearning_5fdata_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2flearning_5fdata_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2flearning_5fdata_2eproto[0]);
}

// ===================================================================

class PlanningTag::_Internal {
 public:
  using HasBits = decltype(std::declval<PlanningTag>()._has_bits_);
  static void set_has_lane_turn(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::apollo::planning::OverlapFeature& clear_area(const PlanningTag* msg);
  static void set_has_clear_area(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::planning::OverlapFeature& crosswalk(const PlanningTag* msg);
  static void set_has_crosswalk(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::planning::OverlapFeature& pnc_junction(const PlanningTag* msg);
  static void set_has_pnc_junction(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::planning::OverlapFeature& signal(const PlanningTag* msg);
  static void set_has_signal(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::apollo::planning::OverlapFeature& stop_sign(const PlanningTag* msg);
  static void set_has_stop_sign(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::apollo::planning::OverlapFeature& yield_sign(const PlanningTag* msg);
  static void set_has_yield_sign(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::apollo::planning::OverlapFeature&
PlanningTag::_Internal::clear_area(const PlanningTag* msg) {
  return *msg->clear_area_;
}
const ::apollo::planning::OverlapFeature&
PlanningTag::_Internal::crosswalk(const PlanningTag* msg) {
  return *msg->crosswalk_;
}
const ::apollo::planning::OverlapFeature&
PlanningTag::_Internal::pnc_junction(const PlanningTag* msg) {
  return *msg->pnc_junction_;
}
const ::apollo::planning::OverlapFeature&
PlanningTag::_Internal::signal(const PlanningTag* msg) {
  return *msg->signal_;
}
const ::apollo::planning::OverlapFeature&
PlanningTag::_Internal::stop_sign(const PlanningTag* msg) {
  return *msg->stop_sign_;
}
const ::apollo::planning::OverlapFeature&
PlanningTag::_Internal::yield_sign(const PlanningTag* msg) {
  return *msg->yield_sign_;
}
PlanningTag::PlanningTag(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.planning.PlanningTag)
}
PlanningTag::PlanningTag(const PlanningTag& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_clear_area()) {
    clear_area_ = new ::apollo::planning::OverlapFeature(*from.clear_area_);
  } else {
    clear_area_ = nullptr;
  }
  if (from._internal_has_crosswalk()) {
    crosswalk_ = new ::apollo::planning::OverlapFeature(*from.crosswalk_);
  } else {
    crosswalk_ = nullptr;
  }
  if (from._internal_has_pnc_junction()) {
    pnc_junction_ = new ::apollo::planning::OverlapFeature(*from.pnc_junction_);
  } else {
    pnc_junction_ = nullptr;
  }
  if (from._internal_has_signal()) {
    signal_ = new ::apollo::planning::OverlapFeature(*from.signal_);
  } else {
    signal_ = nullptr;
  }
  if (from._internal_has_stop_sign()) {
    stop_sign_ = new ::apollo::planning::OverlapFeature(*from.stop_sign_);
  } else {
    stop_sign_ = nullptr;
  }
  if (from._internal_has_yield_sign()) {
    yield_sign_ = new ::apollo::planning::OverlapFeature(*from.yield_sign_);
  } else {
    yield_sign_ = nullptr;
  }
  lane_turn_ = from.lane_turn_;
  // @@protoc_insertion_point(copy_constructor:apollo.planning.PlanningTag)
}

void PlanningTag::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&clear_area_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&yield_sign_) -
    reinterpret_cast<char*>(&clear_area_)) + sizeof(yield_sign_));
lane_turn_ = 1;
}

PlanningTag::~PlanningTag() {
  // @@protoc_insertion_point(destructor:apollo.planning.PlanningTag)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PlanningTag::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete clear_area_;
  if (this != internal_default_instance()) delete crosswalk_;
  if (this != internal_default_instance()) delete pnc_junction_;
  if (this != internal_default_instance()) delete signal_;
  if (this != internal_default_instance()) delete stop_sign_;
  if (this != internal_default_instance()) delete yield_sign_;
}

void PlanningTag::ArenaDtor(void* object) {
  PlanningTag* _this = reinterpret_cast< PlanningTag* >(object);
  (void)_this;
}
void PlanningTag::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlanningTag::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PlanningTag::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.PlanningTag)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(clear_area_ != nullptr);
      clear_area_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(crosswalk_ != nullptr);
      crosswalk_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(pnc_junction_ != nullptr);
      pnc_junction_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(signal_ != nullptr);
      signal_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(stop_sign_ != nullptr);
      stop_sign_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(yield_sign_ != nullptr);
      yield_sign_->Clear();
    }
    lane_turn_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlanningTag::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.hdmap.Lane.LaneTurn lane_turn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::hdmap::Lane_LaneTurn_IsValid(val))) {
            _internal_set_lane_turn(static_cast<::apollo::hdmap::Lane_LaneTurn>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.OverlapFeature clear_area = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_clear_area(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.OverlapFeature crosswalk = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_crosswalk(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.OverlapFeature pnc_junction = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_pnc_junction(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.OverlapFeature signal = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_signal(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.OverlapFeature stop_sign = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_stop_sign(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.OverlapFeature yield_sign = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_yield_sign(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlanningTag::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.PlanningTag)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.hdmap.Lane.LaneTurn lane_turn = 1;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_lane_turn(), target);
  }

  // optional .apollo.planning.OverlapFeature clear_area = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::clear_area(this), target, stream);
  }

  // optional .apollo.planning.OverlapFeature crosswalk = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::crosswalk(this), target, stream);
  }

  // optional .apollo.planning.OverlapFeature pnc_junction = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::pnc_junction(this), target, stream);
  }

  // optional .apollo.planning.OverlapFeature signal = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::signal(this), target, stream);
  }

  // optional .apollo.planning.OverlapFeature stop_sign = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::stop_sign(this), target, stream);
  }

  // optional .apollo.planning.OverlapFeature yield_sign = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::yield_sign(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.PlanningTag)
  return target;
}

size_t PlanningTag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.PlanningTag)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .apollo.planning.OverlapFeature clear_area = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *clear_area_);
    }

    // optional .apollo.planning.OverlapFeature crosswalk = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *crosswalk_);
    }

    // optional .apollo.planning.OverlapFeature pnc_junction = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pnc_junction_);
    }

    // optional .apollo.planning.OverlapFeature signal = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *signal_);
    }

    // optional .apollo.planning.OverlapFeature stop_sign = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stop_sign_);
    }

    // optional .apollo.planning.OverlapFeature yield_sign = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *yield_sign_);
    }

    // optional .apollo.hdmap.Lane.LaneTurn lane_turn = 1;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_lane_turn());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlanningTag::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PlanningTag::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlanningTag::GetClassData() const { return &_class_data_; }

void PlanningTag::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PlanningTag *>(to)->MergeFrom(
      static_cast<const PlanningTag &>(from));
}


void PlanningTag::MergeFrom(const PlanningTag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.PlanningTag)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_clear_area()->::apollo::planning::OverlapFeature::MergeFrom(from._internal_clear_area());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_crosswalk()->::apollo::planning::OverlapFeature::MergeFrom(from._internal_crosswalk());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_pnc_junction()->::apollo::planning::OverlapFeature::MergeFrom(from._internal_pnc_junction());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_signal()->::apollo::planning::OverlapFeature::MergeFrom(from._internal_signal());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_stop_sign()->::apollo::planning::OverlapFeature::MergeFrom(from._internal_stop_sign());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_yield_sign()->::apollo::planning::OverlapFeature::MergeFrom(from._internal_yield_sign());
    }
    if (cached_has_bits & 0x00000040u) {
      lane_turn_ = from.lane_turn_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlanningTag::CopyFrom(const PlanningTag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.PlanningTag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanningTag::IsInitialized() const {
  return true;
}

void PlanningTag::InternalSwap(PlanningTag* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlanningTag, yield_sign_)
      + sizeof(PlanningTag::yield_sign_)
      - PROTOBUF_FIELD_OFFSET(PlanningTag, clear_area_)>(
          reinterpret_cast<char*>(&clear_area_),
          reinterpret_cast<char*>(&other->clear_area_));
  swap(lane_turn_, other->lane_turn_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlanningTag::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2flearning_5fdata_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2flearning_5fdata_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2flearning_5fdata_2eproto[1]);
}

// ===================================================================

class ChassisFeature::_Internal {
 public:
  using HasBits = decltype(std::declval<ChassisFeature>()._has_bits_);
  static void set_has_message_timestamp_sec(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_speed_mps(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_throttle_percentage(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_brake_percentage(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_steering_percentage(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_gear_location(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

ChassisFeature::ChassisFeature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.planning.ChassisFeature)
}
ChassisFeature::ChassisFeature(const ChassisFeature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&message_timestamp_sec_, &from.message_timestamp_sec_,
    static_cast<size_t>(reinterpret_cast<char*>(&gear_location_) -
    reinterpret_cast<char*>(&message_timestamp_sec_)) + sizeof(gear_location_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ChassisFeature)
}

void ChassisFeature::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&message_timestamp_sec_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&gear_location_) -
    reinterpret_cast<char*>(&message_timestamp_sec_)) + sizeof(gear_location_));
}

ChassisFeature::~ChassisFeature() {
  // @@protoc_insertion_point(destructor:apollo.planning.ChassisFeature)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ChassisFeature::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ChassisFeature::ArenaDtor(void* object) {
  ChassisFeature* _this = reinterpret_cast< ChassisFeature* >(object);
  (void)_this;
}
void ChassisFeature::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChassisFeature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChassisFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ChassisFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&message_timestamp_sec_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gear_location_) -
        reinterpret_cast<char*>(&message_timestamp_sec_)) + sizeof(gear_location_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChassisFeature::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double message_timestamp_sec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_message_timestamp_sec(&has_bits);
          message_timestamp_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional float speed_mps = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_speed_mps(&has_bits);
          speed_mps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float throttle_percentage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_throttle_percentage(&has_bits);
          throttle_percentage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float brake_percentage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_brake_percentage(&has_bits);
          brake_percentage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float steering_percentage = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_steering_percentage(&has_bits);
          steering_percentage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Chassis.GearPosition gear_location = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Chassis_GearPosition_IsValid(val))) {
            _internal_set_gear_location(static_cast<::apollo::canbus::Chassis_GearPosition>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChassisFeature::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ChassisFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double message_timestamp_sec = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_message_timestamp_sec(), target);
  }

  // optional float speed_mps = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_speed_mps(), target);
  }

  // optional float throttle_percentage = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_throttle_percentage(), target);
  }

  // optional float brake_percentage = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_brake_percentage(), target);
  }

  // optional float steering_percentage = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_steering_percentage(), target);
  }

  // optional .apollo.canbus.Chassis.GearPosition gear_location = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_gear_location(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ChassisFeature)
  return target;
}

size_t ChassisFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ChassisFeature)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional double message_timestamp_sec = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional float speed_mps = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float throttle_percentage = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float brake_percentage = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float steering_percentage = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional .apollo.canbus.Chassis.GearPosition gear_location = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_gear_location());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChassisFeature::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChassisFeature::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChassisFeature::GetClassData() const { return &_class_data_; }

void ChassisFeature::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ChassisFeature *>(to)->MergeFrom(
      static_cast<const ChassisFeature &>(from));
}


void ChassisFeature::MergeFrom(const ChassisFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ChassisFeature)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      message_timestamp_sec_ = from.message_timestamp_sec_;
    }
    if (cached_has_bits & 0x00000002u) {
      speed_mps_ = from.speed_mps_;
    }
    if (cached_has_bits & 0x00000004u) {
      throttle_percentage_ = from.throttle_percentage_;
    }
    if (cached_has_bits & 0x00000008u) {
      brake_percentage_ = from.brake_percentage_;
    }
    if (cached_has_bits & 0x00000010u) {
      steering_percentage_ = from.steering_percentage_;
    }
    if (cached_has_bits & 0x00000020u) {
      gear_location_ = from.gear_location_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChassisFeature::CopyFrom(const ChassisFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ChassisFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChassisFeature::IsInitialized() const {
  return true;
}

void ChassisFeature::InternalSwap(ChassisFeature* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChassisFeature, gear_location_)
      + sizeof(ChassisFeature::gear_location_)
      - PROTOBUF_FIELD_OFFSET(ChassisFeature, message_timestamp_sec_)>(
          reinterpret_cast<char*>(&message_timestamp_sec_),
          reinterpret_cast<char*>(&other->message_timestamp_sec_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChassisFeature::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2flearning_5fdata_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2flearning_5fdata_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2flearning_5fdata_2eproto[2]);
}

// ===================================================================

class LocalizationFeature::_Internal {
 public:
  using HasBits = decltype(std::declval<LocalizationFeature>()._has_bits_);
  static void set_has_message_timestamp_sec(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::apollo::common::PointENU& position(const LocalizationFeature* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_heading(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::apollo::common::Point3D& linear_velocity(const LocalizationFeature* msg);
  static void set_has_linear_velocity(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::common::Point3D& linear_acceleration(const LocalizationFeature* msg);
  static void set_has_linear_acceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::common::Point3D& angular_velocity(const LocalizationFeature* msg);
  static void set_has_angular_velocity(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::apollo::common::PointENU&
LocalizationFeature::_Internal::position(const LocalizationFeature* msg) {
  return *msg->position_;
}
const ::apollo::common::Point3D&
LocalizationFeature::_Internal::linear_velocity(const LocalizationFeature* msg) {
  return *msg->linear_velocity_;
}
const ::apollo::common::Point3D&
LocalizationFeature::_Internal::linear_acceleration(const LocalizationFeature* msg) {
  return *msg->linear_acceleration_;
}
const ::apollo::common::Point3D&
LocalizationFeature::_Internal::angular_velocity(const LocalizationFeature* msg) {
  return *msg->angular_velocity_;
}
void LocalizationFeature::clear_position() {
  if (position_ != nullptr) position_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void LocalizationFeature::clear_linear_velocity() {
  if (linear_velocity_ != nullptr) linear_velocity_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void LocalizationFeature::clear_linear_acceleration() {
  if (linear_acceleration_ != nullptr) linear_acceleration_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void LocalizationFeature::clear_angular_velocity() {
  if (angular_velocity_ != nullptr) angular_velocity_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
LocalizationFeature::LocalizationFeature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.planning.LocalizationFeature)
}
LocalizationFeature::LocalizationFeature(const LocalizationFeature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    position_ = new ::apollo::common::PointENU(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from._internal_has_linear_velocity()) {
    linear_velocity_ = new ::apollo::common::Point3D(*from.linear_velocity_);
  } else {
    linear_velocity_ = nullptr;
  }
  if (from._internal_has_linear_acceleration()) {
    linear_acceleration_ = new ::apollo::common::Point3D(*from.linear_acceleration_);
  } else {
    linear_acceleration_ = nullptr;
  }
  if (from._internal_has_angular_velocity()) {
    angular_velocity_ = new ::apollo::common::Point3D(*from.angular_velocity_);
  } else {
    angular_velocity_ = nullptr;
  }
  ::memcpy(&message_timestamp_sec_, &from.message_timestamp_sec_,
    static_cast<size_t>(reinterpret_cast<char*>(&heading_) -
    reinterpret_cast<char*>(&message_timestamp_sec_)) + sizeof(heading_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.LocalizationFeature)
}

void LocalizationFeature::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&position_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&heading_) -
    reinterpret_cast<char*>(&position_)) + sizeof(heading_));
}

LocalizationFeature::~LocalizationFeature() {
  // @@protoc_insertion_point(destructor:apollo.planning.LocalizationFeature)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LocalizationFeature::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete linear_velocity_;
  if (this != internal_default_instance()) delete linear_acceleration_;
  if (this != internal_default_instance()) delete angular_velocity_;
}

void LocalizationFeature::ArenaDtor(void* object) {
  LocalizationFeature* _this = reinterpret_cast< LocalizationFeature* >(object);
  (void)_this;
}
void LocalizationFeature::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LocalizationFeature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LocalizationFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.LocalizationFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(position_ != nullptr);
      position_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(linear_velocity_ != nullptr);
      linear_velocity_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(linear_acceleration_ != nullptr);
      linear_acceleration_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(angular_velocity_ != nullptr);
      angular_velocity_->Clear();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    ::memset(&message_timestamp_sec_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&heading_) -
        reinterpret_cast<char*>(&message_timestamp_sec_)) + sizeof(heading_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LocalizationFeature::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double message_timestamp_sec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_message_timestamp_sec(&has_bits);
          message_timestamp_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.PointENU position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double heading = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_heading(&has_bits);
          heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.Point3D linear_velocity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_linear_velocity(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.Point3D linear_acceleration = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_linear_acceleration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.Point3D angular_velocity = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_angular_velocity(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LocalizationFeature::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.LocalizationFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double message_timestamp_sec = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_message_timestamp_sec(), target);
  }

  // optional .apollo.common.PointENU position = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::position(this), target, stream);
  }

  // optional double heading = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_heading(), target);
  }

  // optional .apollo.common.Point3D linear_velocity = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::linear_velocity(this), target, stream);
  }

  // optional .apollo.common.Point3D linear_acceleration = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::linear_acceleration(this), target, stream);
  }

  // optional .apollo.common.Point3D angular_velocity = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::angular_velocity(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.LocalizationFeature)
  return target;
}

size_t LocalizationFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.LocalizationFeature)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .apollo.common.PointENU position = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *position_);
    }

    // optional .apollo.common.Point3D linear_velocity = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *linear_velocity_);
    }

    // optional .apollo.common.Point3D linear_acceleration = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *linear_acceleration_);
    }

    // optional .apollo.common.Point3D angular_velocity = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *angular_velocity_);
    }

    // optional double message_timestamp_sec = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double heading = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LocalizationFeature::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LocalizationFeature::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LocalizationFeature::GetClassData() const { return &_class_data_; }

void LocalizationFeature::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LocalizationFeature *>(to)->MergeFrom(
      static_cast<const LocalizationFeature &>(from));
}


void LocalizationFeature::MergeFrom(const LocalizationFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.LocalizationFeature)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_position()->::apollo::common::PointENU::MergeFrom(from._internal_position());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_linear_velocity()->::apollo::common::Point3D::MergeFrom(from._internal_linear_velocity());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_linear_acceleration()->::apollo::common::Point3D::MergeFrom(from._internal_linear_acceleration());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_angular_velocity()->::apollo::common::Point3D::MergeFrom(from._internal_angular_velocity());
    }
    if (cached_has_bits & 0x00000010u) {
      message_timestamp_sec_ = from.message_timestamp_sec_;
    }
    if (cached_has_bits & 0x00000020u) {
      heading_ = from.heading_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LocalizationFeature::CopyFrom(const LocalizationFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.LocalizationFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalizationFeature::IsInitialized() const {
  return true;
}

void LocalizationFeature::InternalSwap(LocalizationFeature* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LocalizationFeature, heading_)
      + sizeof(LocalizationFeature::heading_)
      - PROTOBUF_FIELD_OFFSET(LocalizationFeature, position_)>(
          reinterpret_cast<char*>(&position_),
          reinterpret_cast<char*>(&other->position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LocalizationFeature::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2flearning_5fdata_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2flearning_5fdata_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2flearning_5fdata_2eproto[3]);
}

// ===================================================================

class CommonPathPointFeature::_Internal {
 public:
  using HasBits = decltype(std::declval<CommonPathPointFeature>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_theta(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_s(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_lane_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CommonPathPointFeature::CommonPathPointFeature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.planning.CommonPathPointFeature)
}
CommonPathPointFeature::CommonPathPointFeature(const CommonPathPointFeature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  lane_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_lane_id()) {
    lane_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_lane_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&s_) -
    reinterpret_cast<char*>(&x_)) + sizeof(s_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.CommonPathPointFeature)
}

void CommonPathPointFeature::SharedCtor() {
lane_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&s_) -
    reinterpret_cast<char*>(&x_)) + sizeof(s_));
}

CommonPathPointFeature::~CommonPathPointFeature() {
  // @@protoc_insertion_point(destructor:apollo.planning.CommonPathPointFeature)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommonPathPointFeature::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  lane_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CommonPathPointFeature::ArenaDtor(void* object) {
  CommonPathPointFeature* _this = reinterpret_cast< CommonPathPointFeature* >(object);
  (void)_this;
}
void CommonPathPointFeature::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommonPathPointFeature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommonPathPointFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.CommonPathPointFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    lane_id_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&s_) -
        reinterpret_cast<char*>(&x_)) + sizeof(s_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommonPathPointFeature::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_z(&has_bits);
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double theta = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_theta(&has_bits);
          theta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double s = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_s(&has_bits);
          s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional string lane_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_lane_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.planning.CommonPathPointFeature.lane_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommonPathPointFeature::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.CommonPathPointFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double x = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // optional double y = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  // optional double z = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_z(), target);
  }

  // optional double theta = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_theta(), target);
  }

  // optional double s = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_s(), target);
  }

  // optional string lane_id = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_lane_id().data(), static_cast<int>(this->_internal_lane_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.planning.CommonPathPointFeature.lane_id");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_lane_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.CommonPathPointFeature)
  return target;
}

size_t CommonPathPointFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.CommonPathPointFeature)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string lane_id = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_lane_id());
    }

    // optional double x = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double y = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double z = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double theta = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double s = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommonPathPointFeature::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommonPathPointFeature::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommonPathPointFeature::GetClassData() const { return &_class_data_; }

void CommonPathPointFeature::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CommonPathPointFeature *>(to)->MergeFrom(
      static_cast<const CommonPathPointFeature &>(from));
}


void CommonPathPointFeature::MergeFrom(const CommonPathPointFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.CommonPathPointFeature)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_lane_id(from._internal_lane_id());
    }
    if (cached_has_bits & 0x00000002u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000004u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000008u) {
      z_ = from.z_;
    }
    if (cached_has_bits & 0x00000010u) {
      theta_ = from.theta_;
    }
    if (cached_has_bits & 0x00000020u) {
      s_ = from.s_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommonPathPointFeature::CopyFrom(const CommonPathPointFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.CommonPathPointFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonPathPointFeature::IsInitialized() const {
  return true;
}

void CommonPathPointFeature::InternalSwap(CommonPathPointFeature* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &lane_id_, lhs_arena,
      &other->lane_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommonPathPointFeature, s_)
      + sizeof(CommonPathPointFeature::s_)
      - PROTOBUF_FIELD_OFFSET(CommonPathPointFeature, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommonPathPointFeature::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2flearning_5fdata_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2flearning_5fdata_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2flearning_5fdata_2eproto[4]);
}

// ===================================================================

class CommonTrajectoryPointFeature::_Internal {
 public:
  using HasBits = decltype(std::declval<CommonTrajectoryPointFeature>()._has_bits_);
  static const ::apollo::planning::CommonPathPointFeature& path_point(const CommonTrajectoryPointFeature* msg);
  static void set_has_path_point(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_v(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_a(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_relative_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::apollo::common::GaussianInfo& gaussian_info(const CommonTrajectoryPointFeature* msg);
  static void set_has_gaussian_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::planning::CommonPathPointFeature&
CommonTrajectoryPointFeature::_Internal::path_point(const CommonTrajectoryPointFeature* msg) {
  return *msg->path_point_;
}
const ::apollo::common::GaussianInfo&
CommonTrajectoryPointFeature::_Internal::gaussian_info(const CommonTrajectoryPointFeature* msg) {
  return *msg->gaussian_info_;
}
void CommonTrajectoryPointFeature::clear_gaussian_info() {
  if (gaussian_info_ != nullptr) gaussian_info_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
CommonTrajectoryPointFeature::CommonTrajectoryPointFeature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.planning.CommonTrajectoryPointFeature)
}
CommonTrajectoryPointFeature::CommonTrajectoryPointFeature(const CommonTrajectoryPointFeature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_path_point()) {
    path_point_ = new ::apollo::planning::CommonPathPointFeature(*from.path_point_);
  } else {
    path_point_ = nullptr;
  }
  if (from._internal_has_gaussian_info()) {
    gaussian_info_ = new ::apollo::common::GaussianInfo(*from.gaussian_info_);
  } else {
    gaussian_info_ = nullptr;
  }
  ::memcpy(&v_, &from.v_,
    static_cast<size_t>(reinterpret_cast<char*>(&relative_time_) -
    reinterpret_cast<char*>(&v_)) + sizeof(relative_time_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.CommonTrajectoryPointFeature)
}

void CommonTrajectoryPointFeature::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&path_point_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&relative_time_) -
    reinterpret_cast<char*>(&path_point_)) + sizeof(relative_time_));
}

CommonTrajectoryPointFeature::~CommonTrajectoryPointFeature() {
  // @@protoc_insertion_point(destructor:apollo.planning.CommonTrajectoryPointFeature)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommonTrajectoryPointFeature::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete path_point_;
  if (this != internal_default_instance()) delete gaussian_info_;
}

void CommonTrajectoryPointFeature::ArenaDtor(void* object) {
  CommonTrajectoryPointFeature* _this = reinterpret_cast< CommonTrajectoryPointFeature* >(object);
  (void)_this;
}
void CommonTrajectoryPointFeature::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommonTrajectoryPointFeature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommonTrajectoryPointFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.CommonTrajectoryPointFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(path_point_ != nullptr);
      path_point_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(gaussian_info_ != nullptr);
      gaussian_info_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&v_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&relative_time_) -
        reinterpret_cast<char*>(&v_)) + sizeof(relative_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommonTrajectoryPointFeature::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.planning.CommonPathPointFeature path_point = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_path_point(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double v = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_v(&has_bits);
          v_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double a = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_a(&has_bits);
          a_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double relative_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_relative_time(&has_bits);
          relative_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.GaussianInfo gaussian_info = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_gaussian_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommonTrajectoryPointFeature::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.CommonTrajectoryPointFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning.CommonPathPointFeature path_point = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::path_point(this), target, stream);
  }

  // optional double v = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_v(), target);
  }

  // optional double a = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_a(), target);
  }

  // optional double relative_time = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_relative_time(), target);
  }

  // optional .apollo.common.GaussianInfo gaussian_info = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::gaussian_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.CommonTrajectoryPointFeature)
  return target;
}

size_t CommonTrajectoryPointFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.CommonTrajectoryPointFeature)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .apollo.planning.CommonPathPointFeature path_point = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *path_point_);
    }

    // optional .apollo.common.GaussianInfo gaussian_info = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *gaussian_info_);
    }

    // optional double v = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double a = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double relative_time = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommonTrajectoryPointFeature::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommonTrajectoryPointFeature::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommonTrajectoryPointFeature::GetClassData() const { return &_class_data_; }

void CommonTrajectoryPointFeature::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CommonTrajectoryPointFeature *>(to)->MergeFrom(
      static_cast<const CommonTrajectoryPointFeature &>(from));
}


void CommonTrajectoryPointFeature::MergeFrom(const CommonTrajectoryPointFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.CommonTrajectoryPointFeature)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_path_point()->::apollo::planning::CommonPathPointFeature::MergeFrom(from._internal_path_point());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_gaussian_info()->::apollo::common::GaussianInfo::MergeFrom(from._internal_gaussian_info());
    }
    if (cached_has_bits & 0x00000004u) {
      v_ = from.v_;
    }
    if (cached_has_bits & 0x00000008u) {
      a_ = from.a_;
    }
    if (cached_has_bits & 0x00000010u) {
      relative_time_ = from.relative_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommonTrajectoryPointFeature::CopyFrom(const CommonTrajectoryPointFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.CommonTrajectoryPointFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonTrajectoryPointFeature::IsInitialized() const {
  return true;
}

void CommonTrajectoryPointFeature::InternalSwap(CommonTrajectoryPointFeature* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommonTrajectoryPointFeature, relative_time_)
      + sizeof(CommonTrajectoryPointFeature::relative_time_)
      - PROTOBUF_FIELD_OFFSET(CommonTrajectoryPointFeature, path_point_)>(
          reinterpret_cast<char*>(&path_point_),
          reinterpret_cast<char*>(&other->path_point_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommonTrajectoryPointFeature::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2flearning_5fdata_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2flearning_5fdata_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2flearning_5fdata_2eproto[5]);
}

// ===================================================================

class TrajectoryPointFeature::_Internal {
 public:
  using HasBits = decltype(std::declval<TrajectoryPointFeature>()._has_bits_);
  static void set_has_timestamp_sec(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::planning::CommonTrajectoryPointFeature& trajectory_point(const TrajectoryPointFeature* msg);
  static void set_has_trajectory_point(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::apollo::planning::CommonTrajectoryPointFeature&
TrajectoryPointFeature::_Internal::trajectory_point(const TrajectoryPointFeature* msg) {
  return *msg->trajectory_point_;
}
TrajectoryPointFeature::TrajectoryPointFeature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.planning.TrajectoryPointFeature)
}
TrajectoryPointFeature::TrajectoryPointFeature(const TrajectoryPointFeature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_trajectory_point()) {
    trajectory_point_ = new ::apollo::planning::CommonTrajectoryPointFeature(*from.trajectory_point_);
  } else {
    trajectory_point_ = nullptr;
  }
  timestamp_sec_ = from.timestamp_sec_;
  // @@protoc_insertion_point(copy_constructor:apollo.planning.TrajectoryPointFeature)
}

void TrajectoryPointFeature::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&trajectory_point_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_sec_) -
    reinterpret_cast<char*>(&trajectory_point_)) + sizeof(timestamp_sec_));
}

TrajectoryPointFeature::~TrajectoryPointFeature() {
  // @@protoc_insertion_point(destructor:apollo.planning.TrajectoryPointFeature)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TrajectoryPointFeature::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete trajectory_point_;
}

void TrajectoryPointFeature::ArenaDtor(void* object) {
  TrajectoryPointFeature* _this = reinterpret_cast< TrajectoryPointFeature* >(object);
  (void)_this;
}
void TrajectoryPointFeature::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrajectoryPointFeature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrajectoryPointFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.TrajectoryPointFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(trajectory_point_ != nullptr);
    trajectory_point_->Clear();
  }
  timestamp_sec_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrajectoryPointFeature::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double timestamp_sec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_timestamp_sec(&has_bits);
          timestamp_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.CommonTrajectoryPointFeature trajectory_point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_trajectory_point(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrajectoryPointFeature::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.TrajectoryPointFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double timestamp_sec = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_timestamp_sec(), target);
  }

  // optional .apollo.planning.CommonTrajectoryPointFeature trajectory_point = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::trajectory_point(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.TrajectoryPointFeature)
  return target;
}

size_t TrajectoryPointFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.TrajectoryPointFeature)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.planning.CommonTrajectoryPointFeature trajectory_point = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *trajectory_point_);
    }

    // optional double timestamp_sec = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrajectoryPointFeature::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TrajectoryPointFeature::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrajectoryPointFeature::GetClassData() const { return &_class_data_; }

void TrajectoryPointFeature::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TrajectoryPointFeature *>(to)->MergeFrom(
      static_cast<const TrajectoryPointFeature &>(from));
}


void TrajectoryPointFeature::MergeFrom(const TrajectoryPointFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.TrajectoryPointFeature)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_trajectory_point()->::apollo::planning::CommonTrajectoryPointFeature::MergeFrom(from._internal_trajectory_point());
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_sec_ = from.timestamp_sec_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrajectoryPointFeature::CopyFrom(const TrajectoryPointFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.TrajectoryPointFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajectoryPointFeature::IsInitialized() const {
  return true;
}

void TrajectoryPointFeature::InternalSwap(TrajectoryPointFeature* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrajectoryPointFeature, timestamp_sec_)
      + sizeof(TrajectoryPointFeature::timestamp_sec_)
      - PROTOBUF_FIELD_OFFSET(TrajectoryPointFeature, trajectory_point_)>(
          reinterpret_cast<char*>(&trajectory_point_),
          reinterpret_cast<char*>(&other->trajectory_point_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrajectoryPointFeature::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2flearning_5fdata_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2flearning_5fdata_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2flearning_5fdata_2eproto[6]);
}

// ===================================================================

class PerceptionObstacleFeature::_Internal {
 public:
  using HasBits = decltype(std::declval<PerceptionObstacleFeature>()._has_bits_);
  static void set_has_timestamp_sec(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::apollo::common::Point3D& position(const PerceptionObstacleFeature* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_theta(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::apollo::common::Point3D& velocity(const PerceptionObstacleFeature* msg);
  static void set_has_velocity(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::common::Point3D& acceleration(const PerceptionObstacleFeature* msg);
  static void set_has_acceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::apollo::common::Point3D&
PerceptionObstacleFeature::_Internal::position(const PerceptionObstacleFeature* msg) {
  return *msg->position_;
}
const ::apollo::common::Point3D&
PerceptionObstacleFeature::_Internal::velocity(const PerceptionObstacleFeature* msg) {
  return *msg->velocity_;
}
const ::apollo::common::Point3D&
PerceptionObstacleFeature::_Internal::acceleration(const PerceptionObstacleFeature* msg) {
  return *msg->acceleration_;
}
void PerceptionObstacleFeature::clear_position() {
  if (position_ != nullptr) position_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void PerceptionObstacleFeature::clear_velocity() {
  if (velocity_ != nullptr) velocity_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void PerceptionObstacleFeature::clear_acceleration() {
  if (acceleration_ != nullptr) acceleration_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void PerceptionObstacleFeature::clear_polygon_point() {
  polygon_point_.Clear();
}
PerceptionObstacleFeature::PerceptionObstacleFeature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  polygon_point_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.planning.PerceptionObstacleFeature)
}
PerceptionObstacleFeature::PerceptionObstacleFeature(const PerceptionObstacleFeature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      polygon_point_(from.polygon_point_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    position_ = new ::apollo::common::Point3D(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from._internal_has_velocity()) {
    velocity_ = new ::apollo::common::Point3D(*from.velocity_);
  } else {
    velocity_ = nullptr;
  }
  if (from._internal_has_acceleration()) {
    acceleration_ = new ::apollo::common::Point3D(*from.acceleration_);
  } else {
    acceleration_ = nullptr;
  }
  ::memcpy(&timestamp_sec_, &from.timestamp_sec_,
    static_cast<size_t>(reinterpret_cast<char*>(&theta_) -
    reinterpret_cast<char*>(&timestamp_sec_)) + sizeof(theta_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.PerceptionObstacleFeature)
}

void PerceptionObstacleFeature::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&position_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&theta_) -
    reinterpret_cast<char*>(&position_)) + sizeof(theta_));
}

PerceptionObstacleFeature::~PerceptionObstacleFeature() {
  // @@protoc_insertion_point(destructor:apollo.planning.PerceptionObstacleFeature)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PerceptionObstacleFeature::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete velocity_;
  if (this != internal_default_instance()) delete acceleration_;
}

void PerceptionObstacleFeature::ArenaDtor(void* object) {
  PerceptionObstacleFeature* _this = reinterpret_cast< PerceptionObstacleFeature* >(object);
  (void)_this;
}
void PerceptionObstacleFeature::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PerceptionObstacleFeature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PerceptionObstacleFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.PerceptionObstacleFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  polygon_point_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(position_ != nullptr);
      position_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(velocity_ != nullptr);
      velocity_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(acceleration_ != nullptr);
      acceleration_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&timestamp_sec_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&theta_) -
        reinterpret_cast<char*>(&timestamp_sec_)) + sizeof(theta_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PerceptionObstacleFeature::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double timestamp_sec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_timestamp_sec(&has_bits);
          timestamp_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.Point3D position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double theta = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_theta(&has_bits);
          theta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.Point3D velocity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_velocity(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.Point3D acceleration = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_acceleration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.common.Point3D polygon_point = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_polygon_point(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PerceptionObstacleFeature::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.PerceptionObstacleFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double timestamp_sec = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_timestamp_sec(), target);
  }

  // optional .apollo.common.Point3D position = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::position(this), target, stream);
  }

  // optional double theta = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_theta(), target);
  }

  // optional .apollo.common.Point3D velocity = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::velocity(this), target, stream);
  }

  // optional .apollo.common.Point3D acceleration = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::acceleration(this), target, stream);
  }

  // repeated .apollo.common.Point3D polygon_point = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_polygon_point_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_polygon_point(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.PerceptionObstacleFeature)
  return target;
}

size_t PerceptionObstacleFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.PerceptionObstacleFeature)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.common.Point3D polygon_point = 6;
  total_size += 1UL * this->_internal_polygon_point_size();
  for (const auto& msg : this->polygon_point_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .apollo.common.Point3D position = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *position_);
    }

    // optional .apollo.common.Point3D velocity = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *velocity_);
    }

    // optional .apollo.common.Point3D acceleration = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *acceleration_);
    }

    // optional double timestamp_sec = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double theta = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PerceptionObstacleFeature::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PerceptionObstacleFeature::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PerceptionObstacleFeature::GetClassData() const { return &_class_data_; }

void PerceptionObstacleFeature::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PerceptionObstacleFeature *>(to)->MergeFrom(
      static_cast<const PerceptionObstacleFeature &>(from));
}


void PerceptionObstacleFeature::MergeFrom(const PerceptionObstacleFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.PerceptionObstacleFeature)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  polygon_point_.MergeFrom(from.polygon_point_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_position()->::apollo::common::Point3D::MergeFrom(from._internal_position());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_velocity()->::apollo::common::Point3D::MergeFrom(from._internal_velocity());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_acceleration()->::apollo::common::Point3D::MergeFrom(from._internal_acceleration());
    }
    if (cached_has_bits & 0x00000008u) {
      timestamp_sec_ = from.timestamp_sec_;
    }
    if (cached_has_bits & 0x00000010u) {
      theta_ = from.theta_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PerceptionObstacleFeature::CopyFrom(const PerceptionObstacleFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.PerceptionObstacleFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerceptionObstacleFeature::IsInitialized() const {
  return true;
}

void PerceptionObstacleFeature::InternalSwap(PerceptionObstacleFeature* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  polygon_point_.InternalSwap(&other->polygon_point_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PerceptionObstacleFeature, theta_)
      + sizeof(PerceptionObstacleFeature::theta_)
      - PROTOBUF_FIELD_OFFSET(PerceptionObstacleFeature, position_)>(
          reinterpret_cast<char*>(&position_),
          reinterpret_cast<char*>(&other->position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PerceptionObstacleFeature::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2flearning_5fdata_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2flearning_5fdata_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2flearning_5fdata_2eproto[7]);
}

// ===================================================================

class ObstacleTrajectoryFeature::_Internal {
 public:
};

ObstacleTrajectoryFeature::ObstacleTrajectoryFeature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  perception_obstacle_history_(arena),
  evaluated_trajectory_point_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.planning.ObstacleTrajectoryFeature)
}
ObstacleTrajectoryFeature::ObstacleTrajectoryFeature(const ObstacleTrajectoryFeature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      perception_obstacle_history_(from.perception_obstacle_history_),
      evaluated_trajectory_point_(from.evaluated_trajectory_point_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ObstacleTrajectoryFeature)
}

void ObstacleTrajectoryFeature::SharedCtor() {
}

ObstacleTrajectoryFeature::~ObstacleTrajectoryFeature() {
  // @@protoc_insertion_point(destructor:apollo.planning.ObstacleTrajectoryFeature)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ObstacleTrajectoryFeature::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ObstacleTrajectoryFeature::ArenaDtor(void* object) {
  ObstacleTrajectoryFeature* _this = reinterpret_cast< ObstacleTrajectoryFeature* >(object);
  (void)_this;
}
void ObstacleTrajectoryFeature::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObstacleTrajectoryFeature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ObstacleTrajectoryFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ObstacleTrajectoryFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  perception_obstacle_history_.Clear();
  evaluated_trajectory_point_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObstacleTrajectoryFeature::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .apollo.planning.PerceptionObstacleFeature perception_obstacle_history = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_perception_obstacle_history(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.planning.TrajectoryPointFeature evaluated_trajectory_point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_evaluated_trajectory_point(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObstacleTrajectoryFeature::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ObstacleTrajectoryFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.planning.PerceptionObstacleFeature perception_obstacle_history = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_perception_obstacle_history_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_perception_obstacle_history(i), target, stream);
  }

  // repeated .apollo.planning.TrajectoryPointFeature evaluated_trajectory_point = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_evaluated_trajectory_point_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_evaluated_trajectory_point(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ObstacleTrajectoryFeature)
  return target;
}

size_t ObstacleTrajectoryFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ObstacleTrajectoryFeature)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.planning.PerceptionObstacleFeature perception_obstacle_history = 1;
  total_size += 1UL * this->_internal_perception_obstacle_history_size();
  for (const auto& msg : this->perception_obstacle_history_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.planning.TrajectoryPointFeature evaluated_trajectory_point = 2;
  total_size += 1UL * this->_internal_evaluated_trajectory_point_size();
  for (const auto& msg : this->evaluated_trajectory_point_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ObstacleTrajectoryFeature::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ObstacleTrajectoryFeature::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ObstacleTrajectoryFeature::GetClassData() const { return &_class_data_; }

void ObstacleTrajectoryFeature::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ObstacleTrajectoryFeature *>(to)->MergeFrom(
      static_cast<const ObstacleTrajectoryFeature &>(from));
}


void ObstacleTrajectoryFeature::MergeFrom(const ObstacleTrajectoryFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ObstacleTrajectoryFeature)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  perception_obstacle_history_.MergeFrom(from.perception_obstacle_history_);
  evaluated_trajectory_point_.MergeFrom(from.evaluated_trajectory_point_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ObstacleTrajectoryFeature::CopyFrom(const ObstacleTrajectoryFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ObstacleTrajectoryFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObstacleTrajectoryFeature::IsInitialized() const {
  return true;
}

void ObstacleTrajectoryFeature::InternalSwap(ObstacleTrajectoryFeature* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  perception_obstacle_history_.InternalSwap(&other->perception_obstacle_history_);
  evaluated_trajectory_point_.InternalSwap(&other->evaluated_trajectory_point_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObstacleTrajectoryFeature::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2flearning_5fdata_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2flearning_5fdata_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2flearning_5fdata_2eproto[8]);
}

// ===================================================================

class PredictionTrajectoryFeature::_Internal {
 public:
  using HasBits = decltype(std::declval<PredictionTrajectoryFeature>()._has_bits_);
  static void set_has_probability(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PredictionTrajectoryFeature::PredictionTrajectoryFeature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  trajectory_point_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.planning.PredictionTrajectoryFeature)
}
PredictionTrajectoryFeature::PredictionTrajectoryFeature(const PredictionTrajectoryFeature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      trajectory_point_(from.trajectory_point_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  probability_ = from.probability_;
  // @@protoc_insertion_point(copy_constructor:apollo.planning.PredictionTrajectoryFeature)
}

void PredictionTrajectoryFeature::SharedCtor() {
probability_ = 0;
}

PredictionTrajectoryFeature::~PredictionTrajectoryFeature() {
  // @@protoc_insertion_point(destructor:apollo.planning.PredictionTrajectoryFeature)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PredictionTrajectoryFeature::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PredictionTrajectoryFeature::ArenaDtor(void* object) {
  PredictionTrajectoryFeature* _this = reinterpret_cast< PredictionTrajectoryFeature* >(object);
  (void)_this;
}
void PredictionTrajectoryFeature::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PredictionTrajectoryFeature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PredictionTrajectoryFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.PredictionTrajectoryFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trajectory_point_.Clear();
  probability_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PredictionTrajectoryFeature::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double probability = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_probability(&has_bits);
          probability_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.planning.TrajectoryPointFeature trajectory_point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_trajectory_point(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PredictionTrajectoryFeature::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.PredictionTrajectoryFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double probability = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_probability(), target);
  }

  // repeated .apollo.planning.TrajectoryPointFeature trajectory_point = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_trajectory_point_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_trajectory_point(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.PredictionTrajectoryFeature)
  return target;
}

size_t PredictionTrajectoryFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.PredictionTrajectoryFeature)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.planning.TrajectoryPointFeature trajectory_point = 2;
  total_size += 1UL * this->_internal_trajectory_point_size();
  for (const auto& msg : this->trajectory_point_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional double probability = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PredictionTrajectoryFeature::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PredictionTrajectoryFeature::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PredictionTrajectoryFeature::GetClassData() const { return &_class_data_; }

void PredictionTrajectoryFeature::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PredictionTrajectoryFeature *>(to)->MergeFrom(
      static_cast<const PredictionTrajectoryFeature &>(from));
}


void PredictionTrajectoryFeature::MergeFrom(const PredictionTrajectoryFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.PredictionTrajectoryFeature)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trajectory_point_.MergeFrom(from.trajectory_point_);
  if (from._internal_has_probability()) {
    _internal_set_probability(from._internal_probability());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PredictionTrajectoryFeature::CopyFrom(const PredictionTrajectoryFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.PredictionTrajectoryFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PredictionTrajectoryFeature::IsInitialized() const {
  return true;
}

void PredictionTrajectoryFeature::InternalSwap(PredictionTrajectoryFeature* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  trajectory_point_.InternalSwap(&other->trajectory_point_);
  swap(probability_, other->probability_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PredictionTrajectoryFeature::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2flearning_5fdata_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2flearning_5fdata_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2flearning_5fdata_2eproto[9]);
}

// ===================================================================

class PredictionObstacleFeature::_Internal {
 public:
  using HasBits = decltype(std::declval<PredictionObstacleFeature>()._has_bits_);
  static void set_has_timestamp_sec(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_predicted_period(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::apollo::prediction::ObstacleIntent& intent(const PredictionObstacleFeature* msg);
  static void set_has_intent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::prediction::ObstaclePriority& priority(const PredictionObstacleFeature* msg);
  static void set_has_priority(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_static(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::apollo::prediction::ObstacleIntent&
PredictionObstacleFeature::_Internal::intent(const PredictionObstacleFeature* msg) {
  return *msg->intent_;
}
const ::apollo::prediction::ObstaclePriority&
PredictionObstacleFeature::_Internal::priority(const PredictionObstacleFeature* msg) {
  return *msg->priority_;
}
void PredictionObstacleFeature::clear_intent() {
  if (intent_ != nullptr) intent_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void PredictionObstacleFeature::clear_priority() {
  if (priority_ != nullptr) priority_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
PredictionObstacleFeature::PredictionObstacleFeature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  trajectory_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.planning.PredictionObstacleFeature)
}
PredictionObstacleFeature::PredictionObstacleFeature(const PredictionObstacleFeature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      trajectory_(from.trajectory_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_intent()) {
    intent_ = new ::apollo::prediction::ObstacleIntent(*from.intent_);
  } else {
    intent_ = nullptr;
  }
  if (from._internal_has_priority()) {
    priority_ = new ::apollo::prediction::ObstaclePriority(*from.priority_);
  } else {
    priority_ = nullptr;
  }
  ::memcpy(&timestamp_sec_, &from.timestamp_sec_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_static_) -
    reinterpret_cast<char*>(&timestamp_sec_)) + sizeof(is_static_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.PredictionObstacleFeature)
}

void PredictionObstacleFeature::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&intent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_static_) -
    reinterpret_cast<char*>(&intent_)) + sizeof(is_static_));
}

PredictionObstacleFeature::~PredictionObstacleFeature() {
  // @@protoc_insertion_point(destructor:apollo.planning.PredictionObstacleFeature)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PredictionObstacleFeature::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete intent_;
  if (this != internal_default_instance()) delete priority_;
}

void PredictionObstacleFeature::ArenaDtor(void* object) {
  PredictionObstacleFeature* _this = reinterpret_cast< PredictionObstacleFeature* >(object);
  (void)_this;
}
void PredictionObstacleFeature::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PredictionObstacleFeature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PredictionObstacleFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.PredictionObstacleFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trajectory_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(intent_ != nullptr);
      intent_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(priority_ != nullptr);
      priority_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&timestamp_sec_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_static_) -
        reinterpret_cast<char*>(&timestamp_sec_)) + sizeof(is_static_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PredictionObstacleFeature::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double timestamp_sec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_timestamp_sec(&has_bits);
          timestamp_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double predicted_period = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_predicted_period(&has_bits);
          predicted_period_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.prediction.ObstacleIntent intent = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_intent(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.prediction.ObstaclePriority priority = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_priority(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_static = 5 [default = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_is_static(&has_bits);
          is_static_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.planning.PredictionTrajectoryFeature trajectory = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_trajectory(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PredictionObstacleFeature::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.PredictionObstacleFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double timestamp_sec = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_timestamp_sec(), target);
  }

  // optional double predicted_period = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_predicted_period(), target);
  }

  // optional .apollo.prediction.ObstacleIntent intent = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::intent(this), target, stream);
  }

  // optional .apollo.prediction.ObstaclePriority priority = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::priority(this), target, stream);
  }

  // optional bool is_static = 5 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_is_static(), target);
  }

  // repeated .apollo.planning.PredictionTrajectoryFeature trajectory = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_trajectory_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_trajectory(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.PredictionObstacleFeature)
  return target;
}

size_t PredictionObstacleFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.PredictionObstacleFeature)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.planning.PredictionTrajectoryFeature trajectory = 6;
  total_size += 1UL * this->_internal_trajectory_size();
  for (const auto& msg : this->trajectory_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .apollo.prediction.ObstacleIntent intent = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *intent_);
    }

    // optional .apollo.prediction.ObstaclePriority priority = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *priority_);
    }

    // optional double timestamp_sec = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double predicted_period = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional bool is_static = 5 [default = false];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PredictionObstacleFeature::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PredictionObstacleFeature::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PredictionObstacleFeature::GetClassData() const { return &_class_data_; }

void PredictionObstacleFeature::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PredictionObstacleFeature *>(to)->MergeFrom(
      static_cast<const PredictionObstacleFeature &>(from));
}


void PredictionObstacleFeature::MergeFrom(const PredictionObstacleFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.PredictionObstacleFeature)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trajectory_.MergeFrom(from.trajectory_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_intent()->::apollo::prediction::ObstacleIntent::MergeFrom(from._internal_intent());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_priority()->::apollo::prediction::ObstaclePriority::MergeFrom(from._internal_priority());
    }
    if (cached_has_bits & 0x00000004u) {
      timestamp_sec_ = from.timestamp_sec_;
    }
    if (cached_has_bits & 0x00000008u) {
      predicted_period_ = from.predicted_period_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_static_ = from.is_static_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PredictionObstacleFeature::CopyFrom(const PredictionObstacleFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.PredictionObstacleFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PredictionObstacleFeature::IsInitialized() const {
  return true;
}

void PredictionObstacleFeature::InternalSwap(PredictionObstacleFeature* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  trajectory_.InternalSwap(&other->trajectory_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PredictionObstacleFeature, is_static_)
      + sizeof(PredictionObstacleFeature::is_static_)
      - PROTOBUF_FIELD_OFFSET(PredictionObstacleFeature, intent_)>(
          reinterpret_cast<char*>(&intent_),
          reinterpret_cast<char*>(&other->intent_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PredictionObstacleFeature::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2flearning_5fdata_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2flearning_5fdata_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2flearning_5fdata_2eproto[10]);
}

// ===================================================================

class ObstacleFeature::_Internal {
 public:
  using HasBits = decltype(std::declval<ObstacleFeature>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_length(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::apollo::planning::ObstacleTrajectoryFeature& obstacle_trajectory(const ObstacleFeature* msg);
  static void set_has_obstacle_trajectory(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::planning::PredictionObstacleFeature& obstacle_prediction(const ObstacleFeature* msg);
  static void set_has_obstacle_prediction(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::planning::ObstacleTrajectoryFeature&
ObstacleFeature::_Internal::obstacle_trajectory(const ObstacleFeature* msg) {
  return *msg->obstacle_trajectory_;
}
const ::apollo::planning::PredictionObstacleFeature&
ObstacleFeature::_Internal::obstacle_prediction(const ObstacleFeature* msg) {
  return *msg->obstacle_prediction_;
}
ObstacleFeature::ObstacleFeature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.planning.ObstacleFeature)
}
ObstacleFeature::ObstacleFeature(const ObstacleFeature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_obstacle_trajectory()) {
    obstacle_trajectory_ = new ::apollo::planning::ObstacleTrajectoryFeature(*from.obstacle_trajectory_);
  } else {
    obstacle_trajectory_ = nullptr;
  }
  if (from._internal_has_obstacle_prediction()) {
    obstacle_prediction_ = new ::apollo::planning::PredictionObstacleFeature(*from.obstacle_prediction_);
  } else {
    obstacle_prediction_ = nullptr;
  }
  ::memcpy(&length_, &from.length_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&length_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ObstacleFeature)
}

void ObstacleFeature::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&obstacle_trajectory_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&obstacle_trajectory_)) + sizeof(height_));
}

ObstacleFeature::~ObstacleFeature() {
  // @@protoc_insertion_point(destructor:apollo.planning.ObstacleFeature)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ObstacleFeature::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete obstacle_trajectory_;
  if (this != internal_default_instance()) delete obstacle_prediction_;
}

void ObstacleFeature::ArenaDtor(void* object) {
  ObstacleFeature* _this = reinterpret_cast< ObstacleFeature* >(object);
  (void)_this;
}
void ObstacleFeature::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObstacleFeature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ObstacleFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ObstacleFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(obstacle_trajectory_ != nullptr);
      obstacle_trajectory_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(obstacle_prediction_ != nullptr);
      obstacle_prediction_->Clear();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&length_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&height_) -
        reinterpret_cast<char*>(&length_)) + sizeof(height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObstacleFeature::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_length(&has_bits);
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double width = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double height = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.PerceptionObstacle.Type type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::PerceptionObstacle_Type_IsValid(val))) {
            _internal_set_type(static_cast<::apollo::perception::PerceptionObstacle_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.ObstacleTrajectoryFeature obstacle_trajectory = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_obstacle_trajectory(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.PredictionObstacleFeature obstacle_prediction = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_obstacle_prediction(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObstacleFeature::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ObstacleFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // optional double length = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_length(), target);
  }

  // optional double width = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_width(), target);
  }

  // optional double height = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_height(), target);
  }

  // optional .apollo.perception.PerceptionObstacle.Type type = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_type(), target);
  }

  // optional .apollo.planning.ObstacleTrajectoryFeature obstacle_trajectory = 6;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::obstacle_trajectory(this), target, stream);
  }

  // optional .apollo.planning.PredictionObstacleFeature obstacle_prediction = 7;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::obstacle_prediction(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ObstacleFeature)
  return target;
}

size_t ObstacleFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ObstacleFeature)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .apollo.planning.ObstacleTrajectoryFeature obstacle_trajectory = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *obstacle_trajectory_);
    }

    // optional .apollo.planning.PredictionObstacleFeature obstacle_prediction = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *obstacle_prediction_);
    }

    // optional double length = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double width = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional int32 id = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_id());
    }

    // optional .apollo.perception.PerceptionObstacle.Type type = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional double height = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ObstacleFeature::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ObstacleFeature::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ObstacleFeature::GetClassData() const { return &_class_data_; }

void ObstacleFeature::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ObstacleFeature *>(to)->MergeFrom(
      static_cast<const ObstacleFeature &>(from));
}


void ObstacleFeature::MergeFrom(const ObstacleFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ObstacleFeature)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_obstacle_trajectory()->::apollo::planning::ObstacleTrajectoryFeature::MergeFrom(from._internal_obstacle_trajectory());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_obstacle_prediction()->::apollo::planning::PredictionObstacleFeature::MergeFrom(from._internal_obstacle_prediction());
    }
    if (cached_has_bits & 0x00000004u) {
      length_ = from.length_;
    }
    if (cached_has_bits & 0x00000008u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000010u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000020u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000040u) {
      height_ = from.height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ObstacleFeature::CopyFrom(const ObstacleFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ObstacleFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObstacleFeature::IsInitialized() const {
  return true;
}

void ObstacleFeature::InternalSwap(ObstacleFeature* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ObstacleFeature, height_)
      + sizeof(ObstacleFeature::height_)
      - PROTOBUF_FIELD_OFFSET(ObstacleFeature, obstacle_trajectory_)>(
          reinterpret_cast<char*>(&obstacle_trajectory_),
          reinterpret_cast<char*>(&other->obstacle_trajectory_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ObstacleFeature::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2flearning_5fdata_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2flearning_5fdata_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2flearning_5fdata_2eproto[11]);
}

// ===================================================================

class RoutingResponseFeature::_Internal {
 public:
  using HasBits = decltype(std::declval<RoutingResponseFeature>()._has_bits_);
  static const ::apollo::routing::Measurement& measurement(const RoutingResponseFeature* msg);
  static void set_has_measurement(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::apollo::routing::Measurement&
RoutingResponseFeature::_Internal::measurement(const RoutingResponseFeature* msg) {
  return *msg->measurement_;
}
void RoutingResponseFeature::clear_road() {
  road_.Clear();
}
void RoutingResponseFeature::clear_measurement() {
  if (measurement_ != nullptr) measurement_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
RoutingResponseFeature::RoutingResponseFeature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  road_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.planning.RoutingResponseFeature)
}
RoutingResponseFeature::RoutingResponseFeature(const RoutingResponseFeature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      road_(from.road_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_measurement()) {
    measurement_ = new ::apollo::routing::Measurement(*from.measurement_);
  } else {
    measurement_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning.RoutingResponseFeature)
}

void RoutingResponseFeature::SharedCtor() {
measurement_ = nullptr;
}

RoutingResponseFeature::~RoutingResponseFeature() {
  // @@protoc_insertion_point(destructor:apollo.planning.RoutingResponseFeature)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RoutingResponseFeature::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete measurement_;
}

void RoutingResponseFeature::ArenaDtor(void* object) {
  RoutingResponseFeature* _this = reinterpret_cast< RoutingResponseFeature* >(object);
  (void)_this;
}
void RoutingResponseFeature::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoutingResponseFeature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RoutingResponseFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.RoutingResponseFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  road_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(measurement_ != nullptr);
    measurement_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoutingResponseFeature::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .apollo.routing.RoadSegment road = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_road(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.routing.Measurement measurement = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_measurement(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoutingResponseFeature::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.RoutingResponseFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.routing.RoadSegment road = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_road_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_road(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .apollo.routing.Measurement measurement = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::measurement(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.RoutingResponseFeature)
  return target;
}

size_t RoutingResponseFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.RoutingResponseFeature)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.routing.RoadSegment road = 1;
  total_size += 1UL * this->_internal_road_size();
  for (const auto& msg : this->road_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .apollo.routing.Measurement measurement = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *measurement_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoutingResponseFeature::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RoutingResponseFeature::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoutingResponseFeature::GetClassData() const { return &_class_data_; }

void RoutingResponseFeature::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RoutingResponseFeature *>(to)->MergeFrom(
      static_cast<const RoutingResponseFeature &>(from));
}


void RoutingResponseFeature::MergeFrom(const RoutingResponseFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.RoutingResponseFeature)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  road_.MergeFrom(from.road_);
  if (from._internal_has_measurement()) {
    _internal_mutable_measurement()->::apollo::routing::Measurement::MergeFrom(from._internal_measurement());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoutingResponseFeature::CopyFrom(const RoutingResponseFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.RoutingResponseFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoutingResponseFeature::IsInitialized() const {
  return true;
}

void RoutingResponseFeature::InternalSwap(RoutingResponseFeature* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  road_.InternalSwap(&other->road_);
  swap(measurement_, other->measurement_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoutingResponseFeature::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2flearning_5fdata_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2flearning_5fdata_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2flearning_5fdata_2eproto[12]);
}

// ===================================================================

class RoutingFeature::_Internal {
 public:
  using HasBits = decltype(std::declval<RoutingFeature>()._has_bits_);
  static const ::apollo::planning::RoutingResponseFeature& routing_response(const RoutingFeature* msg);
  static void set_has_routing_response(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::planning::RoutingResponseFeature& local_routing(const RoutingFeature* msg);
  static void set_has_local_routing(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::planning::RoutingResponseFeature&
RoutingFeature::_Internal::routing_response(const RoutingFeature* msg) {
  return *msg->routing_response_;
}
const ::apollo::planning::RoutingResponseFeature&
RoutingFeature::_Internal::local_routing(const RoutingFeature* msg) {
  return *msg->local_routing_;
}
RoutingFeature::RoutingFeature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  local_routing_lane_id_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.planning.RoutingFeature)
}
RoutingFeature::RoutingFeature(const RoutingFeature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      local_routing_lane_id_(from.local_routing_lane_id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_routing_response()) {
    routing_response_ = new ::apollo::planning::RoutingResponseFeature(*from.routing_response_);
  } else {
    routing_response_ = nullptr;
  }
  if (from._internal_has_local_routing()) {
    local_routing_ = new ::apollo::planning::RoutingResponseFeature(*from.local_routing_);
  } else {
    local_routing_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning.RoutingFeature)
}

void RoutingFeature::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&routing_response_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&local_routing_) -
    reinterpret_cast<char*>(&routing_response_)) + sizeof(local_routing_));
}

RoutingFeature::~RoutingFeature() {
  // @@protoc_insertion_point(destructor:apollo.planning.RoutingFeature)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RoutingFeature::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete routing_response_;
  if (this != internal_default_instance()) delete local_routing_;
}

void RoutingFeature::ArenaDtor(void* object) {
  RoutingFeature* _this = reinterpret_cast< RoutingFeature* >(object);
  (void)_this;
}
void RoutingFeature::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoutingFeature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RoutingFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.RoutingFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  local_routing_lane_id_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(routing_response_ != nullptr);
      routing_response_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(local_routing_ != nullptr);
      local_routing_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoutingFeature::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.planning.RoutingResponseFeature routing_response = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_routing_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string local_routing_lane_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_local_routing_lane_id();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.planning.RoutingFeature.local_routing_lane_id");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.RoutingResponseFeature local_routing = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_local_routing(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoutingFeature::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.RoutingFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning.RoutingResponseFeature routing_response = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::routing_response(this), target, stream);
  }

  // repeated string local_routing_lane_id = 2;
  for (int i = 0, n = this->_internal_local_routing_lane_id_size(); i < n; i++) {
    const auto& s = this->_internal_local_routing_lane_id(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.planning.RoutingFeature.local_routing_lane_id");
    target = stream->WriteString(2, s, target);
  }

  // optional .apollo.planning.RoutingResponseFeature local_routing = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::local_routing(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.RoutingFeature)
  return target;
}

size_t RoutingFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.RoutingFeature)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string local_routing_lane_id = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(local_routing_lane_id_.size());
  for (int i = 0, n = local_routing_lane_id_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      local_routing_lane_id_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.planning.RoutingResponseFeature routing_response = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *routing_response_);
    }

    // optional .apollo.planning.RoutingResponseFeature local_routing = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *local_routing_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoutingFeature::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RoutingFeature::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoutingFeature::GetClassData() const { return &_class_data_; }

void RoutingFeature::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RoutingFeature *>(to)->MergeFrom(
      static_cast<const RoutingFeature &>(from));
}


void RoutingFeature::MergeFrom(const RoutingFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.RoutingFeature)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  local_routing_lane_id_.MergeFrom(from.local_routing_lane_id_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_routing_response()->::apollo::planning::RoutingResponseFeature::MergeFrom(from._internal_routing_response());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_local_routing()->::apollo::planning::RoutingResponseFeature::MergeFrom(from._internal_local_routing());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoutingFeature::CopyFrom(const RoutingFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.RoutingFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoutingFeature::IsInitialized() const {
  return true;
}

void RoutingFeature::InternalSwap(RoutingFeature* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  local_routing_lane_id_.InternalSwap(&other->local_routing_lane_id_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoutingFeature, local_routing_)
      + sizeof(RoutingFeature::local_routing_)
      - PROTOBUF_FIELD_OFFSET(RoutingFeature, routing_response_)>(
          reinterpret_cast<char*>(&routing_response_),
          reinterpret_cast<char*>(&other->routing_response_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoutingFeature::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2flearning_5fdata_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2flearning_5fdata_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2flearning_5fdata_2eproto[13]);
}

// ===================================================================

class TrafficLightFeature::_Internal {
 public:
  using HasBits = decltype(std::declval<TrafficLightFeature>()._has_bits_);
  static void set_has_color(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_confidence(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_tracking_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_blink(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_remaining_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

TrafficLightFeature::TrafficLightFeature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.planning.TrafficLightFeature)
}
TrafficLightFeature::TrafficLightFeature(const TrafficLightFeature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_id()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&color_, &from.color_,
    static_cast<size_t>(reinterpret_cast<char*>(&confidence_) -
    reinterpret_cast<char*>(&color_)) + sizeof(confidence_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.TrafficLightFeature)
}

void TrafficLightFeature::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&color_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&remaining_time_) -
    reinterpret_cast<char*>(&color_)) + sizeof(remaining_time_));
confidence_ = 1;
}

TrafficLightFeature::~TrafficLightFeature() {
  // @@protoc_insertion_point(destructor:apollo.planning.TrafficLightFeature)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TrafficLightFeature::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TrafficLightFeature::ArenaDtor(void* object) {
  TrafficLightFeature* _this = reinterpret_cast< TrafficLightFeature* >(object);
  (void)_this;
}
void TrafficLightFeature::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrafficLightFeature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrafficLightFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.TrafficLightFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    id_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&color_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&remaining_time_) -
        reinterpret_cast<char*>(&color_)) + sizeof(remaining_time_));
    confidence_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrafficLightFeature::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.perception.TrafficLight.Color color = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::TrafficLight_Color_IsValid(val))) {
            _internal_set_color(static_cast<::apollo::perception::TrafficLight_Color>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.planning.TrafficLightFeature.id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double confidence = 3 [default = 1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_confidence(&has_bits);
          confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double tracking_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_tracking_time(&has_bits);
          tracking_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool blink = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_blink(&has_bits);
          blink_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double remaining_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_remaining_time(&has_bits);
          remaining_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrafficLightFeature::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.TrafficLightFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.perception.TrafficLight.Color color = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_color(), target);
  }

  // optional string id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.planning.TrafficLightFeature.id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  // optional double confidence = 3 [default = 1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_confidence(), target);
  }

  // optional double tracking_time = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_tracking_time(), target);
  }

  // optional bool blink = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_blink(), target);
  }

  // optional double remaining_time = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_remaining_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.TrafficLightFeature)
  return target;
}

size_t TrafficLightFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.TrafficLightFeature)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
    }

    // optional .apollo.perception.TrafficLight.Color color = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_color());
    }

    // optional bool blink = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional double tracking_time = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double remaining_time = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double confidence = 3 [default = 1];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrafficLightFeature::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TrafficLightFeature::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrafficLightFeature::GetClassData() const { return &_class_data_; }

void TrafficLightFeature::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TrafficLightFeature *>(to)->MergeFrom(
      static_cast<const TrafficLightFeature &>(from));
}


void TrafficLightFeature::MergeFrom(const TrafficLightFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.TrafficLightFeature)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      color_ = from.color_;
    }
    if (cached_has_bits & 0x00000004u) {
      blink_ = from.blink_;
    }
    if (cached_has_bits & 0x00000008u) {
      tracking_time_ = from.tracking_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      remaining_time_ = from.remaining_time_;
    }
    if (cached_has_bits & 0x00000020u) {
      confidence_ = from.confidence_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrafficLightFeature::CopyFrom(const TrafficLightFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.TrafficLightFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficLightFeature::IsInitialized() const {
  return true;
}

void TrafficLightFeature::InternalSwap(TrafficLightFeature* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrafficLightFeature, remaining_time_)
      + sizeof(TrafficLightFeature::remaining_time_)
      - PROTOBUF_FIELD_OFFSET(TrafficLightFeature, color_)>(
          reinterpret_cast<char*>(&color_),
          reinterpret_cast<char*>(&other->color_));
  swap(confidence_, other->confidence_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficLightFeature::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2flearning_5fdata_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2flearning_5fdata_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2flearning_5fdata_2eproto[14]);
}

// ===================================================================

class TrafficLightDetectionFeature::_Internal {
 public:
  using HasBits = decltype(std::declval<TrafficLightDetectionFeature>()._has_bits_);
  static void set_has_message_timestamp_sec(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TrafficLightDetectionFeature::TrafficLightDetectionFeature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  traffic_light_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.planning.TrafficLightDetectionFeature)
}
TrafficLightDetectionFeature::TrafficLightDetectionFeature(const TrafficLightDetectionFeature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      traffic_light_(from.traffic_light_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_timestamp_sec_ = from.message_timestamp_sec_;
  // @@protoc_insertion_point(copy_constructor:apollo.planning.TrafficLightDetectionFeature)
}

void TrafficLightDetectionFeature::SharedCtor() {
message_timestamp_sec_ = 0;
}

TrafficLightDetectionFeature::~TrafficLightDetectionFeature() {
  // @@protoc_insertion_point(destructor:apollo.planning.TrafficLightDetectionFeature)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TrafficLightDetectionFeature::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TrafficLightDetectionFeature::ArenaDtor(void* object) {
  TrafficLightDetectionFeature* _this = reinterpret_cast< TrafficLightDetectionFeature* >(object);
  (void)_this;
}
void TrafficLightDetectionFeature::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrafficLightDetectionFeature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrafficLightDetectionFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.TrafficLightDetectionFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  traffic_light_.Clear();
  message_timestamp_sec_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrafficLightDetectionFeature::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double message_timestamp_sec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_message_timestamp_sec(&has_bits);
          message_timestamp_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.planning.TrafficLightFeature traffic_light = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_traffic_light(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrafficLightDetectionFeature::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.TrafficLightDetectionFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double message_timestamp_sec = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_message_timestamp_sec(), target);
  }

  // repeated .apollo.planning.TrafficLightFeature traffic_light = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_traffic_light_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_traffic_light(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.TrafficLightDetectionFeature)
  return target;
}

size_t TrafficLightDetectionFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.TrafficLightDetectionFeature)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.planning.TrafficLightFeature traffic_light = 2;
  total_size += 1UL * this->_internal_traffic_light_size();
  for (const auto& msg : this->traffic_light_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional double message_timestamp_sec = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrafficLightDetectionFeature::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TrafficLightDetectionFeature::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrafficLightDetectionFeature::GetClassData() const { return &_class_data_; }

void TrafficLightDetectionFeature::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TrafficLightDetectionFeature *>(to)->MergeFrom(
      static_cast<const TrafficLightDetectionFeature &>(from));
}


void TrafficLightDetectionFeature::MergeFrom(const TrafficLightDetectionFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.TrafficLightDetectionFeature)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  traffic_light_.MergeFrom(from.traffic_light_);
  if (from._internal_has_message_timestamp_sec()) {
    _internal_set_message_timestamp_sec(from._internal_message_timestamp_sec());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrafficLightDetectionFeature::CopyFrom(const TrafficLightDetectionFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.TrafficLightDetectionFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficLightDetectionFeature::IsInitialized() const {
  return true;
}

void TrafficLightDetectionFeature::InternalSwap(TrafficLightDetectionFeature* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  traffic_light_.InternalSwap(&other->traffic_light_);
  swap(message_timestamp_sec_, other->message_timestamp_sec_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficLightDetectionFeature::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2flearning_5fdata_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2flearning_5fdata_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2flearning_5fdata_2eproto[15]);
}

// ===================================================================

class ADCTrajectoryPoint::_Internal {
 public:
  using HasBits = decltype(std::declval<ADCTrajectoryPoint>()._has_bits_);
  static void set_has_timestamp_sec(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::planning::PlanningTag& planning_tag(const ADCTrajectoryPoint* msg);
  static void set_has_planning_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::planning::CommonTrajectoryPointFeature& trajectory_point(const ADCTrajectoryPoint* msg);
  static void set_has_trajectory_point(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::planning::PlanningTag&
ADCTrajectoryPoint::_Internal::planning_tag(const ADCTrajectoryPoint* msg) {
  return *msg->planning_tag_;
}
const ::apollo::planning::CommonTrajectoryPointFeature&
ADCTrajectoryPoint::_Internal::trajectory_point(const ADCTrajectoryPoint* msg) {
  return *msg->trajectory_point_;
}
ADCTrajectoryPoint::ADCTrajectoryPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.planning.ADCTrajectoryPoint)
}
ADCTrajectoryPoint::ADCTrajectoryPoint(const ADCTrajectoryPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_planning_tag()) {
    planning_tag_ = new ::apollo::planning::PlanningTag(*from.planning_tag_);
  } else {
    planning_tag_ = nullptr;
  }
  if (from._internal_has_trajectory_point()) {
    trajectory_point_ = new ::apollo::planning::CommonTrajectoryPointFeature(*from.trajectory_point_);
  } else {
    trajectory_point_ = nullptr;
  }
  timestamp_sec_ = from.timestamp_sec_;
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ADCTrajectoryPoint)
}

void ADCTrajectoryPoint::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&planning_tag_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_sec_) -
    reinterpret_cast<char*>(&planning_tag_)) + sizeof(timestamp_sec_));
}

ADCTrajectoryPoint::~ADCTrajectoryPoint() {
  // @@protoc_insertion_point(destructor:apollo.planning.ADCTrajectoryPoint)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ADCTrajectoryPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete planning_tag_;
  if (this != internal_default_instance()) delete trajectory_point_;
}

void ADCTrajectoryPoint::ArenaDtor(void* object) {
  ADCTrajectoryPoint* _this = reinterpret_cast< ADCTrajectoryPoint* >(object);
  (void)_this;
}
void ADCTrajectoryPoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ADCTrajectoryPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ADCTrajectoryPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ADCTrajectoryPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(planning_tag_ != nullptr);
      planning_tag_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(trajectory_point_ != nullptr);
      trajectory_point_->Clear();
    }
  }
  timestamp_sec_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ADCTrajectoryPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double timestamp_sec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_timestamp_sec(&has_bits);
          timestamp_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.PlanningTag planning_tag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_planning_tag(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.CommonTrajectoryPointFeature trajectory_point = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_trajectory_point(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ADCTrajectoryPoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ADCTrajectoryPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double timestamp_sec = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_timestamp_sec(), target);
  }

  // optional .apollo.planning.PlanningTag planning_tag = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::planning_tag(this), target, stream);
  }

  // optional .apollo.planning.CommonTrajectoryPointFeature trajectory_point = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::trajectory_point(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ADCTrajectoryPoint)
  return target;
}

size_t ADCTrajectoryPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ADCTrajectoryPoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .apollo.planning.PlanningTag planning_tag = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *planning_tag_);
    }

    // optional .apollo.planning.CommonTrajectoryPointFeature trajectory_point = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *trajectory_point_);
    }

    // optional double timestamp_sec = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ADCTrajectoryPoint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ADCTrajectoryPoint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ADCTrajectoryPoint::GetClassData() const { return &_class_data_; }

void ADCTrajectoryPoint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ADCTrajectoryPoint *>(to)->MergeFrom(
      static_cast<const ADCTrajectoryPoint &>(from));
}


void ADCTrajectoryPoint::MergeFrom(const ADCTrajectoryPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ADCTrajectoryPoint)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_planning_tag()->::apollo::planning::PlanningTag::MergeFrom(from._internal_planning_tag());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_trajectory_point()->::apollo::planning::CommonTrajectoryPointFeature::MergeFrom(from._internal_trajectory_point());
    }
    if (cached_has_bits & 0x00000004u) {
      timestamp_sec_ = from.timestamp_sec_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ADCTrajectoryPoint::CopyFrom(const ADCTrajectoryPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ADCTrajectoryPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ADCTrajectoryPoint::IsInitialized() const {
  return true;
}

void ADCTrajectoryPoint::InternalSwap(ADCTrajectoryPoint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ADCTrajectoryPoint, timestamp_sec_)
      + sizeof(ADCTrajectoryPoint::timestamp_sec_)
      - PROTOBUF_FIELD_OFFSET(ADCTrajectoryPoint, planning_tag_)>(
          reinterpret_cast<char*>(&planning_tag_),
          reinterpret_cast<char*>(&other->planning_tag_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ADCTrajectoryPoint::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2flearning_5fdata_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2flearning_5fdata_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2flearning_5fdata_2eproto[16]);
}

// ===================================================================

class LearningOutput::_Internal {
 public:
};

LearningOutput::LearningOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  adc_future_trajectory_point_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.planning.LearningOutput)
}
LearningOutput::LearningOutput(const LearningOutput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      adc_future_trajectory_point_(from.adc_future_trajectory_point_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.LearningOutput)
}

void LearningOutput::SharedCtor() {
}

LearningOutput::~LearningOutput() {
  // @@protoc_insertion_point(destructor:apollo.planning.LearningOutput)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LearningOutput::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LearningOutput::ArenaDtor(void* object) {
  LearningOutput* _this = reinterpret_cast< LearningOutput* >(object);
  (void)_this;
}
void LearningOutput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LearningOutput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LearningOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.LearningOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  adc_future_trajectory_point_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LearningOutput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .apollo.planning.TrajectoryPointFeature adc_future_trajectory_point = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_adc_future_trajectory_point(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LearningOutput::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.LearningOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.planning.TrajectoryPointFeature adc_future_trajectory_point = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_adc_future_trajectory_point_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_adc_future_trajectory_point(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.LearningOutput)
  return target;
}

size_t LearningOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.LearningOutput)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.planning.TrajectoryPointFeature adc_future_trajectory_point = 1;
  total_size += 1UL * this->_internal_adc_future_trajectory_point_size();
  for (const auto& msg : this->adc_future_trajectory_point_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LearningOutput::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LearningOutput::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LearningOutput::GetClassData() const { return &_class_data_; }

void LearningOutput::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LearningOutput *>(to)->MergeFrom(
      static_cast<const LearningOutput &>(from));
}


void LearningOutput::MergeFrom(const LearningOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.LearningOutput)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  adc_future_trajectory_point_.MergeFrom(from.adc_future_trajectory_point_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LearningOutput::CopyFrom(const LearningOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.LearningOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LearningOutput::IsInitialized() const {
  return true;
}

void LearningOutput::InternalSwap(LearningOutput* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  adc_future_trajectory_point_.InternalSwap(&other->adc_future_trajectory_point_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LearningOutput::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2flearning_5fdata_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2flearning_5fdata_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2flearning_5fdata_2eproto[17]);
}

// ===================================================================

class LearningDataFrame::_Internal {
 public:
  using HasBits = decltype(std::declval<LearningDataFrame>()._has_bits_);
  static void set_has_message_timestamp_sec(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_frame_num(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_map_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::planning::PlanningTag& planning_tag(const LearningDataFrame* msg);
  static void set_has_planning_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::planning::ChassisFeature& chassis(const LearningDataFrame* msg);
  static void set_has_chassis(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::planning::LocalizationFeature& localization(const LearningDataFrame* msg);
  static void set_has_localization(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::apollo::planning::RoutingFeature& routing(const LearningDataFrame* msg);
  static void set_has_routing(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::apollo::planning::TrafficLightDetectionFeature& traffic_light_detection(const LearningDataFrame* msg);
  static void set_has_traffic_light_detection(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::apollo::planning::LearningOutput& output(const LearningDataFrame* msg);
  static void set_has_output(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::apollo::planning::PlanningTag&
LearningDataFrame::_Internal::planning_tag(const LearningDataFrame* msg) {
  return *msg->planning_tag_;
}
const ::apollo::planning::ChassisFeature&
LearningDataFrame::_Internal::chassis(const LearningDataFrame* msg) {
  return *msg->chassis_;
}
const ::apollo::planning::LocalizationFeature&
LearningDataFrame::_Internal::localization(const LearningDataFrame* msg) {
  return *msg->localization_;
}
const ::apollo::planning::RoutingFeature&
LearningDataFrame::_Internal::routing(const LearningDataFrame* msg) {
  return *msg->routing_;
}
const ::apollo::planning::TrafficLightDetectionFeature&
LearningDataFrame::_Internal::traffic_light_detection(const LearningDataFrame* msg) {
  return *msg->traffic_light_detection_;
}
const ::apollo::planning::LearningOutput&
LearningDataFrame::_Internal::output(const LearningDataFrame* msg) {
  return *msg->output_;
}
LearningDataFrame::LearningDataFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  obstacle_(arena),
  adc_trajectory_point_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.planning.LearningDataFrame)
}
LearningDataFrame::LearningDataFrame(const LearningDataFrame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      obstacle_(from.obstacle_),
      adc_trajectory_point_(from.adc_trajectory_point_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  map_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_map_name()) {
    map_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_map_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_planning_tag()) {
    planning_tag_ = new ::apollo::planning::PlanningTag(*from.planning_tag_);
  } else {
    planning_tag_ = nullptr;
  }
  if (from._internal_has_chassis()) {
    chassis_ = new ::apollo::planning::ChassisFeature(*from.chassis_);
  } else {
    chassis_ = nullptr;
  }
  if (from._internal_has_localization()) {
    localization_ = new ::apollo::planning::LocalizationFeature(*from.localization_);
  } else {
    localization_ = nullptr;
  }
  if (from._internal_has_routing()) {
    routing_ = new ::apollo::planning::RoutingFeature(*from.routing_);
  } else {
    routing_ = nullptr;
  }
  if (from._internal_has_traffic_light_detection()) {
    traffic_light_detection_ = new ::apollo::planning::TrafficLightDetectionFeature(*from.traffic_light_detection_);
  } else {
    traffic_light_detection_ = nullptr;
  }
  if (from._internal_has_output()) {
    output_ = new ::apollo::planning::LearningOutput(*from.output_);
  } else {
    output_ = nullptr;
  }
  ::memcpy(&message_timestamp_sec_, &from.message_timestamp_sec_,
    static_cast<size_t>(reinterpret_cast<char*>(&frame_num_) -
    reinterpret_cast<char*>(&message_timestamp_sec_)) + sizeof(frame_num_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.LearningDataFrame)
}

void LearningDataFrame::SharedCtor() {
map_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&planning_tag_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&frame_num_) -
    reinterpret_cast<char*>(&planning_tag_)) + sizeof(frame_num_));
}

LearningDataFrame::~LearningDataFrame() {
  // @@protoc_insertion_point(destructor:apollo.planning.LearningDataFrame)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LearningDataFrame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  map_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete planning_tag_;
  if (this != internal_default_instance()) delete chassis_;
  if (this != internal_default_instance()) delete localization_;
  if (this != internal_default_instance()) delete routing_;
  if (this != internal_default_instance()) delete traffic_light_detection_;
  if (this != internal_default_instance()) delete output_;
}

void LearningDataFrame::ArenaDtor(void* object) {
  LearningDataFrame* _this = reinterpret_cast< LearningDataFrame* >(object);
  (void)_this;
}
void LearningDataFrame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LearningDataFrame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LearningDataFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.LearningDataFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  obstacle_.Clear();
  adc_trajectory_point_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      map_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(planning_tag_ != nullptr);
      planning_tag_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(chassis_ != nullptr);
      chassis_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(localization_ != nullptr);
      localization_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(routing_ != nullptr);
      routing_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(traffic_light_detection_ != nullptr);
      traffic_light_detection_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(output_ != nullptr);
      output_->Clear();
    }
  }
  message_timestamp_sec_ = 0;
  frame_num_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LearningDataFrame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double message_timestamp_sec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_message_timestamp_sec(&has_bits);
          message_timestamp_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 frame_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_frame_num(&has_bits);
          frame_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string map_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_map_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.planning.LearningDataFrame.map_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.PlanningTag planning_tag = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_planning_tag(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.ChassisFeature chassis = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_chassis(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.LocalizationFeature localization = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_localization(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.planning.ObstacleFeature obstacle = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_obstacle(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.RoutingFeature routing = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_routing(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.TrafficLightDetectionFeature traffic_light_detection = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_traffic_light_detection(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.planning.ADCTrajectoryPoint adc_trajectory_point = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_adc_trajectory_point(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.LearningOutput output = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_output(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LearningDataFrame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.LearningDataFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double message_timestamp_sec = 1;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_message_timestamp_sec(), target);
  }

  // optional uint32 frame_num = 2;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_frame_num(), target);
  }

  // optional string map_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_map_name().data(), static_cast<int>(this->_internal_map_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.planning.LearningDataFrame.map_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_map_name(), target);
  }

  // optional .apollo.planning.PlanningTag planning_tag = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::planning_tag(this), target, stream);
  }

  // optional .apollo.planning.ChassisFeature chassis = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::chassis(this), target, stream);
  }

  // optional .apollo.planning.LocalizationFeature localization = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::localization(this), target, stream);
  }

  // repeated .apollo.planning.ObstacleFeature obstacle = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_obstacle_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_obstacle(i), target, stream);
  }

  // optional .apollo.planning.RoutingFeature routing = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::routing(this), target, stream);
  }

  // optional .apollo.planning.TrafficLightDetectionFeature traffic_light_detection = 9;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::traffic_light_detection(this), target, stream);
  }

  // repeated .apollo.planning.ADCTrajectoryPoint adc_trajectory_point = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_adc_trajectory_point_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_adc_trajectory_point(i), target, stream);
  }

  // optional .apollo.planning.LearningOutput output = 11;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::output(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.LearningDataFrame)
  return target;
}

size_t LearningDataFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.LearningDataFrame)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.planning.ObstacleFeature obstacle = 7;
  total_size += 1UL * this->_internal_obstacle_size();
  for (const auto& msg : this->obstacle_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.planning.ADCTrajectoryPoint adc_trajectory_point = 10;
  total_size += 1UL * this->_internal_adc_trajectory_point_size();
  for (const auto& msg : this->adc_trajectory_point_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string map_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_map_name());
    }

    // optional .apollo.planning.PlanningTag planning_tag = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *planning_tag_);
    }

    // optional .apollo.planning.ChassisFeature chassis = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *chassis_);
    }

    // optional .apollo.planning.LocalizationFeature localization = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *localization_);
    }

    // optional .apollo.planning.RoutingFeature routing = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *routing_);
    }

    // optional .apollo.planning.TrafficLightDetectionFeature traffic_light_detection = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *traffic_light_detection_);
    }

    // optional .apollo.planning.LearningOutput output = 11;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *output_);
    }

    // optional double message_timestamp_sec = 1;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  // optional uint32 frame_num = 2;
  if (cached_has_bits & 0x00000100u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_frame_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LearningDataFrame::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LearningDataFrame::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LearningDataFrame::GetClassData() const { return &_class_data_; }

void LearningDataFrame::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LearningDataFrame *>(to)->MergeFrom(
      static_cast<const LearningDataFrame &>(from));
}


void LearningDataFrame::MergeFrom(const LearningDataFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.LearningDataFrame)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  obstacle_.MergeFrom(from.obstacle_);
  adc_trajectory_point_.MergeFrom(from.adc_trajectory_point_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_map_name(from._internal_map_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_planning_tag()->::apollo::planning::PlanningTag::MergeFrom(from._internal_planning_tag());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_chassis()->::apollo::planning::ChassisFeature::MergeFrom(from._internal_chassis());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_localization()->::apollo::planning::LocalizationFeature::MergeFrom(from._internal_localization());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_routing()->::apollo::planning::RoutingFeature::MergeFrom(from._internal_routing());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_traffic_light_detection()->::apollo::planning::TrafficLightDetectionFeature::MergeFrom(from._internal_traffic_light_detection());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_output()->::apollo::planning::LearningOutput::MergeFrom(from._internal_output());
    }
    if (cached_has_bits & 0x00000080u) {
      message_timestamp_sec_ = from.message_timestamp_sec_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_frame_num(from._internal_frame_num());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LearningDataFrame::CopyFrom(const LearningDataFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.LearningDataFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LearningDataFrame::IsInitialized() const {
  return true;
}

void LearningDataFrame::InternalSwap(LearningDataFrame* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  obstacle_.InternalSwap(&other->obstacle_);
  adc_trajectory_point_.InternalSwap(&other->adc_trajectory_point_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &map_name_, lhs_arena,
      &other->map_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LearningDataFrame, frame_num_)
      + sizeof(LearningDataFrame::frame_num_)
      - PROTOBUF_FIELD_OFFSET(LearningDataFrame, planning_tag_)>(
          reinterpret_cast<char*>(&planning_tag_),
          reinterpret_cast<char*>(&other->planning_tag_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LearningDataFrame::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2flearning_5fdata_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2flearning_5fdata_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2flearning_5fdata_2eproto[18]);
}

// ===================================================================

class LearningData::_Internal {
 public:
};

LearningData::LearningData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  learning_data_frame_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.planning.LearningData)
}
LearningData::LearningData(const LearningData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      learning_data_frame_(from.learning_data_frame_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.LearningData)
}

void LearningData::SharedCtor() {
}

LearningData::~LearningData() {
  // @@protoc_insertion_point(destructor:apollo.planning.LearningData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LearningData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LearningData::ArenaDtor(void* object) {
  LearningData* _this = reinterpret_cast< LearningData* >(object);
  (void)_this;
}
void LearningData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LearningData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LearningData::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.LearningData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  learning_data_frame_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LearningData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .apollo.planning.LearningDataFrame learning_data_frame = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_learning_data_frame(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LearningData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.LearningData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.planning.LearningDataFrame learning_data_frame = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_learning_data_frame_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_learning_data_frame(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.LearningData)
  return target;
}

size_t LearningData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.LearningData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.planning.LearningDataFrame learning_data_frame = 1;
  total_size += 1UL * this->_internal_learning_data_frame_size();
  for (const auto& msg : this->learning_data_frame_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LearningData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LearningData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LearningData::GetClassData() const { return &_class_data_; }

void LearningData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LearningData *>(to)->MergeFrom(
      static_cast<const LearningData &>(from));
}


void LearningData::MergeFrom(const LearningData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.LearningData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  learning_data_frame_.MergeFrom(from.learning_data_frame_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LearningData::CopyFrom(const LearningData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.LearningData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LearningData::IsInitialized() const {
  return true;
}

void LearningData::InternalSwap(LearningData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  learning_data_frame_.InternalSwap(&other->learning_data_frame_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LearningData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2flearning_5fdata_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2flearning_5fdata_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2flearning_5fdata_2eproto[19]);
}

// ===================================================================

class PlanningLearningData::_Internal {
 public:
  using HasBits = decltype(std::declval<PlanningLearningData>()._has_bits_);
  static const ::apollo::common::Header& header(const PlanningLearningData* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::planning::LearningDataFrame& learning_data_frame(const PlanningLearningData* msg);
  static void set_has_learning_data_frame(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::common::Header&
PlanningLearningData::_Internal::header(const PlanningLearningData* msg) {
  return *msg->header_;
}
const ::apollo::planning::LearningDataFrame&
PlanningLearningData::_Internal::learning_data_frame(const PlanningLearningData* msg) {
  return *msg->learning_data_frame_;
}
void PlanningLearningData::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
PlanningLearningData::PlanningLearningData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.planning.PlanningLearningData)
}
PlanningLearningData::PlanningLearningData(const PlanningLearningData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::apollo::common::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_learning_data_frame()) {
    learning_data_frame_ = new ::apollo::planning::LearningDataFrame(*from.learning_data_frame_);
  } else {
    learning_data_frame_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning.PlanningLearningData)
}

void PlanningLearningData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&learning_data_frame_) -
    reinterpret_cast<char*>(&header_)) + sizeof(learning_data_frame_));
}

PlanningLearningData::~PlanningLearningData() {
  // @@protoc_insertion_point(destructor:apollo.planning.PlanningLearningData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PlanningLearningData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete learning_data_frame_;
}

void PlanningLearningData::ArenaDtor(void* object) {
  PlanningLearningData* _this = reinterpret_cast< PlanningLearningData* >(object);
  (void)_this;
}
void PlanningLearningData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlanningLearningData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PlanningLearningData::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.PlanningLearningData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(header_ != nullptr);
      header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(learning_data_frame_ != nullptr);
      learning_data_frame_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlanningLearningData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.LearningDataFrame learning_data_frame = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_learning_data_frame(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlanningLearningData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.PlanningLearningData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // optional .apollo.planning.LearningDataFrame learning_data_frame = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::learning_data_frame(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.PlanningLearningData)
  return target;
}

size_t PlanningLearningData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.PlanningLearningData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.common.Header header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional .apollo.planning.LearningDataFrame learning_data_frame = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *learning_data_frame_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlanningLearningData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PlanningLearningData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlanningLearningData::GetClassData() const { return &_class_data_; }

void PlanningLearningData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PlanningLearningData *>(to)->MergeFrom(
      static_cast<const PlanningLearningData &>(from));
}


void PlanningLearningData::MergeFrom(const PlanningLearningData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.PlanningLearningData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::apollo::common::Header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_learning_data_frame()->::apollo::planning::LearningDataFrame::MergeFrom(from._internal_learning_data_frame());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlanningLearningData::CopyFrom(const PlanningLearningData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.PlanningLearningData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanningLearningData::IsInitialized() const {
  return true;
}

void PlanningLearningData::InternalSwap(PlanningLearningData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlanningLearningData, learning_data_frame_)
      + sizeof(PlanningLearningData::learning_data_frame_)
      - PROTOBUF_FIELD_OFFSET(PlanningLearningData, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlanningLearningData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2flearning_5fdata_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2flearning_5fdata_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2flearning_5fdata_2eproto[20]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace planning
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::planning::OverlapFeature* Arena::CreateMaybeMessage< ::apollo::planning::OverlapFeature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::OverlapFeature >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::PlanningTag* Arena::CreateMaybeMessage< ::apollo::planning::PlanningTag >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::PlanningTag >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::ChassisFeature* Arena::CreateMaybeMessage< ::apollo::planning::ChassisFeature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::ChassisFeature >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::LocalizationFeature* Arena::CreateMaybeMessage< ::apollo::planning::LocalizationFeature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::LocalizationFeature >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::CommonPathPointFeature* Arena::CreateMaybeMessage< ::apollo::planning::CommonPathPointFeature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::CommonPathPointFeature >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::CommonTrajectoryPointFeature* Arena::CreateMaybeMessage< ::apollo::planning::CommonTrajectoryPointFeature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::CommonTrajectoryPointFeature >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::TrajectoryPointFeature* Arena::CreateMaybeMessage< ::apollo::planning::TrajectoryPointFeature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::TrajectoryPointFeature >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::PerceptionObstacleFeature* Arena::CreateMaybeMessage< ::apollo::planning::PerceptionObstacleFeature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::PerceptionObstacleFeature >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::ObstacleTrajectoryFeature* Arena::CreateMaybeMessage< ::apollo::planning::ObstacleTrajectoryFeature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::ObstacleTrajectoryFeature >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::PredictionTrajectoryFeature* Arena::CreateMaybeMessage< ::apollo::planning::PredictionTrajectoryFeature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::PredictionTrajectoryFeature >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::PredictionObstacleFeature* Arena::CreateMaybeMessage< ::apollo::planning::PredictionObstacleFeature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::PredictionObstacleFeature >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::ObstacleFeature* Arena::CreateMaybeMessage< ::apollo::planning::ObstacleFeature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::ObstacleFeature >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::RoutingResponseFeature* Arena::CreateMaybeMessage< ::apollo::planning::RoutingResponseFeature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::RoutingResponseFeature >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::RoutingFeature* Arena::CreateMaybeMessage< ::apollo::planning::RoutingFeature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::RoutingFeature >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::TrafficLightFeature* Arena::CreateMaybeMessage< ::apollo::planning::TrafficLightFeature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::TrafficLightFeature >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::TrafficLightDetectionFeature* Arena::CreateMaybeMessage< ::apollo::planning::TrafficLightDetectionFeature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::TrafficLightDetectionFeature >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::ADCTrajectoryPoint* Arena::CreateMaybeMessage< ::apollo::planning::ADCTrajectoryPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::ADCTrajectoryPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::LearningOutput* Arena::CreateMaybeMessage< ::apollo::planning::LearningOutput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::LearningOutput >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::LearningDataFrame* Arena::CreateMaybeMessage< ::apollo::planning::LearningDataFrame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::LearningDataFrame >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::LearningData* Arena::CreateMaybeMessage< ::apollo::planning::LearningData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::LearningData >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::PlanningLearningData* Arena::CreateMaybeMessage< ::apollo::planning::PlanningLearningData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::PlanningLearningData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
