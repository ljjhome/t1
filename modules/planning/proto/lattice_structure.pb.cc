// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/lattice_structure.proto

#include "modules/planning/proto/lattice_structure.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace apollo {
namespace planning {
constexpr StopPoint::StopPoint(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : s_(0)
  , type_(0)
{}
struct StopPointDefaultTypeInternal {
  constexpr StopPointDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StopPointDefaultTypeInternal() {}
  union {
    StopPoint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StopPointDefaultTypeInternal _StopPoint_default_instance_;
constexpr PlanningTarget::PlanningTarget(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stop_point_(nullptr)
  , cruise_speed_(0){}
struct PlanningTargetDefaultTypeInternal {
  constexpr PlanningTargetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PlanningTargetDefaultTypeInternal() {}
  union {
    PlanningTarget _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PlanningTargetDefaultTypeInternal _PlanningTarget_default_instance_;
}  // namespace planning
}  // namespace apollo
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::planning::StopPoint, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::StopPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::StopPoint, s_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::StopPoint, type_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningTarget, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningTarget, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningTarget, stop_point_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningTarget, cruise_speed_),
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::apollo::planning::StopPoint)},
  { 10, 18, -1, sizeof(::apollo::planning::PlanningTarget)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_StopPoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_PlanningTarget_default_instance_),
};

const char descriptor_table_protodef_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n.modules/planning/proto/lattice_structu"
  "re.proto\022\017apollo.planning\"g\n\tStopPoint\022\t"
  "\n\001s\030\001 \001(\001\0223\n\004type\030\002 \001(\0162\037.apollo.plannin"
  "g.StopPoint.Type:\004HARD\"\032\n\004Type\022\010\n\004HARD\020\000"
  "\022\010\n\004SOFT\020\001\"V\n\016PlanningTarget\022.\n\nstop_poi"
  "nt\030\001 \001(\0132\032.apollo.planning.StopPoint\022\024\n\014"
  "cruise_speed\030\002 \001(\001"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto = {
  false, false, 258, descriptor_table_protodef_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto, "modules/planning/proto/lattice_structure.proto", 
  &descriptor_table_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto_once, nullptr, 0, 2,
  schemas, file_default_instances, TableStruct_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto::offsets,
  file_level_metadata_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto, file_level_enum_descriptors_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto, file_level_service_descriptors_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto_getter() {
  return &descriptor_table_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto(&descriptor_table_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto);
namespace apollo {
namespace planning {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StopPoint_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto);
  return file_level_enum_descriptors_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto[0];
}
bool StopPoint_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr StopPoint_Type StopPoint::HARD;
constexpr StopPoint_Type StopPoint::SOFT;
constexpr StopPoint_Type StopPoint::Type_MIN;
constexpr StopPoint_Type StopPoint::Type_MAX;
constexpr int StopPoint::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class StopPoint::_Internal {
 public:
  using HasBits = decltype(std::declval<StopPoint>()._has_bits_);
  static void set_has_s(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

StopPoint::StopPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.planning.StopPoint)
}
StopPoint::StopPoint(const StopPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&s_, &from.s_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&s_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.StopPoint)
}

void StopPoint::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&s_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&s_)) + sizeof(type_));
}

StopPoint::~StopPoint() {
  // @@protoc_insertion_point(destructor:apollo.planning.StopPoint)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StopPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StopPoint::ArenaDtor(void* object) {
  StopPoint* _this = reinterpret_cast< StopPoint* >(object);
  (void)_this;
}
void StopPoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StopPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StopPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.StopPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&s_)) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StopPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double s = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_s(&has_bits);
          s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.StopPoint.Type type = 2 [default = HARD];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::planning::StopPoint_Type_IsValid(val))) {
            _internal_set_type(static_cast<::apollo::planning::StopPoint_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StopPoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.StopPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double s = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_s(), target);
  }

  // optional .apollo.planning.StopPoint.Type type = 2 [default = HARD];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.StopPoint)
  return target;
}

size_t StopPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.StopPoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double s = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional .apollo.planning.StopPoint.Type type = 2 [default = HARD];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StopPoint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StopPoint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StopPoint::GetClassData() const { return &_class_data_; }

void StopPoint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StopPoint *>(to)->MergeFrom(
      static_cast<const StopPoint &>(from));
}


void StopPoint::MergeFrom(const StopPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.StopPoint)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      s_ = from.s_;
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StopPoint::CopyFrom(const StopPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.StopPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopPoint::IsInitialized() const {
  return true;
}

void StopPoint::InternalSwap(StopPoint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StopPoint, type_)
      + sizeof(StopPoint::type_)
      - PROTOBUF_FIELD_OFFSET(StopPoint, s_)>(
          reinterpret_cast<char*>(&s_),
          reinterpret_cast<char*>(&other->s_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StopPoint::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto[0]);
}

// ===================================================================

class PlanningTarget::_Internal {
 public:
  using HasBits = decltype(std::declval<PlanningTarget>()._has_bits_);
  static const ::apollo::planning::StopPoint& stop_point(const PlanningTarget* msg);
  static void set_has_stop_point(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cruise_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::planning::StopPoint&
PlanningTarget::_Internal::stop_point(const PlanningTarget* msg) {
  return *msg->stop_point_;
}
PlanningTarget::PlanningTarget(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.planning.PlanningTarget)
}
PlanningTarget::PlanningTarget(const PlanningTarget& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stop_point()) {
    stop_point_ = new ::apollo::planning::StopPoint(*from.stop_point_);
  } else {
    stop_point_ = nullptr;
  }
  cruise_speed_ = from.cruise_speed_;
  // @@protoc_insertion_point(copy_constructor:apollo.planning.PlanningTarget)
}

void PlanningTarget::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&stop_point_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cruise_speed_) -
    reinterpret_cast<char*>(&stop_point_)) + sizeof(cruise_speed_));
}

PlanningTarget::~PlanningTarget() {
  // @@protoc_insertion_point(destructor:apollo.planning.PlanningTarget)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PlanningTarget::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete stop_point_;
}

void PlanningTarget::ArenaDtor(void* object) {
  PlanningTarget* _this = reinterpret_cast< PlanningTarget* >(object);
  (void)_this;
}
void PlanningTarget::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlanningTarget::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PlanningTarget::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.PlanningTarget)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(stop_point_ != nullptr);
    stop_point_->Clear();
  }
  cruise_speed_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlanningTarget::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.planning.StopPoint stop_point = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stop_point(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double cruise_speed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_cruise_speed(&has_bits);
          cruise_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlanningTarget::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.PlanningTarget)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning.StopPoint stop_point = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::stop_point(this), target, stream);
  }

  // optional double cruise_speed = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_cruise_speed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.PlanningTarget)
  return target;
}

size_t PlanningTarget::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.PlanningTarget)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.planning.StopPoint stop_point = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stop_point_);
    }

    // optional double cruise_speed = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlanningTarget::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PlanningTarget::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlanningTarget::GetClassData() const { return &_class_data_; }

void PlanningTarget::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PlanningTarget *>(to)->MergeFrom(
      static_cast<const PlanningTarget &>(from));
}


void PlanningTarget::MergeFrom(const PlanningTarget& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.PlanningTarget)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_stop_point()->::apollo::planning::StopPoint::MergeFrom(from._internal_stop_point());
    }
    if (cached_has_bits & 0x00000002u) {
      cruise_speed_ = from.cruise_speed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlanningTarget::CopyFrom(const PlanningTarget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.PlanningTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanningTarget::IsInitialized() const {
  return true;
}

void PlanningTarget::InternalSwap(PlanningTarget* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlanningTarget, cruise_speed_)
      + sizeof(PlanningTarget::cruise_speed_)
      - PROTOBUF_FIELD_OFFSET(PlanningTarget, stop_point_)>(
          reinterpret_cast<char*>(&stop_point_),
          reinterpret_cast<char*>(&other->stop_point_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlanningTarget::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace planning
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::planning::StopPoint* Arena::CreateMaybeMessage< ::apollo::planning::StopPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::StopPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::PlanningTarget* Arena::CreateMaybeMessage< ::apollo::planning::PlanningTarget >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::PlanningTarget >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
