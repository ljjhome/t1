// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/task_config.proto

#include "modules/planning/proto/task_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace apollo {
namespace planning {
constexpr CreepDeciderConfig::CreepDeciderConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stop_distance_(0.5)
  , speed_limit_(1)
  , max_valid_stop_distance_(0.3)
  , min_boundary_t_(6)
  , ignore_max_st_min_t_(0.1)
  , ignore_min_st_min_s_(15){}
struct CreepDeciderConfigDefaultTypeInternal {
  constexpr CreepDeciderConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreepDeciderConfigDefaultTypeInternal() {}
  union {
    CreepDeciderConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreepDeciderConfigDefaultTypeInternal _CreepDeciderConfig_default_instance_;
constexpr LaneChangeDeciderConfig::LaneChangeDeciderConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : enable_lane_change_urgency_check_(false)
  , enable_prioritize_change_lane_(false)
  , enable_remove_change_lane_(false)
  , reckless_change_lane_(false)
  , change_lane_success_freeze_time_(1.5)
  , change_lane_fail_freeze_time_(1){}
struct LaneChangeDeciderConfigDefaultTypeInternal {
  constexpr LaneChangeDeciderConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LaneChangeDeciderConfigDefaultTypeInternal() {}
  union {
    LaneChangeDeciderConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LaneChangeDeciderConfigDefaultTypeInternal _LaneChangeDeciderConfig_default_instance_;
constexpr LearningModelInferenceTaskConfig::LearningModelInferenceTaskConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cpu_model_file_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , gpu_model_file_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , allow_empty_learning_based_data_(false)
  , allow_empty_output_trajectory_(false)
  , model_type_(1)

  , use_cuda_(true)
  , trajectory_delta_t_(0.2){}
struct LearningModelInferenceTaskConfigDefaultTypeInternal {
  constexpr LearningModelInferenceTaskConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LearningModelInferenceTaskConfigDefaultTypeInternal() {}
  union {
    LearningModelInferenceTaskConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LearningModelInferenceTaskConfigDefaultTypeInternal _LearningModelInferenceTaskConfig_default_instance_;
constexpr LearningModelInferenceTrajectoryTaskConfig::LearningModelInferenceTrajectoryTaskConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : min_adc_future_trajectory_time_length_(2){}
struct LearningModelInferenceTrajectoryTaskConfigDefaultTypeInternal {
  constexpr LearningModelInferenceTrajectoryTaskConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LearningModelInferenceTrajectoryTaskConfigDefaultTypeInternal() {}
  union {
    LearningModelInferenceTrajectoryTaskConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LearningModelInferenceTrajectoryTaskConfigDefaultTypeInternal _LearningModelInferenceTrajectoryTaskConfig_default_instance_;
constexpr NaviObstacleDeciderConfig::NaviObstacleDeciderConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : min_nudge_distance_(0.2)
  , max_nudge_distance_(1.2)
  , max_allow_nudge_speed_(16.667)
  , safe_distance_(0.2)
  , nudge_allow_tolerance_(0.05)
  , judge_dis_coeff_(2)
  , basis_dis_value_(30)
  , cycles_number_(3u)
  , max_keep_nudge_cycles_(100u)
  , lateral_velocity_value_(0.5)
  , speed_decider_detect_range_(1){}
struct NaviObstacleDeciderConfigDefaultTypeInternal {
  constexpr NaviObstacleDeciderConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NaviObstacleDeciderConfigDefaultTypeInternal() {}
  union {
    NaviObstacleDeciderConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NaviObstacleDeciderConfigDefaultTypeInternal _NaviObstacleDeciderConfig_default_instance_;
constexpr NaviPathDeciderConfig::NaviPathDeciderConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : move_dest_lane_config_talbe_(nullptr)
  , max_kappa_threshold_(0)
  , kappa_move_dest_lane_compensation_(0)
  , start_plan_point_from_(0u)
  , min_look_forward_time_(2u)
  , min_path_length_(5)
  , max_keep_lane_distance_(0.8)
  , max_keep_lane_shift_y_(20)
  , min_keep_lane_offset_(15)
  , keep_lane_shift_compensation_(0.01)
  , move_dest_lane_compensation_(0.35){}
struct NaviPathDeciderConfigDefaultTypeInternal {
  constexpr NaviPathDeciderConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NaviPathDeciderConfigDefaultTypeInternal() {}
  union {
    NaviPathDeciderConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NaviPathDeciderConfigDefaultTypeInternal _NaviPathDeciderConfig_default_instance_;
constexpr MoveDestLaneConfigTable::MoveDestLaneConfigTable(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : lateral_shift_(){}
struct MoveDestLaneConfigTableDefaultTypeInternal {
  constexpr MoveDestLaneConfigTableDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MoveDestLaneConfigTableDefaultTypeInternal() {}
  union {
    MoveDestLaneConfigTable _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MoveDestLaneConfigTableDefaultTypeInternal _MoveDestLaneConfigTable_default_instance_;
constexpr ShiftConfig::ShiftConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : max_speed_(4.16)
  , max_move_dest_lane_shift_y_(0.4){}
struct ShiftConfigDefaultTypeInternal {
  constexpr ShiftConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ShiftConfigDefaultTypeInternal() {}
  union {
    ShiftConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ShiftConfigDefaultTypeInternal _ShiftConfig_default_instance_;
constexpr NaviSpeedDeciderConfig::NaviSpeedDeciderConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : kappa_preview_(0)
  , kappa_threshold_(0)
  , enable_safe_path_(true)
  , enable_planning_start_point_(true)
  , enable_accel_auto_compensation_(true)
  , preferred_accel_(2)
  , preferred_decel_(2)
  , preferred_jerk_(2)
  , max_accel_(4)
  , max_decel_(5)
  , obstacle_buffer_(0.5)
  , safe_distance_base_(2)
  , safe_distance_ratio_(1)
  , following_accel_ratio_(0.5)
  , soft_centric_accel_limit_(1.2)
  , hard_centric_accel_limit_(1.5)
  , hard_speed_limit_(100)
  , hard_accel_limit_(10){}
struct NaviSpeedDeciderConfigDefaultTypeInternal {
  constexpr NaviSpeedDeciderConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NaviSpeedDeciderConfigDefaultTypeInternal() {}
  union {
    NaviSpeedDeciderConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NaviSpeedDeciderConfigDefaultTypeInternal _NaviSpeedDeciderConfig_default_instance_;
constexpr PathAssessmentDeciderConfig::PathAssessmentDeciderConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct PathAssessmentDeciderConfigDefaultTypeInternal {
  constexpr PathAssessmentDeciderConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PathAssessmentDeciderConfigDefaultTypeInternal() {}
  union {
    PathAssessmentDeciderConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PathAssessmentDeciderConfigDefaultTypeInternal _PathAssessmentDeciderConfig_default_instance_;
constexpr PathBoundsDeciderConfig::PathBoundsDeciderConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : is_lane_borrowing_(false)
  , is_pull_over_(false)
  , is_extend_lane_bounds_to_include_adc_(true)
  , pull_over_destination_to_adc_buffer_(25)
  , pull_over_destination_to_pathend_buffer_(10)
  , pull_over_road_edge_buffer_(0.15)
  , pull_over_approach_lon_distance_adjust_factor_(1.5)
  , adc_buffer_coeff_(1){}
struct PathBoundsDeciderConfigDefaultTypeInternal {
  constexpr PathBoundsDeciderConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PathBoundsDeciderConfigDefaultTypeInternal() {}
  union {
    PathBoundsDeciderConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PathBoundsDeciderConfigDefaultTypeInternal _PathBoundsDeciderConfig_default_instance_;
constexpr PathDeciderConfig::PathDeciderConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : static_obstacle_buffer_(0.3){}
struct PathDeciderConfigDefaultTypeInternal {
  constexpr PathDeciderConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PathDeciderConfigDefaultTypeInternal() {}
  union {
    PathDeciderConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PathDeciderConfigDefaultTypeInternal _PathDeciderConfig_default_instance_;
constexpr PathLaneBorrowDeciderConfig::PathLaneBorrowDeciderConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : allow_lane_borrowing_(false){}
struct PathLaneBorrowDeciderConfigDefaultTypeInternal {
  constexpr PathLaneBorrowDeciderConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PathLaneBorrowDeciderConfigDefaultTypeInternal() {}
  union {
    PathLaneBorrowDeciderConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PathLaneBorrowDeciderConfigDefaultTypeInternal _PathLaneBorrowDeciderConfig_default_instance_;
constexpr PathReferenceDeciderConfig::PathReferenceDeciderConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : weight_x_ref_path_reference_(0)
  , min_path_reference_length_(20u){}
struct PathReferenceDeciderConfigDefaultTypeInternal {
  constexpr PathReferenceDeciderConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PathReferenceDeciderConfigDefaultTypeInternal() {}
  union {
    PathReferenceDeciderConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PathReferenceDeciderConfigDefaultTypeInternal _PathReferenceDeciderConfig_default_instance_;
constexpr PathReuseDeciderConfig::PathReuseDeciderConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reuse_path_(false){}
struct PathReuseDeciderConfigDefaultTypeInternal {
  constexpr PathReuseDeciderConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PathReuseDeciderConfigDefaultTypeInternal() {}
  union {
    PathReuseDeciderConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PathReuseDeciderConfigDefaultTypeInternal _PathReuseDeciderConfig_default_instance_;
constexpr PiecewiseJerkNonlinearSpeedOptimizerConfig::PiecewiseJerkNonlinearSpeedOptimizerConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : use_warm_start_(true)
  , acc_weight_(500)
  , jerk_weight_(100)
  , lat_acc_weight_(500)
  , s_potential_weight_(10)
  , ref_v_weight_(10)
  , ref_s_weight_(10)
  , end_s_weight_(10)
  , end_v_weight_(10)
  , end_a_weight_(10)
  , soft_s_bound_weight_(10){}
struct PiecewiseJerkNonlinearSpeedOptimizerConfigDefaultTypeInternal {
  constexpr PiecewiseJerkNonlinearSpeedOptimizerConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PiecewiseJerkNonlinearSpeedOptimizerConfigDefaultTypeInternal() {}
  union {
    PiecewiseJerkNonlinearSpeedOptimizerConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PiecewiseJerkNonlinearSpeedOptimizerConfigDefaultTypeInternal _PiecewiseJerkNonlinearSpeedOptimizerConfig_default_instance_;
constexpr PiecewiseJerkPathOptimizerConfig::PiecewiseJerkPathOptimizerConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : default_path_config_(nullptr)
  , lane_change_path_config_(nullptr)
  , path_reference_l_weight_(0){}
struct PiecewiseJerkPathOptimizerConfigDefaultTypeInternal {
  constexpr PiecewiseJerkPathOptimizerConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PiecewiseJerkPathOptimizerConfigDefaultTypeInternal() {}
  union {
    PiecewiseJerkPathOptimizerConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PiecewiseJerkPathOptimizerConfigDefaultTypeInternal _PiecewiseJerkPathOptimizerConfig_default_instance_;
constexpr PiecewiseJerkPathWeights::PiecewiseJerkPathWeights(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : l_weight_(1)
  , dl_weight_(100)
  , ddl_weight_(1000)
  , dddl_weight_(10000){}
struct PiecewiseJerkPathWeightsDefaultTypeInternal {
  constexpr PiecewiseJerkPathWeightsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PiecewiseJerkPathWeightsDefaultTypeInternal() {}
  union {
    PiecewiseJerkPathWeights _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PiecewiseJerkPathWeightsDefaultTypeInternal _PiecewiseJerkPathWeights_default_instance_;
constexpr PiecewiseJerkSpeedOptimizerConfig::PiecewiseJerkSpeedOptimizerConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : acc_weight_(1)
  , jerk_weight_(10)
  , kappa_penalty_weight_(1000)
  , ref_s_weight_(10)
  , ref_v_weight_(10){}
struct PiecewiseJerkSpeedOptimizerConfigDefaultTypeInternal {
  constexpr PiecewiseJerkSpeedOptimizerConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PiecewiseJerkSpeedOptimizerConfigDefaultTypeInternal() {}
  union {
    PiecewiseJerkSpeedOptimizerConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PiecewiseJerkSpeedOptimizerConfigDefaultTypeInternal _PiecewiseJerkSpeedOptimizerConfig_default_instance_;
constexpr RuleBasedStopDeciderConfig::RuleBasedStopDeciderConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : max_adc_stop_speed_(0.3)
  , max_valid_stop_distance_(0.5)
  , search_beam_length_(5)
  , search_beam_radius_intensity_(0.08)
  , search_range_(3.14)
  , is_block_angle_threshold_(1.57)
  , approach_distance_for_lane_change_(80)
  , urgent_distance_for_lane_change_(50){}
struct RuleBasedStopDeciderConfigDefaultTypeInternal {
  constexpr RuleBasedStopDeciderConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RuleBasedStopDeciderConfigDefaultTypeInternal() {}
  union {
    RuleBasedStopDeciderConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RuleBasedStopDeciderConfigDefaultTypeInternal _RuleBasedStopDeciderConfig_default_instance_;
constexpr SpeedBoundsDeciderConfig::SpeedBoundsDeciderConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : static_obs_nudge_speed_ratio_(0)
  , dynamic_obs_nudge_speed_ratio_(0)
  , total_time_(7)
  , boundary_buffer_(0.1)
  , max_centric_acceleration_limit_(2)
  , minimal_kappa_(1e-05)
  , point_extension_(1)
  , lowest_speed_(2.5)
  , collision_safety_range_(1){}
struct SpeedBoundsDeciderConfigDefaultTypeInternal {
  constexpr SpeedBoundsDeciderConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SpeedBoundsDeciderConfigDefaultTypeInternal() {}
  union {
    SpeedBoundsDeciderConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SpeedBoundsDeciderConfigDefaultTypeInternal _SpeedBoundsDeciderConfig_default_instance_;
constexpr SpeedHeuristicOptimizerConfig::SpeedHeuristicOptimizerConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : default_speed_config_(nullptr)
  , lane_change_speed_config_(nullptr){}
struct SpeedHeuristicOptimizerConfigDefaultTypeInternal {
  constexpr SpeedHeuristicOptimizerConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SpeedHeuristicOptimizerConfigDefaultTypeInternal() {}
  union {
    SpeedHeuristicOptimizerConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SpeedHeuristicOptimizerConfigDefaultTypeInternal _SpeedHeuristicOptimizerConfig_default_instance_;
constexpr DpStSpeedOptimizerConfig::DpStSpeedOptimizerConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : speed_weight_(0)
  , reference_weight_(0)
  , is_lane_changing_(false)
  , dense_dimension_s_(41)
  , unit_t_(1)
  , dense_unit_s_(0.5)
  , sparse_unit_s_(1)
  , accel_weight_(10)
  , jerk_weight_(10)
  , obstacle_weight_(1)
  , go_down_buffer_(5)
  , go_up_buffer_(5)
  , default_obstacle_cost_(10000000000)
  , default_speed_cost_(1)
  , exceed_speed_penalty_(10)
  , low_speed_penalty_(2.5)
  , reference_speed_penalty_(1)
  , keep_clear_low_speed_penalty_(10)
  , accel_penalty_(2)
  , decel_penalty_(2)
  , positive_jerk_coeff_(1)
  , negative_jerk_coeff_(300)
  , max_acceleration_(4.5)
  , max_deceleration_(-4.5)
  , safe_time_buffer_(3)
  , safe_distance_(20)
  , spatial_potential_penalty_(1){}
struct DpStSpeedOptimizerConfigDefaultTypeInternal {
  constexpr DpStSpeedOptimizerConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DpStSpeedOptimizerConfigDefaultTypeInternal() {}
  union {
    DpStSpeedOptimizerConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DpStSpeedOptimizerConfigDefaultTypeInternal _DpStSpeedOptimizerConfig_default_instance_;
constexpr STBoundsDeciderConfig::STBoundsDeciderConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : total_time_(7){}
struct STBoundsDeciderConfigDefaultTypeInternal {
  constexpr STBoundsDeciderConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~STBoundsDeciderConfigDefaultTypeInternal() {}
  union {
    STBoundsDeciderConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT STBoundsDeciderConfigDefaultTypeInternal _STBoundsDeciderConfig_default_instance_;
}  // namespace planning
}  // namespace apollo
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto[24];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::planning::CreepDeciderConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::CreepDeciderConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::CreepDeciderConfig, stop_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::CreepDeciderConfig, speed_limit_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::CreepDeciderConfig, max_valid_stop_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::CreepDeciderConfig, min_boundary_t_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::CreepDeciderConfig, ignore_max_st_min_t_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::CreepDeciderConfig, ignore_min_st_min_s_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LaneChangeDeciderConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LaneChangeDeciderConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LaneChangeDeciderConfig, enable_lane_change_urgency_check_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LaneChangeDeciderConfig, enable_prioritize_change_lane_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LaneChangeDeciderConfig, enable_remove_change_lane_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LaneChangeDeciderConfig, reckless_change_lane_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LaneChangeDeciderConfig, change_lane_success_freeze_time_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LaneChangeDeciderConfig, change_lane_fail_freeze_time_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LearningModelInferenceTaskConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LearningModelInferenceTaskConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LearningModelInferenceTaskConfig, model_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LearningModelInferenceTaskConfig, cpu_model_file_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LearningModelInferenceTaskConfig, gpu_model_file_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LearningModelInferenceTaskConfig, use_cuda_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LearningModelInferenceTaskConfig, trajectory_delta_t_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LearningModelInferenceTaskConfig, allow_empty_learning_based_data_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LearningModelInferenceTaskConfig, allow_empty_output_trajectory_),
  4,
  0,
  1,
  5,
  6,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LearningModelInferenceTrajectoryTaskConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LearningModelInferenceTrajectoryTaskConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LearningModelInferenceTrajectoryTaskConfig, min_adc_future_trajectory_time_length_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviObstacleDeciderConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviObstacleDeciderConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviObstacleDeciderConfig, min_nudge_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviObstacleDeciderConfig, max_nudge_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviObstacleDeciderConfig, max_allow_nudge_speed_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviObstacleDeciderConfig, safe_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviObstacleDeciderConfig, nudge_allow_tolerance_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviObstacleDeciderConfig, cycles_number_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviObstacleDeciderConfig, judge_dis_coeff_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviObstacleDeciderConfig, basis_dis_value_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviObstacleDeciderConfig, lateral_velocity_value_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviObstacleDeciderConfig, speed_decider_detect_range_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviObstacleDeciderConfig, max_keep_nudge_cycles_),
  0,
  1,
  2,
  3,
  4,
  7,
  5,
  6,
  9,
  10,
  8,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviPathDeciderConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviPathDeciderConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviPathDeciderConfig, min_path_length_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviPathDeciderConfig, min_look_forward_time_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviPathDeciderConfig, max_keep_lane_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviPathDeciderConfig, max_keep_lane_shift_y_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviPathDeciderConfig, min_keep_lane_offset_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviPathDeciderConfig, keep_lane_shift_compensation_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviPathDeciderConfig, move_dest_lane_config_talbe_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviPathDeciderConfig, move_dest_lane_compensation_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviPathDeciderConfig, max_kappa_threshold_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviPathDeciderConfig, kappa_move_dest_lane_compensation_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviPathDeciderConfig, start_plan_point_from_),
  5,
  4,
  6,
  7,
  8,
  9,
  0,
  10,
  1,
  2,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::MoveDestLaneConfigTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::MoveDestLaneConfigTable, lateral_shift_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ShiftConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ShiftConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ShiftConfig, max_speed_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ShiftConfig, max_move_dest_lane_shift_y_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviSpeedDeciderConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviSpeedDeciderConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviSpeedDeciderConfig, preferred_accel_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviSpeedDeciderConfig, preferred_decel_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviSpeedDeciderConfig, preferred_jerk_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviSpeedDeciderConfig, max_accel_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviSpeedDeciderConfig, max_decel_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviSpeedDeciderConfig, obstacle_buffer_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviSpeedDeciderConfig, safe_distance_base_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviSpeedDeciderConfig, safe_distance_ratio_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviSpeedDeciderConfig, following_accel_ratio_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviSpeedDeciderConfig, soft_centric_accel_limit_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviSpeedDeciderConfig, hard_centric_accel_limit_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviSpeedDeciderConfig, hard_speed_limit_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviSpeedDeciderConfig, hard_accel_limit_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviSpeedDeciderConfig, enable_safe_path_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviSpeedDeciderConfig, enable_planning_start_point_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviSpeedDeciderConfig, enable_accel_auto_compensation_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviSpeedDeciderConfig, kappa_preview_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviSpeedDeciderConfig, kappa_threshold_),
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  2,
  3,
  4,
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PathAssessmentDeciderConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PathBoundsDeciderConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PathBoundsDeciderConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PathBoundsDeciderConfig, is_lane_borrowing_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PathBoundsDeciderConfig, is_pull_over_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PathBoundsDeciderConfig, pull_over_destination_to_adc_buffer_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PathBoundsDeciderConfig, pull_over_destination_to_pathend_buffer_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PathBoundsDeciderConfig, pull_over_road_edge_buffer_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PathBoundsDeciderConfig, pull_over_approach_lon_distance_adjust_factor_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PathBoundsDeciderConfig, adc_buffer_coeff_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PathBoundsDeciderConfig, is_extend_lane_bounds_to_include_adc_),
  0,
  1,
  3,
  4,
  5,
  6,
  7,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PathDeciderConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PathDeciderConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PathDeciderConfig, static_obstacle_buffer_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PathLaneBorrowDeciderConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PathLaneBorrowDeciderConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PathLaneBorrowDeciderConfig, allow_lane_borrowing_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PathReferenceDeciderConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PathReferenceDeciderConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PathReferenceDeciderConfig, min_path_reference_length_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PathReferenceDeciderConfig, weight_x_ref_path_reference_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PathReuseDeciderConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PathReuseDeciderConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PathReuseDeciderConfig, reuse_path_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PiecewiseJerkNonlinearSpeedOptimizerConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PiecewiseJerkNonlinearSpeedOptimizerConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PiecewiseJerkNonlinearSpeedOptimizerConfig, acc_weight_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PiecewiseJerkNonlinearSpeedOptimizerConfig, jerk_weight_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PiecewiseJerkNonlinearSpeedOptimizerConfig, lat_acc_weight_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PiecewiseJerkNonlinearSpeedOptimizerConfig, s_potential_weight_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PiecewiseJerkNonlinearSpeedOptimizerConfig, ref_v_weight_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PiecewiseJerkNonlinearSpeedOptimizerConfig, ref_s_weight_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PiecewiseJerkNonlinearSpeedOptimizerConfig, end_s_weight_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PiecewiseJerkNonlinearSpeedOptimizerConfig, end_v_weight_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PiecewiseJerkNonlinearSpeedOptimizerConfig, end_a_weight_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PiecewiseJerkNonlinearSpeedOptimizerConfig, soft_s_bound_weight_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PiecewiseJerkNonlinearSpeedOptimizerConfig, use_warm_start_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PiecewiseJerkPathOptimizerConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PiecewiseJerkPathOptimizerConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PiecewiseJerkPathOptimizerConfig, default_path_config_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PiecewiseJerkPathOptimizerConfig, lane_change_path_config_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PiecewiseJerkPathOptimizerConfig, path_reference_l_weight_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PiecewiseJerkPathWeights, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PiecewiseJerkPathWeights, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PiecewiseJerkPathWeights, l_weight_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PiecewiseJerkPathWeights, dl_weight_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PiecewiseJerkPathWeights, ddl_weight_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PiecewiseJerkPathWeights, dddl_weight_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PiecewiseJerkSpeedOptimizerConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PiecewiseJerkSpeedOptimizerConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PiecewiseJerkSpeedOptimizerConfig, acc_weight_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PiecewiseJerkSpeedOptimizerConfig, jerk_weight_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PiecewiseJerkSpeedOptimizerConfig, kappa_penalty_weight_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PiecewiseJerkSpeedOptimizerConfig, ref_s_weight_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PiecewiseJerkSpeedOptimizerConfig, ref_v_weight_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::RuleBasedStopDeciderConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::RuleBasedStopDeciderConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::RuleBasedStopDeciderConfig, max_adc_stop_speed_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::RuleBasedStopDeciderConfig, max_valid_stop_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::RuleBasedStopDeciderConfig, search_beam_length_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::RuleBasedStopDeciderConfig, search_beam_radius_intensity_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::RuleBasedStopDeciderConfig, search_range_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::RuleBasedStopDeciderConfig, is_block_angle_threshold_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::RuleBasedStopDeciderConfig, approach_distance_for_lane_change_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::RuleBasedStopDeciderConfig, urgent_distance_for_lane_change_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::SpeedBoundsDeciderConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::SpeedBoundsDeciderConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::SpeedBoundsDeciderConfig, total_time_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::SpeedBoundsDeciderConfig, boundary_buffer_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::SpeedBoundsDeciderConfig, max_centric_acceleration_limit_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::SpeedBoundsDeciderConfig, minimal_kappa_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::SpeedBoundsDeciderConfig, point_extension_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::SpeedBoundsDeciderConfig, lowest_speed_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::SpeedBoundsDeciderConfig, collision_safety_range_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::SpeedBoundsDeciderConfig, static_obs_nudge_speed_ratio_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::SpeedBoundsDeciderConfig, dynamic_obs_nudge_speed_ratio_),
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::SpeedHeuristicOptimizerConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::SpeedHeuristicOptimizerConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::SpeedHeuristicOptimizerConfig, default_speed_config_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::SpeedHeuristicOptimizerConfig, lane_change_speed_config_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DpStSpeedOptimizerConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DpStSpeedOptimizerConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DpStSpeedOptimizerConfig, unit_t_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DpStSpeedOptimizerConfig, dense_dimension_s_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DpStSpeedOptimizerConfig, dense_unit_s_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DpStSpeedOptimizerConfig, sparse_unit_s_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DpStSpeedOptimizerConfig, speed_weight_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DpStSpeedOptimizerConfig, accel_weight_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DpStSpeedOptimizerConfig, jerk_weight_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DpStSpeedOptimizerConfig, obstacle_weight_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DpStSpeedOptimizerConfig, reference_weight_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DpStSpeedOptimizerConfig, go_down_buffer_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DpStSpeedOptimizerConfig, go_up_buffer_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DpStSpeedOptimizerConfig, default_obstacle_cost_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DpStSpeedOptimizerConfig, default_speed_cost_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DpStSpeedOptimizerConfig, exceed_speed_penalty_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DpStSpeedOptimizerConfig, low_speed_penalty_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DpStSpeedOptimizerConfig, reference_speed_penalty_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DpStSpeedOptimizerConfig, keep_clear_low_speed_penalty_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DpStSpeedOptimizerConfig, accel_penalty_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DpStSpeedOptimizerConfig, decel_penalty_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DpStSpeedOptimizerConfig, positive_jerk_coeff_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DpStSpeedOptimizerConfig, negative_jerk_coeff_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DpStSpeedOptimizerConfig, max_acceleration_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DpStSpeedOptimizerConfig, max_deceleration_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DpStSpeedOptimizerConfig, safe_time_buffer_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DpStSpeedOptimizerConfig, safe_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DpStSpeedOptimizerConfig, spatial_potential_penalty_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DpStSpeedOptimizerConfig, is_lane_changing_),
  4,
  3,
  5,
  6,
  0,
  7,
  8,
  9,
  1,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::STBoundsDeciderConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::STBoundsDeciderConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::STBoundsDeciderConfig, total_time_),
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, -1, sizeof(::apollo::planning::CreepDeciderConfig)},
  { 18, 30, -1, sizeof(::apollo::planning::LaneChangeDeciderConfig)},
  { 36, 49, -1, sizeof(::apollo::planning::LearningModelInferenceTaskConfig)},
  { 56, 63, -1, sizeof(::apollo::planning::LearningModelInferenceTrajectoryTaskConfig)},
  { 64, 81, -1, sizeof(::apollo::planning::NaviObstacleDeciderConfig)},
  { 92, 109, -1, sizeof(::apollo::planning::NaviPathDeciderConfig)},
  { 120, -1, -1, sizeof(::apollo::planning::MoveDestLaneConfigTable)},
  { 127, 135, -1, sizeof(::apollo::planning::ShiftConfig)},
  { 137, 161, -1, sizeof(::apollo::planning::NaviSpeedDeciderConfig)},
  { 179, -1, -1, sizeof(::apollo::planning::PathAssessmentDeciderConfig)},
  { 185, 199, -1, sizeof(::apollo::planning::PathBoundsDeciderConfig)},
  { 207, 214, -1, sizeof(::apollo::planning::PathDeciderConfig)},
  { 215, 222, -1, sizeof(::apollo::planning::PathLaneBorrowDeciderConfig)},
  { 223, 231, -1, sizeof(::apollo::planning::PathReferenceDeciderConfig)},
  { 233, 240, -1, sizeof(::apollo::planning::PathReuseDeciderConfig)},
  { 241, 258, -1, sizeof(::apollo::planning::PiecewiseJerkNonlinearSpeedOptimizerConfig)},
  { 269, 278, -1, sizeof(::apollo::planning::PiecewiseJerkPathOptimizerConfig)},
  { 281, 291, -1, sizeof(::apollo::planning::PiecewiseJerkPathWeights)},
  { 295, 306, -1, sizeof(::apollo::planning::PiecewiseJerkSpeedOptimizerConfig)},
  { 311, 325, -1, sizeof(::apollo::planning::RuleBasedStopDeciderConfig)},
  { 333, 348, -1, sizeof(::apollo::planning::SpeedBoundsDeciderConfig)},
  { 357, 365, -1, sizeof(::apollo::planning::SpeedHeuristicOptimizerConfig)},
  { 367, 400, -1, sizeof(::apollo::planning::DpStSpeedOptimizerConfig)},
  { 427, 434, -1, sizeof(::apollo::planning::STBoundsDeciderConfig)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_CreepDeciderConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_LaneChangeDeciderConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_LearningModelInferenceTaskConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_LearningModelInferenceTrajectoryTaskConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_NaviObstacleDeciderConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_NaviPathDeciderConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_MoveDestLaneConfigTable_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_ShiftConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_NaviSpeedDeciderConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_PathAssessmentDeciderConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_PathBoundsDeciderConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_PathDeciderConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_PathLaneBorrowDeciderConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_PathReferenceDeciderConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_PathReuseDeciderConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_PiecewiseJerkNonlinearSpeedOptimizerConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_PiecewiseJerkPathOptimizerConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_PiecewiseJerkPathWeights_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_PiecewiseJerkSpeedOptimizerConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_RuleBasedStopDeciderConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_SpeedBoundsDeciderConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_SpeedHeuristicOptimizerConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_DpStSpeedOptimizerConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_STBoundsDeciderConfig_default_instance_),
};

const char descriptor_table_protodef_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n(modules/planning/proto/task_config.pro"
  "to\022\017apollo.planning\"\314\001\n\022CreepDeciderConf"
  "ig\022\032\n\rstop_distance\030\001 \001(\001:\0030.5\022\026\n\013speed_"
  "limit\030\002 \001(\001:\0011\022$\n\027max_valid_stop_distanc"
  "e\030\003 \001(\001:\0030.3\022\031\n\016min_boundary_t\030\004 \001(\001:\0016\022"
  " \n\023ignore_max_st_min_t\030\005 \001(\001:\0030.1\022\037\n\023ign"
  "ore_min_st_min_s\030\006 \001(\001:\00215\"\227\002\n\027LaneChang"
  "eDeciderConfig\022(\n enable_lane_change_urg"
  "ency_check\030\001 \001(\010\022,\n\035enable_prioritize_ch"
  "ange_lane\030\002 \001(\010:\005false\022(\n\031enable_remove_"
  "change_lane\030\003 \001(\010:\005false\022#\n\024reckless_cha"
  "nge_lane\030\004 \001(\010:\005false\022,\n\037change_lane_suc"
  "cess_freeze_time\030\005 \001(\001:\0031.5\022\'\n\034change_la"
  "ne_fail_freeze_time\030\006 \001(\001:\0011\"\336\002\n Learnin"
  "gModelInferenceTaskConfig\022O\n\nmodel_type\030"
  "\001 \001(\0162;.apollo.planning.LearningModelInf"
  "erenceTaskConfig.ModelType\022\026\n\016cpu_model_"
  "file\030\002 \001(\t\022\026\n\016gpu_model_file\030\003 \001(\t\022\026\n\010us"
  "e_cuda\030\004 \001(\010:\004true\022\037\n\022trajectory_delta_t"
  "\030\005 \001(\001:\0030.2\022.\n\037allow_empty_learning_base"
  "d_data\030\006 \001(\010:\005false\022,\n\035allow_empty_outpu"
  "t_trajectory\030\007 \001(\010:\005false\"\"\n\tModelType\022\007"
  "\n\003CNN\020\001\022\014\n\010CNN_LSTM\020\002\"^\n*LearningModelIn"
  "ferenceTrajectoryTaskConfig\0220\n%min_adc_f"
  "uture_trajectory_time_length\030\001 \001(\001:\0012\"\210\003"
  "\n\031NaviObstacleDeciderConfig\022\037\n\022min_nudge"
  "_distance\030\001 \001(\001:\0030.2\022\037\n\022max_nudge_distan"
  "ce\030\002 \001(\001:\0031.2\022%\n\025max_allow_nudge_speed\030\003"
  " \001(\001:\00616.667\022\032\n\rsafe_distance\030\004 \001(\001:\0030.2"
  "\022#\n\025nudge_allow_tolerance\030\005 \001(\001:\0040.05\022\030\n"
  "\rcycles_number\030\006 \001(\r:\0013\022\032\n\017judge_dis_coe"
  "ff\030\007 \001(\001:\0012\022\033\n\017basis_dis_value\030\010 \001(\001:\00230"
  "\022#\n\026lateral_velocity_value\030\t \001(\001:\0030.5\022%\n"
  "\032speed_decider_detect_range\030\n \001(\001:\0011\022\"\n\025"
  "max_keep_nudge_cycles\030\013 \001(\r:\003100\"\325\003\n\025Nav"
  "iPathDeciderConfig\022\032\n\017min_path_length\030\001 "
  "\001(\001:\0015\022 \n\025min_look_forward_time\030\002 \001(\r:\0012"
  "\022#\n\026max_keep_lane_distance\030\003 \001(\001:\0030.8\022!\n"
  "\025max_keep_lane_shift_y\030\004 \001(\001:\00220\022 \n\024min_"
  "keep_lane_offset\030\005 \001(\001:\00215\022*\n\034keep_lane_"
  "shift_compensation\030\006 \001(\001:\0040.01\022M\n\033move_d"
  "est_lane_config_talbe\030\007 \001(\0132(.apollo.pla"
  "nning.MoveDestLaneConfigTable\022)\n\033move_de"
  "st_lane_compensation\030\010 \001(\001:\0040.35\022\036\n\023max_"
  "kappa_threshold\030\t \001(\001:\0010\022,\n!kappa_move_d"
  "est_lane_compensation\030\n \001(\001:\0010\022 \n\025start_"
  "plan_point_from\030\013 \001(\r:\0010\"N\n\027MoveDestLane"
  "ConfigTable\0223\n\rlateral_shift\030\001 \003(\0132\034.apo"
  "llo.planning.ShiftConfig\"O\n\013ShiftConfig\022"
  "\027\n\tmax_speed\030\001 \001(\001:\0044.16\022\'\n\032max_move_des"
  "t_lane_shift_y\030\003 \001(\001:\0030.4\"\322\004\n\026NaviSpeedD"
  "eciderConfig\022\032\n\017preferred_accel\030\001 \001(\001:\0012"
  "\022\032\n\017preferred_decel\030\002 \001(\001:\0012\022\031\n\016preferre"
  "d_jerk\030\003 \001(\001:\0012\022\024\n\tmax_accel\030\004 \001(\001:\0014\022\024\n"
  "\tmax_decel\030\005 \001(\001:\0015\022\034\n\017obstacle_buffer\030\006"
  " \001(\001:\0030.5\022\035\n\022safe_distance_base\030\007 \001(\001:\0012"
  "\022\036\n\023safe_distance_ratio\030\010 \001(\001:\0011\022\"\n\025foll"
  "owing_accel_ratio\030\t \001(\001:\0030.5\022%\n\030soft_cen"
  "tric_accel_limit\030\n \001(\001:\0031.2\022%\n\030hard_cent"
  "ric_accel_limit\030\013 \001(\001:\0031.5\022\035\n\020hard_speed"
  "_limit\030\014 \001(\001:\003100\022\034\n\020hard_accel_limit\030\r "
  "\001(\001:\00210\022\036\n\020enable_safe_path\030\016 \001(\010:\004true\022"
  ")\n\033enable_planning_start_point\030\017 \001(\010:\004tr"
  "ue\022,\n\036enable_accel_auto_compensation\030\020 \001"
  "(\010:\004true\022\030\n\rkappa_preview\030\021 \001(\001:\0010\022\032\n\017ka"
  "ppa_threshold\030\022 \001(\001:\0010\"\035\n\033PathAssessment"
  "DeciderConfig\"\347\002\n\027PathBoundsDeciderConfi"
  "g\022\031\n\021is_lane_borrowing\030\001 \001(\010\022\024\n\014is_pull_"
  "over\030\002 \001(\010\022/\n#pull_over_destination_to_a"
  "dc_buffer\030\003 \001(\001:\00225\0223\n\'pull_over_destina"
  "tion_to_pathend_buffer\030\004 \001(\001:\00210\022(\n\032pull"
  "_over_road_edge_buffer\030\005 \001(\001:\0040.15\022:\n-pu"
  "ll_over_approach_lon_distance_adjust_fac"
  "tor\030\006 \001(\001:\0031.5\022\033\n\020adc_buffer_coeff\030\007 \001(\001"
  ":\0011\0222\n$is_extend_lane_bounds_to_include_"
  "adc\030\010 \001(\010:\004true\"8\n\021PathDeciderConfig\022#\n\026"
  "static_obstacle_buffer\030\001 \001(\001:\0030.3\";\n\033Pat"
  "hLaneBorrowDeciderConfig\022\034\n\024allow_lane_b"
  "orrowing\030\001 \001(\010\"h\n\032PathReferenceDeciderCo"
  "nfig\022%\n\031min_path_reference_length\030\001 \001(\r:"
  "\00220\022#\n\033weight_x_ref_path_reference\030\002 \001(\001"
  "\",\n\026PathReuseDeciderConfig\022\022\n\nreuse_path"
  "\030\001 \001(\010\"\335\002\n*PiecewiseJerkNonlinearSpeedOp"
  "timizerConfig\022\027\n\nacc_weight\030\001 \001(\001:\003500\022\030"
  "\n\013jerk_weight\030\002 \001(\001:\003100\022\033\n\016lat_acc_weig"
  "ht\030\003 \001(\001:\003500\022\036\n\022s_potential_weight\030\004 \001("
  "\001:\00210\022\030\n\014ref_v_weight\030\005 \001(\001:\00210\022\030\n\014ref_s"
  "_weight\030\006 \001(\001:\00210\022\030\n\014end_s_weight\030\007 \001(\001:"
  "\00210\022\030\n\014end_v_weight\030\010 \001(\001:\00210\022\030\n\014end_a_w"
  "eight\030\t \001(\001:\00210\022\037\n\023soft_s_bound_weight\030\n"
  " \001(\001:\00210\022\034\n\016use_warm_start\030d \001(\010:\004true\"\332"
  "\001\n PiecewiseJerkPathOptimizerConfig\022F\n\023d"
  "efault_path_config\030\001 \001(\0132).apollo.planni"
  "ng.PiecewiseJerkPathWeights\022J\n\027lane_chan"
  "ge_path_config\030\002 \001(\0132).apollo.planning.P"
  "iecewiseJerkPathWeights\022\"\n\027path_referenc"
  "e_l_weight\030\003 \001(\001:\0010\"}\n\030PiecewiseJerkPath"
  "Weights\022\023\n\010l_weight\030\001 \001(\001:\0011\022\026\n\tdl_weigh"
  "t\030\002 \001(\001:\003100\022\030\n\nddl_weight\030\003 \001(\001:\0041000\022\032"
  "\n\013dddl_weight\030\004 \001(\001:\00510000\"\253\001\n!Piecewise"
  "JerkSpeedOptimizerConfig\022\025\n\nacc_weight\030\001"
  " \001(\001:\0011\022\027\n\013jerk_weight\030\002 \001(\001:\00210\022\"\n\024kapp"
  "a_penalty_weight\030\003 \001(\001:\0041000\022\030\n\014ref_s_we"
  "ight\030\004 \001(\001:\00210\022\030\n\014ref_v_weight\030\005 \001(\001:\00210"
  "\"\316\002\n\032RuleBasedStopDeciderConfig\022\037\n\022max_a"
  "dc_stop_speed\030\001 \001(\001:\0030.3\022$\n\027max_valid_st"
  "op_distance\030\002 \001(\001:\0030.5\022\035\n\022search_beam_le"
  "ngth\030\003 \001(\001:\0015\022*\n\034search_beam_radius_inte"
  "nsity\030\004 \001(\001:\0040.08\022\032\n\014search_range\030\005 \001(\001:"
  "\0043.14\022&\n\030is_block_angle_threshold\030\006 \001(\001:"
  "\0041.57\022-\n!approach_distance_for_lane_chan"
  "ge\030\n \001(\001:\00280\022+\n\037urgent_distance_for_lane"
  "_change\030\013 \001(\001:\00250\"\277\002\n\030SpeedBoundsDecider"
  "Config\022\025\n\ntotal_time\030\001 \001(\001:\0017\022\034\n\017boundar"
  "y_buffer\030\002 \001(\001:\0030.1\022)\n\036max_centric_accel"
  "eration_limit\030\003 \001(\001:\0012\022\034\n\rminimal_kappa\030"
  "\004 \001(\001:\0051e-05\022\032\n\017point_extension\030\005 \001(\001:\0011"
  "\022\031\n\014lowest_speed\030\006 \001(\001:\0032.5\022!\n\026collision"
  "_safety_range\030\007 \001(\001:\0011\022$\n\034static_obs_nud"
  "ge_speed_ratio\030\010 \001(\001\022%\n\035dynamic_obs_nudg"
  "e_speed_ratio\030\t \001(\001\"\265\001\n\035SpeedHeuristicOp"
  "timizerConfig\022G\n\024default_speed_config\030\001 "
  "\001(\0132).apollo.planning.DpStSpeedOptimizer"
  "Config\022K\n\030lane_change_speed_config\030\002 \001(\013"
  "2).apollo.planning.DpStSpeedOptimizerCon"
  "fig\"\311\006\n\030DpStSpeedOptimizerConfig\022\021\n\006unit"
  "_t\030\001 \001(\001:\0011\022\035\n\021dense_dimension_s\030\002 \001(\005:\002"
  "41\022\031\n\014dense_unit_s\030\003 \001(\001:\0030.5\022\030\n\rsparse_"
  "unit_s\030\004 \001(\001:\0011\022\027\n\014speed_weight\030\n \001(\001:\0010"
  "\022\030\n\014accel_weight\030\013 \001(\001:\00210\022\027\n\013jerk_weigh"
  "t\030\014 \001(\001:\00210\022\032\n\017obstacle_weight\030\r \001(\001:\0011\022"
  "\033\n\020reference_weight\030\016 \001(\001:\0010\022\031\n\016go_down_"
  "buffer\030\017 \001(\001:\0015\022\027\n\014go_up_buffer\030\020 \001(\001:\0015"
  "\022*\n\025default_obstacle_cost\030\024 \001(\001:\0131000000"
  "0000\022\035\n\022default_speed_cost\030\037 \001(\001:\0011\022 \n\024e"
  "xceed_speed_penalty\030  \001(\001:\00210\022\036\n\021low_spe"
  "ed_penalty\030! \001(\001:\0032.5\022\"\n\027reference_speed"
  "_penalty\030\" \001(\001:\0011\022(\n\034keep_clear_low_spee"
  "d_penalty\030# \001(\001:\00210\022\030\n\raccel_penalty\030( \001"
  "(\001:\0012\022\030\n\rdecel_penalty\030) \001(\001:\0012\022\036\n\023posit"
  "ive_jerk_coeff\0302 \001(\001:\0011\022 \n\023negative_jerk"
  "_coeff\0303 \001(\001:\003300\022\035\n\020max_acceleration\030< "
  "\001(\001:\0034.5\022\036\n\020max_deceleration\030= \001(\001:\004-4.5"
  "\022\033\n\020safe_time_buffer\030F \001(\001:\0013\022\031\n\rsafe_di"
  "stance\030G \001(\001:\00220\022$\n\031spatial_potential_pe"
  "nalty\030P \001(\001:\0011\022\037\n\020is_lane_changing\030Q \001(\010"
  ":\005false\".\n\025STBoundsDeciderConfig\022\025\n\ntota"
  "l_time\030\001 \001(\001:\0017"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto = {
  false, false, 5895, descriptor_table_protodef_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto, "modules/planning/proto/task_config.proto", 
  &descriptor_table_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto_once, nullptr, 0, 24,
  schemas, file_default_instances, TableStruct_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto::offsets,
  file_level_metadata_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto, file_level_enum_descriptors_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto, file_level_service_descriptors_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto_getter() {
  return &descriptor_table_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto(&descriptor_table_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto);
namespace apollo {
namespace planning {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LearningModelInferenceTaskConfig_ModelType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto);
  return file_level_enum_descriptors_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto[0];
}
bool LearningModelInferenceTaskConfig_ModelType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr LearningModelInferenceTaskConfig_ModelType LearningModelInferenceTaskConfig::CNN;
constexpr LearningModelInferenceTaskConfig_ModelType LearningModelInferenceTaskConfig::CNN_LSTM;
constexpr LearningModelInferenceTaskConfig_ModelType LearningModelInferenceTaskConfig::ModelType_MIN;
constexpr LearningModelInferenceTaskConfig_ModelType LearningModelInferenceTaskConfig::ModelType_MAX;
constexpr int LearningModelInferenceTaskConfig::ModelType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class CreepDeciderConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<CreepDeciderConfig>()._has_bits_);
  static void set_has_stop_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_speed_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_max_valid_stop_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_min_boundary_t(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ignore_max_st_min_t(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_ignore_min_st_min_s(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CreepDeciderConfig::CreepDeciderConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.planning.CreepDeciderConfig)
}
CreepDeciderConfig::CreepDeciderConfig(const CreepDeciderConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&stop_distance_, &from.stop_distance_,
    static_cast<size_t>(reinterpret_cast<char*>(&ignore_min_st_min_s_) -
    reinterpret_cast<char*>(&stop_distance_)) + sizeof(ignore_min_st_min_s_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.CreepDeciderConfig)
}

void CreepDeciderConfig::SharedCtor() {
stop_distance_ = 0.5;
speed_limit_ = 1;
max_valid_stop_distance_ = 0.3;
min_boundary_t_ = 6;
ignore_max_st_min_t_ = 0.1;
ignore_min_st_min_s_ = 15;
}

CreepDeciderConfig::~CreepDeciderConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.CreepDeciderConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreepDeciderConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CreepDeciderConfig::ArenaDtor(void* object) {
  CreepDeciderConfig* _this = reinterpret_cast< CreepDeciderConfig* >(object);
  (void)_this;
}
void CreepDeciderConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreepDeciderConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreepDeciderConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.CreepDeciderConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    stop_distance_ = 0.5;
    speed_limit_ = 1;
    max_valid_stop_distance_ = 0.3;
    min_boundary_t_ = 6;
    ignore_max_st_min_t_ = 0.1;
    ignore_min_st_min_s_ = 15;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreepDeciderConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double stop_distance = 1 [default = 0.5];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_stop_distance(&has_bits);
          stop_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double speed_limit = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_speed_limit(&has_bits);
          speed_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double max_valid_stop_distance = 3 [default = 0.3];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_max_valid_stop_distance(&has_bits);
          max_valid_stop_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double min_boundary_t = 4 [default = 6];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_min_boundary_t(&has_bits);
          min_boundary_t_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double ignore_max_st_min_t = 5 [default = 0.1];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_ignore_max_st_min_t(&has_bits);
          ignore_max_st_min_t_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double ignore_min_st_min_s = 6 [default = 15];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_ignore_min_st_min_s(&has_bits);
          ignore_min_st_min_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreepDeciderConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.CreepDeciderConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double stop_distance = 1 [default = 0.5];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_stop_distance(), target);
  }

  // optional double speed_limit = 2 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_speed_limit(), target);
  }

  // optional double max_valid_stop_distance = 3 [default = 0.3];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_max_valid_stop_distance(), target);
  }

  // optional double min_boundary_t = 4 [default = 6];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_min_boundary_t(), target);
  }

  // optional double ignore_max_st_min_t = 5 [default = 0.1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_ignore_max_st_min_t(), target);
  }

  // optional double ignore_min_st_min_s = 6 [default = 15];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_ignore_min_st_min_s(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.CreepDeciderConfig)
  return target;
}

size_t CreepDeciderConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.CreepDeciderConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional double stop_distance = 1 [default = 0.5];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double speed_limit = 2 [default = 1];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double max_valid_stop_distance = 3 [default = 0.3];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double min_boundary_t = 4 [default = 6];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double ignore_max_st_min_t = 5 [default = 0.1];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double ignore_min_st_min_s = 6 [default = 15];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreepDeciderConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreepDeciderConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreepDeciderConfig::GetClassData() const { return &_class_data_; }

void CreepDeciderConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CreepDeciderConfig *>(to)->MergeFrom(
      static_cast<const CreepDeciderConfig &>(from));
}


void CreepDeciderConfig::MergeFrom(const CreepDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.CreepDeciderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      stop_distance_ = from.stop_distance_;
    }
    if (cached_has_bits & 0x00000002u) {
      speed_limit_ = from.speed_limit_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_valid_stop_distance_ = from.max_valid_stop_distance_;
    }
    if (cached_has_bits & 0x00000008u) {
      min_boundary_t_ = from.min_boundary_t_;
    }
    if (cached_has_bits & 0x00000010u) {
      ignore_max_st_min_t_ = from.ignore_max_st_min_t_;
    }
    if (cached_has_bits & 0x00000020u) {
      ignore_min_st_min_s_ = from.ignore_min_st_min_s_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreepDeciderConfig::CopyFrom(const CreepDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.CreepDeciderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreepDeciderConfig::IsInitialized() const {
  return true;
}

void CreepDeciderConfig::InternalSwap(CreepDeciderConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(stop_distance_, other->stop_distance_);
  swap(speed_limit_, other->speed_limit_);
  swap(max_valid_stop_distance_, other->max_valid_stop_distance_);
  swap(min_boundary_t_, other->min_boundary_t_);
  swap(ignore_max_st_min_t_, other->ignore_max_st_min_t_);
  swap(ignore_min_st_min_s_, other->ignore_min_st_min_s_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreepDeciderConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto[0]);
}

// ===================================================================

class LaneChangeDeciderConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<LaneChangeDeciderConfig>()._has_bits_);
  static void set_has_enable_lane_change_urgency_check(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_enable_prioritize_change_lane(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_enable_remove_change_lane(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_reckless_change_lane(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_change_lane_success_freeze_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_change_lane_fail_freeze_time(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

LaneChangeDeciderConfig::LaneChangeDeciderConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.planning.LaneChangeDeciderConfig)
}
LaneChangeDeciderConfig::LaneChangeDeciderConfig(const LaneChangeDeciderConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&enable_lane_change_urgency_check_, &from.enable_lane_change_urgency_check_,
    static_cast<size_t>(reinterpret_cast<char*>(&change_lane_fail_freeze_time_) -
    reinterpret_cast<char*>(&enable_lane_change_urgency_check_)) + sizeof(change_lane_fail_freeze_time_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.LaneChangeDeciderConfig)
}

void LaneChangeDeciderConfig::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&enable_lane_change_urgency_check_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&reckless_change_lane_) -
    reinterpret_cast<char*>(&enable_lane_change_urgency_check_)) + sizeof(reckless_change_lane_));
change_lane_success_freeze_time_ = 1.5;
change_lane_fail_freeze_time_ = 1;
}

LaneChangeDeciderConfig::~LaneChangeDeciderConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.LaneChangeDeciderConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LaneChangeDeciderConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LaneChangeDeciderConfig::ArenaDtor(void* object) {
  LaneChangeDeciderConfig* _this = reinterpret_cast< LaneChangeDeciderConfig* >(object);
  (void)_this;
}
void LaneChangeDeciderConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LaneChangeDeciderConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LaneChangeDeciderConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.LaneChangeDeciderConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&enable_lane_change_urgency_check_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reckless_change_lane_) -
      reinterpret_cast<char*>(&enable_lane_change_urgency_check_)) + sizeof(reckless_change_lane_));
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000030u) {
    change_lane_success_freeze_time_ = 1.5;
    change_lane_fail_freeze_time_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LaneChangeDeciderConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool enable_lane_change_urgency_check = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_enable_lane_change_urgency_check(&has_bits);
          enable_lane_change_urgency_check_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_prioritize_change_lane = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_enable_prioritize_change_lane(&has_bits);
          enable_prioritize_change_lane_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_remove_change_lane = 3 [default = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_enable_remove_change_lane(&has_bits);
          enable_remove_change_lane_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool reckless_change_lane = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_reckless_change_lane(&has_bits);
          reckless_change_lane_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double change_lane_success_freeze_time = 5 [default = 1.5];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_change_lane_success_freeze_time(&has_bits);
          change_lane_success_freeze_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double change_lane_fail_freeze_time = 6 [default = 1];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_change_lane_fail_freeze_time(&has_bits);
          change_lane_fail_freeze_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LaneChangeDeciderConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.LaneChangeDeciderConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enable_lane_change_urgency_check = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enable_lane_change_urgency_check(), target);
  }

  // optional bool enable_prioritize_change_lane = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_enable_prioritize_change_lane(), target);
  }

  // optional bool enable_remove_change_lane = 3 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_enable_remove_change_lane(), target);
  }

  // optional bool reckless_change_lane = 4 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_reckless_change_lane(), target);
  }

  // optional double change_lane_success_freeze_time = 5 [default = 1.5];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_change_lane_success_freeze_time(), target);
  }

  // optional double change_lane_fail_freeze_time = 6 [default = 1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_change_lane_fail_freeze_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.LaneChangeDeciderConfig)
  return target;
}

size_t LaneChangeDeciderConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.LaneChangeDeciderConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional bool enable_lane_change_urgency_check = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool enable_prioritize_change_lane = 2 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool enable_remove_change_lane = 3 [default = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool reckless_change_lane = 4 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional double change_lane_success_freeze_time = 5 [default = 1.5];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double change_lane_fail_freeze_time = 6 [default = 1];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LaneChangeDeciderConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LaneChangeDeciderConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LaneChangeDeciderConfig::GetClassData() const { return &_class_data_; }

void LaneChangeDeciderConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LaneChangeDeciderConfig *>(to)->MergeFrom(
      static_cast<const LaneChangeDeciderConfig &>(from));
}


void LaneChangeDeciderConfig::MergeFrom(const LaneChangeDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.LaneChangeDeciderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      enable_lane_change_urgency_check_ = from.enable_lane_change_urgency_check_;
    }
    if (cached_has_bits & 0x00000002u) {
      enable_prioritize_change_lane_ = from.enable_prioritize_change_lane_;
    }
    if (cached_has_bits & 0x00000004u) {
      enable_remove_change_lane_ = from.enable_remove_change_lane_;
    }
    if (cached_has_bits & 0x00000008u) {
      reckless_change_lane_ = from.reckless_change_lane_;
    }
    if (cached_has_bits & 0x00000010u) {
      change_lane_success_freeze_time_ = from.change_lane_success_freeze_time_;
    }
    if (cached_has_bits & 0x00000020u) {
      change_lane_fail_freeze_time_ = from.change_lane_fail_freeze_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LaneChangeDeciderConfig::CopyFrom(const LaneChangeDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.LaneChangeDeciderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneChangeDeciderConfig::IsInitialized() const {
  return true;
}

void LaneChangeDeciderConfig::InternalSwap(LaneChangeDeciderConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LaneChangeDeciderConfig, reckless_change_lane_)
      + sizeof(LaneChangeDeciderConfig::reckless_change_lane_)
      - PROTOBUF_FIELD_OFFSET(LaneChangeDeciderConfig, enable_lane_change_urgency_check_)>(
          reinterpret_cast<char*>(&enable_lane_change_urgency_check_),
          reinterpret_cast<char*>(&other->enable_lane_change_urgency_check_));
  swap(change_lane_success_freeze_time_, other->change_lane_success_freeze_time_);
  swap(change_lane_fail_freeze_time_, other->change_lane_fail_freeze_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LaneChangeDeciderConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto[1]);
}

// ===================================================================

class LearningModelInferenceTaskConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<LearningModelInferenceTaskConfig>()._has_bits_);
  static void set_has_model_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_cpu_model_file(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_gpu_model_file(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_use_cuda(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_trajectory_delta_t(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_allow_empty_learning_based_data(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_allow_empty_output_trajectory(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

LearningModelInferenceTaskConfig::LearningModelInferenceTaskConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.planning.LearningModelInferenceTaskConfig)
}
LearningModelInferenceTaskConfig::LearningModelInferenceTaskConfig(const LearningModelInferenceTaskConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  cpu_model_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_cpu_model_file()) {
    cpu_model_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cpu_model_file(), 
      GetArenaForAllocation());
  }
  gpu_model_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_gpu_model_file()) {
    gpu_model_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gpu_model_file(), 
      GetArenaForAllocation());
  }
  ::memcpy(&allow_empty_learning_based_data_, &from.allow_empty_learning_based_data_,
    static_cast<size_t>(reinterpret_cast<char*>(&trajectory_delta_t_) -
    reinterpret_cast<char*>(&allow_empty_learning_based_data_)) + sizeof(trajectory_delta_t_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.LearningModelInferenceTaskConfig)
}

void LearningModelInferenceTaskConfig::SharedCtor() {
cpu_model_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
gpu_model_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&allow_empty_learning_based_data_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&allow_empty_output_trajectory_) -
    reinterpret_cast<char*>(&allow_empty_learning_based_data_)) + sizeof(allow_empty_output_trajectory_));
model_type_ = 1;
use_cuda_ = true;
trajectory_delta_t_ = 0.2;
}

LearningModelInferenceTaskConfig::~LearningModelInferenceTaskConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.LearningModelInferenceTaskConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LearningModelInferenceTaskConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  cpu_model_file_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gpu_model_file_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LearningModelInferenceTaskConfig::ArenaDtor(void* object) {
  LearningModelInferenceTaskConfig* _this = reinterpret_cast< LearningModelInferenceTaskConfig* >(object);
  (void)_this;
}
void LearningModelInferenceTaskConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LearningModelInferenceTaskConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LearningModelInferenceTaskConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.LearningModelInferenceTaskConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      cpu_model_file_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      gpu_model_file_.ClearNonDefaultToEmpty();
    }
  }
  ::memset(&allow_empty_learning_based_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&allow_empty_output_trajectory_) -
      reinterpret_cast<char*>(&allow_empty_learning_based_data_)) + sizeof(allow_empty_output_trajectory_));
  if (cached_has_bits & 0x00000070u) {
    model_type_ = 1;
    use_cuda_ = true;
    trajectory_delta_t_ = 0.2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LearningModelInferenceTaskConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.planning.LearningModelInferenceTaskConfig.ModelType model_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::planning::LearningModelInferenceTaskConfig_ModelType_IsValid(val))) {
            _internal_set_model_type(static_cast<::apollo::planning::LearningModelInferenceTaskConfig_ModelType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string cpu_model_file = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_cpu_model_file();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.planning.LearningModelInferenceTaskConfig.cpu_model_file");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string gpu_model_file = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_gpu_model_file();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.planning.LearningModelInferenceTaskConfig.gpu_model_file");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool use_cuda = 4 [default = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_use_cuda(&has_bits);
          use_cuda_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double trajectory_delta_t = 5 [default = 0.2];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_trajectory_delta_t(&has_bits);
          trajectory_delta_t_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool allow_empty_learning_based_data = 6 [default = false];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_allow_empty_learning_based_data(&has_bits);
          allow_empty_learning_based_data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool allow_empty_output_trajectory = 7 [default = false];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_allow_empty_output_trajectory(&has_bits);
          allow_empty_output_trajectory_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LearningModelInferenceTaskConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.LearningModelInferenceTaskConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning.LearningModelInferenceTaskConfig.ModelType model_type = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_model_type(), target);
  }

  // optional string cpu_model_file = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_cpu_model_file().data(), static_cast<int>(this->_internal_cpu_model_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.planning.LearningModelInferenceTaskConfig.cpu_model_file");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_cpu_model_file(), target);
  }

  // optional string gpu_model_file = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_gpu_model_file().data(), static_cast<int>(this->_internal_gpu_model_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.planning.LearningModelInferenceTaskConfig.gpu_model_file");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_gpu_model_file(), target);
  }

  // optional bool use_cuda = 4 [default = true];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_use_cuda(), target);
  }

  // optional double trajectory_delta_t = 5 [default = 0.2];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_trajectory_delta_t(), target);
  }

  // optional bool allow_empty_learning_based_data = 6 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_allow_empty_learning_based_data(), target);
  }

  // optional bool allow_empty_output_trajectory = 7 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_allow_empty_output_trajectory(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.LearningModelInferenceTaskConfig)
  return target;
}

size_t LearningModelInferenceTaskConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.LearningModelInferenceTaskConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string cpu_model_file = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_cpu_model_file());
    }

    // optional string gpu_model_file = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_gpu_model_file());
    }

    // optional bool allow_empty_learning_based_data = 6 [default = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool allow_empty_output_trajectory = 7 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional .apollo.planning.LearningModelInferenceTaskConfig.ModelType model_type = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_model_type());
    }

    // optional bool use_cuda = 4 [default = true];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional double trajectory_delta_t = 5 [default = 0.2];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LearningModelInferenceTaskConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LearningModelInferenceTaskConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LearningModelInferenceTaskConfig::GetClassData() const { return &_class_data_; }

void LearningModelInferenceTaskConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LearningModelInferenceTaskConfig *>(to)->MergeFrom(
      static_cast<const LearningModelInferenceTaskConfig &>(from));
}


void LearningModelInferenceTaskConfig::MergeFrom(const LearningModelInferenceTaskConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.LearningModelInferenceTaskConfig)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_cpu_model_file(from._internal_cpu_model_file());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_gpu_model_file(from._internal_gpu_model_file());
    }
    if (cached_has_bits & 0x00000004u) {
      allow_empty_learning_based_data_ = from.allow_empty_learning_based_data_;
    }
    if (cached_has_bits & 0x00000008u) {
      allow_empty_output_trajectory_ = from.allow_empty_output_trajectory_;
    }
    if (cached_has_bits & 0x00000010u) {
      model_type_ = from.model_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      use_cuda_ = from.use_cuda_;
    }
    if (cached_has_bits & 0x00000040u) {
      trajectory_delta_t_ = from.trajectory_delta_t_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LearningModelInferenceTaskConfig::CopyFrom(const LearningModelInferenceTaskConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.LearningModelInferenceTaskConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LearningModelInferenceTaskConfig::IsInitialized() const {
  return true;
}

void LearningModelInferenceTaskConfig::InternalSwap(LearningModelInferenceTaskConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &cpu_model_file_, lhs_arena,
      &other->cpu_model_file_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &gpu_model_file_, lhs_arena,
      &other->gpu_model_file_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LearningModelInferenceTaskConfig, allow_empty_output_trajectory_)
      + sizeof(LearningModelInferenceTaskConfig::allow_empty_output_trajectory_)
      - PROTOBUF_FIELD_OFFSET(LearningModelInferenceTaskConfig, allow_empty_learning_based_data_)>(
          reinterpret_cast<char*>(&allow_empty_learning_based_data_),
          reinterpret_cast<char*>(&other->allow_empty_learning_based_data_));
  swap(model_type_, other->model_type_);
  swap(use_cuda_, other->use_cuda_);
  swap(trajectory_delta_t_, other->trajectory_delta_t_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LearningModelInferenceTaskConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto[2]);
}

// ===================================================================

class LearningModelInferenceTrajectoryTaskConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<LearningModelInferenceTrajectoryTaskConfig>()._has_bits_);
  static void set_has_min_adc_future_trajectory_time_length(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

LearningModelInferenceTrajectoryTaskConfig::LearningModelInferenceTrajectoryTaskConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.planning.LearningModelInferenceTrajectoryTaskConfig)
}
LearningModelInferenceTrajectoryTaskConfig::LearningModelInferenceTrajectoryTaskConfig(const LearningModelInferenceTrajectoryTaskConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  min_adc_future_trajectory_time_length_ = from.min_adc_future_trajectory_time_length_;
  // @@protoc_insertion_point(copy_constructor:apollo.planning.LearningModelInferenceTrajectoryTaskConfig)
}

void LearningModelInferenceTrajectoryTaskConfig::SharedCtor() {
min_adc_future_trajectory_time_length_ = 2;
}

LearningModelInferenceTrajectoryTaskConfig::~LearningModelInferenceTrajectoryTaskConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.LearningModelInferenceTrajectoryTaskConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LearningModelInferenceTrajectoryTaskConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LearningModelInferenceTrajectoryTaskConfig::ArenaDtor(void* object) {
  LearningModelInferenceTrajectoryTaskConfig* _this = reinterpret_cast< LearningModelInferenceTrajectoryTaskConfig* >(object);
  (void)_this;
}
void LearningModelInferenceTrajectoryTaskConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LearningModelInferenceTrajectoryTaskConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LearningModelInferenceTrajectoryTaskConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.LearningModelInferenceTrajectoryTaskConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  min_adc_future_trajectory_time_length_ = 2;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LearningModelInferenceTrajectoryTaskConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double min_adc_future_trajectory_time_length = 1 [default = 2];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_min_adc_future_trajectory_time_length(&has_bits);
          min_adc_future_trajectory_time_length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LearningModelInferenceTrajectoryTaskConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.LearningModelInferenceTrajectoryTaskConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double min_adc_future_trajectory_time_length = 1 [default = 2];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_min_adc_future_trajectory_time_length(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.LearningModelInferenceTrajectoryTaskConfig)
  return target;
}

size_t LearningModelInferenceTrajectoryTaskConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.LearningModelInferenceTrajectoryTaskConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional double min_adc_future_trajectory_time_length = 1 [default = 2];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LearningModelInferenceTrajectoryTaskConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LearningModelInferenceTrajectoryTaskConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LearningModelInferenceTrajectoryTaskConfig::GetClassData() const { return &_class_data_; }

void LearningModelInferenceTrajectoryTaskConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LearningModelInferenceTrajectoryTaskConfig *>(to)->MergeFrom(
      static_cast<const LearningModelInferenceTrajectoryTaskConfig &>(from));
}


void LearningModelInferenceTrajectoryTaskConfig::MergeFrom(const LearningModelInferenceTrajectoryTaskConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.LearningModelInferenceTrajectoryTaskConfig)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_min_adc_future_trajectory_time_length()) {
    _internal_set_min_adc_future_trajectory_time_length(from._internal_min_adc_future_trajectory_time_length());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LearningModelInferenceTrajectoryTaskConfig::CopyFrom(const LearningModelInferenceTrajectoryTaskConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.LearningModelInferenceTrajectoryTaskConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LearningModelInferenceTrajectoryTaskConfig::IsInitialized() const {
  return true;
}

void LearningModelInferenceTrajectoryTaskConfig::InternalSwap(LearningModelInferenceTrajectoryTaskConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(min_adc_future_trajectory_time_length_, other->min_adc_future_trajectory_time_length_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LearningModelInferenceTrajectoryTaskConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto[3]);
}

// ===================================================================

class NaviObstacleDeciderConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<NaviObstacleDeciderConfig>()._has_bits_);
  static void set_has_min_nudge_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max_nudge_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_max_allow_nudge_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_safe_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_nudge_allow_tolerance(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_cycles_number(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_judge_dis_coeff(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_basis_dis_value(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_lateral_velocity_value(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_speed_decider_detect_range(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_max_keep_nudge_cycles(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

NaviObstacleDeciderConfig::NaviObstacleDeciderConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.planning.NaviObstacleDeciderConfig)
}
NaviObstacleDeciderConfig::NaviObstacleDeciderConfig(const NaviObstacleDeciderConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&min_nudge_distance_, &from.min_nudge_distance_,
    static_cast<size_t>(reinterpret_cast<char*>(&speed_decider_detect_range_) -
    reinterpret_cast<char*>(&min_nudge_distance_)) + sizeof(speed_decider_detect_range_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.NaviObstacleDeciderConfig)
}

void NaviObstacleDeciderConfig::SharedCtor() {
min_nudge_distance_ = 0.2;
max_nudge_distance_ = 1.2;
max_allow_nudge_speed_ = 16.667;
safe_distance_ = 0.2;
nudge_allow_tolerance_ = 0.05;
judge_dis_coeff_ = 2;
basis_dis_value_ = 30;
cycles_number_ = 3u;
max_keep_nudge_cycles_ = 100u;
lateral_velocity_value_ = 0.5;
speed_decider_detect_range_ = 1;
}

NaviObstacleDeciderConfig::~NaviObstacleDeciderConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.NaviObstacleDeciderConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NaviObstacleDeciderConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void NaviObstacleDeciderConfig::ArenaDtor(void* object) {
  NaviObstacleDeciderConfig* _this = reinterpret_cast< NaviObstacleDeciderConfig* >(object);
  (void)_this;
}
void NaviObstacleDeciderConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NaviObstacleDeciderConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NaviObstacleDeciderConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.NaviObstacleDeciderConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    min_nudge_distance_ = 0.2;
    max_nudge_distance_ = 1.2;
    max_allow_nudge_speed_ = 16.667;
    safe_distance_ = 0.2;
    nudge_allow_tolerance_ = 0.05;
    judge_dis_coeff_ = 2;
    basis_dis_value_ = 30;
    cycles_number_ = 3u;
  }
  if (cached_has_bits & 0x00000700u) {
    max_keep_nudge_cycles_ = 100u;
    lateral_velocity_value_ = 0.5;
    speed_decider_detect_range_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NaviObstacleDeciderConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double min_nudge_distance = 1 [default = 0.2];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_min_nudge_distance(&has_bits);
          min_nudge_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double max_nudge_distance = 2 [default = 1.2];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_max_nudge_distance(&has_bits);
          max_nudge_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double max_allow_nudge_speed = 3 [default = 16.667];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_max_allow_nudge_speed(&has_bits);
          max_allow_nudge_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double safe_distance = 4 [default = 0.2];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_safe_distance(&has_bits);
          safe_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double nudge_allow_tolerance = 5 [default = 0.05];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_nudge_allow_tolerance(&has_bits);
          nudge_allow_tolerance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 cycles_number = 6 [default = 3];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_cycles_number(&has_bits);
          cycles_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double judge_dis_coeff = 7 [default = 2];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_judge_dis_coeff(&has_bits);
          judge_dis_coeff_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double basis_dis_value = 8 [default = 30];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_basis_dis_value(&has_bits);
          basis_dis_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double lateral_velocity_value = 9 [default = 0.5];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_lateral_velocity_value(&has_bits);
          lateral_velocity_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double speed_decider_detect_range = 10 [default = 1];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_speed_decider_detect_range(&has_bits);
          speed_decider_detect_range_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 max_keep_nudge_cycles = 11 [default = 100];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_max_keep_nudge_cycles(&has_bits);
          max_keep_nudge_cycles_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NaviObstacleDeciderConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.NaviObstacleDeciderConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double min_nudge_distance = 1 [default = 0.2];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_min_nudge_distance(), target);
  }

  // optional double max_nudge_distance = 2 [default = 1.2];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_max_nudge_distance(), target);
  }

  // optional double max_allow_nudge_speed = 3 [default = 16.667];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_max_allow_nudge_speed(), target);
  }

  // optional double safe_distance = 4 [default = 0.2];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_safe_distance(), target);
  }

  // optional double nudge_allow_tolerance = 5 [default = 0.05];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_nudge_allow_tolerance(), target);
  }

  // optional uint32 cycles_number = 6 [default = 3];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_cycles_number(), target);
  }

  // optional double judge_dis_coeff = 7 [default = 2];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_judge_dis_coeff(), target);
  }

  // optional double basis_dis_value = 8 [default = 30];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_basis_dis_value(), target);
  }

  // optional double lateral_velocity_value = 9 [default = 0.5];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_lateral_velocity_value(), target);
  }

  // optional double speed_decider_detect_range = 10 [default = 1];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_speed_decider_detect_range(), target);
  }

  // optional uint32 max_keep_nudge_cycles = 11 [default = 100];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_max_keep_nudge_cycles(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.NaviObstacleDeciderConfig)
  return target;
}

size_t NaviObstacleDeciderConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.NaviObstacleDeciderConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional double min_nudge_distance = 1 [default = 0.2];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double max_nudge_distance = 2 [default = 1.2];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double max_allow_nudge_speed = 3 [default = 16.667];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double safe_distance = 4 [default = 0.2];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double nudge_allow_tolerance = 5 [default = 0.05];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double judge_dis_coeff = 7 [default = 2];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double basis_dis_value = 8 [default = 30];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional uint32 cycles_number = 6 [default = 3];
    if (cached_has_bits & 0x00000080u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_cycles_number());
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional uint32 max_keep_nudge_cycles = 11 [default = 100];
    if (cached_has_bits & 0x00000100u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_max_keep_nudge_cycles());
    }

    // optional double lateral_velocity_value = 9 [default = 0.5];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double speed_decider_detect_range = 10 [default = 1];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NaviObstacleDeciderConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NaviObstacleDeciderConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NaviObstacleDeciderConfig::GetClassData() const { return &_class_data_; }

void NaviObstacleDeciderConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NaviObstacleDeciderConfig *>(to)->MergeFrom(
      static_cast<const NaviObstacleDeciderConfig &>(from));
}


void NaviObstacleDeciderConfig::MergeFrom(const NaviObstacleDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.NaviObstacleDeciderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      min_nudge_distance_ = from.min_nudge_distance_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_nudge_distance_ = from.max_nudge_distance_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_allow_nudge_speed_ = from.max_allow_nudge_speed_;
    }
    if (cached_has_bits & 0x00000008u) {
      safe_distance_ = from.safe_distance_;
    }
    if (cached_has_bits & 0x00000010u) {
      nudge_allow_tolerance_ = from.nudge_allow_tolerance_;
    }
    if (cached_has_bits & 0x00000020u) {
      judge_dis_coeff_ = from.judge_dis_coeff_;
    }
    if (cached_has_bits & 0x00000040u) {
      basis_dis_value_ = from.basis_dis_value_;
    }
    if (cached_has_bits & 0x00000080u) {
      cycles_number_ = from.cycles_number_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      max_keep_nudge_cycles_ = from.max_keep_nudge_cycles_;
    }
    if (cached_has_bits & 0x00000200u) {
      lateral_velocity_value_ = from.lateral_velocity_value_;
    }
    if (cached_has_bits & 0x00000400u) {
      speed_decider_detect_range_ = from.speed_decider_detect_range_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NaviObstacleDeciderConfig::CopyFrom(const NaviObstacleDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.NaviObstacleDeciderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NaviObstacleDeciderConfig::IsInitialized() const {
  return true;
}

void NaviObstacleDeciderConfig::InternalSwap(NaviObstacleDeciderConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(min_nudge_distance_, other->min_nudge_distance_);
  swap(max_nudge_distance_, other->max_nudge_distance_);
  swap(max_allow_nudge_speed_, other->max_allow_nudge_speed_);
  swap(safe_distance_, other->safe_distance_);
  swap(nudge_allow_tolerance_, other->nudge_allow_tolerance_);
  swap(judge_dis_coeff_, other->judge_dis_coeff_);
  swap(basis_dis_value_, other->basis_dis_value_);
  swap(cycles_number_, other->cycles_number_);
  swap(max_keep_nudge_cycles_, other->max_keep_nudge_cycles_);
  swap(lateral_velocity_value_, other->lateral_velocity_value_);
  swap(speed_decider_detect_range_, other->speed_decider_detect_range_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NaviObstacleDeciderConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto[4]);
}

// ===================================================================

class NaviPathDeciderConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<NaviPathDeciderConfig>()._has_bits_);
  static void set_has_min_path_length(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_min_look_forward_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_max_keep_lane_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_max_keep_lane_shift_y(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_min_keep_lane_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_keep_lane_shift_compensation(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::apollo::planning::MoveDestLaneConfigTable& move_dest_lane_config_talbe(const NaviPathDeciderConfig* msg);
  static void set_has_move_dest_lane_config_talbe(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_move_dest_lane_compensation(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_max_kappa_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_kappa_move_dest_lane_compensation(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_start_plan_point_from(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::apollo::planning::MoveDestLaneConfigTable&
NaviPathDeciderConfig::_Internal::move_dest_lane_config_talbe(const NaviPathDeciderConfig* msg) {
  return *msg->move_dest_lane_config_talbe_;
}
NaviPathDeciderConfig::NaviPathDeciderConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.planning.NaviPathDeciderConfig)
}
NaviPathDeciderConfig::NaviPathDeciderConfig(const NaviPathDeciderConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_move_dest_lane_config_talbe()) {
    move_dest_lane_config_talbe_ = new ::apollo::planning::MoveDestLaneConfigTable(*from.move_dest_lane_config_talbe_);
  } else {
    move_dest_lane_config_talbe_ = nullptr;
  }
  ::memcpy(&max_kappa_threshold_, &from.max_kappa_threshold_,
    static_cast<size_t>(reinterpret_cast<char*>(&move_dest_lane_compensation_) -
    reinterpret_cast<char*>(&max_kappa_threshold_)) + sizeof(move_dest_lane_compensation_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.NaviPathDeciderConfig)
}

void NaviPathDeciderConfig::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&move_dest_lane_config_talbe_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&start_plan_point_from_) -
    reinterpret_cast<char*>(&move_dest_lane_config_talbe_)) + sizeof(start_plan_point_from_));
min_look_forward_time_ = 2u;
min_path_length_ = 5;
max_keep_lane_distance_ = 0.8;
max_keep_lane_shift_y_ = 20;
min_keep_lane_offset_ = 15;
keep_lane_shift_compensation_ = 0.01;
move_dest_lane_compensation_ = 0.35;
}

NaviPathDeciderConfig::~NaviPathDeciderConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.NaviPathDeciderConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NaviPathDeciderConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete move_dest_lane_config_talbe_;
}

void NaviPathDeciderConfig::ArenaDtor(void* object) {
  NaviPathDeciderConfig* _this = reinterpret_cast< NaviPathDeciderConfig* >(object);
  (void)_this;
}
void NaviPathDeciderConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NaviPathDeciderConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NaviPathDeciderConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.NaviPathDeciderConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(move_dest_lane_config_talbe_ != nullptr);
    move_dest_lane_config_talbe_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&max_kappa_threshold_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&start_plan_point_from_) -
        reinterpret_cast<char*>(&max_kappa_threshold_)) + sizeof(start_plan_point_from_));
    min_look_forward_time_ = 2u;
    min_path_length_ = 5;
    max_keep_lane_distance_ = 0.8;
    max_keep_lane_shift_y_ = 20;
  }
  if (cached_has_bits & 0x00000700u) {
    min_keep_lane_offset_ = 15;
    keep_lane_shift_compensation_ = 0.01;
    move_dest_lane_compensation_ = 0.35;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NaviPathDeciderConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double min_path_length = 1 [default = 5];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_min_path_length(&has_bits);
          min_path_length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 min_look_forward_time = 2 [default = 2];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_min_look_forward_time(&has_bits);
          min_look_forward_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double max_keep_lane_distance = 3 [default = 0.8];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_max_keep_lane_distance(&has_bits);
          max_keep_lane_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double max_keep_lane_shift_y = 4 [default = 20];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_max_keep_lane_shift_y(&has_bits);
          max_keep_lane_shift_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double min_keep_lane_offset = 5 [default = 15];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_min_keep_lane_offset(&has_bits);
          min_keep_lane_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double keep_lane_shift_compensation = 6 [default = 0.01];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_keep_lane_shift_compensation(&has_bits);
          keep_lane_shift_compensation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.MoveDestLaneConfigTable move_dest_lane_config_talbe = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_move_dest_lane_config_talbe(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double move_dest_lane_compensation = 8 [default = 0.35];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_move_dest_lane_compensation(&has_bits);
          move_dest_lane_compensation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double max_kappa_threshold = 9 [default = 0];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_max_kappa_threshold(&has_bits);
          max_kappa_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double kappa_move_dest_lane_compensation = 10 [default = 0];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_kappa_move_dest_lane_compensation(&has_bits);
          kappa_move_dest_lane_compensation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 start_plan_point_from = 11 [default = 0];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_start_plan_point_from(&has_bits);
          start_plan_point_from_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NaviPathDeciderConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.NaviPathDeciderConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double min_path_length = 1 [default = 5];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_min_path_length(), target);
  }

  // optional uint32 min_look_forward_time = 2 [default = 2];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_min_look_forward_time(), target);
  }

  // optional double max_keep_lane_distance = 3 [default = 0.8];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_max_keep_lane_distance(), target);
  }

  // optional double max_keep_lane_shift_y = 4 [default = 20];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_max_keep_lane_shift_y(), target);
  }

  // optional double min_keep_lane_offset = 5 [default = 15];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_min_keep_lane_offset(), target);
  }

  // optional double keep_lane_shift_compensation = 6 [default = 0.01];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_keep_lane_shift_compensation(), target);
  }

  // optional .apollo.planning.MoveDestLaneConfigTable move_dest_lane_config_talbe = 7;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::move_dest_lane_config_talbe(this), target, stream);
  }

  // optional double move_dest_lane_compensation = 8 [default = 0.35];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_move_dest_lane_compensation(), target);
  }

  // optional double max_kappa_threshold = 9 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_max_kappa_threshold(), target);
  }

  // optional double kappa_move_dest_lane_compensation = 10 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_kappa_move_dest_lane_compensation(), target);
  }

  // optional uint32 start_plan_point_from = 11 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_start_plan_point_from(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.NaviPathDeciderConfig)
  return target;
}

size_t NaviPathDeciderConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.NaviPathDeciderConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.planning.MoveDestLaneConfigTable move_dest_lane_config_talbe = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *move_dest_lane_config_talbe_);
    }

    // optional double max_kappa_threshold = 9 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double kappa_move_dest_lane_compensation = 10 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional uint32 start_plan_point_from = 11 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_start_plan_point_from());
    }

    // optional uint32 min_look_forward_time = 2 [default = 2];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_min_look_forward_time());
    }

    // optional double min_path_length = 1 [default = 5];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double max_keep_lane_distance = 3 [default = 0.8];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double max_keep_lane_shift_y = 4 [default = 20];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional double min_keep_lane_offset = 5 [default = 15];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double keep_lane_shift_compensation = 6 [default = 0.01];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double move_dest_lane_compensation = 8 [default = 0.35];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NaviPathDeciderConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NaviPathDeciderConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NaviPathDeciderConfig::GetClassData() const { return &_class_data_; }

void NaviPathDeciderConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NaviPathDeciderConfig *>(to)->MergeFrom(
      static_cast<const NaviPathDeciderConfig &>(from));
}


void NaviPathDeciderConfig::MergeFrom(const NaviPathDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.NaviPathDeciderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_move_dest_lane_config_talbe()->::apollo::planning::MoveDestLaneConfigTable::MergeFrom(from._internal_move_dest_lane_config_talbe());
    }
    if (cached_has_bits & 0x00000002u) {
      max_kappa_threshold_ = from.max_kappa_threshold_;
    }
    if (cached_has_bits & 0x00000004u) {
      kappa_move_dest_lane_compensation_ = from.kappa_move_dest_lane_compensation_;
    }
    if (cached_has_bits & 0x00000008u) {
      start_plan_point_from_ = from.start_plan_point_from_;
    }
    if (cached_has_bits & 0x00000010u) {
      min_look_forward_time_ = from.min_look_forward_time_;
    }
    if (cached_has_bits & 0x00000020u) {
      min_path_length_ = from.min_path_length_;
    }
    if (cached_has_bits & 0x00000040u) {
      max_keep_lane_distance_ = from.max_keep_lane_distance_;
    }
    if (cached_has_bits & 0x00000080u) {
      max_keep_lane_shift_y_ = from.max_keep_lane_shift_y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      min_keep_lane_offset_ = from.min_keep_lane_offset_;
    }
    if (cached_has_bits & 0x00000200u) {
      keep_lane_shift_compensation_ = from.keep_lane_shift_compensation_;
    }
    if (cached_has_bits & 0x00000400u) {
      move_dest_lane_compensation_ = from.move_dest_lane_compensation_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NaviPathDeciderConfig::CopyFrom(const NaviPathDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.NaviPathDeciderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NaviPathDeciderConfig::IsInitialized() const {
  return true;
}

void NaviPathDeciderConfig::InternalSwap(NaviPathDeciderConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NaviPathDeciderConfig, start_plan_point_from_)
      + sizeof(NaviPathDeciderConfig::start_plan_point_from_)
      - PROTOBUF_FIELD_OFFSET(NaviPathDeciderConfig, move_dest_lane_config_talbe_)>(
          reinterpret_cast<char*>(&move_dest_lane_config_talbe_),
          reinterpret_cast<char*>(&other->move_dest_lane_config_talbe_));
  swap(min_look_forward_time_, other->min_look_forward_time_);
  swap(min_path_length_, other->min_path_length_);
  swap(max_keep_lane_distance_, other->max_keep_lane_distance_);
  swap(max_keep_lane_shift_y_, other->max_keep_lane_shift_y_);
  swap(min_keep_lane_offset_, other->min_keep_lane_offset_);
  swap(keep_lane_shift_compensation_, other->keep_lane_shift_compensation_);
  swap(move_dest_lane_compensation_, other->move_dest_lane_compensation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NaviPathDeciderConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto[5]);
}

// ===================================================================

class MoveDestLaneConfigTable::_Internal {
 public:
};

MoveDestLaneConfigTable::MoveDestLaneConfigTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  lateral_shift_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.planning.MoveDestLaneConfigTable)
}
MoveDestLaneConfigTable::MoveDestLaneConfigTable(const MoveDestLaneConfigTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      lateral_shift_(from.lateral_shift_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.MoveDestLaneConfigTable)
}

void MoveDestLaneConfigTable::SharedCtor() {
}

MoveDestLaneConfigTable::~MoveDestLaneConfigTable() {
  // @@protoc_insertion_point(destructor:apollo.planning.MoveDestLaneConfigTable)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MoveDestLaneConfigTable::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MoveDestLaneConfigTable::ArenaDtor(void* object) {
  MoveDestLaneConfigTable* _this = reinterpret_cast< MoveDestLaneConfigTable* >(object);
  (void)_this;
}
void MoveDestLaneConfigTable::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MoveDestLaneConfigTable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MoveDestLaneConfigTable::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.MoveDestLaneConfigTable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lateral_shift_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MoveDestLaneConfigTable::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .apollo.planning.ShiftConfig lateral_shift = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lateral_shift(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoveDestLaneConfigTable::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.MoveDestLaneConfigTable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.planning.ShiftConfig lateral_shift = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lateral_shift_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_lateral_shift(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.MoveDestLaneConfigTable)
  return target;
}

size_t MoveDestLaneConfigTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.MoveDestLaneConfigTable)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.planning.ShiftConfig lateral_shift = 1;
  total_size += 1UL * this->_internal_lateral_shift_size();
  for (const auto& msg : this->lateral_shift_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MoveDestLaneConfigTable::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MoveDestLaneConfigTable::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MoveDestLaneConfigTable::GetClassData() const { return &_class_data_; }

void MoveDestLaneConfigTable::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MoveDestLaneConfigTable *>(to)->MergeFrom(
      static_cast<const MoveDestLaneConfigTable &>(from));
}


void MoveDestLaneConfigTable::MergeFrom(const MoveDestLaneConfigTable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.MoveDestLaneConfigTable)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lateral_shift_.MergeFrom(from.lateral_shift_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MoveDestLaneConfigTable::CopyFrom(const MoveDestLaneConfigTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.MoveDestLaneConfigTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveDestLaneConfigTable::IsInitialized() const {
  return true;
}

void MoveDestLaneConfigTable::InternalSwap(MoveDestLaneConfigTable* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  lateral_shift_.InternalSwap(&other->lateral_shift_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveDestLaneConfigTable::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto[6]);
}

// ===================================================================

class ShiftConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<ShiftConfig>()._has_bits_);
  static void set_has_max_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max_move_dest_lane_shift_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ShiftConfig::ShiftConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.planning.ShiftConfig)
}
ShiftConfig::ShiftConfig(const ShiftConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&max_speed_, &from.max_speed_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_move_dest_lane_shift_y_) -
    reinterpret_cast<char*>(&max_speed_)) + sizeof(max_move_dest_lane_shift_y_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ShiftConfig)
}

void ShiftConfig::SharedCtor() {
max_speed_ = 4.16;
max_move_dest_lane_shift_y_ = 0.4;
}

ShiftConfig::~ShiftConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.ShiftConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ShiftConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ShiftConfig::ArenaDtor(void* object) {
  ShiftConfig* _this = reinterpret_cast< ShiftConfig* >(object);
  (void)_this;
}
void ShiftConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShiftConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ShiftConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ShiftConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    max_speed_ = 4.16;
    max_move_dest_lane_shift_y_ = 0.4;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShiftConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double max_speed = 1 [default = 4.16];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_max_speed(&has_bits);
          max_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double max_move_dest_lane_shift_y = 3 [default = 0.4];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_max_move_dest_lane_shift_y(&has_bits);
          max_move_dest_lane_shift_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShiftConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ShiftConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double max_speed = 1 [default = 4.16];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_max_speed(), target);
  }

  // optional double max_move_dest_lane_shift_y = 3 [default = 0.4];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_max_move_dest_lane_shift_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ShiftConfig)
  return target;
}

size_t ShiftConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ShiftConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double max_speed = 1 [default = 4.16];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double max_move_dest_lane_shift_y = 3 [default = 0.4];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShiftConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ShiftConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShiftConfig::GetClassData() const { return &_class_data_; }

void ShiftConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ShiftConfig *>(to)->MergeFrom(
      static_cast<const ShiftConfig &>(from));
}


void ShiftConfig::MergeFrom(const ShiftConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ShiftConfig)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      max_speed_ = from.max_speed_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_move_dest_lane_shift_y_ = from.max_move_dest_lane_shift_y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ShiftConfig::CopyFrom(const ShiftConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ShiftConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShiftConfig::IsInitialized() const {
  return true;
}

void ShiftConfig::InternalSwap(ShiftConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(max_speed_, other->max_speed_);
  swap(max_move_dest_lane_shift_y_, other->max_move_dest_lane_shift_y_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShiftConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto[7]);
}

// ===================================================================

class NaviSpeedDeciderConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<NaviSpeedDeciderConfig>()._has_bits_);
  static void set_has_preferred_accel(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_preferred_decel(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_preferred_jerk(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_max_accel(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_max_decel(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_obstacle_buffer(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_safe_distance_base(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_safe_distance_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_following_accel_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_soft_centric_accel_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_hard_centric_accel_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_hard_speed_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_hard_accel_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_enable_safe_path(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_enable_planning_start_point(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_enable_accel_auto_compensation(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_kappa_preview(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_kappa_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

NaviSpeedDeciderConfig::NaviSpeedDeciderConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.planning.NaviSpeedDeciderConfig)
}
NaviSpeedDeciderConfig::NaviSpeedDeciderConfig(const NaviSpeedDeciderConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&kappa_preview_, &from.kappa_preview_,
    static_cast<size_t>(reinterpret_cast<char*>(&hard_accel_limit_) -
    reinterpret_cast<char*>(&kappa_preview_)) + sizeof(hard_accel_limit_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.NaviSpeedDeciderConfig)
}

void NaviSpeedDeciderConfig::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&kappa_preview_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&kappa_threshold_) -
    reinterpret_cast<char*>(&kappa_preview_)) + sizeof(kappa_threshold_));
enable_safe_path_ = true;
enable_planning_start_point_ = true;
enable_accel_auto_compensation_ = true;
preferred_accel_ = 2;
preferred_decel_ = 2;
preferred_jerk_ = 2;
max_accel_ = 4;
max_decel_ = 5;
obstacle_buffer_ = 0.5;
safe_distance_base_ = 2;
safe_distance_ratio_ = 1;
following_accel_ratio_ = 0.5;
soft_centric_accel_limit_ = 1.2;
hard_centric_accel_limit_ = 1.5;
hard_speed_limit_ = 100;
hard_accel_limit_ = 10;
}

NaviSpeedDeciderConfig::~NaviSpeedDeciderConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.NaviSpeedDeciderConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NaviSpeedDeciderConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void NaviSpeedDeciderConfig::ArenaDtor(void* object) {
  NaviSpeedDeciderConfig* _this = reinterpret_cast< NaviSpeedDeciderConfig* >(object);
  (void)_this;
}
void NaviSpeedDeciderConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NaviSpeedDeciderConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NaviSpeedDeciderConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.NaviSpeedDeciderConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&kappa_preview_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&kappa_threshold_) -
        reinterpret_cast<char*>(&kappa_preview_)) + sizeof(kappa_threshold_));
    enable_safe_path_ = true;
    enable_planning_start_point_ = true;
    enable_accel_auto_compensation_ = true;
    preferred_accel_ = 2;
    preferred_decel_ = 2;
    preferred_jerk_ = 2;
  }
  if (cached_has_bits & 0x0000ff00u) {
    max_accel_ = 4;
    max_decel_ = 5;
    obstacle_buffer_ = 0.5;
    safe_distance_base_ = 2;
    safe_distance_ratio_ = 1;
    following_accel_ratio_ = 0.5;
    soft_centric_accel_limit_ = 1.2;
    hard_centric_accel_limit_ = 1.5;
  }
  if (cached_has_bits & 0x00030000u) {
    hard_speed_limit_ = 100;
    hard_accel_limit_ = 10;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NaviSpeedDeciderConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double preferred_accel = 1 [default = 2];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_preferred_accel(&has_bits);
          preferred_accel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double preferred_decel = 2 [default = 2];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_preferred_decel(&has_bits);
          preferred_decel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double preferred_jerk = 3 [default = 2];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_preferred_jerk(&has_bits);
          preferred_jerk_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double max_accel = 4 [default = 4];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_max_accel(&has_bits);
          max_accel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double max_decel = 5 [default = 5];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_max_decel(&has_bits);
          max_decel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double obstacle_buffer = 6 [default = 0.5];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_obstacle_buffer(&has_bits);
          obstacle_buffer_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double safe_distance_base = 7 [default = 2];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_safe_distance_base(&has_bits);
          safe_distance_base_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double safe_distance_ratio = 8 [default = 1];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_safe_distance_ratio(&has_bits);
          safe_distance_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double following_accel_ratio = 9 [default = 0.5];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_following_accel_ratio(&has_bits);
          following_accel_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double soft_centric_accel_limit = 10 [default = 1.2];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_soft_centric_accel_limit(&has_bits);
          soft_centric_accel_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double hard_centric_accel_limit = 11 [default = 1.5];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_hard_centric_accel_limit(&has_bits);
          hard_centric_accel_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double hard_speed_limit = 12 [default = 100];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          _Internal::set_has_hard_speed_limit(&has_bits);
          hard_speed_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double hard_accel_limit = 13 [default = 10];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          _Internal::set_has_hard_accel_limit(&has_bits);
          hard_accel_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_safe_path = 14 [default = true];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_enable_safe_path(&has_bits);
          enable_safe_path_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_planning_start_point = 15 [default = true];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_enable_planning_start_point(&has_bits);
          enable_planning_start_point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_accel_auto_compensation = 16 [default = true];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_enable_accel_auto_compensation(&has_bits);
          enable_accel_auto_compensation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double kappa_preview = 17 [default = 0];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 137)) {
          _Internal::set_has_kappa_preview(&has_bits);
          kappa_preview_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double kappa_threshold = 18 [default = 0];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 145)) {
          _Internal::set_has_kappa_threshold(&has_bits);
          kappa_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NaviSpeedDeciderConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.NaviSpeedDeciderConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double preferred_accel = 1 [default = 2];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_preferred_accel(), target);
  }

  // optional double preferred_decel = 2 [default = 2];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_preferred_decel(), target);
  }

  // optional double preferred_jerk = 3 [default = 2];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_preferred_jerk(), target);
  }

  // optional double max_accel = 4 [default = 4];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_max_accel(), target);
  }

  // optional double max_decel = 5 [default = 5];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_max_decel(), target);
  }

  // optional double obstacle_buffer = 6 [default = 0.5];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_obstacle_buffer(), target);
  }

  // optional double safe_distance_base = 7 [default = 2];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_safe_distance_base(), target);
  }

  // optional double safe_distance_ratio = 8 [default = 1];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_safe_distance_ratio(), target);
  }

  // optional double following_accel_ratio = 9 [default = 0.5];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_following_accel_ratio(), target);
  }

  // optional double soft_centric_accel_limit = 10 [default = 1.2];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_soft_centric_accel_limit(), target);
  }

  // optional double hard_centric_accel_limit = 11 [default = 1.5];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_hard_centric_accel_limit(), target);
  }

  // optional double hard_speed_limit = 12 [default = 100];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_hard_speed_limit(), target);
  }

  // optional double hard_accel_limit = 13 [default = 10];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_hard_accel_limit(), target);
  }

  // optional bool enable_safe_path = 14 [default = true];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_enable_safe_path(), target);
  }

  // optional bool enable_planning_start_point = 15 [default = true];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_enable_planning_start_point(), target);
  }

  // optional bool enable_accel_auto_compensation = 16 [default = true];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_enable_accel_auto_compensation(), target);
  }

  // optional double kappa_preview = 17 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(17, this->_internal_kappa_preview(), target);
  }

  // optional double kappa_threshold = 18 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(18, this->_internal_kappa_threshold(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.NaviSpeedDeciderConfig)
  return target;
}

size_t NaviSpeedDeciderConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.NaviSpeedDeciderConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional double kappa_preview = 17 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 8;
    }

    // optional double kappa_threshold = 18 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 8;
    }

    // optional bool enable_safe_path = 14 [default = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool enable_planning_start_point = 15 [default = true];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool enable_accel_auto_compensation = 16 [default = true];
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 1;
    }

    // optional double preferred_accel = 1 [default = 2];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double preferred_decel = 2 [default = 2];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double preferred_jerk = 3 [default = 2];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional double max_accel = 4 [default = 4];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double max_decel = 5 [default = 5];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double obstacle_buffer = 6 [default = 0.5];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional double safe_distance_base = 7 [default = 2];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

    // optional double safe_distance_ratio = 8 [default = 1];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 8;
    }

    // optional double following_accel_ratio = 9 [default = 0.5];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 8;
    }

    // optional double soft_centric_accel_limit = 10 [default = 1.2];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 8;
    }

    // optional double hard_centric_accel_limit = 11 [default = 1.5];
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00030000u) {
    // optional double hard_speed_limit = 12 [default = 100];
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 8;
    }

    // optional double hard_accel_limit = 13 [default = 10];
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NaviSpeedDeciderConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NaviSpeedDeciderConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NaviSpeedDeciderConfig::GetClassData() const { return &_class_data_; }

void NaviSpeedDeciderConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NaviSpeedDeciderConfig *>(to)->MergeFrom(
      static_cast<const NaviSpeedDeciderConfig &>(from));
}


void NaviSpeedDeciderConfig::MergeFrom(const NaviSpeedDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.NaviSpeedDeciderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      kappa_preview_ = from.kappa_preview_;
    }
    if (cached_has_bits & 0x00000002u) {
      kappa_threshold_ = from.kappa_threshold_;
    }
    if (cached_has_bits & 0x00000004u) {
      enable_safe_path_ = from.enable_safe_path_;
    }
    if (cached_has_bits & 0x00000008u) {
      enable_planning_start_point_ = from.enable_planning_start_point_;
    }
    if (cached_has_bits & 0x00000010u) {
      enable_accel_auto_compensation_ = from.enable_accel_auto_compensation_;
    }
    if (cached_has_bits & 0x00000020u) {
      preferred_accel_ = from.preferred_accel_;
    }
    if (cached_has_bits & 0x00000040u) {
      preferred_decel_ = from.preferred_decel_;
    }
    if (cached_has_bits & 0x00000080u) {
      preferred_jerk_ = from.preferred_jerk_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      max_accel_ = from.max_accel_;
    }
    if (cached_has_bits & 0x00000200u) {
      max_decel_ = from.max_decel_;
    }
    if (cached_has_bits & 0x00000400u) {
      obstacle_buffer_ = from.obstacle_buffer_;
    }
    if (cached_has_bits & 0x00000800u) {
      safe_distance_base_ = from.safe_distance_base_;
    }
    if (cached_has_bits & 0x00001000u) {
      safe_distance_ratio_ = from.safe_distance_ratio_;
    }
    if (cached_has_bits & 0x00002000u) {
      following_accel_ratio_ = from.following_accel_ratio_;
    }
    if (cached_has_bits & 0x00004000u) {
      soft_centric_accel_limit_ = from.soft_centric_accel_limit_;
    }
    if (cached_has_bits & 0x00008000u) {
      hard_centric_accel_limit_ = from.hard_centric_accel_limit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00030000u) {
    if (cached_has_bits & 0x00010000u) {
      hard_speed_limit_ = from.hard_speed_limit_;
    }
    if (cached_has_bits & 0x00020000u) {
      hard_accel_limit_ = from.hard_accel_limit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NaviSpeedDeciderConfig::CopyFrom(const NaviSpeedDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.NaviSpeedDeciderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NaviSpeedDeciderConfig::IsInitialized() const {
  return true;
}

void NaviSpeedDeciderConfig::InternalSwap(NaviSpeedDeciderConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NaviSpeedDeciderConfig, kappa_threshold_)
      + sizeof(NaviSpeedDeciderConfig::kappa_threshold_)
      - PROTOBUF_FIELD_OFFSET(NaviSpeedDeciderConfig, kappa_preview_)>(
          reinterpret_cast<char*>(&kappa_preview_),
          reinterpret_cast<char*>(&other->kappa_preview_));
  swap(enable_safe_path_, other->enable_safe_path_);
  swap(enable_planning_start_point_, other->enable_planning_start_point_);
  swap(enable_accel_auto_compensation_, other->enable_accel_auto_compensation_);
  swap(preferred_accel_, other->preferred_accel_);
  swap(preferred_decel_, other->preferred_decel_);
  swap(preferred_jerk_, other->preferred_jerk_);
  swap(max_accel_, other->max_accel_);
  swap(max_decel_, other->max_decel_);
  swap(obstacle_buffer_, other->obstacle_buffer_);
  swap(safe_distance_base_, other->safe_distance_base_);
  swap(safe_distance_ratio_, other->safe_distance_ratio_);
  swap(following_accel_ratio_, other->following_accel_ratio_);
  swap(soft_centric_accel_limit_, other->soft_centric_accel_limit_);
  swap(hard_centric_accel_limit_, other->hard_centric_accel_limit_);
  swap(hard_speed_limit_, other->hard_speed_limit_);
  swap(hard_accel_limit_, other->hard_accel_limit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NaviSpeedDeciderConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto[8]);
}

// ===================================================================

class PathAssessmentDeciderConfig::_Internal {
 public:
};

PathAssessmentDeciderConfig::PathAssessmentDeciderConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:apollo.planning.PathAssessmentDeciderConfig)
}
PathAssessmentDeciderConfig::PathAssessmentDeciderConfig(const PathAssessmentDeciderConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.PathAssessmentDeciderConfig)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PathAssessmentDeciderConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PathAssessmentDeciderConfig::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata PathAssessmentDeciderConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto[9]);
}

// ===================================================================

class PathBoundsDeciderConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<PathBoundsDeciderConfig>()._has_bits_);
  static void set_has_is_lane_borrowing(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_pull_over(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_pull_over_destination_to_adc_buffer(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_pull_over_destination_to_pathend_buffer(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_pull_over_road_edge_buffer(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_pull_over_approach_lon_distance_adjust_factor(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_adc_buffer_coeff(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_is_extend_lane_bounds_to_include_adc(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

PathBoundsDeciderConfig::PathBoundsDeciderConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.planning.PathBoundsDeciderConfig)
}
PathBoundsDeciderConfig::PathBoundsDeciderConfig(const PathBoundsDeciderConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&is_lane_borrowing_, &from.is_lane_borrowing_,
    static_cast<size_t>(reinterpret_cast<char*>(&adc_buffer_coeff_) -
    reinterpret_cast<char*>(&is_lane_borrowing_)) + sizeof(adc_buffer_coeff_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.PathBoundsDeciderConfig)
}

void PathBoundsDeciderConfig::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&is_lane_borrowing_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_pull_over_) -
    reinterpret_cast<char*>(&is_lane_borrowing_)) + sizeof(is_pull_over_));
is_extend_lane_bounds_to_include_adc_ = true;
pull_over_destination_to_adc_buffer_ = 25;
pull_over_destination_to_pathend_buffer_ = 10;
pull_over_road_edge_buffer_ = 0.15;
pull_over_approach_lon_distance_adjust_factor_ = 1.5;
adc_buffer_coeff_ = 1;
}

PathBoundsDeciderConfig::~PathBoundsDeciderConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.PathBoundsDeciderConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PathBoundsDeciderConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PathBoundsDeciderConfig::ArenaDtor(void* object) {
  PathBoundsDeciderConfig* _this = reinterpret_cast< PathBoundsDeciderConfig* >(object);
  (void)_this;
}
void PathBoundsDeciderConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PathBoundsDeciderConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PathBoundsDeciderConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.PathBoundsDeciderConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&is_lane_borrowing_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_pull_over_) -
      reinterpret_cast<char*>(&is_lane_borrowing_)) + sizeof(is_pull_over_));
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000fcu) {
    is_extend_lane_bounds_to_include_adc_ = true;
    pull_over_destination_to_adc_buffer_ = 25;
    pull_over_destination_to_pathend_buffer_ = 10;
    pull_over_road_edge_buffer_ = 0.15;
    pull_over_approach_lon_distance_adjust_factor_ = 1.5;
    adc_buffer_coeff_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PathBoundsDeciderConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool is_lane_borrowing = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_is_lane_borrowing(&has_bits);
          is_lane_borrowing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_pull_over = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_is_pull_over(&has_bits);
          is_pull_over_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double pull_over_destination_to_adc_buffer = 3 [default = 25];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_pull_over_destination_to_adc_buffer(&has_bits);
          pull_over_destination_to_adc_buffer_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double pull_over_destination_to_pathend_buffer = 4 [default = 10];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_pull_over_destination_to_pathend_buffer(&has_bits);
          pull_over_destination_to_pathend_buffer_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double pull_over_road_edge_buffer = 5 [default = 0.15];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_pull_over_road_edge_buffer(&has_bits);
          pull_over_road_edge_buffer_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double pull_over_approach_lon_distance_adjust_factor = 6 [default = 1.5];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_pull_over_approach_lon_distance_adjust_factor(&has_bits);
          pull_over_approach_lon_distance_adjust_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double adc_buffer_coeff = 7 [default = 1];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_adc_buffer_coeff(&has_bits);
          adc_buffer_coeff_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_extend_lane_bounds_to_include_adc = 8 [default = true];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_is_extend_lane_bounds_to_include_adc(&has_bits);
          is_extend_lane_bounds_to_include_adc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PathBoundsDeciderConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.PathBoundsDeciderConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_lane_borrowing = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_lane_borrowing(), target);
  }

  // optional bool is_pull_over = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_pull_over(), target);
  }

  // optional double pull_over_destination_to_adc_buffer = 3 [default = 25];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_pull_over_destination_to_adc_buffer(), target);
  }

  // optional double pull_over_destination_to_pathend_buffer = 4 [default = 10];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_pull_over_destination_to_pathend_buffer(), target);
  }

  // optional double pull_over_road_edge_buffer = 5 [default = 0.15];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_pull_over_road_edge_buffer(), target);
  }

  // optional double pull_over_approach_lon_distance_adjust_factor = 6 [default = 1.5];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_pull_over_approach_lon_distance_adjust_factor(), target);
  }

  // optional double adc_buffer_coeff = 7 [default = 1];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_adc_buffer_coeff(), target);
  }

  // optional bool is_extend_lane_bounds_to_include_adc = 8 [default = true];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_is_extend_lane_bounds_to_include_adc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.PathBoundsDeciderConfig)
  return target;
}

size_t PathBoundsDeciderConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.PathBoundsDeciderConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool is_lane_borrowing = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool is_pull_over = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool is_extend_lane_bounds_to_include_adc = 8 [default = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional double pull_over_destination_to_adc_buffer = 3 [default = 25];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double pull_over_destination_to_pathend_buffer = 4 [default = 10];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double pull_over_road_edge_buffer = 5 [default = 0.15];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double pull_over_approach_lon_distance_adjust_factor = 6 [default = 1.5];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double adc_buffer_coeff = 7 [default = 1];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PathBoundsDeciderConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PathBoundsDeciderConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PathBoundsDeciderConfig::GetClassData() const { return &_class_data_; }

void PathBoundsDeciderConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PathBoundsDeciderConfig *>(to)->MergeFrom(
      static_cast<const PathBoundsDeciderConfig &>(from));
}


void PathBoundsDeciderConfig::MergeFrom(const PathBoundsDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.PathBoundsDeciderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      is_lane_borrowing_ = from.is_lane_borrowing_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_pull_over_ = from.is_pull_over_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_extend_lane_bounds_to_include_adc_ = from.is_extend_lane_bounds_to_include_adc_;
    }
    if (cached_has_bits & 0x00000008u) {
      pull_over_destination_to_adc_buffer_ = from.pull_over_destination_to_adc_buffer_;
    }
    if (cached_has_bits & 0x00000010u) {
      pull_over_destination_to_pathend_buffer_ = from.pull_over_destination_to_pathend_buffer_;
    }
    if (cached_has_bits & 0x00000020u) {
      pull_over_road_edge_buffer_ = from.pull_over_road_edge_buffer_;
    }
    if (cached_has_bits & 0x00000040u) {
      pull_over_approach_lon_distance_adjust_factor_ = from.pull_over_approach_lon_distance_adjust_factor_;
    }
    if (cached_has_bits & 0x00000080u) {
      adc_buffer_coeff_ = from.adc_buffer_coeff_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PathBoundsDeciderConfig::CopyFrom(const PathBoundsDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.PathBoundsDeciderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathBoundsDeciderConfig::IsInitialized() const {
  return true;
}

void PathBoundsDeciderConfig::InternalSwap(PathBoundsDeciderConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PathBoundsDeciderConfig, is_pull_over_)
      + sizeof(PathBoundsDeciderConfig::is_pull_over_)
      - PROTOBUF_FIELD_OFFSET(PathBoundsDeciderConfig, is_lane_borrowing_)>(
          reinterpret_cast<char*>(&is_lane_borrowing_),
          reinterpret_cast<char*>(&other->is_lane_borrowing_));
  swap(is_extend_lane_bounds_to_include_adc_, other->is_extend_lane_bounds_to_include_adc_);
  swap(pull_over_destination_to_adc_buffer_, other->pull_over_destination_to_adc_buffer_);
  swap(pull_over_destination_to_pathend_buffer_, other->pull_over_destination_to_pathend_buffer_);
  swap(pull_over_road_edge_buffer_, other->pull_over_road_edge_buffer_);
  swap(pull_over_approach_lon_distance_adjust_factor_, other->pull_over_approach_lon_distance_adjust_factor_);
  swap(adc_buffer_coeff_, other->adc_buffer_coeff_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PathBoundsDeciderConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto[10]);
}

// ===================================================================

class PathDeciderConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<PathDeciderConfig>()._has_bits_);
  static void set_has_static_obstacle_buffer(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PathDeciderConfig::PathDeciderConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.planning.PathDeciderConfig)
}
PathDeciderConfig::PathDeciderConfig(const PathDeciderConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  static_obstacle_buffer_ = from.static_obstacle_buffer_;
  // @@protoc_insertion_point(copy_constructor:apollo.planning.PathDeciderConfig)
}

void PathDeciderConfig::SharedCtor() {
static_obstacle_buffer_ = 0.3;
}

PathDeciderConfig::~PathDeciderConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.PathDeciderConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PathDeciderConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PathDeciderConfig::ArenaDtor(void* object) {
  PathDeciderConfig* _this = reinterpret_cast< PathDeciderConfig* >(object);
  (void)_this;
}
void PathDeciderConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PathDeciderConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PathDeciderConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.PathDeciderConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  static_obstacle_buffer_ = 0.3;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PathDeciderConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double static_obstacle_buffer = 1 [default = 0.3];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_static_obstacle_buffer(&has_bits);
          static_obstacle_buffer_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PathDeciderConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.PathDeciderConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double static_obstacle_buffer = 1 [default = 0.3];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_static_obstacle_buffer(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.PathDeciderConfig)
  return target;
}

size_t PathDeciderConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.PathDeciderConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional double static_obstacle_buffer = 1 [default = 0.3];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PathDeciderConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PathDeciderConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PathDeciderConfig::GetClassData() const { return &_class_data_; }

void PathDeciderConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PathDeciderConfig *>(to)->MergeFrom(
      static_cast<const PathDeciderConfig &>(from));
}


void PathDeciderConfig::MergeFrom(const PathDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.PathDeciderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_static_obstacle_buffer()) {
    _internal_set_static_obstacle_buffer(from._internal_static_obstacle_buffer());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PathDeciderConfig::CopyFrom(const PathDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.PathDeciderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathDeciderConfig::IsInitialized() const {
  return true;
}

void PathDeciderConfig::InternalSwap(PathDeciderConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(static_obstacle_buffer_, other->static_obstacle_buffer_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PathDeciderConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto[11]);
}

// ===================================================================

class PathLaneBorrowDeciderConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<PathLaneBorrowDeciderConfig>()._has_bits_);
  static void set_has_allow_lane_borrowing(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PathLaneBorrowDeciderConfig::PathLaneBorrowDeciderConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.planning.PathLaneBorrowDeciderConfig)
}
PathLaneBorrowDeciderConfig::PathLaneBorrowDeciderConfig(const PathLaneBorrowDeciderConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  allow_lane_borrowing_ = from.allow_lane_borrowing_;
  // @@protoc_insertion_point(copy_constructor:apollo.planning.PathLaneBorrowDeciderConfig)
}

void PathLaneBorrowDeciderConfig::SharedCtor() {
allow_lane_borrowing_ = false;
}

PathLaneBorrowDeciderConfig::~PathLaneBorrowDeciderConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.PathLaneBorrowDeciderConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PathLaneBorrowDeciderConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PathLaneBorrowDeciderConfig::ArenaDtor(void* object) {
  PathLaneBorrowDeciderConfig* _this = reinterpret_cast< PathLaneBorrowDeciderConfig* >(object);
  (void)_this;
}
void PathLaneBorrowDeciderConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PathLaneBorrowDeciderConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PathLaneBorrowDeciderConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.PathLaneBorrowDeciderConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  allow_lane_borrowing_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PathLaneBorrowDeciderConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool allow_lane_borrowing = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_allow_lane_borrowing(&has_bits);
          allow_lane_borrowing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PathLaneBorrowDeciderConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.PathLaneBorrowDeciderConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool allow_lane_borrowing = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_allow_lane_borrowing(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.PathLaneBorrowDeciderConfig)
  return target;
}

size_t PathLaneBorrowDeciderConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.PathLaneBorrowDeciderConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool allow_lane_borrowing = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PathLaneBorrowDeciderConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PathLaneBorrowDeciderConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PathLaneBorrowDeciderConfig::GetClassData() const { return &_class_data_; }

void PathLaneBorrowDeciderConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PathLaneBorrowDeciderConfig *>(to)->MergeFrom(
      static_cast<const PathLaneBorrowDeciderConfig &>(from));
}


void PathLaneBorrowDeciderConfig::MergeFrom(const PathLaneBorrowDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.PathLaneBorrowDeciderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_allow_lane_borrowing()) {
    _internal_set_allow_lane_borrowing(from._internal_allow_lane_borrowing());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PathLaneBorrowDeciderConfig::CopyFrom(const PathLaneBorrowDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.PathLaneBorrowDeciderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathLaneBorrowDeciderConfig::IsInitialized() const {
  return true;
}

void PathLaneBorrowDeciderConfig::InternalSwap(PathLaneBorrowDeciderConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(allow_lane_borrowing_, other->allow_lane_borrowing_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PathLaneBorrowDeciderConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto[12]);
}

// ===================================================================

class PathReferenceDeciderConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<PathReferenceDeciderConfig>()._has_bits_);
  static void set_has_min_path_reference_length(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_weight_x_ref_path_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PathReferenceDeciderConfig::PathReferenceDeciderConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.planning.PathReferenceDeciderConfig)
}
PathReferenceDeciderConfig::PathReferenceDeciderConfig(const PathReferenceDeciderConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&weight_x_ref_path_reference_, &from.weight_x_ref_path_reference_,
    static_cast<size_t>(reinterpret_cast<char*>(&min_path_reference_length_) -
    reinterpret_cast<char*>(&weight_x_ref_path_reference_)) + sizeof(min_path_reference_length_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.PathReferenceDeciderConfig)
}

void PathReferenceDeciderConfig::SharedCtor() {
weight_x_ref_path_reference_ = 0;
min_path_reference_length_ = 20u;
}

PathReferenceDeciderConfig::~PathReferenceDeciderConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.PathReferenceDeciderConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PathReferenceDeciderConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PathReferenceDeciderConfig::ArenaDtor(void* object) {
  PathReferenceDeciderConfig* _this = reinterpret_cast< PathReferenceDeciderConfig* >(object);
  (void)_this;
}
void PathReferenceDeciderConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PathReferenceDeciderConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PathReferenceDeciderConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.PathReferenceDeciderConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    weight_x_ref_path_reference_ = 0;
    min_path_reference_length_ = 20u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PathReferenceDeciderConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 min_path_reference_length = 1 [default = 20];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_min_path_reference_length(&has_bits);
          min_path_reference_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double weight_x_ref_path_reference = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_weight_x_ref_path_reference(&has_bits);
          weight_x_ref_path_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PathReferenceDeciderConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.PathReferenceDeciderConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 min_path_reference_length = 1 [default = 20];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_min_path_reference_length(), target);
  }

  // optional double weight_x_ref_path_reference = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_weight_x_ref_path_reference(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.PathReferenceDeciderConfig)
  return target;
}

size_t PathReferenceDeciderConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.PathReferenceDeciderConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double weight_x_ref_path_reference = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 min_path_reference_length = 1 [default = 20];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_min_path_reference_length());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PathReferenceDeciderConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PathReferenceDeciderConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PathReferenceDeciderConfig::GetClassData() const { return &_class_data_; }

void PathReferenceDeciderConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PathReferenceDeciderConfig *>(to)->MergeFrom(
      static_cast<const PathReferenceDeciderConfig &>(from));
}


void PathReferenceDeciderConfig::MergeFrom(const PathReferenceDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.PathReferenceDeciderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      weight_x_ref_path_reference_ = from.weight_x_ref_path_reference_;
    }
    if (cached_has_bits & 0x00000002u) {
      min_path_reference_length_ = from.min_path_reference_length_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PathReferenceDeciderConfig::CopyFrom(const PathReferenceDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.PathReferenceDeciderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathReferenceDeciderConfig::IsInitialized() const {
  return true;
}

void PathReferenceDeciderConfig::InternalSwap(PathReferenceDeciderConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(weight_x_ref_path_reference_, other->weight_x_ref_path_reference_);
  swap(min_path_reference_length_, other->min_path_reference_length_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PathReferenceDeciderConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto[13]);
}

// ===================================================================

class PathReuseDeciderConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<PathReuseDeciderConfig>()._has_bits_);
  static void set_has_reuse_path(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PathReuseDeciderConfig::PathReuseDeciderConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.planning.PathReuseDeciderConfig)
}
PathReuseDeciderConfig::PathReuseDeciderConfig(const PathReuseDeciderConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reuse_path_ = from.reuse_path_;
  // @@protoc_insertion_point(copy_constructor:apollo.planning.PathReuseDeciderConfig)
}

void PathReuseDeciderConfig::SharedCtor() {
reuse_path_ = false;
}

PathReuseDeciderConfig::~PathReuseDeciderConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.PathReuseDeciderConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PathReuseDeciderConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PathReuseDeciderConfig::ArenaDtor(void* object) {
  PathReuseDeciderConfig* _this = reinterpret_cast< PathReuseDeciderConfig* >(object);
  (void)_this;
}
void PathReuseDeciderConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PathReuseDeciderConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PathReuseDeciderConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.PathReuseDeciderConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reuse_path_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PathReuseDeciderConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool reuse_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_reuse_path(&has_bits);
          reuse_path_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PathReuseDeciderConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.PathReuseDeciderConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool reuse_path = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_reuse_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.PathReuseDeciderConfig)
  return target;
}

size_t PathReuseDeciderConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.PathReuseDeciderConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool reuse_path = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PathReuseDeciderConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PathReuseDeciderConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PathReuseDeciderConfig::GetClassData() const { return &_class_data_; }

void PathReuseDeciderConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PathReuseDeciderConfig *>(to)->MergeFrom(
      static_cast<const PathReuseDeciderConfig &>(from));
}


void PathReuseDeciderConfig::MergeFrom(const PathReuseDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.PathReuseDeciderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_reuse_path()) {
    _internal_set_reuse_path(from._internal_reuse_path());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PathReuseDeciderConfig::CopyFrom(const PathReuseDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.PathReuseDeciderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathReuseDeciderConfig::IsInitialized() const {
  return true;
}

void PathReuseDeciderConfig::InternalSwap(PathReuseDeciderConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(reuse_path_, other->reuse_path_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PathReuseDeciderConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto[14]);
}

// ===================================================================

class PiecewiseJerkNonlinearSpeedOptimizerConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<PiecewiseJerkNonlinearSpeedOptimizerConfig>()._has_bits_);
  static void set_has_acc_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_jerk_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_lat_acc_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_s_potential_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_ref_v_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_ref_s_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_end_s_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_end_v_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_end_a_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_soft_s_bound_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_use_warm_start(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PiecewiseJerkNonlinearSpeedOptimizerConfig::PiecewiseJerkNonlinearSpeedOptimizerConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig)
}
PiecewiseJerkNonlinearSpeedOptimizerConfig::PiecewiseJerkNonlinearSpeedOptimizerConfig(const PiecewiseJerkNonlinearSpeedOptimizerConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&use_warm_start_, &from.use_warm_start_,
    static_cast<size_t>(reinterpret_cast<char*>(&soft_s_bound_weight_) -
    reinterpret_cast<char*>(&use_warm_start_)) + sizeof(soft_s_bound_weight_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig)
}

void PiecewiseJerkNonlinearSpeedOptimizerConfig::SharedCtor() {
use_warm_start_ = true;
acc_weight_ = 500;
jerk_weight_ = 100;
lat_acc_weight_ = 500;
s_potential_weight_ = 10;
ref_v_weight_ = 10;
ref_s_weight_ = 10;
end_s_weight_ = 10;
end_v_weight_ = 10;
end_a_weight_ = 10;
soft_s_bound_weight_ = 10;
}

PiecewiseJerkNonlinearSpeedOptimizerConfig::~PiecewiseJerkNonlinearSpeedOptimizerConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PiecewiseJerkNonlinearSpeedOptimizerConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PiecewiseJerkNonlinearSpeedOptimizerConfig::ArenaDtor(void* object) {
  PiecewiseJerkNonlinearSpeedOptimizerConfig* _this = reinterpret_cast< PiecewiseJerkNonlinearSpeedOptimizerConfig* >(object);
  (void)_this;
}
void PiecewiseJerkNonlinearSpeedOptimizerConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PiecewiseJerkNonlinearSpeedOptimizerConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PiecewiseJerkNonlinearSpeedOptimizerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    use_warm_start_ = true;
    acc_weight_ = 500;
    jerk_weight_ = 100;
    lat_acc_weight_ = 500;
    s_potential_weight_ = 10;
    ref_v_weight_ = 10;
    ref_s_weight_ = 10;
    end_s_weight_ = 10;
  }
  if (cached_has_bits & 0x00000700u) {
    end_v_weight_ = 10;
    end_a_weight_ = 10;
    soft_s_bound_weight_ = 10;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PiecewiseJerkNonlinearSpeedOptimizerConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double acc_weight = 1 [default = 500];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_acc_weight(&has_bits);
          acc_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double jerk_weight = 2 [default = 100];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_jerk_weight(&has_bits);
          jerk_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double lat_acc_weight = 3 [default = 500];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_lat_acc_weight(&has_bits);
          lat_acc_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double s_potential_weight = 4 [default = 10];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_s_potential_weight(&has_bits);
          s_potential_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double ref_v_weight = 5 [default = 10];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_ref_v_weight(&has_bits);
          ref_v_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double ref_s_weight = 6 [default = 10];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_ref_s_weight(&has_bits);
          ref_s_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double end_s_weight = 7 [default = 10];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_end_s_weight(&has_bits);
          end_s_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double end_v_weight = 8 [default = 10];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_end_v_weight(&has_bits);
          end_v_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double end_a_weight = 9 [default = 10];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_end_a_weight(&has_bits);
          end_a_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double soft_s_bound_weight = 10 [default = 10];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_soft_s_bound_weight(&has_bits);
          soft_s_bound_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool use_warm_start = 100 [default = true];
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_use_warm_start(&has_bits);
          use_warm_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PiecewiseJerkNonlinearSpeedOptimizerConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double acc_weight = 1 [default = 500];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_acc_weight(), target);
  }

  // optional double jerk_weight = 2 [default = 100];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_jerk_weight(), target);
  }

  // optional double lat_acc_weight = 3 [default = 500];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_lat_acc_weight(), target);
  }

  // optional double s_potential_weight = 4 [default = 10];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_s_potential_weight(), target);
  }

  // optional double ref_v_weight = 5 [default = 10];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_ref_v_weight(), target);
  }

  // optional double ref_s_weight = 6 [default = 10];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_ref_s_weight(), target);
  }

  // optional double end_s_weight = 7 [default = 10];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_end_s_weight(), target);
  }

  // optional double end_v_weight = 8 [default = 10];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_end_v_weight(), target);
  }

  // optional double end_a_weight = 9 [default = 10];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_end_a_weight(), target);
  }

  // optional double soft_s_bound_weight = 10 [default = 10];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_soft_s_bound_weight(), target);
  }

  // optional bool use_warm_start = 100 [default = true];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(100, this->_internal_use_warm_start(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig)
  return target;
}

size_t PiecewiseJerkNonlinearSpeedOptimizerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool use_warm_start = 100 [default = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 1;
    }

    // optional double acc_weight = 1 [default = 500];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double jerk_weight = 2 [default = 100];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double lat_acc_weight = 3 [default = 500];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double s_potential_weight = 4 [default = 10];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double ref_v_weight = 5 [default = 10];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double ref_s_weight = 6 [default = 10];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double end_s_weight = 7 [default = 10];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional double end_v_weight = 8 [default = 10];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double end_a_weight = 9 [default = 10];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double soft_s_bound_weight = 10 [default = 10];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PiecewiseJerkNonlinearSpeedOptimizerConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PiecewiseJerkNonlinearSpeedOptimizerConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PiecewiseJerkNonlinearSpeedOptimizerConfig::GetClassData() const { return &_class_data_; }

void PiecewiseJerkNonlinearSpeedOptimizerConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PiecewiseJerkNonlinearSpeedOptimizerConfig *>(to)->MergeFrom(
      static_cast<const PiecewiseJerkNonlinearSpeedOptimizerConfig &>(from));
}


void PiecewiseJerkNonlinearSpeedOptimizerConfig::MergeFrom(const PiecewiseJerkNonlinearSpeedOptimizerConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      use_warm_start_ = from.use_warm_start_;
    }
    if (cached_has_bits & 0x00000002u) {
      acc_weight_ = from.acc_weight_;
    }
    if (cached_has_bits & 0x00000004u) {
      jerk_weight_ = from.jerk_weight_;
    }
    if (cached_has_bits & 0x00000008u) {
      lat_acc_weight_ = from.lat_acc_weight_;
    }
    if (cached_has_bits & 0x00000010u) {
      s_potential_weight_ = from.s_potential_weight_;
    }
    if (cached_has_bits & 0x00000020u) {
      ref_v_weight_ = from.ref_v_weight_;
    }
    if (cached_has_bits & 0x00000040u) {
      ref_s_weight_ = from.ref_s_weight_;
    }
    if (cached_has_bits & 0x00000080u) {
      end_s_weight_ = from.end_s_weight_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      end_v_weight_ = from.end_v_weight_;
    }
    if (cached_has_bits & 0x00000200u) {
      end_a_weight_ = from.end_a_weight_;
    }
    if (cached_has_bits & 0x00000400u) {
      soft_s_bound_weight_ = from.soft_s_bound_weight_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PiecewiseJerkNonlinearSpeedOptimizerConfig::CopyFrom(const PiecewiseJerkNonlinearSpeedOptimizerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PiecewiseJerkNonlinearSpeedOptimizerConfig::IsInitialized() const {
  return true;
}

void PiecewiseJerkNonlinearSpeedOptimizerConfig::InternalSwap(PiecewiseJerkNonlinearSpeedOptimizerConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(use_warm_start_, other->use_warm_start_);
  swap(acc_weight_, other->acc_weight_);
  swap(jerk_weight_, other->jerk_weight_);
  swap(lat_acc_weight_, other->lat_acc_weight_);
  swap(s_potential_weight_, other->s_potential_weight_);
  swap(ref_v_weight_, other->ref_v_weight_);
  swap(ref_s_weight_, other->ref_s_weight_);
  swap(end_s_weight_, other->end_s_weight_);
  swap(end_v_weight_, other->end_v_weight_);
  swap(end_a_weight_, other->end_a_weight_);
  swap(soft_s_bound_weight_, other->soft_s_bound_weight_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PiecewiseJerkNonlinearSpeedOptimizerConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto[15]);
}

// ===================================================================

class PiecewiseJerkPathOptimizerConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<PiecewiseJerkPathOptimizerConfig>()._has_bits_);
  static const ::apollo::planning::PiecewiseJerkPathWeights& default_path_config(const PiecewiseJerkPathOptimizerConfig* msg);
  static void set_has_default_path_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::planning::PiecewiseJerkPathWeights& lane_change_path_config(const PiecewiseJerkPathOptimizerConfig* msg);
  static void set_has_lane_change_path_config(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_path_reference_l_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::apollo::planning::PiecewiseJerkPathWeights&
PiecewiseJerkPathOptimizerConfig::_Internal::default_path_config(const PiecewiseJerkPathOptimizerConfig* msg) {
  return *msg->default_path_config_;
}
const ::apollo::planning::PiecewiseJerkPathWeights&
PiecewiseJerkPathOptimizerConfig::_Internal::lane_change_path_config(const PiecewiseJerkPathOptimizerConfig* msg) {
  return *msg->lane_change_path_config_;
}
PiecewiseJerkPathOptimizerConfig::PiecewiseJerkPathOptimizerConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.planning.PiecewiseJerkPathOptimizerConfig)
}
PiecewiseJerkPathOptimizerConfig::PiecewiseJerkPathOptimizerConfig(const PiecewiseJerkPathOptimizerConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_default_path_config()) {
    default_path_config_ = new ::apollo::planning::PiecewiseJerkPathWeights(*from.default_path_config_);
  } else {
    default_path_config_ = nullptr;
  }
  if (from._internal_has_lane_change_path_config()) {
    lane_change_path_config_ = new ::apollo::planning::PiecewiseJerkPathWeights(*from.lane_change_path_config_);
  } else {
    lane_change_path_config_ = nullptr;
  }
  path_reference_l_weight_ = from.path_reference_l_weight_;
  // @@protoc_insertion_point(copy_constructor:apollo.planning.PiecewiseJerkPathOptimizerConfig)
}

void PiecewiseJerkPathOptimizerConfig::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&default_path_config_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&path_reference_l_weight_) -
    reinterpret_cast<char*>(&default_path_config_)) + sizeof(path_reference_l_weight_));
}

PiecewiseJerkPathOptimizerConfig::~PiecewiseJerkPathOptimizerConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.PiecewiseJerkPathOptimizerConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PiecewiseJerkPathOptimizerConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete default_path_config_;
  if (this != internal_default_instance()) delete lane_change_path_config_;
}

void PiecewiseJerkPathOptimizerConfig::ArenaDtor(void* object) {
  PiecewiseJerkPathOptimizerConfig* _this = reinterpret_cast< PiecewiseJerkPathOptimizerConfig* >(object);
  (void)_this;
}
void PiecewiseJerkPathOptimizerConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PiecewiseJerkPathOptimizerConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PiecewiseJerkPathOptimizerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.PiecewiseJerkPathOptimizerConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(default_path_config_ != nullptr);
      default_path_config_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(lane_change_path_config_ != nullptr);
      lane_change_path_config_->Clear();
    }
  }
  path_reference_l_weight_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PiecewiseJerkPathOptimizerConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.planning.PiecewiseJerkPathWeights default_path_config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_default_path_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.PiecewiseJerkPathWeights lane_change_path_config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_lane_change_path_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double path_reference_l_weight = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_path_reference_l_weight(&has_bits);
          path_reference_l_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PiecewiseJerkPathOptimizerConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.PiecewiseJerkPathOptimizerConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning.PiecewiseJerkPathWeights default_path_config = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::default_path_config(this), target, stream);
  }

  // optional .apollo.planning.PiecewiseJerkPathWeights lane_change_path_config = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::lane_change_path_config(this), target, stream);
  }

  // optional double path_reference_l_weight = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_path_reference_l_weight(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.PiecewiseJerkPathOptimizerConfig)
  return target;
}

size_t PiecewiseJerkPathOptimizerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.PiecewiseJerkPathOptimizerConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .apollo.planning.PiecewiseJerkPathWeights default_path_config = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *default_path_config_);
    }

    // optional .apollo.planning.PiecewiseJerkPathWeights lane_change_path_config = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *lane_change_path_config_);
    }

    // optional double path_reference_l_weight = 3 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PiecewiseJerkPathOptimizerConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PiecewiseJerkPathOptimizerConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PiecewiseJerkPathOptimizerConfig::GetClassData() const { return &_class_data_; }

void PiecewiseJerkPathOptimizerConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PiecewiseJerkPathOptimizerConfig *>(to)->MergeFrom(
      static_cast<const PiecewiseJerkPathOptimizerConfig &>(from));
}


void PiecewiseJerkPathOptimizerConfig::MergeFrom(const PiecewiseJerkPathOptimizerConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.PiecewiseJerkPathOptimizerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_default_path_config()->::apollo::planning::PiecewiseJerkPathWeights::MergeFrom(from._internal_default_path_config());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_lane_change_path_config()->::apollo::planning::PiecewiseJerkPathWeights::MergeFrom(from._internal_lane_change_path_config());
    }
    if (cached_has_bits & 0x00000004u) {
      path_reference_l_weight_ = from.path_reference_l_weight_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PiecewiseJerkPathOptimizerConfig::CopyFrom(const PiecewiseJerkPathOptimizerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.PiecewiseJerkPathOptimizerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PiecewiseJerkPathOptimizerConfig::IsInitialized() const {
  return true;
}

void PiecewiseJerkPathOptimizerConfig::InternalSwap(PiecewiseJerkPathOptimizerConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PiecewiseJerkPathOptimizerConfig, path_reference_l_weight_)
      + sizeof(PiecewiseJerkPathOptimizerConfig::path_reference_l_weight_)
      - PROTOBUF_FIELD_OFFSET(PiecewiseJerkPathOptimizerConfig, default_path_config_)>(
          reinterpret_cast<char*>(&default_path_config_),
          reinterpret_cast<char*>(&other->default_path_config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PiecewiseJerkPathOptimizerConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto[16]);
}

// ===================================================================

class PiecewiseJerkPathWeights::_Internal {
 public:
  using HasBits = decltype(std::declval<PiecewiseJerkPathWeights>()._has_bits_);
  static void set_has_l_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_dl_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ddl_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_dddl_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

PiecewiseJerkPathWeights::PiecewiseJerkPathWeights(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.planning.PiecewiseJerkPathWeights)
}
PiecewiseJerkPathWeights::PiecewiseJerkPathWeights(const PiecewiseJerkPathWeights& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&l_weight_, &from.l_weight_,
    static_cast<size_t>(reinterpret_cast<char*>(&dddl_weight_) -
    reinterpret_cast<char*>(&l_weight_)) + sizeof(dddl_weight_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.PiecewiseJerkPathWeights)
}

void PiecewiseJerkPathWeights::SharedCtor() {
l_weight_ = 1;
dl_weight_ = 100;
ddl_weight_ = 1000;
dddl_weight_ = 10000;
}

PiecewiseJerkPathWeights::~PiecewiseJerkPathWeights() {
  // @@protoc_insertion_point(destructor:apollo.planning.PiecewiseJerkPathWeights)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PiecewiseJerkPathWeights::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PiecewiseJerkPathWeights::ArenaDtor(void* object) {
  PiecewiseJerkPathWeights* _this = reinterpret_cast< PiecewiseJerkPathWeights* >(object);
  (void)_this;
}
void PiecewiseJerkPathWeights::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PiecewiseJerkPathWeights::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PiecewiseJerkPathWeights::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.PiecewiseJerkPathWeights)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    l_weight_ = 1;
    dl_weight_ = 100;
    ddl_weight_ = 1000;
    dddl_weight_ = 10000;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PiecewiseJerkPathWeights::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double l_weight = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_l_weight(&has_bits);
          l_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double dl_weight = 2 [default = 100];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_dl_weight(&has_bits);
          dl_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double ddl_weight = 3 [default = 1000];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_ddl_weight(&has_bits);
          ddl_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double dddl_weight = 4 [default = 10000];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_dddl_weight(&has_bits);
          dddl_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PiecewiseJerkPathWeights::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.PiecewiseJerkPathWeights)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double l_weight = 1 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_l_weight(), target);
  }

  // optional double dl_weight = 2 [default = 100];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_dl_weight(), target);
  }

  // optional double ddl_weight = 3 [default = 1000];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_ddl_weight(), target);
  }

  // optional double dddl_weight = 4 [default = 10000];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_dddl_weight(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.PiecewiseJerkPathWeights)
  return target;
}

size_t PiecewiseJerkPathWeights::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.PiecewiseJerkPathWeights)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional double l_weight = 1 [default = 1];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double dl_weight = 2 [default = 100];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double ddl_weight = 3 [default = 1000];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double dddl_weight = 4 [default = 10000];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PiecewiseJerkPathWeights::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PiecewiseJerkPathWeights::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PiecewiseJerkPathWeights::GetClassData() const { return &_class_data_; }

void PiecewiseJerkPathWeights::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PiecewiseJerkPathWeights *>(to)->MergeFrom(
      static_cast<const PiecewiseJerkPathWeights &>(from));
}


void PiecewiseJerkPathWeights::MergeFrom(const PiecewiseJerkPathWeights& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.PiecewiseJerkPathWeights)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      l_weight_ = from.l_weight_;
    }
    if (cached_has_bits & 0x00000002u) {
      dl_weight_ = from.dl_weight_;
    }
    if (cached_has_bits & 0x00000004u) {
      ddl_weight_ = from.ddl_weight_;
    }
    if (cached_has_bits & 0x00000008u) {
      dddl_weight_ = from.dddl_weight_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PiecewiseJerkPathWeights::CopyFrom(const PiecewiseJerkPathWeights& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.PiecewiseJerkPathWeights)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PiecewiseJerkPathWeights::IsInitialized() const {
  return true;
}

void PiecewiseJerkPathWeights::InternalSwap(PiecewiseJerkPathWeights* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(l_weight_, other->l_weight_);
  swap(dl_weight_, other->dl_weight_);
  swap(ddl_weight_, other->ddl_weight_);
  swap(dddl_weight_, other->dddl_weight_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PiecewiseJerkPathWeights::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto[17]);
}

// ===================================================================

class PiecewiseJerkSpeedOptimizerConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<PiecewiseJerkSpeedOptimizerConfig>()._has_bits_);
  static void set_has_acc_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_jerk_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_kappa_penalty_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ref_s_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ref_v_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

PiecewiseJerkSpeedOptimizerConfig::PiecewiseJerkSpeedOptimizerConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.planning.PiecewiseJerkSpeedOptimizerConfig)
}
PiecewiseJerkSpeedOptimizerConfig::PiecewiseJerkSpeedOptimizerConfig(const PiecewiseJerkSpeedOptimizerConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&acc_weight_, &from.acc_weight_,
    static_cast<size_t>(reinterpret_cast<char*>(&ref_v_weight_) -
    reinterpret_cast<char*>(&acc_weight_)) + sizeof(ref_v_weight_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.PiecewiseJerkSpeedOptimizerConfig)
}

void PiecewiseJerkSpeedOptimizerConfig::SharedCtor() {
acc_weight_ = 1;
jerk_weight_ = 10;
kappa_penalty_weight_ = 1000;
ref_s_weight_ = 10;
ref_v_weight_ = 10;
}

PiecewiseJerkSpeedOptimizerConfig::~PiecewiseJerkSpeedOptimizerConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.PiecewiseJerkSpeedOptimizerConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PiecewiseJerkSpeedOptimizerConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PiecewiseJerkSpeedOptimizerConfig::ArenaDtor(void* object) {
  PiecewiseJerkSpeedOptimizerConfig* _this = reinterpret_cast< PiecewiseJerkSpeedOptimizerConfig* >(object);
  (void)_this;
}
void PiecewiseJerkSpeedOptimizerConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PiecewiseJerkSpeedOptimizerConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PiecewiseJerkSpeedOptimizerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.PiecewiseJerkSpeedOptimizerConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    acc_weight_ = 1;
    jerk_weight_ = 10;
    kappa_penalty_weight_ = 1000;
    ref_s_weight_ = 10;
    ref_v_weight_ = 10;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PiecewiseJerkSpeedOptimizerConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double acc_weight = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_acc_weight(&has_bits);
          acc_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double jerk_weight = 2 [default = 10];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_jerk_weight(&has_bits);
          jerk_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double kappa_penalty_weight = 3 [default = 1000];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_kappa_penalty_weight(&has_bits);
          kappa_penalty_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double ref_s_weight = 4 [default = 10];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_ref_s_weight(&has_bits);
          ref_s_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double ref_v_weight = 5 [default = 10];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_ref_v_weight(&has_bits);
          ref_v_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PiecewiseJerkSpeedOptimizerConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.PiecewiseJerkSpeedOptimizerConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double acc_weight = 1 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_acc_weight(), target);
  }

  // optional double jerk_weight = 2 [default = 10];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_jerk_weight(), target);
  }

  // optional double kappa_penalty_weight = 3 [default = 1000];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_kappa_penalty_weight(), target);
  }

  // optional double ref_s_weight = 4 [default = 10];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_ref_s_weight(), target);
  }

  // optional double ref_v_weight = 5 [default = 10];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_ref_v_weight(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.PiecewiseJerkSpeedOptimizerConfig)
  return target;
}

size_t PiecewiseJerkSpeedOptimizerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.PiecewiseJerkSpeedOptimizerConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional double acc_weight = 1 [default = 1];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double jerk_weight = 2 [default = 10];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double kappa_penalty_weight = 3 [default = 1000];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double ref_s_weight = 4 [default = 10];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double ref_v_weight = 5 [default = 10];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PiecewiseJerkSpeedOptimizerConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PiecewiseJerkSpeedOptimizerConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PiecewiseJerkSpeedOptimizerConfig::GetClassData() const { return &_class_data_; }

void PiecewiseJerkSpeedOptimizerConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PiecewiseJerkSpeedOptimizerConfig *>(to)->MergeFrom(
      static_cast<const PiecewiseJerkSpeedOptimizerConfig &>(from));
}


void PiecewiseJerkSpeedOptimizerConfig::MergeFrom(const PiecewiseJerkSpeedOptimizerConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.PiecewiseJerkSpeedOptimizerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      acc_weight_ = from.acc_weight_;
    }
    if (cached_has_bits & 0x00000002u) {
      jerk_weight_ = from.jerk_weight_;
    }
    if (cached_has_bits & 0x00000004u) {
      kappa_penalty_weight_ = from.kappa_penalty_weight_;
    }
    if (cached_has_bits & 0x00000008u) {
      ref_s_weight_ = from.ref_s_weight_;
    }
    if (cached_has_bits & 0x00000010u) {
      ref_v_weight_ = from.ref_v_weight_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PiecewiseJerkSpeedOptimizerConfig::CopyFrom(const PiecewiseJerkSpeedOptimizerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.PiecewiseJerkSpeedOptimizerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PiecewiseJerkSpeedOptimizerConfig::IsInitialized() const {
  return true;
}

void PiecewiseJerkSpeedOptimizerConfig::InternalSwap(PiecewiseJerkSpeedOptimizerConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(acc_weight_, other->acc_weight_);
  swap(jerk_weight_, other->jerk_weight_);
  swap(kappa_penalty_weight_, other->kappa_penalty_weight_);
  swap(ref_s_weight_, other->ref_s_weight_);
  swap(ref_v_weight_, other->ref_v_weight_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PiecewiseJerkSpeedOptimizerConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto[18]);
}

// ===================================================================

class RuleBasedStopDeciderConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<RuleBasedStopDeciderConfig>()._has_bits_);
  static void set_has_max_adc_stop_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max_valid_stop_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_search_beam_length(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_search_beam_radius_intensity(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_search_range(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_is_block_angle_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_approach_distance_for_lane_change(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_urgent_distance_for_lane_change(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

RuleBasedStopDeciderConfig::RuleBasedStopDeciderConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.planning.RuleBasedStopDeciderConfig)
}
RuleBasedStopDeciderConfig::RuleBasedStopDeciderConfig(const RuleBasedStopDeciderConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&max_adc_stop_speed_, &from.max_adc_stop_speed_,
    static_cast<size_t>(reinterpret_cast<char*>(&urgent_distance_for_lane_change_) -
    reinterpret_cast<char*>(&max_adc_stop_speed_)) + sizeof(urgent_distance_for_lane_change_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.RuleBasedStopDeciderConfig)
}

void RuleBasedStopDeciderConfig::SharedCtor() {
max_adc_stop_speed_ = 0.3;
max_valid_stop_distance_ = 0.5;
search_beam_length_ = 5;
search_beam_radius_intensity_ = 0.08;
search_range_ = 3.14;
is_block_angle_threshold_ = 1.57;
approach_distance_for_lane_change_ = 80;
urgent_distance_for_lane_change_ = 50;
}

RuleBasedStopDeciderConfig::~RuleBasedStopDeciderConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.RuleBasedStopDeciderConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RuleBasedStopDeciderConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RuleBasedStopDeciderConfig::ArenaDtor(void* object) {
  RuleBasedStopDeciderConfig* _this = reinterpret_cast< RuleBasedStopDeciderConfig* >(object);
  (void)_this;
}
void RuleBasedStopDeciderConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RuleBasedStopDeciderConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RuleBasedStopDeciderConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.RuleBasedStopDeciderConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    max_adc_stop_speed_ = 0.3;
    max_valid_stop_distance_ = 0.5;
    search_beam_length_ = 5;
    search_beam_radius_intensity_ = 0.08;
    search_range_ = 3.14;
    is_block_angle_threshold_ = 1.57;
    approach_distance_for_lane_change_ = 80;
    urgent_distance_for_lane_change_ = 50;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RuleBasedStopDeciderConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double max_adc_stop_speed = 1 [default = 0.3];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_max_adc_stop_speed(&has_bits);
          max_adc_stop_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double max_valid_stop_distance = 2 [default = 0.5];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_max_valid_stop_distance(&has_bits);
          max_valid_stop_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double search_beam_length = 3 [default = 5];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_search_beam_length(&has_bits);
          search_beam_length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double search_beam_radius_intensity = 4 [default = 0.08];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_search_beam_radius_intensity(&has_bits);
          search_beam_radius_intensity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double search_range = 5 [default = 3.14];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_search_range(&has_bits);
          search_range_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double is_block_angle_threshold = 6 [default = 1.57];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_is_block_angle_threshold(&has_bits);
          is_block_angle_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double approach_distance_for_lane_change = 10 [default = 80];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_approach_distance_for_lane_change(&has_bits);
          approach_distance_for_lane_change_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double urgent_distance_for_lane_change = 11 [default = 50];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_urgent_distance_for_lane_change(&has_bits);
          urgent_distance_for_lane_change_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RuleBasedStopDeciderConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.RuleBasedStopDeciderConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double max_adc_stop_speed = 1 [default = 0.3];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_max_adc_stop_speed(), target);
  }

  // optional double max_valid_stop_distance = 2 [default = 0.5];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_max_valid_stop_distance(), target);
  }

  // optional double search_beam_length = 3 [default = 5];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_search_beam_length(), target);
  }

  // optional double search_beam_radius_intensity = 4 [default = 0.08];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_search_beam_radius_intensity(), target);
  }

  // optional double search_range = 5 [default = 3.14];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_search_range(), target);
  }

  // optional double is_block_angle_threshold = 6 [default = 1.57];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_is_block_angle_threshold(), target);
  }

  // optional double approach_distance_for_lane_change = 10 [default = 80];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_approach_distance_for_lane_change(), target);
  }

  // optional double urgent_distance_for_lane_change = 11 [default = 50];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_urgent_distance_for_lane_change(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.RuleBasedStopDeciderConfig)
  return target;
}

size_t RuleBasedStopDeciderConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.RuleBasedStopDeciderConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional double max_adc_stop_speed = 1 [default = 0.3];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double max_valid_stop_distance = 2 [default = 0.5];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double search_beam_length = 3 [default = 5];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double search_beam_radius_intensity = 4 [default = 0.08];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double search_range = 5 [default = 3.14];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double is_block_angle_threshold = 6 [default = 1.57];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double approach_distance_for_lane_change = 10 [default = 80];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double urgent_distance_for_lane_change = 11 [default = 50];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RuleBasedStopDeciderConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RuleBasedStopDeciderConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RuleBasedStopDeciderConfig::GetClassData() const { return &_class_data_; }

void RuleBasedStopDeciderConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RuleBasedStopDeciderConfig *>(to)->MergeFrom(
      static_cast<const RuleBasedStopDeciderConfig &>(from));
}


void RuleBasedStopDeciderConfig::MergeFrom(const RuleBasedStopDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.RuleBasedStopDeciderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      max_adc_stop_speed_ = from.max_adc_stop_speed_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_valid_stop_distance_ = from.max_valid_stop_distance_;
    }
    if (cached_has_bits & 0x00000004u) {
      search_beam_length_ = from.search_beam_length_;
    }
    if (cached_has_bits & 0x00000008u) {
      search_beam_radius_intensity_ = from.search_beam_radius_intensity_;
    }
    if (cached_has_bits & 0x00000010u) {
      search_range_ = from.search_range_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_block_angle_threshold_ = from.is_block_angle_threshold_;
    }
    if (cached_has_bits & 0x00000040u) {
      approach_distance_for_lane_change_ = from.approach_distance_for_lane_change_;
    }
    if (cached_has_bits & 0x00000080u) {
      urgent_distance_for_lane_change_ = from.urgent_distance_for_lane_change_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RuleBasedStopDeciderConfig::CopyFrom(const RuleBasedStopDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.RuleBasedStopDeciderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RuleBasedStopDeciderConfig::IsInitialized() const {
  return true;
}

void RuleBasedStopDeciderConfig::InternalSwap(RuleBasedStopDeciderConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(max_adc_stop_speed_, other->max_adc_stop_speed_);
  swap(max_valid_stop_distance_, other->max_valid_stop_distance_);
  swap(search_beam_length_, other->search_beam_length_);
  swap(search_beam_radius_intensity_, other->search_beam_radius_intensity_);
  swap(search_range_, other->search_range_);
  swap(is_block_angle_threshold_, other->is_block_angle_threshold_);
  swap(approach_distance_for_lane_change_, other->approach_distance_for_lane_change_);
  swap(urgent_distance_for_lane_change_, other->urgent_distance_for_lane_change_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RuleBasedStopDeciderConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto[19]);
}

// ===================================================================

class SpeedBoundsDeciderConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<SpeedBoundsDeciderConfig>()._has_bits_);
  static void set_has_total_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_boundary_buffer(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_max_centric_acceleration_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_minimal_kappa(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_point_extension(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_lowest_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_collision_safety_range(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_static_obs_nudge_speed_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_dynamic_obs_nudge_speed_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SpeedBoundsDeciderConfig::SpeedBoundsDeciderConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.planning.SpeedBoundsDeciderConfig)
}
SpeedBoundsDeciderConfig::SpeedBoundsDeciderConfig(const SpeedBoundsDeciderConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&static_obs_nudge_speed_ratio_, &from.static_obs_nudge_speed_ratio_,
    static_cast<size_t>(reinterpret_cast<char*>(&collision_safety_range_) -
    reinterpret_cast<char*>(&static_obs_nudge_speed_ratio_)) + sizeof(collision_safety_range_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.SpeedBoundsDeciderConfig)
}

void SpeedBoundsDeciderConfig::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&static_obs_nudge_speed_ratio_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&dynamic_obs_nudge_speed_ratio_) -
    reinterpret_cast<char*>(&static_obs_nudge_speed_ratio_)) + sizeof(dynamic_obs_nudge_speed_ratio_));
total_time_ = 7;
boundary_buffer_ = 0.1;
max_centric_acceleration_limit_ = 2;
minimal_kappa_ = 1e-05;
point_extension_ = 1;
lowest_speed_ = 2.5;
collision_safety_range_ = 1;
}

SpeedBoundsDeciderConfig::~SpeedBoundsDeciderConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.SpeedBoundsDeciderConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SpeedBoundsDeciderConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SpeedBoundsDeciderConfig::ArenaDtor(void* object) {
  SpeedBoundsDeciderConfig* _this = reinterpret_cast< SpeedBoundsDeciderConfig* >(object);
  (void)_this;
}
void SpeedBoundsDeciderConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpeedBoundsDeciderConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SpeedBoundsDeciderConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.SpeedBoundsDeciderConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&static_obs_nudge_speed_ratio_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dynamic_obs_nudge_speed_ratio_) -
        reinterpret_cast<char*>(&static_obs_nudge_speed_ratio_)) + sizeof(dynamic_obs_nudge_speed_ratio_));
    total_time_ = 7;
    boundary_buffer_ = 0.1;
    max_centric_acceleration_limit_ = 2;
    minimal_kappa_ = 1e-05;
    point_extension_ = 1;
    lowest_speed_ = 2.5;
  }
  collision_safety_range_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpeedBoundsDeciderConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double total_time = 1 [default = 7];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_total_time(&has_bits);
          total_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double boundary_buffer = 2 [default = 0.1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_boundary_buffer(&has_bits);
          boundary_buffer_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double max_centric_acceleration_limit = 3 [default = 2];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_max_centric_acceleration_limit(&has_bits);
          max_centric_acceleration_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double minimal_kappa = 4 [default = 1e-05];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_minimal_kappa(&has_bits);
          minimal_kappa_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double point_extension = 5 [default = 1];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_point_extension(&has_bits);
          point_extension_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double lowest_speed = 6 [default = 2.5];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_lowest_speed(&has_bits);
          lowest_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double collision_safety_range = 7 [default = 1];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_collision_safety_range(&has_bits);
          collision_safety_range_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double static_obs_nudge_speed_ratio = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_static_obs_nudge_speed_ratio(&has_bits);
          static_obs_nudge_speed_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double dynamic_obs_nudge_speed_ratio = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_dynamic_obs_nudge_speed_ratio(&has_bits);
          dynamic_obs_nudge_speed_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpeedBoundsDeciderConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.SpeedBoundsDeciderConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double total_time = 1 [default = 7];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_total_time(), target);
  }

  // optional double boundary_buffer = 2 [default = 0.1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_boundary_buffer(), target);
  }

  // optional double max_centric_acceleration_limit = 3 [default = 2];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_max_centric_acceleration_limit(), target);
  }

  // optional double minimal_kappa = 4 [default = 1e-05];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_minimal_kappa(), target);
  }

  // optional double point_extension = 5 [default = 1];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_point_extension(), target);
  }

  // optional double lowest_speed = 6 [default = 2.5];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_lowest_speed(), target);
  }

  // optional double collision_safety_range = 7 [default = 1];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_collision_safety_range(), target);
  }

  // optional double static_obs_nudge_speed_ratio = 8;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_static_obs_nudge_speed_ratio(), target);
  }

  // optional double dynamic_obs_nudge_speed_ratio = 9;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_dynamic_obs_nudge_speed_ratio(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.SpeedBoundsDeciderConfig)
  return target;
}

size_t SpeedBoundsDeciderConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.SpeedBoundsDeciderConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional double static_obs_nudge_speed_ratio = 8;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double dynamic_obs_nudge_speed_ratio = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double total_time = 1 [default = 7];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double boundary_buffer = 2 [default = 0.1];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double max_centric_acceleration_limit = 3 [default = 2];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double minimal_kappa = 4 [default = 1e-05];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double point_extension = 5 [default = 1];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double lowest_speed = 6 [default = 2.5];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  // optional double collision_safety_range = 7 [default = 1];
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpeedBoundsDeciderConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SpeedBoundsDeciderConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpeedBoundsDeciderConfig::GetClassData() const { return &_class_data_; }

void SpeedBoundsDeciderConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SpeedBoundsDeciderConfig *>(to)->MergeFrom(
      static_cast<const SpeedBoundsDeciderConfig &>(from));
}


void SpeedBoundsDeciderConfig::MergeFrom(const SpeedBoundsDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.SpeedBoundsDeciderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      static_obs_nudge_speed_ratio_ = from.static_obs_nudge_speed_ratio_;
    }
    if (cached_has_bits & 0x00000002u) {
      dynamic_obs_nudge_speed_ratio_ = from.dynamic_obs_nudge_speed_ratio_;
    }
    if (cached_has_bits & 0x00000004u) {
      total_time_ = from.total_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      boundary_buffer_ = from.boundary_buffer_;
    }
    if (cached_has_bits & 0x00000010u) {
      max_centric_acceleration_limit_ = from.max_centric_acceleration_limit_;
    }
    if (cached_has_bits & 0x00000020u) {
      minimal_kappa_ = from.minimal_kappa_;
    }
    if (cached_has_bits & 0x00000040u) {
      point_extension_ = from.point_extension_;
    }
    if (cached_has_bits & 0x00000080u) {
      lowest_speed_ = from.lowest_speed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_collision_safety_range(from._internal_collision_safety_range());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpeedBoundsDeciderConfig::CopyFrom(const SpeedBoundsDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.SpeedBoundsDeciderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeedBoundsDeciderConfig::IsInitialized() const {
  return true;
}

void SpeedBoundsDeciderConfig::InternalSwap(SpeedBoundsDeciderConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpeedBoundsDeciderConfig, dynamic_obs_nudge_speed_ratio_)
      + sizeof(SpeedBoundsDeciderConfig::dynamic_obs_nudge_speed_ratio_)
      - PROTOBUF_FIELD_OFFSET(SpeedBoundsDeciderConfig, static_obs_nudge_speed_ratio_)>(
          reinterpret_cast<char*>(&static_obs_nudge_speed_ratio_),
          reinterpret_cast<char*>(&other->static_obs_nudge_speed_ratio_));
  swap(total_time_, other->total_time_);
  swap(boundary_buffer_, other->boundary_buffer_);
  swap(max_centric_acceleration_limit_, other->max_centric_acceleration_limit_);
  swap(minimal_kappa_, other->minimal_kappa_);
  swap(point_extension_, other->point_extension_);
  swap(lowest_speed_, other->lowest_speed_);
  swap(collision_safety_range_, other->collision_safety_range_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpeedBoundsDeciderConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto[20]);
}

// ===================================================================

class SpeedHeuristicOptimizerConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<SpeedHeuristicOptimizerConfig>()._has_bits_);
  static const ::apollo::planning::DpStSpeedOptimizerConfig& default_speed_config(const SpeedHeuristicOptimizerConfig* msg);
  static void set_has_default_speed_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::planning::DpStSpeedOptimizerConfig& lane_change_speed_config(const SpeedHeuristicOptimizerConfig* msg);
  static void set_has_lane_change_speed_config(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::planning::DpStSpeedOptimizerConfig&
SpeedHeuristicOptimizerConfig::_Internal::default_speed_config(const SpeedHeuristicOptimizerConfig* msg) {
  return *msg->default_speed_config_;
}
const ::apollo::planning::DpStSpeedOptimizerConfig&
SpeedHeuristicOptimizerConfig::_Internal::lane_change_speed_config(const SpeedHeuristicOptimizerConfig* msg) {
  return *msg->lane_change_speed_config_;
}
SpeedHeuristicOptimizerConfig::SpeedHeuristicOptimizerConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.planning.SpeedHeuristicOptimizerConfig)
}
SpeedHeuristicOptimizerConfig::SpeedHeuristicOptimizerConfig(const SpeedHeuristicOptimizerConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_default_speed_config()) {
    default_speed_config_ = new ::apollo::planning::DpStSpeedOptimizerConfig(*from.default_speed_config_);
  } else {
    default_speed_config_ = nullptr;
  }
  if (from._internal_has_lane_change_speed_config()) {
    lane_change_speed_config_ = new ::apollo::planning::DpStSpeedOptimizerConfig(*from.lane_change_speed_config_);
  } else {
    lane_change_speed_config_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning.SpeedHeuristicOptimizerConfig)
}

void SpeedHeuristicOptimizerConfig::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&default_speed_config_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&lane_change_speed_config_) -
    reinterpret_cast<char*>(&default_speed_config_)) + sizeof(lane_change_speed_config_));
}

SpeedHeuristicOptimizerConfig::~SpeedHeuristicOptimizerConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.SpeedHeuristicOptimizerConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SpeedHeuristicOptimizerConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete default_speed_config_;
  if (this != internal_default_instance()) delete lane_change_speed_config_;
}

void SpeedHeuristicOptimizerConfig::ArenaDtor(void* object) {
  SpeedHeuristicOptimizerConfig* _this = reinterpret_cast< SpeedHeuristicOptimizerConfig* >(object);
  (void)_this;
}
void SpeedHeuristicOptimizerConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpeedHeuristicOptimizerConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SpeedHeuristicOptimizerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.SpeedHeuristicOptimizerConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(default_speed_config_ != nullptr);
      default_speed_config_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(lane_change_speed_config_ != nullptr);
      lane_change_speed_config_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpeedHeuristicOptimizerConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.planning.DpStSpeedOptimizerConfig default_speed_config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_default_speed_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.DpStSpeedOptimizerConfig lane_change_speed_config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_lane_change_speed_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpeedHeuristicOptimizerConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.SpeedHeuristicOptimizerConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning.DpStSpeedOptimizerConfig default_speed_config = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::default_speed_config(this), target, stream);
  }

  // optional .apollo.planning.DpStSpeedOptimizerConfig lane_change_speed_config = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::lane_change_speed_config(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.SpeedHeuristicOptimizerConfig)
  return target;
}

size_t SpeedHeuristicOptimizerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.SpeedHeuristicOptimizerConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.planning.DpStSpeedOptimizerConfig default_speed_config = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *default_speed_config_);
    }

    // optional .apollo.planning.DpStSpeedOptimizerConfig lane_change_speed_config = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *lane_change_speed_config_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpeedHeuristicOptimizerConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SpeedHeuristicOptimizerConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpeedHeuristicOptimizerConfig::GetClassData() const { return &_class_data_; }

void SpeedHeuristicOptimizerConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SpeedHeuristicOptimizerConfig *>(to)->MergeFrom(
      static_cast<const SpeedHeuristicOptimizerConfig &>(from));
}


void SpeedHeuristicOptimizerConfig::MergeFrom(const SpeedHeuristicOptimizerConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.SpeedHeuristicOptimizerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_default_speed_config()->::apollo::planning::DpStSpeedOptimizerConfig::MergeFrom(from._internal_default_speed_config());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_lane_change_speed_config()->::apollo::planning::DpStSpeedOptimizerConfig::MergeFrom(from._internal_lane_change_speed_config());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpeedHeuristicOptimizerConfig::CopyFrom(const SpeedHeuristicOptimizerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.SpeedHeuristicOptimizerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeedHeuristicOptimizerConfig::IsInitialized() const {
  return true;
}

void SpeedHeuristicOptimizerConfig::InternalSwap(SpeedHeuristicOptimizerConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpeedHeuristicOptimizerConfig, lane_change_speed_config_)
      + sizeof(SpeedHeuristicOptimizerConfig::lane_change_speed_config_)
      - PROTOBUF_FIELD_OFFSET(SpeedHeuristicOptimizerConfig, default_speed_config_)>(
          reinterpret_cast<char*>(&default_speed_config_),
          reinterpret_cast<char*>(&other->default_speed_config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpeedHeuristicOptimizerConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto[21]);
}

// ===================================================================

class DpStSpeedOptimizerConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<DpStSpeedOptimizerConfig>()._has_bits_);
  static void set_has_unit_t(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_dense_dimension_s(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_dense_unit_s(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_sparse_unit_s(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_speed_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_accel_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_jerk_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_obstacle_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_reference_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_go_down_buffer(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_go_up_buffer(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_default_obstacle_cost(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_default_speed_cost(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_exceed_speed_penalty(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_low_speed_penalty(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_reference_speed_penalty(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_keep_clear_low_speed_penalty(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_accel_penalty(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_decel_penalty(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_positive_jerk_coeff(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_negative_jerk_coeff(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_max_acceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_max_deceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_safe_time_buffer(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_safe_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_spatial_potential_penalty(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_is_lane_changing(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

DpStSpeedOptimizerConfig::DpStSpeedOptimizerConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.planning.DpStSpeedOptimizerConfig)
}
DpStSpeedOptimizerConfig::DpStSpeedOptimizerConfig(const DpStSpeedOptimizerConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&speed_weight_, &from.speed_weight_,
    static_cast<size_t>(reinterpret_cast<char*>(&spatial_potential_penalty_) -
    reinterpret_cast<char*>(&speed_weight_)) + sizeof(spatial_potential_penalty_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.DpStSpeedOptimizerConfig)
}

void DpStSpeedOptimizerConfig::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&speed_weight_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_lane_changing_) -
    reinterpret_cast<char*>(&speed_weight_)) + sizeof(is_lane_changing_));
dense_dimension_s_ = 41;
unit_t_ = 1;
dense_unit_s_ = 0.5;
sparse_unit_s_ = 1;
accel_weight_ = 10;
jerk_weight_ = 10;
obstacle_weight_ = 1;
go_down_buffer_ = 5;
go_up_buffer_ = 5;
default_obstacle_cost_ = 10000000000;
default_speed_cost_ = 1;
exceed_speed_penalty_ = 10;
low_speed_penalty_ = 2.5;
reference_speed_penalty_ = 1;
keep_clear_low_speed_penalty_ = 10;
accel_penalty_ = 2;
decel_penalty_ = 2;
positive_jerk_coeff_ = 1;
negative_jerk_coeff_ = 300;
max_acceleration_ = 4.5;
max_deceleration_ = -4.5;
safe_time_buffer_ = 3;
safe_distance_ = 20;
spatial_potential_penalty_ = 1;
}

DpStSpeedOptimizerConfig::~DpStSpeedOptimizerConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.DpStSpeedOptimizerConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DpStSpeedOptimizerConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DpStSpeedOptimizerConfig::ArenaDtor(void* object) {
  DpStSpeedOptimizerConfig* _this = reinterpret_cast< DpStSpeedOptimizerConfig* >(object);
  (void)_this;
}
void DpStSpeedOptimizerConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DpStSpeedOptimizerConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DpStSpeedOptimizerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.DpStSpeedOptimizerConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&speed_weight_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_lane_changing_) -
        reinterpret_cast<char*>(&speed_weight_)) + sizeof(is_lane_changing_));
    dense_dimension_s_ = 41;
    unit_t_ = 1;
    dense_unit_s_ = 0.5;
    sparse_unit_s_ = 1;
    accel_weight_ = 10;
  }
  if (cached_has_bits & 0x0000ff00u) {
    jerk_weight_ = 10;
    obstacle_weight_ = 1;
    go_down_buffer_ = 5;
    go_up_buffer_ = 5;
    default_obstacle_cost_ = 10000000000;
    default_speed_cost_ = 1;
    exceed_speed_penalty_ = 10;
    low_speed_penalty_ = 2.5;
  }
  if (cached_has_bits & 0x00ff0000u) {
    reference_speed_penalty_ = 1;
    keep_clear_low_speed_penalty_ = 10;
    accel_penalty_ = 2;
    decel_penalty_ = 2;
    positive_jerk_coeff_ = 1;
    negative_jerk_coeff_ = 300;
    max_acceleration_ = 4.5;
    max_deceleration_ = -4.5;
  }
  if (cached_has_bits & 0x07000000u) {
    safe_time_buffer_ = 3;
    safe_distance_ = 20;
    spatial_potential_penalty_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DpStSpeedOptimizerConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double unit_t = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_unit_t(&has_bits);
          unit_t_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional int32 dense_dimension_s = 2 [default = 41];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_dense_dimension_s(&has_bits);
          dense_dimension_s_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double dense_unit_s = 3 [default = 0.5];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_dense_unit_s(&has_bits);
          dense_unit_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double sparse_unit_s = 4 [default = 1];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_sparse_unit_s(&has_bits);
          sparse_unit_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double speed_weight = 10 [default = 0];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_speed_weight(&has_bits);
          speed_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double accel_weight = 11 [default = 10];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_accel_weight(&has_bits);
          accel_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double jerk_weight = 12 [default = 10];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          _Internal::set_has_jerk_weight(&has_bits);
          jerk_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double obstacle_weight = 13 [default = 1];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          _Internal::set_has_obstacle_weight(&has_bits);
          obstacle_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double reference_weight = 14 [default = 0];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          _Internal::set_has_reference_weight(&has_bits);
          reference_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double go_down_buffer = 15 [default = 5];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          _Internal::set_has_go_down_buffer(&has_bits);
          go_down_buffer_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double go_up_buffer = 16 [default = 5];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          _Internal::set_has_go_up_buffer(&has_bits);
          go_up_buffer_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double default_obstacle_cost = 20 [default = 10000000000];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 161)) {
          _Internal::set_has_default_obstacle_cost(&has_bits);
          default_obstacle_cost_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double default_speed_cost = 31 [default = 1];
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 249)) {
          _Internal::set_has_default_speed_cost(&has_bits);
          default_speed_cost_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double exceed_speed_penalty = 32 [default = 10];
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 1)) {
          _Internal::set_has_exceed_speed_penalty(&has_bits);
          exceed_speed_penalty_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double low_speed_penalty = 33 [default = 2.5];
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_low_speed_penalty(&has_bits);
          low_speed_penalty_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double reference_speed_penalty = 34 [default = 1];
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_reference_speed_penalty(&has_bits);
          reference_speed_penalty_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double keep_clear_low_speed_penalty = 35 [default = 10];
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_keep_clear_low_speed_penalty(&has_bits);
          keep_clear_low_speed_penalty_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double accel_penalty = 40 [default = 2];
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_accel_penalty(&has_bits);
          accel_penalty_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double decel_penalty = 41 [default = 2];
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_decel_penalty(&has_bits);
          decel_penalty_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double positive_jerk_coeff = 50 [default = 1];
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 145)) {
          _Internal::set_has_positive_jerk_coeff(&has_bits);
          positive_jerk_coeff_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double negative_jerk_coeff = 51 [default = 300];
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 153)) {
          _Internal::set_has_negative_jerk_coeff(&has_bits);
          negative_jerk_coeff_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double max_acceleration = 60 [default = 4.5];
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 225)) {
          _Internal::set_has_max_acceleration(&has_bits);
          max_acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double max_deceleration = 61 [default = -4.5];
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 233)) {
          _Internal::set_has_max_deceleration(&has_bits);
          max_deceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double safe_time_buffer = 70 [default = 3];
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_safe_time_buffer(&has_bits);
          safe_time_buffer_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double safe_distance = 71 [default = 20];
      case 71:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_safe_distance(&has_bits);
          safe_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double spatial_potential_penalty = 80 [default = 1];
      case 80:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          _Internal::set_has_spatial_potential_penalty(&has_bits);
          spatial_potential_penalty_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_lane_changing = 81 [default = false];
      case 81:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_is_lane_changing(&has_bits);
          is_lane_changing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DpStSpeedOptimizerConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.DpStSpeedOptimizerConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double unit_t = 1 [default = 1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_unit_t(), target);
  }

  // optional int32 dense_dimension_s = 2 [default = 41];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_dense_dimension_s(), target);
  }

  // optional double dense_unit_s = 3 [default = 0.5];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_dense_unit_s(), target);
  }

  // optional double sparse_unit_s = 4 [default = 1];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_sparse_unit_s(), target);
  }

  // optional double speed_weight = 10 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_speed_weight(), target);
  }

  // optional double accel_weight = 11 [default = 10];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_accel_weight(), target);
  }

  // optional double jerk_weight = 12 [default = 10];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_jerk_weight(), target);
  }

  // optional double obstacle_weight = 13 [default = 1];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_obstacle_weight(), target);
  }

  // optional double reference_weight = 14 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_reference_weight(), target);
  }

  // optional double go_down_buffer = 15 [default = 5];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_go_down_buffer(), target);
  }

  // optional double go_up_buffer = 16 [default = 5];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->_internal_go_up_buffer(), target);
  }

  // optional double default_obstacle_cost = 20 [default = 10000000000];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(20, this->_internal_default_obstacle_cost(), target);
  }

  // optional double default_speed_cost = 31 [default = 1];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(31, this->_internal_default_speed_cost(), target);
  }

  // optional double exceed_speed_penalty = 32 [default = 10];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(32, this->_internal_exceed_speed_penalty(), target);
  }

  // optional double low_speed_penalty = 33 [default = 2.5];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(33, this->_internal_low_speed_penalty(), target);
  }

  // optional double reference_speed_penalty = 34 [default = 1];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(34, this->_internal_reference_speed_penalty(), target);
  }

  // optional double keep_clear_low_speed_penalty = 35 [default = 10];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(35, this->_internal_keep_clear_low_speed_penalty(), target);
  }

  // optional double accel_penalty = 40 [default = 2];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(40, this->_internal_accel_penalty(), target);
  }

  // optional double decel_penalty = 41 [default = 2];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(41, this->_internal_decel_penalty(), target);
  }

  // optional double positive_jerk_coeff = 50 [default = 1];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(50, this->_internal_positive_jerk_coeff(), target);
  }

  // optional double negative_jerk_coeff = 51 [default = 300];
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(51, this->_internal_negative_jerk_coeff(), target);
  }

  // optional double max_acceleration = 60 [default = 4.5];
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(60, this->_internal_max_acceleration(), target);
  }

  // optional double max_deceleration = 61 [default = -4.5];
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(61, this->_internal_max_deceleration(), target);
  }

  // optional double safe_time_buffer = 70 [default = 3];
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(70, this->_internal_safe_time_buffer(), target);
  }

  // optional double safe_distance = 71 [default = 20];
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(71, this->_internal_safe_distance(), target);
  }

  // optional double spatial_potential_penalty = 80 [default = 1];
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(80, this->_internal_spatial_potential_penalty(), target);
  }

  // optional bool is_lane_changing = 81 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(81, this->_internal_is_lane_changing(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.DpStSpeedOptimizerConfig)
  return target;
}

size_t DpStSpeedOptimizerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.DpStSpeedOptimizerConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional double speed_weight = 10 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double reference_weight = 14 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional bool is_lane_changing = 81 [default = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 1;
    }

    // optional int32 dense_dimension_s = 2 [default = 41];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_dense_dimension_s());
    }

    // optional double unit_t = 1 [default = 1];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double dense_unit_s = 3 [default = 0.5];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double sparse_unit_s = 4 [default = 1];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double accel_weight = 11 [default = 10];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional double jerk_weight = 12 [default = 10];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double obstacle_weight = 13 [default = 1];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double go_down_buffer = 15 [default = 5];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional double go_up_buffer = 16 [default = 5];
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 8;
    }

    // optional double default_obstacle_cost = 20 [default = 10000000000];
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 8;
    }

    // optional double default_speed_cost = 31 [default = 1];
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 8;
    }

    // optional double exceed_speed_penalty = 32 [default = 10];
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 8;
    }

    // optional double low_speed_penalty = 33 [default = 2.5];
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 8;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional double reference_speed_penalty = 34 [default = 1];
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 8;
    }

    // optional double keep_clear_low_speed_penalty = 35 [default = 10];
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 8;
    }

    // optional double accel_penalty = 40 [default = 2];
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 8;
    }

    // optional double decel_penalty = 41 [default = 2];
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 8;
    }

    // optional double positive_jerk_coeff = 50 [default = 1];
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 8;
    }

    // optional double negative_jerk_coeff = 51 [default = 300];
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 8;
    }

    // optional double max_acceleration = 60 [default = 4.5];
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 8;
    }

    // optional double max_deceleration = 61 [default = -4.5];
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 8;
    }

  }
  if (cached_has_bits & 0x07000000u) {
    // optional double safe_time_buffer = 70 [default = 3];
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 8;
    }

    // optional double safe_distance = 71 [default = 20];
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 8;
    }

    // optional double spatial_potential_penalty = 80 [default = 1];
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DpStSpeedOptimizerConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DpStSpeedOptimizerConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DpStSpeedOptimizerConfig::GetClassData() const { return &_class_data_; }

void DpStSpeedOptimizerConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DpStSpeedOptimizerConfig *>(to)->MergeFrom(
      static_cast<const DpStSpeedOptimizerConfig &>(from));
}


void DpStSpeedOptimizerConfig::MergeFrom(const DpStSpeedOptimizerConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.DpStSpeedOptimizerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      speed_weight_ = from.speed_weight_;
    }
    if (cached_has_bits & 0x00000002u) {
      reference_weight_ = from.reference_weight_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_lane_changing_ = from.is_lane_changing_;
    }
    if (cached_has_bits & 0x00000008u) {
      dense_dimension_s_ = from.dense_dimension_s_;
    }
    if (cached_has_bits & 0x00000010u) {
      unit_t_ = from.unit_t_;
    }
    if (cached_has_bits & 0x00000020u) {
      dense_unit_s_ = from.dense_unit_s_;
    }
    if (cached_has_bits & 0x00000040u) {
      sparse_unit_s_ = from.sparse_unit_s_;
    }
    if (cached_has_bits & 0x00000080u) {
      accel_weight_ = from.accel_weight_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      jerk_weight_ = from.jerk_weight_;
    }
    if (cached_has_bits & 0x00000200u) {
      obstacle_weight_ = from.obstacle_weight_;
    }
    if (cached_has_bits & 0x00000400u) {
      go_down_buffer_ = from.go_down_buffer_;
    }
    if (cached_has_bits & 0x00000800u) {
      go_up_buffer_ = from.go_up_buffer_;
    }
    if (cached_has_bits & 0x00001000u) {
      default_obstacle_cost_ = from.default_obstacle_cost_;
    }
    if (cached_has_bits & 0x00002000u) {
      default_speed_cost_ = from.default_speed_cost_;
    }
    if (cached_has_bits & 0x00004000u) {
      exceed_speed_penalty_ = from.exceed_speed_penalty_;
    }
    if (cached_has_bits & 0x00008000u) {
      low_speed_penalty_ = from.low_speed_penalty_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      reference_speed_penalty_ = from.reference_speed_penalty_;
    }
    if (cached_has_bits & 0x00020000u) {
      keep_clear_low_speed_penalty_ = from.keep_clear_low_speed_penalty_;
    }
    if (cached_has_bits & 0x00040000u) {
      accel_penalty_ = from.accel_penalty_;
    }
    if (cached_has_bits & 0x00080000u) {
      decel_penalty_ = from.decel_penalty_;
    }
    if (cached_has_bits & 0x00100000u) {
      positive_jerk_coeff_ = from.positive_jerk_coeff_;
    }
    if (cached_has_bits & 0x00200000u) {
      negative_jerk_coeff_ = from.negative_jerk_coeff_;
    }
    if (cached_has_bits & 0x00400000u) {
      max_acceleration_ = from.max_acceleration_;
    }
    if (cached_has_bits & 0x00800000u) {
      max_deceleration_ = from.max_deceleration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x07000000u) {
    if (cached_has_bits & 0x01000000u) {
      safe_time_buffer_ = from.safe_time_buffer_;
    }
    if (cached_has_bits & 0x02000000u) {
      safe_distance_ = from.safe_distance_;
    }
    if (cached_has_bits & 0x04000000u) {
      spatial_potential_penalty_ = from.spatial_potential_penalty_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DpStSpeedOptimizerConfig::CopyFrom(const DpStSpeedOptimizerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.DpStSpeedOptimizerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DpStSpeedOptimizerConfig::IsInitialized() const {
  return true;
}

void DpStSpeedOptimizerConfig::InternalSwap(DpStSpeedOptimizerConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DpStSpeedOptimizerConfig, is_lane_changing_)
      + sizeof(DpStSpeedOptimizerConfig::is_lane_changing_)
      - PROTOBUF_FIELD_OFFSET(DpStSpeedOptimizerConfig, speed_weight_)>(
          reinterpret_cast<char*>(&speed_weight_),
          reinterpret_cast<char*>(&other->speed_weight_));
  swap(dense_dimension_s_, other->dense_dimension_s_);
  swap(unit_t_, other->unit_t_);
  swap(dense_unit_s_, other->dense_unit_s_);
  swap(sparse_unit_s_, other->sparse_unit_s_);
  swap(accel_weight_, other->accel_weight_);
  swap(jerk_weight_, other->jerk_weight_);
  swap(obstacle_weight_, other->obstacle_weight_);
  swap(go_down_buffer_, other->go_down_buffer_);
  swap(go_up_buffer_, other->go_up_buffer_);
  swap(default_obstacle_cost_, other->default_obstacle_cost_);
  swap(default_speed_cost_, other->default_speed_cost_);
  swap(exceed_speed_penalty_, other->exceed_speed_penalty_);
  swap(low_speed_penalty_, other->low_speed_penalty_);
  swap(reference_speed_penalty_, other->reference_speed_penalty_);
  swap(keep_clear_low_speed_penalty_, other->keep_clear_low_speed_penalty_);
  swap(accel_penalty_, other->accel_penalty_);
  swap(decel_penalty_, other->decel_penalty_);
  swap(positive_jerk_coeff_, other->positive_jerk_coeff_);
  swap(negative_jerk_coeff_, other->negative_jerk_coeff_);
  swap(max_acceleration_, other->max_acceleration_);
  swap(max_deceleration_, other->max_deceleration_);
  swap(safe_time_buffer_, other->safe_time_buffer_);
  swap(safe_distance_, other->safe_distance_);
  swap(spatial_potential_penalty_, other->spatial_potential_penalty_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DpStSpeedOptimizerConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto[22]);
}

// ===================================================================

class STBoundsDeciderConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<STBoundsDeciderConfig>()._has_bits_);
  static void set_has_total_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

STBoundsDeciderConfig::STBoundsDeciderConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.planning.STBoundsDeciderConfig)
}
STBoundsDeciderConfig::STBoundsDeciderConfig(const STBoundsDeciderConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  total_time_ = from.total_time_;
  // @@protoc_insertion_point(copy_constructor:apollo.planning.STBoundsDeciderConfig)
}

void STBoundsDeciderConfig::SharedCtor() {
total_time_ = 7;
}

STBoundsDeciderConfig::~STBoundsDeciderConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.STBoundsDeciderConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void STBoundsDeciderConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void STBoundsDeciderConfig::ArenaDtor(void* object) {
  STBoundsDeciderConfig* _this = reinterpret_cast< STBoundsDeciderConfig* >(object);
  (void)_this;
}
void STBoundsDeciderConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void STBoundsDeciderConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void STBoundsDeciderConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.STBoundsDeciderConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  total_time_ = 7;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* STBoundsDeciderConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double total_time = 1 [default = 7];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_total_time(&has_bits);
          total_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* STBoundsDeciderConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.STBoundsDeciderConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double total_time = 1 [default = 7];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_total_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.STBoundsDeciderConfig)
  return target;
}

size_t STBoundsDeciderConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.STBoundsDeciderConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional double total_time = 1 [default = 7];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData STBoundsDeciderConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    STBoundsDeciderConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*STBoundsDeciderConfig::GetClassData() const { return &_class_data_; }

void STBoundsDeciderConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<STBoundsDeciderConfig *>(to)->MergeFrom(
      static_cast<const STBoundsDeciderConfig &>(from));
}


void STBoundsDeciderConfig::MergeFrom(const STBoundsDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.STBoundsDeciderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_total_time()) {
    _internal_set_total_time(from._internal_total_time());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void STBoundsDeciderConfig::CopyFrom(const STBoundsDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.STBoundsDeciderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool STBoundsDeciderConfig::IsInitialized() const {
  return true;
}

void STBoundsDeciderConfig::InternalSwap(STBoundsDeciderConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(total_time_, other->total_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata STBoundsDeciderConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto[23]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace planning
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::planning::CreepDeciderConfig* Arena::CreateMaybeMessage< ::apollo::planning::CreepDeciderConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::CreepDeciderConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::LaneChangeDeciderConfig* Arena::CreateMaybeMessage< ::apollo::planning::LaneChangeDeciderConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::LaneChangeDeciderConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::LearningModelInferenceTaskConfig* Arena::CreateMaybeMessage< ::apollo::planning::LearningModelInferenceTaskConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::LearningModelInferenceTaskConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::LearningModelInferenceTrajectoryTaskConfig* Arena::CreateMaybeMessage< ::apollo::planning::LearningModelInferenceTrajectoryTaskConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::LearningModelInferenceTrajectoryTaskConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::NaviObstacleDeciderConfig* Arena::CreateMaybeMessage< ::apollo::planning::NaviObstacleDeciderConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::NaviObstacleDeciderConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::NaviPathDeciderConfig* Arena::CreateMaybeMessage< ::apollo::planning::NaviPathDeciderConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::NaviPathDeciderConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::MoveDestLaneConfigTable* Arena::CreateMaybeMessage< ::apollo::planning::MoveDestLaneConfigTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::MoveDestLaneConfigTable >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::ShiftConfig* Arena::CreateMaybeMessage< ::apollo::planning::ShiftConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::ShiftConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::NaviSpeedDeciderConfig* Arena::CreateMaybeMessage< ::apollo::planning::NaviSpeedDeciderConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::NaviSpeedDeciderConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::PathAssessmentDeciderConfig* Arena::CreateMaybeMessage< ::apollo::planning::PathAssessmentDeciderConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::PathAssessmentDeciderConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::PathBoundsDeciderConfig* Arena::CreateMaybeMessage< ::apollo::planning::PathBoundsDeciderConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::PathBoundsDeciderConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::PathDeciderConfig* Arena::CreateMaybeMessage< ::apollo::planning::PathDeciderConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::PathDeciderConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::PathLaneBorrowDeciderConfig* Arena::CreateMaybeMessage< ::apollo::planning::PathLaneBorrowDeciderConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::PathLaneBorrowDeciderConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::PathReferenceDeciderConfig* Arena::CreateMaybeMessage< ::apollo::planning::PathReferenceDeciderConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::PathReferenceDeciderConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::PathReuseDeciderConfig* Arena::CreateMaybeMessage< ::apollo::planning::PathReuseDeciderConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::PathReuseDeciderConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::PiecewiseJerkNonlinearSpeedOptimizerConfig* Arena::CreateMaybeMessage< ::apollo::planning::PiecewiseJerkNonlinearSpeedOptimizerConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::PiecewiseJerkNonlinearSpeedOptimizerConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::PiecewiseJerkPathOptimizerConfig* Arena::CreateMaybeMessage< ::apollo::planning::PiecewiseJerkPathOptimizerConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::PiecewiseJerkPathOptimizerConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::PiecewiseJerkPathWeights* Arena::CreateMaybeMessage< ::apollo::planning::PiecewiseJerkPathWeights >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::PiecewiseJerkPathWeights >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::PiecewiseJerkSpeedOptimizerConfig* Arena::CreateMaybeMessage< ::apollo::planning::PiecewiseJerkSpeedOptimizerConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::PiecewiseJerkSpeedOptimizerConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::RuleBasedStopDeciderConfig* Arena::CreateMaybeMessage< ::apollo::planning::RuleBasedStopDeciderConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::RuleBasedStopDeciderConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::SpeedBoundsDeciderConfig* Arena::CreateMaybeMessage< ::apollo::planning::SpeedBoundsDeciderConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::SpeedBoundsDeciderConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::SpeedHeuristicOptimizerConfig* Arena::CreateMaybeMessage< ::apollo::planning::SpeedHeuristicOptimizerConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::SpeedHeuristicOptimizerConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::DpStSpeedOptimizerConfig* Arena::CreateMaybeMessage< ::apollo::planning::DpStSpeedOptimizerConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::DpStSpeedOptimizerConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::STBoundsDeciderConfig* Arena::CreateMaybeMessage< ::apollo::planning::STBoundsDeciderConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::STBoundsDeciderConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
