// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/open_space_task_config.proto

#include "modules/planning/proto/open_space_task_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace apollo {
namespace planning {
constexpr OpenSpaceFallBackDeciderConfig::OpenSpaceFallBackDeciderConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : open_space_prediction_time_period_(5)
  , open_space_fallback_collision_distance_(5)
  , open_space_fallback_stop_distance_(2)
  , open_space_fallback_collision_time_buffer_(10){}
struct OpenSpaceFallBackDeciderConfigDefaultTypeInternal {
  constexpr OpenSpaceFallBackDeciderConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OpenSpaceFallBackDeciderConfigDefaultTypeInternal() {}
  union {
    OpenSpaceFallBackDeciderConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OpenSpaceFallBackDeciderConfigDefaultTypeInternal _OpenSpaceFallBackDeciderConfig_default_instance_;
constexpr OpenSpacePreStopDeciderConfig::OpenSpacePreStopDeciderConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stop_type_(0)

  , rightaway_stop_distance_(2)
  , stop_distance_to_target_(5){}
struct OpenSpacePreStopDeciderConfigDefaultTypeInternal {
  constexpr OpenSpacePreStopDeciderConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OpenSpacePreStopDeciderConfigDefaultTypeInternal() {}
  union {
    OpenSpacePreStopDeciderConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OpenSpacePreStopDeciderConfigDefaultTypeInternal _OpenSpacePreStopDeciderConfig_default_instance_;
constexpr OpenSpaceRoiDeciderConfig::OpenSpaceRoiDeciderConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : roi_type_(0)

  , parking_inwards_(false)
  , enable_perception_obstacles_(false)
  , perception_obstacle_buffer_(0)
  , extend_right_x_buffer_(0)
  , extend_left_x_buffer_(0)
  , roi_longitudinal_range_start_(10)
  , roi_longitudinal_range_end_(10)
  , parking_start_range_(7)
  , parking_depth_buffer_(0.1)
  , roi_line_segment_min_angle_(0.3)
  , roi_line_segment_length_(1)
  , roi_line_segment_length_from_map_(10)
  , perception_obstacle_filtering_distance_(1000)
  , curb_heading_tangent_change_upper_limit_(1)
  , end_pose_s_distance_(10)
  , parallel_park_end_x_buffer_(0.2){}
struct OpenSpaceRoiDeciderConfigDefaultTypeInternal {
  constexpr OpenSpaceRoiDeciderConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OpenSpaceRoiDeciderConfigDefaultTypeInternal() {}
  union {
    OpenSpaceRoiDeciderConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OpenSpaceRoiDeciderConfigDefaultTypeInternal _OpenSpaceRoiDeciderConfig_default_instance_;
constexpr OpenSpaceTrajectoryPartitionConfig::OpenSpaceTrajectoryPartitionConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : gear_shift_max_t_(0)
  , gear_shift_unit_t_(0)
  , gear_shift_period_duration_(0)
  , interpolated_pieces_num_(uint64_t{0u})
  , initial_gear_check_horizon_(uint64_t{0u})
  , heading_search_range_(0)
  , heading_track_range_(0)
  , heading_offset_to_midpoint_(0)
  , distance_search_range_(1e-06)
  , lateral_offset_to_midpoint_(0.1)
  , longitudinal_offset_to_midpoint_(0.1)
  , vehicle_box_iou_threshold_to_midpoint_(0.95)
  , linear_velocity_threshold_on_ego_(0.2){}
struct OpenSpaceTrajectoryPartitionConfigDefaultTypeInternal {
  constexpr OpenSpaceTrajectoryPartitionConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OpenSpaceTrajectoryPartitionConfigDefaultTypeInternal() {}
  union {
    OpenSpaceTrajectoryPartitionConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OpenSpaceTrajectoryPartitionConfigDefaultTypeInternal _OpenSpaceTrajectoryPartitionConfig_default_instance_;
constexpr OpenSpaceTrajectoryProviderConfig::OpenSpaceTrajectoryProviderConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : open_space_trajectory_optimizer_config_(nullptr){}
struct OpenSpaceTrajectoryProviderConfigDefaultTypeInternal {
  constexpr OpenSpaceTrajectoryProviderConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OpenSpaceTrajectoryProviderConfigDefaultTypeInternal() {}
  union {
    OpenSpaceTrajectoryProviderConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OpenSpaceTrajectoryProviderConfigDefaultTypeInternal _OpenSpaceTrajectoryProviderConfig_default_instance_;
constexpr OpenSpaceTrajectoryOptimizerConfig::OpenSpaceTrajectoryOptimizerConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hybrid_a_star_config_(nullptr)
  , dual_variable_warm_start_config_(nullptr)
  , distance_approach_trajectory_smoother_config_(nullptr)
  , planner_open_space_config_(nullptr)
  , delta_t_(0.5f)
  , is_near_destination_threshold_(0.001){}
struct OpenSpaceTrajectoryOptimizerConfigDefaultTypeInternal {
  constexpr OpenSpaceTrajectoryOptimizerConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OpenSpaceTrajectoryOptimizerConfigDefaultTypeInternal() {}
  union {
    OpenSpaceTrajectoryOptimizerConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OpenSpaceTrajectoryOptimizerConfigDefaultTypeInternal _OpenSpaceTrajectoryOptimizerConfig_default_instance_;
constexpr HybridAStarConfig::HybridAStarConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : traj_forward_penalty_(0)
  , traj_back_penalty_(0)
  , xy_grid_resolution_(0.2)
  , phi_grid_resolution_(0.05)
  , next_node_num_(uint64_t{10u})
  , step_size_(0.5)
  , traj_gear_switch_penalty_(10)
  , traj_steer_penalty_(100)
  , traj_steer_change_penalty_(10)
  , grid_a_star_xy_resolution_(0.1)
  , node_radius_(0.5){}
struct HybridAStarConfigDefaultTypeInternal {
  constexpr HybridAStarConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HybridAStarConfigDefaultTypeInternal() {}
  union {
    HybridAStarConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HybridAStarConfigDefaultTypeInternal _HybridAStarConfig_default_instance_;
constexpr DualVariableConfig::DualVariableConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ipopt_config_(nullptr)
  , min_safety_distance_(0)
  , qp_format_(0)

  , debug_osqp_(false)
  , weight_d_(1)
  , beta_(1){}
struct DualVariableConfigDefaultTypeInternal {
  constexpr DualVariableConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DualVariableConfigDefaultTypeInternal() {}
  union {
    DualVariableConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DualVariableConfigDefaultTypeInternal _DualVariableConfig_default_instance_;
constexpr DistanceApproachTrajectorySmootherConfig::DistanceApproachTrajectorySmootherConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ipopt_config_(nullptr)
  , weight_steer_(0)
  , weight_a_(0)
  , weight_steer_rate_(0)
  , weight_a_rate_(0)
  , weight_x_(0)
  , weight_y_(0)
  , weight_phi_(0)
  , weight_v_(0)
  , weight_steer_stitching_(0)
  , weight_a_stitching_(0)
  , weight_first_order_time_(0)
  , weight_second_order_time_(0)
  , min_safety_distance_(0)
  , use_fix_time_(false)
  , enable_constraint_check_(false)
  , enable_hand_derivative_(false)
  , enable_derivative_check_(false)
  , enable_initial_final_check_(false)
  , max_speed_forward_(3)
  , max_speed_reverse_(2)
  , max_acceleration_forward_(2)
  , max_acceleration_reverse_(2)
  , min_time_sample_scaling_(0.1)
  , max_time_sample_scaling_(10){}
struct DistanceApproachTrajectorySmootherConfigDefaultTypeInternal {
  constexpr DistanceApproachTrajectorySmootherConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DistanceApproachTrajectorySmootherConfigDefaultTypeInternal() {}
  union {
    DistanceApproachTrajectorySmootherConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DistanceApproachTrajectorySmootherConfigDefaultTypeInternal _DistanceApproachTrajectorySmootherConfig_default_instance_;
constexpr IpoptSolverConfig::IpoptSolverConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ipopt_print_timing_statistics_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ipopt_alpha_for_y_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ipopt_recalc_y_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ipopt_print_level_(0)
  , mumps_mem_percent_(0)
  , mumps_pivtol_(0)
  , ipopt_tol_(0)
  , ipopt_acceptable_constr_viol_tol_(0)
  , ipopt_min_hessian_perturbation_(0)
  , ipopt_jacobian_regularization_value_(0)
  , ipopt_max_iter_(0)
  , ipopt_mu_init_(0.1){}
struct IpoptSolverConfigDefaultTypeInternal {
  constexpr IpoptSolverConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IpoptSolverConfigDefaultTypeInternal() {}
  union {
    IpoptSolverConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IpoptSolverConfigDefaultTypeInternal _IpoptSolverConfig_default_instance_;
}  // namespace planning
}  // namespace apollo
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto[10];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OpenSpaceFallBackDeciderConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OpenSpaceFallBackDeciderConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OpenSpaceFallBackDeciderConfig, open_space_prediction_time_period_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OpenSpaceFallBackDeciderConfig, open_space_fallback_collision_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OpenSpaceFallBackDeciderConfig, open_space_fallback_stop_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OpenSpaceFallBackDeciderConfig, open_space_fallback_collision_time_buffer_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OpenSpacePreStopDeciderConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OpenSpacePreStopDeciderConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OpenSpacePreStopDeciderConfig, stop_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OpenSpacePreStopDeciderConfig, rightaway_stop_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OpenSpacePreStopDeciderConfig, stop_distance_to_target_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OpenSpaceRoiDeciderConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OpenSpaceRoiDeciderConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OpenSpaceRoiDeciderConfig, roi_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OpenSpaceRoiDeciderConfig, roi_longitudinal_range_start_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OpenSpaceRoiDeciderConfig, roi_longitudinal_range_end_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OpenSpaceRoiDeciderConfig, parking_start_range_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OpenSpaceRoiDeciderConfig, parking_inwards_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OpenSpaceRoiDeciderConfig, enable_perception_obstacles_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OpenSpaceRoiDeciderConfig, parking_depth_buffer_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OpenSpaceRoiDeciderConfig, roi_line_segment_min_angle_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OpenSpaceRoiDeciderConfig, roi_line_segment_length_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OpenSpaceRoiDeciderConfig, roi_line_segment_length_from_map_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OpenSpaceRoiDeciderConfig, perception_obstacle_filtering_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OpenSpaceRoiDeciderConfig, perception_obstacle_buffer_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OpenSpaceRoiDeciderConfig, curb_heading_tangent_change_upper_limit_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OpenSpaceRoiDeciderConfig, end_pose_s_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OpenSpaceRoiDeciderConfig, parallel_park_end_x_buffer_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OpenSpaceRoiDeciderConfig, extend_right_x_buffer_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OpenSpaceRoiDeciderConfig, extend_left_x_buffer_),
  0,
  6,
  7,
  8,
  1,
  2,
  9,
  10,
  11,
  12,
  13,
  3,
  14,
  15,
  16,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OpenSpaceTrajectoryPartitionConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OpenSpaceTrajectoryPartitionConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OpenSpaceTrajectoryPartitionConfig, gear_shift_max_t_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OpenSpaceTrajectoryPartitionConfig, gear_shift_unit_t_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OpenSpaceTrajectoryPartitionConfig, gear_shift_period_duration_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OpenSpaceTrajectoryPartitionConfig, interpolated_pieces_num_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OpenSpaceTrajectoryPartitionConfig, initial_gear_check_horizon_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OpenSpaceTrajectoryPartitionConfig, heading_search_range_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OpenSpaceTrajectoryPartitionConfig, heading_track_range_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OpenSpaceTrajectoryPartitionConfig, distance_search_range_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OpenSpaceTrajectoryPartitionConfig, heading_offset_to_midpoint_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OpenSpaceTrajectoryPartitionConfig, lateral_offset_to_midpoint_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OpenSpaceTrajectoryPartitionConfig, longitudinal_offset_to_midpoint_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OpenSpaceTrajectoryPartitionConfig, vehicle_box_iou_threshold_to_midpoint_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OpenSpaceTrajectoryPartitionConfig, linear_velocity_threshold_on_ego_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  8,
  7,
  9,
  10,
  11,
  12,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OpenSpaceTrajectoryProviderConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OpenSpaceTrajectoryProviderConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OpenSpaceTrajectoryProviderConfig, open_space_trajectory_optimizer_config_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OpenSpaceTrajectoryOptimizerConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OpenSpaceTrajectoryOptimizerConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OpenSpaceTrajectoryOptimizerConfig, hybrid_a_star_config_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OpenSpaceTrajectoryOptimizerConfig, dual_variable_warm_start_config_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OpenSpaceTrajectoryOptimizerConfig, distance_approach_trajectory_smoother_config_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OpenSpaceTrajectoryOptimizerConfig, delta_t_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OpenSpaceTrajectoryOptimizerConfig, is_near_destination_threshold_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OpenSpaceTrajectoryOptimizerConfig, planner_open_space_config_),
  0,
  1,
  2,
  4,
  5,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::HybridAStarConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::HybridAStarConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::HybridAStarConfig, xy_grid_resolution_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::HybridAStarConfig, phi_grid_resolution_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::HybridAStarConfig, next_node_num_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::HybridAStarConfig, step_size_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::HybridAStarConfig, traj_forward_penalty_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::HybridAStarConfig, traj_back_penalty_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::HybridAStarConfig, traj_gear_switch_penalty_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::HybridAStarConfig, traj_steer_penalty_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::HybridAStarConfig, traj_steer_change_penalty_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::HybridAStarConfig, grid_a_star_xy_resolution_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::HybridAStarConfig, node_radius_),
  2,
  3,
  4,
  5,
  0,
  1,
  6,
  7,
  8,
  9,
  10,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DualVariableConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DualVariableConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DualVariableConfig, weight_d_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DualVariableConfig, ipopt_config_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DualVariableConfig, qp_format_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DualVariableConfig, min_safety_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DualVariableConfig, debug_osqp_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DualVariableConfig, beta_),
  4,
  0,
  2,
  1,
  3,
  5,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachTrajectorySmootherConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachTrajectorySmootherConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachTrajectorySmootherConfig, weight_steer_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachTrajectorySmootherConfig, weight_a_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachTrajectorySmootherConfig, weight_steer_rate_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachTrajectorySmootherConfig, weight_a_rate_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachTrajectorySmootherConfig, weight_x_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachTrajectorySmootherConfig, weight_y_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachTrajectorySmootherConfig, weight_phi_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachTrajectorySmootherConfig, weight_v_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachTrajectorySmootherConfig, weight_steer_stitching_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachTrajectorySmootherConfig, weight_a_stitching_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachTrajectorySmootherConfig, weight_first_order_time_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachTrajectorySmootherConfig, weight_second_order_time_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachTrajectorySmootherConfig, min_safety_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachTrajectorySmootherConfig, max_speed_forward_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachTrajectorySmootherConfig, max_speed_reverse_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachTrajectorySmootherConfig, max_acceleration_forward_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachTrajectorySmootherConfig, max_acceleration_reverse_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachTrajectorySmootherConfig, min_time_sample_scaling_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachTrajectorySmootherConfig, max_time_sample_scaling_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachTrajectorySmootherConfig, use_fix_time_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachTrajectorySmootherConfig, ipopt_config_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachTrajectorySmootherConfig, enable_constraint_check_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachTrajectorySmootherConfig, enable_hand_derivative_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachTrajectorySmootherConfig, enable_derivative_check_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachTrajectorySmootherConfig, enable_initial_final_check_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  19,
  20,
  21,
  22,
  23,
  24,
  14,
  0,
  15,
  16,
  17,
  18,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::IpoptSolverConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::IpoptSolverConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::IpoptSolverConfig, ipopt_print_level_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::IpoptSolverConfig, mumps_mem_percent_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::IpoptSolverConfig, mumps_pivtol_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::IpoptSolverConfig, ipopt_max_iter_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::IpoptSolverConfig, ipopt_tol_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::IpoptSolverConfig, ipopt_acceptable_constr_viol_tol_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::IpoptSolverConfig, ipopt_min_hessian_perturbation_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::IpoptSolverConfig, ipopt_jacobian_regularization_value_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::IpoptSolverConfig, ipopt_print_timing_statistics_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::IpoptSolverConfig, ipopt_alpha_for_y_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::IpoptSolverConfig, ipopt_recalc_y_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::IpoptSolverConfig, ipopt_mu_init_),
  3,
  4,
  5,
  10,
  6,
  7,
  8,
  9,
  0,
  1,
  2,
  11,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, -1, sizeof(::apollo::planning::OpenSpaceFallBackDeciderConfig)},
  { 14, 23, -1, sizeof(::apollo::planning::OpenSpacePreStopDeciderConfig)},
  { 26, 49, -1, sizeof(::apollo::planning::OpenSpaceRoiDeciderConfig)},
  { 66, 85, -1, sizeof(::apollo::planning::OpenSpaceTrajectoryPartitionConfig)},
  { 98, 105, -1, sizeof(::apollo::planning::OpenSpaceTrajectoryProviderConfig)},
  { 106, 118, -1, sizeof(::apollo::planning::OpenSpaceTrajectoryOptimizerConfig)},
  { 124, 141, -1, sizeof(::apollo::planning::HybridAStarConfig)},
  { 152, 164, -1, sizeof(::apollo::planning::DualVariableConfig)},
  { 170, 201, -1, sizeof(::apollo::planning::DistanceApproachTrajectorySmootherConfig)},
  { 226, 244, -1, sizeof(::apollo::planning::IpoptSolverConfig)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_OpenSpaceFallBackDeciderConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_OpenSpacePreStopDeciderConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_OpenSpaceRoiDeciderConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_OpenSpaceTrajectoryPartitionConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_OpenSpaceTrajectoryProviderConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_OpenSpaceTrajectoryOptimizerConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_HybridAStarConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_DualVariableConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_DistanceApproachTrajectorySmootherConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_IpoptSolverConfig_default_instance_),
};

const char descriptor_table_protodef_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n3modules/planning/proto/open_space_task"
  "_config.proto\022\017apollo.planning\0326modules/"
  "planning/proto/planner_open_space_config"
  ".proto\"\346\001\n\036OpenSpaceFallBackDeciderConfi"
  "g\022,\n!open_space_prediction_time_period\030\001"
  " \001(\001:\0015\0221\n&open_space_fallback_collision"
  "_distance\030\002 \001(\001:\0015\022,\n!open_space_fallbac"
  "k_stop_distance\030\003 \001(\001:\0012\0225\n)open_space_f"
  "allback_collision_time_buffer\030\004 \001(\001:\00210\""
  "\235\002\n\035OpenSpacePreStopDeciderConfig\022J\n\tsto"
  "p_type\030\001 \001(\01627.apollo.planning.OpenSpace"
  "PreStopDeciderConfig.StopType\022\"\n\027rightaw"
  "ay_stop_distance\030\002 \001(\001:\0012\022\"\n\027stop_distan"
  "ce_to_target\030\003 \001(\001:\0015\"h\n\010StopType\022\017\n\013NOT"
  "_DEFINED\020\000\022\013\n\007PARKING\020\001\022\r\n\tPULL_OVER\020\002\022\030"
  "\n\024NARROW_STREET_U_TURN\020\003\022\025\n\021DEAD_END_PRE"
  "_STOP\020\004\"\302\006\n\031OpenSpaceRoiDeciderConfig\022D\n"
  "\010roi_type\030\001 \001(\01622.apollo.planning.OpenSp"
  "aceRoiDeciderConfig.RoiType\022(\n\034roi_longi"
  "tudinal_range_start\030\002 \001(\001:\00210\022&\n\032roi_lon"
  "gitudinal_range_end\030\003 \001(\001:\00210\022\036\n\023parking"
  "_start_range\030\004 \001(\001:\0017\022\036\n\017parking_inwards"
  "\030\005 \001(\010:\005false\022#\n\033enable_perception_obsta"
  "cles\030\006 \001(\010\022!\n\024parking_depth_buffer\030\007 \001(\001"
  ":\0030.1\022\'\n\032roi_line_segment_min_angle\030\010 \001("
  "\001:\0030.3\022\"\n\027roi_line_segment_length\030\t \001(\001:"
  "\0011\022,\n roi_line_segment_length_from_map\030\n"
  " \001(\001:\00210\0224\n&perception_obstacle_filterin"
  "g_distance\030\013 \001(\001:\0041000\022\"\n\032perception_obs"
  "tacle_buffer\030\014 \001(\001\0222\n\'curb_heading_tange"
  "nt_change_upper_limit\030\r \001(\001:\0011\022\037\n\023end_po"
  "se_s_distance\030\016 \001(\001:\00210\022\'\n\032parallel_park"
  "_end_x_buffer\030\017 \001(\001:\0030.2\022 \n\025extend_right"
  "_x_buffer\030\020 \001(\001:\0010\022\037\n\024extend_left_x_buff"
  "er\030\021 \001(\001:\0010\"o\n\007RoiType\022\017\n\013NOT_DEFINED\020\000\022"
  "\013\n\007PARKING\020\001\022\r\n\tPULL_OVER\020\002\022\017\n\013PARK_AND_"
  "GO\020\003\022\030\n\024NARROW_STREET_U_TURN\020\004\022\014\n\010DEAD_E"
  "ND\020\005\"\202\004\n\"OpenSpaceTrajectoryPartitionCon"
  "fig\022\030\n\020gear_shift_max_t\030\001 \001(\001\022\031\n\021gear_sh"
  "ift_unit_t\030\002 \001(\001\022\"\n\032gear_shift_period_du"
  "ration\030\003 \001(\001\022\037\n\027interpolated_pieces_num\030"
  "\004 \001(\004\022\"\n\032initial_gear_check_horizon\030\005 \001("
  "\004\022\034\n\024heading_search_range\030\006 \001(\001\022\033\n\023headi"
  "ng_track_range\030\007 \001(\001\022$\n\025distance_search_"
  "range\030\010 \001(\001:\0051e-06\022\"\n\032heading_offset_to_"
  "midpoint\030\t \001(\001\022\'\n\032lateral_offset_to_midp"
  "oint\030\n \001(\001:\0030.1\022,\n\037longitudinal_offset_t"
  "o_midpoint\030\013 \001(\001:\0030.1\0223\n%vehicle_box_iou"
  "_threshold_to_midpoint\030\014 \001(\001:\0040.95\022-\n li"
  "near_velocity_threshold_on_ego\030\r \001(\001:\0030."
  "2\"\210\001\n!OpenSpaceTrajectoryProviderConfig\022"
  "c\n&open_space_trajectory_optimizer_confi"
  "g\030\001 \001(\01323.apollo.planning.OpenSpaceTraje"
  "ctoryOptimizerConfig\"\265\003\n\"OpenSpaceTrajec"
  "toryOptimizerConfig\022@\n\024hybrid_a_star_con"
  "fig\030\001 \001(\0132\".apollo.planning.HybridAStarC"
  "onfig\022L\n\037dual_variable_warm_start_config"
  "\030\002 \001(\0132#.apollo.planning.DualVariableCon"
  "fig\022o\n,distance_approach_trajectory_smoo"
  "ther_config\030\003 \001(\01329.apollo.planning.Dist"
  "anceApproachTrajectorySmootherConfig\022\024\n\007"
  "delta_t\030\004 \001(\002:\0030.5\022,\n\035is_near_destinatio"
  "n_threshold\030\005 \001(\001:\0050.001\022J\n\031planner_open"
  "_space_config\030\006 \001(\0132\'.apollo.planning.Pl"
  "annerOpenSpaceConfig\"\371\002\n\021HybridAStarConf"
  "ig\022\037\n\022xy_grid_resolution\030\001 \001(\001:\0030.2\022!\n\023p"
  "hi_grid_resolution\030\002 \001(\001:\0040.05\022\031\n\rnext_n"
  "ode_num\030\003 \001(\004:\00210\022\026\n\tstep_size\030\004 \001(\001:\0030."
  "5\022\037\n\024traj_forward_penalty\030\005 \001(\001:\0010\022\034\n\021tr"
  "aj_back_penalty\030\006 \001(\001:\0010\022$\n\030traj_gear_sw"
  "itch_penalty\030\007 \001(\001:\00210\022\037\n\022traj_steer_pen"
  "alty\030\010 \001(\001:\003100\022%\n\031traj_steer_change_pen"
  "alty\030\t \001(\001:\00210\022&\n\031grid_a_star_xy_resolut"
  "ion\030\017 \001(\001:\0030.1\022\030\n\013node_radius\030\020 \001(\001:\0030.5"
  "\"\345\001\n\022DualVariableConfig\022\023\n\010weight_d\030\001 \001("
  "\001:\0011\0228\n\014ipopt_config\030\002 \001(\0132\".apollo.plan"
  "ning.IpoptSolverConfig\0224\n\tqp_format\030\003 \001("
  "\0162!.apollo.planning.DualVariableMode\022\036\n\023"
  "min_safety_distance\030\004 \001(\001:\0010\022\031\n\ndebug_os"
  "qp\030\005 \001(\010:\005false\022\017\n\004beta\030\006 \001(\001:\0011\"\242\006\n(Dis"
  "tanceApproachTrajectorySmootherConfig\022\024\n"
  "\014weight_steer\030\001 \001(\001\022\020\n\010weight_a\030\002 \001(\001\022\031\n"
  "\021weight_steer_rate\030\003 \001(\001\022\025\n\rweight_a_rat"
  "e\030\004 \001(\001\022\020\n\010weight_x\030\005 \001(\001\022\020\n\010weight_y\030\006 "
  "\001(\001\022\022\n\nweight_phi\030\007 \001(\001\022\020\n\010weight_v\030\010 \001("
  "\001\022\036\n\026weight_steer_stitching\030\t \001(\001\022\032\n\022wei"
  "ght_a_stitching\030\n \001(\001\022\037\n\027weight_first_or"
  "der_time\030\013 \001(\001\022 \n\030weight_second_order_ti"
  "me\030\014 \001(\001\022\036\n\023min_safety_distance\030\r \001(\001:\0010"
  "\022\034\n\021max_speed_forward\030\016 \001(\001:\0013\022\034\n\021max_sp"
  "eed_reverse\030\017 \001(\001:\0012\022#\n\030max_acceleration"
  "_forward\030\020 \001(\001:\0012\022#\n\030max_acceleration_re"
  "verse\030\021 \001(\001:\0012\022$\n\027min_time_sample_scalin"
  "g\030\022 \001(\001:\0030.1\022#\n\027max_time_sample_scaling\030"
  "\023 \001(\001:\00210\022\033\n\014use_fix_time\030\024 \001(\010:\005false\0228"
  "\n\014ipopt_config\030\025 \001(\0132\".apollo.planning.I"
  "poptSolverConfig\022\037\n\027enable_constraint_ch"
  "eck\030\026 \001(\010\022\036\n\026enable_hand_derivative\030\027 \001("
  "\010\022\037\n\027enable_derivative_check\030\030 \001(\010\022)\n\032en"
  "able_initial_final_check\030\031 \001(\010:\005false\"\377\002"
  "\n\021IpoptSolverConfig\022\031\n\021ipopt_print_level"
  "\030\001 \001(\005\022\031\n\021mumps_mem_percent\030\002 \001(\005\022\024\n\014mum"
  "ps_pivtol\030\003 \001(\001\022\026\n\016ipopt_max_iter\030\004 \001(\005\022"
  "\021\n\tipopt_tol\030\005 \001(\001\022(\n ipopt_acceptable_c"
  "onstr_viol_tol\030\006 \001(\001\022&\n\036ipopt_min_hessia"
  "n_perturbation\030\007 \001(\001\022+\n#ipopt_jacobian_r"
  "egularization_value\030\010 \001(\001\022%\n\035ipopt_print"
  "_timing_statistics\030\t \001(\t\022\031\n\021ipopt_alpha_"
  "for_y\030\n \001(\t\022\026\n\016ipopt_recalc_y\030\013 \001(\t\022\032\n\ri"
  "popt_mu_init\030\014 \001(\001:\0030.1*w\n\020DualVariableM"
  "ode\022\027\n\023DUAL_VARIABLE_IPOPT\020\000\022\031\n\025DUAL_VAR"
  "IABLE_IPOPTQP\020\001\022\026\n\022DUAL_VARIABLE_OSQP\020\002\022"
  "\027\n\023DUAL_VARIABLE_DEBUG\020\003"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto_deps[1] = {
  &::descriptor_table_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto = {
  false, false, 4504, descriptor_table_protodef_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto, "modules/planning/proto/open_space_task_config.proto", 
  &descriptor_table_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto_once, descriptor_table_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto_deps, 1, 10,
  schemas, file_default_instances, TableStruct_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto::offsets,
  file_level_metadata_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto, file_level_enum_descriptors_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto, file_level_service_descriptors_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto_getter() {
  return &descriptor_table_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto(&descriptor_table_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto);
namespace apollo {
namespace planning {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OpenSpacePreStopDeciderConfig_StopType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto);
  return file_level_enum_descriptors_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto[0];
}
bool OpenSpacePreStopDeciderConfig_StopType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr OpenSpacePreStopDeciderConfig_StopType OpenSpacePreStopDeciderConfig::NOT_DEFINED;
constexpr OpenSpacePreStopDeciderConfig_StopType OpenSpacePreStopDeciderConfig::PARKING;
constexpr OpenSpacePreStopDeciderConfig_StopType OpenSpacePreStopDeciderConfig::PULL_OVER;
constexpr OpenSpacePreStopDeciderConfig_StopType OpenSpacePreStopDeciderConfig::NARROW_STREET_U_TURN;
constexpr OpenSpacePreStopDeciderConfig_StopType OpenSpacePreStopDeciderConfig::DEAD_END_PRE_STOP;
constexpr OpenSpacePreStopDeciderConfig_StopType OpenSpacePreStopDeciderConfig::StopType_MIN;
constexpr OpenSpacePreStopDeciderConfig_StopType OpenSpacePreStopDeciderConfig::StopType_MAX;
constexpr int OpenSpacePreStopDeciderConfig::StopType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OpenSpaceRoiDeciderConfig_RoiType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto);
  return file_level_enum_descriptors_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto[1];
}
bool OpenSpaceRoiDeciderConfig_RoiType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr OpenSpaceRoiDeciderConfig_RoiType OpenSpaceRoiDeciderConfig::NOT_DEFINED;
constexpr OpenSpaceRoiDeciderConfig_RoiType OpenSpaceRoiDeciderConfig::PARKING;
constexpr OpenSpaceRoiDeciderConfig_RoiType OpenSpaceRoiDeciderConfig::PULL_OVER;
constexpr OpenSpaceRoiDeciderConfig_RoiType OpenSpaceRoiDeciderConfig::PARK_AND_GO;
constexpr OpenSpaceRoiDeciderConfig_RoiType OpenSpaceRoiDeciderConfig::NARROW_STREET_U_TURN;
constexpr OpenSpaceRoiDeciderConfig_RoiType OpenSpaceRoiDeciderConfig::DEAD_END;
constexpr OpenSpaceRoiDeciderConfig_RoiType OpenSpaceRoiDeciderConfig::RoiType_MIN;
constexpr OpenSpaceRoiDeciderConfig_RoiType OpenSpaceRoiDeciderConfig::RoiType_MAX;
constexpr int OpenSpaceRoiDeciderConfig::RoiType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DualVariableMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto);
  return file_level_enum_descriptors_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto[2];
}
bool DualVariableMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class OpenSpaceFallBackDeciderConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<OpenSpaceFallBackDeciderConfig>()._has_bits_);
  static void set_has_open_space_prediction_time_period(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_open_space_fallback_collision_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_open_space_fallback_stop_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_open_space_fallback_collision_time_buffer(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

OpenSpaceFallBackDeciderConfig::OpenSpaceFallBackDeciderConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.planning.OpenSpaceFallBackDeciderConfig)
}
OpenSpaceFallBackDeciderConfig::OpenSpaceFallBackDeciderConfig(const OpenSpaceFallBackDeciderConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&open_space_prediction_time_period_, &from.open_space_prediction_time_period_,
    static_cast<size_t>(reinterpret_cast<char*>(&open_space_fallback_collision_time_buffer_) -
    reinterpret_cast<char*>(&open_space_prediction_time_period_)) + sizeof(open_space_fallback_collision_time_buffer_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.OpenSpaceFallBackDeciderConfig)
}

void OpenSpaceFallBackDeciderConfig::SharedCtor() {
open_space_prediction_time_period_ = 5;
open_space_fallback_collision_distance_ = 5;
open_space_fallback_stop_distance_ = 2;
open_space_fallback_collision_time_buffer_ = 10;
}

OpenSpaceFallBackDeciderConfig::~OpenSpaceFallBackDeciderConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.OpenSpaceFallBackDeciderConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OpenSpaceFallBackDeciderConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void OpenSpaceFallBackDeciderConfig::ArenaDtor(void* object) {
  OpenSpaceFallBackDeciderConfig* _this = reinterpret_cast< OpenSpaceFallBackDeciderConfig* >(object);
  (void)_this;
}
void OpenSpaceFallBackDeciderConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OpenSpaceFallBackDeciderConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OpenSpaceFallBackDeciderConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.OpenSpaceFallBackDeciderConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    open_space_prediction_time_period_ = 5;
    open_space_fallback_collision_distance_ = 5;
    open_space_fallback_stop_distance_ = 2;
    open_space_fallback_collision_time_buffer_ = 10;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OpenSpaceFallBackDeciderConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double open_space_prediction_time_period = 1 [default = 5];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_open_space_prediction_time_period(&has_bits);
          open_space_prediction_time_period_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double open_space_fallback_collision_distance = 2 [default = 5];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_open_space_fallback_collision_distance(&has_bits);
          open_space_fallback_collision_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double open_space_fallback_stop_distance = 3 [default = 2];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_open_space_fallback_stop_distance(&has_bits);
          open_space_fallback_stop_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double open_space_fallback_collision_time_buffer = 4 [default = 10];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_open_space_fallback_collision_time_buffer(&has_bits);
          open_space_fallback_collision_time_buffer_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OpenSpaceFallBackDeciderConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.OpenSpaceFallBackDeciderConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double open_space_prediction_time_period = 1 [default = 5];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_open_space_prediction_time_period(), target);
  }

  // optional double open_space_fallback_collision_distance = 2 [default = 5];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_open_space_fallback_collision_distance(), target);
  }

  // optional double open_space_fallback_stop_distance = 3 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_open_space_fallback_stop_distance(), target);
  }

  // optional double open_space_fallback_collision_time_buffer = 4 [default = 10];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_open_space_fallback_collision_time_buffer(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.OpenSpaceFallBackDeciderConfig)
  return target;
}

size_t OpenSpaceFallBackDeciderConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.OpenSpaceFallBackDeciderConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional double open_space_prediction_time_period = 1 [default = 5];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double open_space_fallback_collision_distance = 2 [default = 5];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double open_space_fallback_stop_distance = 3 [default = 2];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double open_space_fallback_collision_time_buffer = 4 [default = 10];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OpenSpaceFallBackDeciderConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OpenSpaceFallBackDeciderConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OpenSpaceFallBackDeciderConfig::GetClassData() const { return &_class_data_; }

void OpenSpaceFallBackDeciderConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OpenSpaceFallBackDeciderConfig *>(to)->MergeFrom(
      static_cast<const OpenSpaceFallBackDeciderConfig &>(from));
}


void OpenSpaceFallBackDeciderConfig::MergeFrom(const OpenSpaceFallBackDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.OpenSpaceFallBackDeciderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      open_space_prediction_time_period_ = from.open_space_prediction_time_period_;
    }
    if (cached_has_bits & 0x00000002u) {
      open_space_fallback_collision_distance_ = from.open_space_fallback_collision_distance_;
    }
    if (cached_has_bits & 0x00000004u) {
      open_space_fallback_stop_distance_ = from.open_space_fallback_stop_distance_;
    }
    if (cached_has_bits & 0x00000008u) {
      open_space_fallback_collision_time_buffer_ = from.open_space_fallback_collision_time_buffer_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OpenSpaceFallBackDeciderConfig::CopyFrom(const OpenSpaceFallBackDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.OpenSpaceFallBackDeciderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenSpaceFallBackDeciderConfig::IsInitialized() const {
  return true;
}

void OpenSpaceFallBackDeciderConfig::InternalSwap(OpenSpaceFallBackDeciderConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(open_space_prediction_time_period_, other->open_space_prediction_time_period_);
  swap(open_space_fallback_collision_distance_, other->open_space_fallback_collision_distance_);
  swap(open_space_fallback_stop_distance_, other->open_space_fallback_stop_distance_);
  swap(open_space_fallback_collision_time_buffer_, other->open_space_fallback_collision_time_buffer_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OpenSpaceFallBackDeciderConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto[0]);
}

// ===================================================================

class OpenSpacePreStopDeciderConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<OpenSpacePreStopDeciderConfig>()._has_bits_);
  static void set_has_stop_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_rightaway_stop_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_stop_distance_to_target(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

OpenSpacePreStopDeciderConfig::OpenSpacePreStopDeciderConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.planning.OpenSpacePreStopDeciderConfig)
}
OpenSpacePreStopDeciderConfig::OpenSpacePreStopDeciderConfig(const OpenSpacePreStopDeciderConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&stop_type_, &from.stop_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&stop_distance_to_target_) -
    reinterpret_cast<char*>(&stop_type_)) + sizeof(stop_distance_to_target_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.OpenSpacePreStopDeciderConfig)
}

void OpenSpacePreStopDeciderConfig::SharedCtor() {
stop_type_ = 0;
rightaway_stop_distance_ = 2;
stop_distance_to_target_ = 5;
}

OpenSpacePreStopDeciderConfig::~OpenSpacePreStopDeciderConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.OpenSpacePreStopDeciderConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OpenSpacePreStopDeciderConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void OpenSpacePreStopDeciderConfig::ArenaDtor(void* object) {
  OpenSpacePreStopDeciderConfig* _this = reinterpret_cast< OpenSpacePreStopDeciderConfig* >(object);
  (void)_this;
}
void OpenSpacePreStopDeciderConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OpenSpacePreStopDeciderConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OpenSpacePreStopDeciderConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.OpenSpacePreStopDeciderConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    stop_type_ = 0;
    rightaway_stop_distance_ = 2;
    stop_distance_to_target_ = 5;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OpenSpacePreStopDeciderConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.planning.OpenSpacePreStopDeciderConfig.StopType stop_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::planning::OpenSpacePreStopDeciderConfig_StopType_IsValid(val))) {
            _internal_set_stop_type(static_cast<::apollo::planning::OpenSpacePreStopDeciderConfig_StopType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional double rightaway_stop_distance = 2 [default = 2];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_rightaway_stop_distance(&has_bits);
          rightaway_stop_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double stop_distance_to_target = 3 [default = 5];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_stop_distance_to_target(&has_bits);
          stop_distance_to_target_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OpenSpacePreStopDeciderConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.OpenSpacePreStopDeciderConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning.OpenSpacePreStopDeciderConfig.StopType stop_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_stop_type(), target);
  }

  // optional double rightaway_stop_distance = 2 [default = 2];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_rightaway_stop_distance(), target);
  }

  // optional double stop_distance_to_target = 3 [default = 5];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_stop_distance_to_target(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.OpenSpacePreStopDeciderConfig)
  return target;
}

size_t OpenSpacePreStopDeciderConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.OpenSpacePreStopDeciderConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .apollo.planning.OpenSpacePreStopDeciderConfig.StopType stop_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_stop_type());
    }

    // optional double rightaway_stop_distance = 2 [default = 2];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double stop_distance_to_target = 3 [default = 5];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OpenSpacePreStopDeciderConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OpenSpacePreStopDeciderConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OpenSpacePreStopDeciderConfig::GetClassData() const { return &_class_data_; }

void OpenSpacePreStopDeciderConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OpenSpacePreStopDeciderConfig *>(to)->MergeFrom(
      static_cast<const OpenSpacePreStopDeciderConfig &>(from));
}


void OpenSpacePreStopDeciderConfig::MergeFrom(const OpenSpacePreStopDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.OpenSpacePreStopDeciderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      stop_type_ = from.stop_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      rightaway_stop_distance_ = from.rightaway_stop_distance_;
    }
    if (cached_has_bits & 0x00000004u) {
      stop_distance_to_target_ = from.stop_distance_to_target_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OpenSpacePreStopDeciderConfig::CopyFrom(const OpenSpacePreStopDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.OpenSpacePreStopDeciderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenSpacePreStopDeciderConfig::IsInitialized() const {
  return true;
}

void OpenSpacePreStopDeciderConfig::InternalSwap(OpenSpacePreStopDeciderConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(stop_type_, other->stop_type_);
  swap(rightaway_stop_distance_, other->rightaway_stop_distance_);
  swap(stop_distance_to_target_, other->stop_distance_to_target_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OpenSpacePreStopDeciderConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto[1]);
}

// ===================================================================

class OpenSpaceRoiDeciderConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<OpenSpaceRoiDeciderConfig>()._has_bits_);
  static void set_has_roi_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_roi_longitudinal_range_start(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_roi_longitudinal_range_end(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_parking_start_range(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_parking_inwards(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_enable_perception_obstacles(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_parking_depth_buffer(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_roi_line_segment_min_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_roi_line_segment_length(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_roi_line_segment_length_from_map(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_perception_obstacle_filtering_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_perception_obstacle_buffer(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_curb_heading_tangent_change_upper_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_end_pose_s_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_parallel_park_end_x_buffer(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_extend_right_x_buffer(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_extend_left_x_buffer(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

OpenSpaceRoiDeciderConfig::OpenSpaceRoiDeciderConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.planning.OpenSpaceRoiDeciderConfig)
}
OpenSpaceRoiDeciderConfig::OpenSpaceRoiDeciderConfig(const OpenSpaceRoiDeciderConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&roi_type_, &from.roi_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&parallel_park_end_x_buffer_) -
    reinterpret_cast<char*>(&roi_type_)) + sizeof(parallel_park_end_x_buffer_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.OpenSpaceRoiDeciderConfig)
}

void OpenSpaceRoiDeciderConfig::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&roi_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&extend_left_x_buffer_) -
    reinterpret_cast<char*>(&roi_type_)) + sizeof(extend_left_x_buffer_));
roi_longitudinal_range_start_ = 10;
roi_longitudinal_range_end_ = 10;
parking_start_range_ = 7;
parking_depth_buffer_ = 0.1;
roi_line_segment_min_angle_ = 0.3;
roi_line_segment_length_ = 1;
roi_line_segment_length_from_map_ = 10;
perception_obstacle_filtering_distance_ = 1000;
curb_heading_tangent_change_upper_limit_ = 1;
end_pose_s_distance_ = 10;
parallel_park_end_x_buffer_ = 0.2;
}

OpenSpaceRoiDeciderConfig::~OpenSpaceRoiDeciderConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.OpenSpaceRoiDeciderConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OpenSpaceRoiDeciderConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void OpenSpaceRoiDeciderConfig::ArenaDtor(void* object) {
  OpenSpaceRoiDeciderConfig* _this = reinterpret_cast< OpenSpaceRoiDeciderConfig* >(object);
  (void)_this;
}
void OpenSpaceRoiDeciderConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OpenSpaceRoiDeciderConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OpenSpaceRoiDeciderConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.OpenSpaceRoiDeciderConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&roi_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&extend_left_x_buffer_) -
        reinterpret_cast<char*>(&roi_type_)) + sizeof(extend_left_x_buffer_));
    roi_longitudinal_range_start_ = 10;
    roi_longitudinal_range_end_ = 10;
  }
  if (cached_has_bits & 0x0000ff00u) {
    parking_start_range_ = 7;
    parking_depth_buffer_ = 0.1;
    roi_line_segment_min_angle_ = 0.3;
    roi_line_segment_length_ = 1;
    roi_line_segment_length_from_map_ = 10;
    perception_obstacle_filtering_distance_ = 1000;
    curb_heading_tangent_change_upper_limit_ = 1;
    end_pose_s_distance_ = 10;
  }
  parallel_park_end_x_buffer_ = 0.2;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OpenSpaceRoiDeciderConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.planning.OpenSpaceRoiDeciderConfig.RoiType roi_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::planning::OpenSpaceRoiDeciderConfig_RoiType_IsValid(val))) {
            _internal_set_roi_type(static_cast<::apollo::planning::OpenSpaceRoiDeciderConfig_RoiType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional double roi_longitudinal_range_start = 2 [default = 10];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_roi_longitudinal_range_start(&has_bits);
          roi_longitudinal_range_start_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double roi_longitudinal_range_end = 3 [default = 10];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_roi_longitudinal_range_end(&has_bits);
          roi_longitudinal_range_end_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double parking_start_range = 4 [default = 7];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_parking_start_range(&has_bits);
          parking_start_range_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool parking_inwards = 5 [default = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_parking_inwards(&has_bits);
          parking_inwards_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_perception_obstacles = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_enable_perception_obstacles(&has_bits);
          enable_perception_obstacles_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double parking_depth_buffer = 7 [default = 0.1];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_parking_depth_buffer(&has_bits);
          parking_depth_buffer_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double roi_line_segment_min_angle = 8 [default = 0.3];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_roi_line_segment_min_angle(&has_bits);
          roi_line_segment_min_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double roi_line_segment_length = 9 [default = 1];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_roi_line_segment_length(&has_bits);
          roi_line_segment_length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double roi_line_segment_length_from_map = 10 [default = 10];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_roi_line_segment_length_from_map(&has_bits);
          roi_line_segment_length_from_map_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double perception_obstacle_filtering_distance = 11 [default = 1000];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_perception_obstacle_filtering_distance(&has_bits);
          perception_obstacle_filtering_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double perception_obstacle_buffer = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          _Internal::set_has_perception_obstacle_buffer(&has_bits);
          perception_obstacle_buffer_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double curb_heading_tangent_change_upper_limit = 13 [default = 1];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          _Internal::set_has_curb_heading_tangent_change_upper_limit(&has_bits);
          curb_heading_tangent_change_upper_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double end_pose_s_distance = 14 [default = 10];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          _Internal::set_has_end_pose_s_distance(&has_bits);
          end_pose_s_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double parallel_park_end_x_buffer = 15 [default = 0.2];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          _Internal::set_has_parallel_park_end_x_buffer(&has_bits);
          parallel_park_end_x_buffer_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double extend_right_x_buffer = 16 [default = 0];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          _Internal::set_has_extend_right_x_buffer(&has_bits);
          extend_right_x_buffer_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double extend_left_x_buffer = 17 [default = 0];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 137)) {
          _Internal::set_has_extend_left_x_buffer(&has_bits);
          extend_left_x_buffer_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OpenSpaceRoiDeciderConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.OpenSpaceRoiDeciderConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning.OpenSpaceRoiDeciderConfig.RoiType roi_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_roi_type(), target);
  }

  // optional double roi_longitudinal_range_start = 2 [default = 10];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_roi_longitudinal_range_start(), target);
  }

  // optional double roi_longitudinal_range_end = 3 [default = 10];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_roi_longitudinal_range_end(), target);
  }

  // optional double parking_start_range = 4 [default = 7];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_parking_start_range(), target);
  }

  // optional bool parking_inwards = 5 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_parking_inwards(), target);
  }

  // optional bool enable_perception_obstacles = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_enable_perception_obstacles(), target);
  }

  // optional double parking_depth_buffer = 7 [default = 0.1];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_parking_depth_buffer(), target);
  }

  // optional double roi_line_segment_min_angle = 8 [default = 0.3];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_roi_line_segment_min_angle(), target);
  }

  // optional double roi_line_segment_length = 9 [default = 1];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_roi_line_segment_length(), target);
  }

  // optional double roi_line_segment_length_from_map = 10 [default = 10];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_roi_line_segment_length_from_map(), target);
  }

  // optional double perception_obstacle_filtering_distance = 11 [default = 1000];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_perception_obstacle_filtering_distance(), target);
  }

  // optional double perception_obstacle_buffer = 12;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_perception_obstacle_buffer(), target);
  }

  // optional double curb_heading_tangent_change_upper_limit = 13 [default = 1];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_curb_heading_tangent_change_upper_limit(), target);
  }

  // optional double end_pose_s_distance = 14 [default = 10];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_end_pose_s_distance(), target);
  }

  // optional double parallel_park_end_x_buffer = 15 [default = 0.2];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_parallel_park_end_x_buffer(), target);
  }

  // optional double extend_right_x_buffer = 16 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->_internal_extend_right_x_buffer(), target);
  }

  // optional double extend_left_x_buffer = 17 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(17, this->_internal_extend_left_x_buffer(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.OpenSpaceRoiDeciderConfig)
  return target;
}

size_t OpenSpaceRoiDeciderConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.OpenSpaceRoiDeciderConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.planning.OpenSpaceRoiDeciderConfig.RoiType roi_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_roi_type());
    }

    // optional bool parking_inwards = 5 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool enable_perception_obstacles = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional double perception_obstacle_buffer = 12;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double extend_right_x_buffer = 16 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 8;
    }

    // optional double extend_left_x_buffer = 17 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 8;
    }

    // optional double roi_longitudinal_range_start = 2 [default = 10];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double roi_longitudinal_range_end = 3 [default = 10];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional double parking_start_range = 4 [default = 7];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double parking_depth_buffer = 7 [default = 0.1];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double roi_line_segment_min_angle = 8 [default = 0.3];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional double roi_line_segment_length = 9 [default = 1];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

    // optional double roi_line_segment_length_from_map = 10 [default = 10];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 8;
    }

    // optional double perception_obstacle_filtering_distance = 11 [default = 1000];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 8;
    }

    // optional double curb_heading_tangent_change_upper_limit = 13 [default = 1];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 8;
    }

    // optional double end_pose_s_distance = 14 [default = 10];
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 8;
    }

  }
  // optional double parallel_park_end_x_buffer = 15 [default = 0.2];
  if (cached_has_bits & 0x00010000u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OpenSpaceRoiDeciderConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OpenSpaceRoiDeciderConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OpenSpaceRoiDeciderConfig::GetClassData() const { return &_class_data_; }

void OpenSpaceRoiDeciderConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OpenSpaceRoiDeciderConfig *>(to)->MergeFrom(
      static_cast<const OpenSpaceRoiDeciderConfig &>(from));
}


void OpenSpaceRoiDeciderConfig::MergeFrom(const OpenSpaceRoiDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.OpenSpaceRoiDeciderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      roi_type_ = from.roi_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      parking_inwards_ = from.parking_inwards_;
    }
    if (cached_has_bits & 0x00000004u) {
      enable_perception_obstacles_ = from.enable_perception_obstacles_;
    }
    if (cached_has_bits & 0x00000008u) {
      perception_obstacle_buffer_ = from.perception_obstacle_buffer_;
    }
    if (cached_has_bits & 0x00000010u) {
      extend_right_x_buffer_ = from.extend_right_x_buffer_;
    }
    if (cached_has_bits & 0x00000020u) {
      extend_left_x_buffer_ = from.extend_left_x_buffer_;
    }
    if (cached_has_bits & 0x00000040u) {
      roi_longitudinal_range_start_ = from.roi_longitudinal_range_start_;
    }
    if (cached_has_bits & 0x00000080u) {
      roi_longitudinal_range_end_ = from.roi_longitudinal_range_end_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      parking_start_range_ = from.parking_start_range_;
    }
    if (cached_has_bits & 0x00000200u) {
      parking_depth_buffer_ = from.parking_depth_buffer_;
    }
    if (cached_has_bits & 0x00000400u) {
      roi_line_segment_min_angle_ = from.roi_line_segment_min_angle_;
    }
    if (cached_has_bits & 0x00000800u) {
      roi_line_segment_length_ = from.roi_line_segment_length_;
    }
    if (cached_has_bits & 0x00001000u) {
      roi_line_segment_length_from_map_ = from.roi_line_segment_length_from_map_;
    }
    if (cached_has_bits & 0x00002000u) {
      perception_obstacle_filtering_distance_ = from.perception_obstacle_filtering_distance_;
    }
    if (cached_has_bits & 0x00004000u) {
      curb_heading_tangent_change_upper_limit_ = from.curb_heading_tangent_change_upper_limit_;
    }
    if (cached_has_bits & 0x00008000u) {
      end_pose_s_distance_ = from.end_pose_s_distance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    _internal_set_parallel_park_end_x_buffer(from._internal_parallel_park_end_x_buffer());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OpenSpaceRoiDeciderConfig::CopyFrom(const OpenSpaceRoiDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.OpenSpaceRoiDeciderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenSpaceRoiDeciderConfig::IsInitialized() const {
  return true;
}

void OpenSpaceRoiDeciderConfig::InternalSwap(OpenSpaceRoiDeciderConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OpenSpaceRoiDeciderConfig, extend_left_x_buffer_)
      + sizeof(OpenSpaceRoiDeciderConfig::extend_left_x_buffer_)
      - PROTOBUF_FIELD_OFFSET(OpenSpaceRoiDeciderConfig, roi_type_)>(
          reinterpret_cast<char*>(&roi_type_),
          reinterpret_cast<char*>(&other->roi_type_));
  swap(roi_longitudinal_range_start_, other->roi_longitudinal_range_start_);
  swap(roi_longitudinal_range_end_, other->roi_longitudinal_range_end_);
  swap(parking_start_range_, other->parking_start_range_);
  swap(parking_depth_buffer_, other->parking_depth_buffer_);
  swap(roi_line_segment_min_angle_, other->roi_line_segment_min_angle_);
  swap(roi_line_segment_length_, other->roi_line_segment_length_);
  swap(roi_line_segment_length_from_map_, other->roi_line_segment_length_from_map_);
  swap(perception_obstacle_filtering_distance_, other->perception_obstacle_filtering_distance_);
  swap(curb_heading_tangent_change_upper_limit_, other->curb_heading_tangent_change_upper_limit_);
  swap(end_pose_s_distance_, other->end_pose_s_distance_);
  swap(parallel_park_end_x_buffer_, other->parallel_park_end_x_buffer_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OpenSpaceRoiDeciderConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto[2]);
}

// ===================================================================

class OpenSpaceTrajectoryPartitionConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<OpenSpaceTrajectoryPartitionConfig>()._has_bits_);
  static void set_has_gear_shift_max_t(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_gear_shift_unit_t(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_gear_shift_period_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_interpolated_pieces_num(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_initial_gear_check_horizon(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_heading_search_range(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_heading_track_range(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_distance_search_range(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_heading_offset_to_midpoint(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_lateral_offset_to_midpoint(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_longitudinal_offset_to_midpoint(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_vehicle_box_iou_threshold_to_midpoint(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_linear_velocity_threshold_on_ego(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
};

OpenSpaceTrajectoryPartitionConfig::OpenSpaceTrajectoryPartitionConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.planning.OpenSpaceTrajectoryPartitionConfig)
}
OpenSpaceTrajectoryPartitionConfig::OpenSpaceTrajectoryPartitionConfig(const OpenSpaceTrajectoryPartitionConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&gear_shift_max_t_, &from.gear_shift_max_t_,
    static_cast<size_t>(reinterpret_cast<char*>(&linear_velocity_threshold_on_ego_) -
    reinterpret_cast<char*>(&gear_shift_max_t_)) + sizeof(linear_velocity_threshold_on_ego_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.OpenSpaceTrajectoryPartitionConfig)
}

void OpenSpaceTrajectoryPartitionConfig::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&gear_shift_max_t_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&heading_offset_to_midpoint_) -
    reinterpret_cast<char*>(&gear_shift_max_t_)) + sizeof(heading_offset_to_midpoint_));
distance_search_range_ = 1e-06;
lateral_offset_to_midpoint_ = 0.1;
longitudinal_offset_to_midpoint_ = 0.1;
vehicle_box_iou_threshold_to_midpoint_ = 0.95;
linear_velocity_threshold_on_ego_ = 0.2;
}

OpenSpaceTrajectoryPartitionConfig::~OpenSpaceTrajectoryPartitionConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.OpenSpaceTrajectoryPartitionConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OpenSpaceTrajectoryPartitionConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void OpenSpaceTrajectoryPartitionConfig::ArenaDtor(void* object) {
  OpenSpaceTrajectoryPartitionConfig* _this = reinterpret_cast< OpenSpaceTrajectoryPartitionConfig* >(object);
  (void)_this;
}
void OpenSpaceTrajectoryPartitionConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OpenSpaceTrajectoryPartitionConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OpenSpaceTrajectoryPartitionConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.OpenSpaceTrajectoryPartitionConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&gear_shift_max_t_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&heading_offset_to_midpoint_) -
        reinterpret_cast<char*>(&gear_shift_max_t_)) + sizeof(heading_offset_to_midpoint_));
  }
  if (cached_has_bits & 0x00001f00u) {
    distance_search_range_ = 1e-06;
    lateral_offset_to_midpoint_ = 0.1;
    longitudinal_offset_to_midpoint_ = 0.1;
    vehicle_box_iou_threshold_to_midpoint_ = 0.95;
    linear_velocity_threshold_on_ego_ = 0.2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OpenSpaceTrajectoryPartitionConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double gear_shift_max_t = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_gear_shift_max_t(&has_bits);
          gear_shift_max_t_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double gear_shift_unit_t = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_gear_shift_unit_t(&has_bits);
          gear_shift_unit_t_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double gear_shift_period_duration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_gear_shift_period_duration(&has_bits);
          gear_shift_period_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 interpolated_pieces_num = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_interpolated_pieces_num(&has_bits);
          interpolated_pieces_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 initial_gear_check_horizon = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_initial_gear_check_horizon(&has_bits);
          initial_gear_check_horizon_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double heading_search_range = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_heading_search_range(&has_bits);
          heading_search_range_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double heading_track_range = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_heading_track_range(&has_bits);
          heading_track_range_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double distance_search_range = 8 [default = 1e-06];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_distance_search_range(&has_bits);
          distance_search_range_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double heading_offset_to_midpoint = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_heading_offset_to_midpoint(&has_bits);
          heading_offset_to_midpoint_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double lateral_offset_to_midpoint = 10 [default = 0.1];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_lateral_offset_to_midpoint(&has_bits);
          lateral_offset_to_midpoint_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double longitudinal_offset_to_midpoint = 11 [default = 0.1];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_longitudinal_offset_to_midpoint(&has_bits);
          longitudinal_offset_to_midpoint_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double vehicle_box_iou_threshold_to_midpoint = 12 [default = 0.95];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          _Internal::set_has_vehicle_box_iou_threshold_to_midpoint(&has_bits);
          vehicle_box_iou_threshold_to_midpoint_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double linear_velocity_threshold_on_ego = 13 [default = 0.2];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          _Internal::set_has_linear_velocity_threshold_on_ego(&has_bits);
          linear_velocity_threshold_on_ego_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OpenSpaceTrajectoryPartitionConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.OpenSpaceTrajectoryPartitionConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double gear_shift_max_t = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_gear_shift_max_t(), target);
  }

  // optional double gear_shift_unit_t = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_gear_shift_unit_t(), target);
  }

  // optional double gear_shift_period_duration = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_gear_shift_period_duration(), target);
  }

  // optional uint64 interpolated_pieces_num = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_interpolated_pieces_num(), target);
  }

  // optional uint64 initial_gear_check_horizon = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_initial_gear_check_horizon(), target);
  }

  // optional double heading_search_range = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_heading_search_range(), target);
  }

  // optional double heading_track_range = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_heading_track_range(), target);
  }

  // optional double distance_search_range = 8 [default = 1e-06];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_distance_search_range(), target);
  }

  // optional double heading_offset_to_midpoint = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_heading_offset_to_midpoint(), target);
  }

  // optional double lateral_offset_to_midpoint = 10 [default = 0.1];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_lateral_offset_to_midpoint(), target);
  }

  // optional double longitudinal_offset_to_midpoint = 11 [default = 0.1];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_longitudinal_offset_to_midpoint(), target);
  }

  // optional double vehicle_box_iou_threshold_to_midpoint = 12 [default = 0.95];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_vehicle_box_iou_threshold_to_midpoint(), target);
  }

  // optional double linear_velocity_threshold_on_ego = 13 [default = 0.2];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_linear_velocity_threshold_on_ego(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.OpenSpaceTrajectoryPartitionConfig)
  return target;
}

size_t OpenSpaceTrajectoryPartitionConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.OpenSpaceTrajectoryPartitionConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional double gear_shift_max_t = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double gear_shift_unit_t = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double gear_shift_period_duration = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional uint64 interpolated_pieces_num = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_interpolated_pieces_num());
    }

    // optional uint64 initial_gear_check_horizon = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_initial_gear_check_horizon());
    }

    // optional double heading_search_range = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double heading_track_range = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double heading_offset_to_midpoint = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional double distance_search_range = 8 [default = 1e-06];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double lateral_offset_to_midpoint = 10 [default = 0.1];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double longitudinal_offset_to_midpoint = 11 [default = 0.1];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional double vehicle_box_iou_threshold_to_midpoint = 12 [default = 0.95];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

    // optional double linear_velocity_threshold_on_ego = 13 [default = 0.2];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OpenSpaceTrajectoryPartitionConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OpenSpaceTrajectoryPartitionConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OpenSpaceTrajectoryPartitionConfig::GetClassData() const { return &_class_data_; }

void OpenSpaceTrajectoryPartitionConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OpenSpaceTrajectoryPartitionConfig *>(to)->MergeFrom(
      static_cast<const OpenSpaceTrajectoryPartitionConfig &>(from));
}


void OpenSpaceTrajectoryPartitionConfig::MergeFrom(const OpenSpaceTrajectoryPartitionConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.OpenSpaceTrajectoryPartitionConfig)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      gear_shift_max_t_ = from.gear_shift_max_t_;
    }
    if (cached_has_bits & 0x00000002u) {
      gear_shift_unit_t_ = from.gear_shift_unit_t_;
    }
    if (cached_has_bits & 0x00000004u) {
      gear_shift_period_duration_ = from.gear_shift_period_duration_;
    }
    if (cached_has_bits & 0x00000008u) {
      interpolated_pieces_num_ = from.interpolated_pieces_num_;
    }
    if (cached_has_bits & 0x00000010u) {
      initial_gear_check_horizon_ = from.initial_gear_check_horizon_;
    }
    if (cached_has_bits & 0x00000020u) {
      heading_search_range_ = from.heading_search_range_;
    }
    if (cached_has_bits & 0x00000040u) {
      heading_track_range_ = from.heading_track_range_;
    }
    if (cached_has_bits & 0x00000080u) {
      heading_offset_to_midpoint_ = from.heading_offset_to_midpoint_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      distance_search_range_ = from.distance_search_range_;
    }
    if (cached_has_bits & 0x00000200u) {
      lateral_offset_to_midpoint_ = from.lateral_offset_to_midpoint_;
    }
    if (cached_has_bits & 0x00000400u) {
      longitudinal_offset_to_midpoint_ = from.longitudinal_offset_to_midpoint_;
    }
    if (cached_has_bits & 0x00000800u) {
      vehicle_box_iou_threshold_to_midpoint_ = from.vehicle_box_iou_threshold_to_midpoint_;
    }
    if (cached_has_bits & 0x00001000u) {
      linear_velocity_threshold_on_ego_ = from.linear_velocity_threshold_on_ego_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OpenSpaceTrajectoryPartitionConfig::CopyFrom(const OpenSpaceTrajectoryPartitionConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.OpenSpaceTrajectoryPartitionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenSpaceTrajectoryPartitionConfig::IsInitialized() const {
  return true;
}

void OpenSpaceTrajectoryPartitionConfig::InternalSwap(OpenSpaceTrajectoryPartitionConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OpenSpaceTrajectoryPartitionConfig, heading_offset_to_midpoint_)
      + sizeof(OpenSpaceTrajectoryPartitionConfig::heading_offset_to_midpoint_)
      - PROTOBUF_FIELD_OFFSET(OpenSpaceTrajectoryPartitionConfig, gear_shift_max_t_)>(
          reinterpret_cast<char*>(&gear_shift_max_t_),
          reinterpret_cast<char*>(&other->gear_shift_max_t_));
  swap(distance_search_range_, other->distance_search_range_);
  swap(lateral_offset_to_midpoint_, other->lateral_offset_to_midpoint_);
  swap(longitudinal_offset_to_midpoint_, other->longitudinal_offset_to_midpoint_);
  swap(vehicle_box_iou_threshold_to_midpoint_, other->vehicle_box_iou_threshold_to_midpoint_);
  swap(linear_velocity_threshold_on_ego_, other->linear_velocity_threshold_on_ego_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OpenSpaceTrajectoryPartitionConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto[3]);
}

// ===================================================================

class OpenSpaceTrajectoryProviderConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<OpenSpaceTrajectoryProviderConfig>()._has_bits_);
  static const ::apollo::planning::OpenSpaceTrajectoryOptimizerConfig& open_space_trajectory_optimizer_config(const OpenSpaceTrajectoryProviderConfig* msg);
  static void set_has_open_space_trajectory_optimizer_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::apollo::planning::OpenSpaceTrajectoryOptimizerConfig&
OpenSpaceTrajectoryProviderConfig::_Internal::open_space_trajectory_optimizer_config(const OpenSpaceTrajectoryProviderConfig* msg) {
  return *msg->open_space_trajectory_optimizer_config_;
}
OpenSpaceTrajectoryProviderConfig::OpenSpaceTrajectoryProviderConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.planning.OpenSpaceTrajectoryProviderConfig)
}
OpenSpaceTrajectoryProviderConfig::OpenSpaceTrajectoryProviderConfig(const OpenSpaceTrajectoryProviderConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_open_space_trajectory_optimizer_config()) {
    open_space_trajectory_optimizer_config_ = new ::apollo::planning::OpenSpaceTrajectoryOptimizerConfig(*from.open_space_trajectory_optimizer_config_);
  } else {
    open_space_trajectory_optimizer_config_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning.OpenSpaceTrajectoryProviderConfig)
}

void OpenSpaceTrajectoryProviderConfig::SharedCtor() {
open_space_trajectory_optimizer_config_ = nullptr;
}

OpenSpaceTrajectoryProviderConfig::~OpenSpaceTrajectoryProviderConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.OpenSpaceTrajectoryProviderConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OpenSpaceTrajectoryProviderConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete open_space_trajectory_optimizer_config_;
}

void OpenSpaceTrajectoryProviderConfig::ArenaDtor(void* object) {
  OpenSpaceTrajectoryProviderConfig* _this = reinterpret_cast< OpenSpaceTrajectoryProviderConfig* >(object);
  (void)_this;
}
void OpenSpaceTrajectoryProviderConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OpenSpaceTrajectoryProviderConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OpenSpaceTrajectoryProviderConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.OpenSpaceTrajectoryProviderConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(open_space_trajectory_optimizer_config_ != nullptr);
    open_space_trajectory_optimizer_config_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OpenSpaceTrajectoryProviderConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.planning.OpenSpaceTrajectoryOptimizerConfig open_space_trajectory_optimizer_config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_open_space_trajectory_optimizer_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OpenSpaceTrajectoryProviderConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.OpenSpaceTrajectoryProviderConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning.OpenSpaceTrajectoryOptimizerConfig open_space_trajectory_optimizer_config = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::open_space_trajectory_optimizer_config(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.OpenSpaceTrajectoryProviderConfig)
  return target;
}

size_t OpenSpaceTrajectoryProviderConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.OpenSpaceTrajectoryProviderConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .apollo.planning.OpenSpaceTrajectoryOptimizerConfig open_space_trajectory_optimizer_config = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *open_space_trajectory_optimizer_config_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OpenSpaceTrajectoryProviderConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OpenSpaceTrajectoryProviderConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OpenSpaceTrajectoryProviderConfig::GetClassData() const { return &_class_data_; }

void OpenSpaceTrajectoryProviderConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OpenSpaceTrajectoryProviderConfig *>(to)->MergeFrom(
      static_cast<const OpenSpaceTrajectoryProviderConfig &>(from));
}


void OpenSpaceTrajectoryProviderConfig::MergeFrom(const OpenSpaceTrajectoryProviderConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.OpenSpaceTrajectoryProviderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_open_space_trajectory_optimizer_config()) {
    _internal_mutable_open_space_trajectory_optimizer_config()->::apollo::planning::OpenSpaceTrajectoryOptimizerConfig::MergeFrom(from._internal_open_space_trajectory_optimizer_config());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OpenSpaceTrajectoryProviderConfig::CopyFrom(const OpenSpaceTrajectoryProviderConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.OpenSpaceTrajectoryProviderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenSpaceTrajectoryProviderConfig::IsInitialized() const {
  return true;
}

void OpenSpaceTrajectoryProviderConfig::InternalSwap(OpenSpaceTrajectoryProviderConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(open_space_trajectory_optimizer_config_, other->open_space_trajectory_optimizer_config_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OpenSpaceTrajectoryProviderConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto[4]);
}

// ===================================================================

class OpenSpaceTrajectoryOptimizerConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<OpenSpaceTrajectoryOptimizerConfig>()._has_bits_);
  static const ::apollo::planning::HybridAStarConfig& hybrid_a_star_config(const OpenSpaceTrajectoryOptimizerConfig* msg);
  static void set_has_hybrid_a_star_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::planning::DualVariableConfig& dual_variable_warm_start_config(const OpenSpaceTrajectoryOptimizerConfig* msg);
  static void set_has_dual_variable_warm_start_config(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::planning::DistanceApproachTrajectorySmootherConfig& distance_approach_trajectory_smoother_config(const OpenSpaceTrajectoryOptimizerConfig* msg);
  static void set_has_distance_approach_trajectory_smoother_config(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_delta_t(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_is_near_destination_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::apollo::planning::PlannerOpenSpaceConfig& planner_open_space_config(const OpenSpaceTrajectoryOptimizerConfig* msg);
  static void set_has_planner_open_space_config(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::apollo::planning::HybridAStarConfig&
OpenSpaceTrajectoryOptimizerConfig::_Internal::hybrid_a_star_config(const OpenSpaceTrajectoryOptimizerConfig* msg) {
  return *msg->hybrid_a_star_config_;
}
const ::apollo::planning::DualVariableConfig&
OpenSpaceTrajectoryOptimizerConfig::_Internal::dual_variable_warm_start_config(const OpenSpaceTrajectoryOptimizerConfig* msg) {
  return *msg->dual_variable_warm_start_config_;
}
const ::apollo::planning::DistanceApproachTrajectorySmootherConfig&
OpenSpaceTrajectoryOptimizerConfig::_Internal::distance_approach_trajectory_smoother_config(const OpenSpaceTrajectoryOptimizerConfig* msg) {
  return *msg->distance_approach_trajectory_smoother_config_;
}
const ::apollo::planning::PlannerOpenSpaceConfig&
OpenSpaceTrajectoryOptimizerConfig::_Internal::planner_open_space_config(const OpenSpaceTrajectoryOptimizerConfig* msg) {
  return *msg->planner_open_space_config_;
}
void OpenSpaceTrajectoryOptimizerConfig::clear_planner_open_space_config() {
  if (planner_open_space_config_ != nullptr) planner_open_space_config_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
OpenSpaceTrajectoryOptimizerConfig::OpenSpaceTrajectoryOptimizerConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.planning.OpenSpaceTrajectoryOptimizerConfig)
}
OpenSpaceTrajectoryOptimizerConfig::OpenSpaceTrajectoryOptimizerConfig(const OpenSpaceTrajectoryOptimizerConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hybrid_a_star_config()) {
    hybrid_a_star_config_ = new ::apollo::planning::HybridAStarConfig(*from.hybrid_a_star_config_);
  } else {
    hybrid_a_star_config_ = nullptr;
  }
  if (from._internal_has_dual_variable_warm_start_config()) {
    dual_variable_warm_start_config_ = new ::apollo::planning::DualVariableConfig(*from.dual_variable_warm_start_config_);
  } else {
    dual_variable_warm_start_config_ = nullptr;
  }
  if (from._internal_has_distance_approach_trajectory_smoother_config()) {
    distance_approach_trajectory_smoother_config_ = new ::apollo::planning::DistanceApproachTrajectorySmootherConfig(*from.distance_approach_trajectory_smoother_config_);
  } else {
    distance_approach_trajectory_smoother_config_ = nullptr;
  }
  if (from._internal_has_planner_open_space_config()) {
    planner_open_space_config_ = new ::apollo::planning::PlannerOpenSpaceConfig(*from.planner_open_space_config_);
  } else {
    planner_open_space_config_ = nullptr;
  }
  ::memcpy(&delta_t_, &from.delta_t_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_near_destination_threshold_) -
    reinterpret_cast<char*>(&delta_t_)) + sizeof(is_near_destination_threshold_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.OpenSpaceTrajectoryOptimizerConfig)
}

void OpenSpaceTrajectoryOptimizerConfig::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&hybrid_a_star_config_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&planner_open_space_config_) -
    reinterpret_cast<char*>(&hybrid_a_star_config_)) + sizeof(planner_open_space_config_));
delta_t_ = 0.5f;
is_near_destination_threshold_ = 0.001;
}

OpenSpaceTrajectoryOptimizerConfig::~OpenSpaceTrajectoryOptimizerConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.OpenSpaceTrajectoryOptimizerConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OpenSpaceTrajectoryOptimizerConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete hybrid_a_star_config_;
  if (this != internal_default_instance()) delete dual_variable_warm_start_config_;
  if (this != internal_default_instance()) delete distance_approach_trajectory_smoother_config_;
  if (this != internal_default_instance()) delete planner_open_space_config_;
}

void OpenSpaceTrajectoryOptimizerConfig::ArenaDtor(void* object) {
  OpenSpaceTrajectoryOptimizerConfig* _this = reinterpret_cast< OpenSpaceTrajectoryOptimizerConfig* >(object);
  (void)_this;
}
void OpenSpaceTrajectoryOptimizerConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OpenSpaceTrajectoryOptimizerConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OpenSpaceTrajectoryOptimizerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.OpenSpaceTrajectoryOptimizerConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(hybrid_a_star_config_ != nullptr);
      hybrid_a_star_config_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(dual_variable_warm_start_config_ != nullptr);
      dual_variable_warm_start_config_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(distance_approach_trajectory_smoother_config_ != nullptr);
      distance_approach_trajectory_smoother_config_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(planner_open_space_config_ != nullptr);
      planner_open_space_config_->Clear();
    }
    delta_t_ = 0.5f;
    is_near_destination_threshold_ = 0.001;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OpenSpaceTrajectoryOptimizerConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.planning.HybridAStarConfig hybrid_a_star_config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_hybrid_a_star_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.DualVariableConfig dual_variable_warm_start_config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_dual_variable_warm_start_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.DistanceApproachTrajectorySmootherConfig distance_approach_trajectory_smoother_config = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_distance_approach_trajectory_smoother_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float delta_t = 4 [default = 0.5];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_delta_t(&has_bits);
          delta_t_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional double is_near_destination_threshold = 5 [default = 0.001];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_is_near_destination_threshold(&has_bits);
          is_near_destination_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.PlannerOpenSpaceConfig planner_open_space_config = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_planner_open_space_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OpenSpaceTrajectoryOptimizerConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.OpenSpaceTrajectoryOptimizerConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning.HybridAStarConfig hybrid_a_star_config = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::hybrid_a_star_config(this), target, stream);
  }

  // optional .apollo.planning.DualVariableConfig dual_variable_warm_start_config = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::dual_variable_warm_start_config(this), target, stream);
  }

  // optional .apollo.planning.DistanceApproachTrajectorySmootherConfig distance_approach_trajectory_smoother_config = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::distance_approach_trajectory_smoother_config(this), target, stream);
  }

  // optional float delta_t = 4 [default = 0.5];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_delta_t(), target);
  }

  // optional double is_near_destination_threshold = 5 [default = 0.001];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_is_near_destination_threshold(), target);
  }

  // optional .apollo.planning.PlannerOpenSpaceConfig planner_open_space_config = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::planner_open_space_config(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.OpenSpaceTrajectoryOptimizerConfig)
  return target;
}

size_t OpenSpaceTrajectoryOptimizerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.OpenSpaceTrajectoryOptimizerConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .apollo.planning.HybridAStarConfig hybrid_a_star_config = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *hybrid_a_star_config_);
    }

    // optional .apollo.planning.DualVariableConfig dual_variable_warm_start_config = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dual_variable_warm_start_config_);
    }

    // optional .apollo.planning.DistanceApproachTrajectorySmootherConfig distance_approach_trajectory_smoother_config = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *distance_approach_trajectory_smoother_config_);
    }

    // optional .apollo.planning.PlannerOpenSpaceConfig planner_open_space_config = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *planner_open_space_config_);
    }

    // optional float delta_t = 4 [default = 0.5];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional double is_near_destination_threshold = 5 [default = 0.001];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OpenSpaceTrajectoryOptimizerConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OpenSpaceTrajectoryOptimizerConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OpenSpaceTrajectoryOptimizerConfig::GetClassData() const { return &_class_data_; }

void OpenSpaceTrajectoryOptimizerConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OpenSpaceTrajectoryOptimizerConfig *>(to)->MergeFrom(
      static_cast<const OpenSpaceTrajectoryOptimizerConfig &>(from));
}


void OpenSpaceTrajectoryOptimizerConfig::MergeFrom(const OpenSpaceTrajectoryOptimizerConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.OpenSpaceTrajectoryOptimizerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_hybrid_a_star_config()->::apollo::planning::HybridAStarConfig::MergeFrom(from._internal_hybrid_a_star_config());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_dual_variable_warm_start_config()->::apollo::planning::DualVariableConfig::MergeFrom(from._internal_dual_variable_warm_start_config());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_distance_approach_trajectory_smoother_config()->::apollo::planning::DistanceApproachTrajectorySmootherConfig::MergeFrom(from._internal_distance_approach_trajectory_smoother_config());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_planner_open_space_config()->::apollo::planning::PlannerOpenSpaceConfig::MergeFrom(from._internal_planner_open_space_config());
    }
    if (cached_has_bits & 0x00000010u) {
      delta_t_ = from.delta_t_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_near_destination_threshold_ = from.is_near_destination_threshold_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OpenSpaceTrajectoryOptimizerConfig::CopyFrom(const OpenSpaceTrajectoryOptimizerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.OpenSpaceTrajectoryOptimizerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenSpaceTrajectoryOptimizerConfig::IsInitialized() const {
  return true;
}

void OpenSpaceTrajectoryOptimizerConfig::InternalSwap(OpenSpaceTrajectoryOptimizerConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OpenSpaceTrajectoryOptimizerConfig, planner_open_space_config_)
      + sizeof(OpenSpaceTrajectoryOptimizerConfig::planner_open_space_config_)
      - PROTOBUF_FIELD_OFFSET(OpenSpaceTrajectoryOptimizerConfig, hybrid_a_star_config_)>(
          reinterpret_cast<char*>(&hybrid_a_star_config_),
          reinterpret_cast<char*>(&other->hybrid_a_star_config_));
  swap(delta_t_, other->delta_t_);
  swap(is_near_destination_threshold_, other->is_near_destination_threshold_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OpenSpaceTrajectoryOptimizerConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto[5]);
}

// ===================================================================

class HybridAStarConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<HybridAStarConfig>()._has_bits_);
  static void set_has_xy_grid_resolution(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_phi_grid_resolution(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_next_node_num(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_step_size(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_traj_forward_penalty(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_traj_back_penalty(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_traj_gear_switch_penalty(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_traj_steer_penalty(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_traj_steer_change_penalty(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_grid_a_star_xy_resolution(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_node_radius(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

HybridAStarConfig::HybridAStarConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.planning.HybridAStarConfig)
}
HybridAStarConfig::HybridAStarConfig(const HybridAStarConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&traj_forward_penalty_, &from.traj_forward_penalty_,
    static_cast<size_t>(reinterpret_cast<char*>(&node_radius_) -
    reinterpret_cast<char*>(&traj_forward_penalty_)) + sizeof(node_radius_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.HybridAStarConfig)
}

void HybridAStarConfig::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&traj_forward_penalty_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&traj_back_penalty_) -
    reinterpret_cast<char*>(&traj_forward_penalty_)) + sizeof(traj_back_penalty_));
xy_grid_resolution_ = 0.2;
phi_grid_resolution_ = 0.05;
next_node_num_ = uint64_t{10u};
step_size_ = 0.5;
traj_gear_switch_penalty_ = 10;
traj_steer_penalty_ = 100;
traj_steer_change_penalty_ = 10;
grid_a_star_xy_resolution_ = 0.1;
node_radius_ = 0.5;
}

HybridAStarConfig::~HybridAStarConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.HybridAStarConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HybridAStarConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HybridAStarConfig::ArenaDtor(void* object) {
  HybridAStarConfig* _this = reinterpret_cast< HybridAStarConfig* >(object);
  (void)_this;
}
void HybridAStarConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HybridAStarConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HybridAStarConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.HybridAStarConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&traj_forward_penalty_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&traj_back_penalty_) -
        reinterpret_cast<char*>(&traj_forward_penalty_)) + sizeof(traj_back_penalty_));
    xy_grid_resolution_ = 0.2;
    phi_grid_resolution_ = 0.05;
    next_node_num_ = uint64_t{10u};
    step_size_ = 0.5;
    traj_gear_switch_penalty_ = 10;
    traj_steer_penalty_ = 100;
  }
  if (cached_has_bits & 0x00000700u) {
    traj_steer_change_penalty_ = 10;
    grid_a_star_xy_resolution_ = 0.1;
    node_radius_ = 0.5;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HybridAStarConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double xy_grid_resolution = 1 [default = 0.2];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_xy_grid_resolution(&has_bits);
          xy_grid_resolution_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double phi_grid_resolution = 2 [default = 0.05];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_phi_grid_resolution(&has_bits);
          phi_grid_resolution_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 next_node_num = 3 [default = 10];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_next_node_num(&has_bits);
          next_node_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double step_size = 4 [default = 0.5];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_step_size(&has_bits);
          step_size_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double traj_forward_penalty = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_traj_forward_penalty(&has_bits);
          traj_forward_penalty_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double traj_back_penalty = 6 [default = 0];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_traj_back_penalty(&has_bits);
          traj_back_penalty_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double traj_gear_switch_penalty = 7 [default = 10];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_traj_gear_switch_penalty(&has_bits);
          traj_gear_switch_penalty_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double traj_steer_penalty = 8 [default = 100];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_traj_steer_penalty(&has_bits);
          traj_steer_penalty_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double traj_steer_change_penalty = 9 [default = 10];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_traj_steer_change_penalty(&has_bits);
          traj_steer_change_penalty_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double grid_a_star_xy_resolution = 15 [default = 0.1];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          _Internal::set_has_grid_a_star_xy_resolution(&has_bits);
          grid_a_star_xy_resolution_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double node_radius = 16 [default = 0.5];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          _Internal::set_has_node_radius(&has_bits);
          node_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HybridAStarConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.HybridAStarConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double xy_grid_resolution = 1 [default = 0.2];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_xy_grid_resolution(), target);
  }

  // optional double phi_grid_resolution = 2 [default = 0.05];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_phi_grid_resolution(), target);
  }

  // optional uint64 next_node_num = 3 [default = 10];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_next_node_num(), target);
  }

  // optional double step_size = 4 [default = 0.5];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_step_size(), target);
  }

  // optional double traj_forward_penalty = 5 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_traj_forward_penalty(), target);
  }

  // optional double traj_back_penalty = 6 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_traj_back_penalty(), target);
  }

  // optional double traj_gear_switch_penalty = 7 [default = 10];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_traj_gear_switch_penalty(), target);
  }

  // optional double traj_steer_penalty = 8 [default = 100];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_traj_steer_penalty(), target);
  }

  // optional double traj_steer_change_penalty = 9 [default = 10];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_traj_steer_change_penalty(), target);
  }

  // optional double grid_a_star_xy_resolution = 15 [default = 0.1];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_grid_a_star_xy_resolution(), target);
  }

  // optional double node_radius = 16 [default = 0.5];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->_internal_node_radius(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.HybridAStarConfig)
  return target;
}

size_t HybridAStarConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.HybridAStarConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional double traj_forward_penalty = 5 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double traj_back_penalty = 6 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double xy_grid_resolution = 1 [default = 0.2];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double phi_grid_resolution = 2 [default = 0.05];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional uint64 next_node_num = 3 [default = 10];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_next_node_num());
    }

    // optional double step_size = 4 [default = 0.5];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double traj_gear_switch_penalty = 7 [default = 10];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double traj_steer_penalty = 8 [default = 100];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional double traj_steer_change_penalty = 9 [default = 10];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double grid_a_star_xy_resolution = 15 [default = 0.1];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double node_radius = 16 [default = 0.5];
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HybridAStarConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HybridAStarConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HybridAStarConfig::GetClassData() const { return &_class_data_; }

void HybridAStarConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HybridAStarConfig *>(to)->MergeFrom(
      static_cast<const HybridAStarConfig &>(from));
}


void HybridAStarConfig::MergeFrom(const HybridAStarConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.HybridAStarConfig)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      traj_forward_penalty_ = from.traj_forward_penalty_;
    }
    if (cached_has_bits & 0x00000002u) {
      traj_back_penalty_ = from.traj_back_penalty_;
    }
    if (cached_has_bits & 0x00000004u) {
      xy_grid_resolution_ = from.xy_grid_resolution_;
    }
    if (cached_has_bits & 0x00000008u) {
      phi_grid_resolution_ = from.phi_grid_resolution_;
    }
    if (cached_has_bits & 0x00000010u) {
      next_node_num_ = from.next_node_num_;
    }
    if (cached_has_bits & 0x00000020u) {
      step_size_ = from.step_size_;
    }
    if (cached_has_bits & 0x00000040u) {
      traj_gear_switch_penalty_ = from.traj_gear_switch_penalty_;
    }
    if (cached_has_bits & 0x00000080u) {
      traj_steer_penalty_ = from.traj_steer_penalty_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      traj_steer_change_penalty_ = from.traj_steer_change_penalty_;
    }
    if (cached_has_bits & 0x00000200u) {
      grid_a_star_xy_resolution_ = from.grid_a_star_xy_resolution_;
    }
    if (cached_has_bits & 0x00000400u) {
      node_radius_ = from.node_radius_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HybridAStarConfig::CopyFrom(const HybridAStarConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.HybridAStarConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HybridAStarConfig::IsInitialized() const {
  return true;
}

void HybridAStarConfig::InternalSwap(HybridAStarConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HybridAStarConfig, traj_back_penalty_)
      + sizeof(HybridAStarConfig::traj_back_penalty_)
      - PROTOBUF_FIELD_OFFSET(HybridAStarConfig, traj_forward_penalty_)>(
          reinterpret_cast<char*>(&traj_forward_penalty_),
          reinterpret_cast<char*>(&other->traj_forward_penalty_));
  swap(xy_grid_resolution_, other->xy_grid_resolution_);
  swap(phi_grid_resolution_, other->phi_grid_resolution_);
  swap(next_node_num_, other->next_node_num_);
  swap(step_size_, other->step_size_);
  swap(traj_gear_switch_penalty_, other->traj_gear_switch_penalty_);
  swap(traj_steer_penalty_, other->traj_steer_penalty_);
  swap(traj_steer_change_penalty_, other->traj_steer_change_penalty_);
  swap(grid_a_star_xy_resolution_, other->grid_a_star_xy_resolution_);
  swap(node_radius_, other->node_radius_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HybridAStarConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto[6]);
}

// ===================================================================

class DualVariableConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<DualVariableConfig>()._has_bits_);
  static void set_has_weight_d(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::apollo::planning::IpoptSolverConfig& ipopt_config(const DualVariableConfig* msg);
  static void set_has_ipopt_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_qp_format(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_min_safety_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_debug_osqp(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_beta(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::apollo::planning::IpoptSolverConfig&
DualVariableConfig::_Internal::ipopt_config(const DualVariableConfig* msg) {
  return *msg->ipopt_config_;
}
DualVariableConfig::DualVariableConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.planning.DualVariableConfig)
}
DualVariableConfig::DualVariableConfig(const DualVariableConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ipopt_config()) {
    ipopt_config_ = new ::apollo::planning::IpoptSolverConfig(*from.ipopt_config_);
  } else {
    ipopt_config_ = nullptr;
  }
  ::memcpy(&min_safety_distance_, &from.min_safety_distance_,
    static_cast<size_t>(reinterpret_cast<char*>(&beta_) -
    reinterpret_cast<char*>(&min_safety_distance_)) + sizeof(beta_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.DualVariableConfig)
}

void DualVariableConfig::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ipopt_config_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&debug_osqp_) -
    reinterpret_cast<char*>(&ipopt_config_)) + sizeof(debug_osqp_));
weight_d_ = 1;
beta_ = 1;
}

DualVariableConfig::~DualVariableConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.DualVariableConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DualVariableConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete ipopt_config_;
}

void DualVariableConfig::ArenaDtor(void* object) {
  DualVariableConfig* _this = reinterpret_cast< DualVariableConfig* >(object);
  (void)_this;
}
void DualVariableConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DualVariableConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DualVariableConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.DualVariableConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(ipopt_config_ != nullptr);
    ipopt_config_->Clear();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&min_safety_distance_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&debug_osqp_) -
        reinterpret_cast<char*>(&min_safety_distance_)) + sizeof(debug_osqp_));
    weight_d_ = 1;
    beta_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DualVariableConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double weight_d = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_weight_d(&has_bits);
          weight_d_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.IpoptSolverConfig ipopt_config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ipopt_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.DualVariableMode qp_format = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::planning::DualVariableMode_IsValid(val))) {
            _internal_set_qp_format(static_cast<::apollo::planning::DualVariableMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional double min_safety_distance = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_min_safety_distance(&has_bits);
          min_safety_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool debug_osqp = 5 [default = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_debug_osqp(&has_bits);
          debug_osqp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double beta = 6 [default = 1];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_beta(&has_bits);
          beta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DualVariableConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.DualVariableConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double weight_d = 1 [default = 1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_weight_d(), target);
  }

  // optional .apollo.planning.IpoptSolverConfig ipopt_config = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::ipopt_config(this), target, stream);
  }

  // optional .apollo.planning.DualVariableMode qp_format = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_qp_format(), target);
  }

  // optional double min_safety_distance = 4 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_min_safety_distance(), target);
  }

  // optional bool debug_osqp = 5 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_debug_osqp(), target);
  }

  // optional double beta = 6 [default = 1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_beta(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.DualVariableConfig)
  return target;
}

size_t DualVariableConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.DualVariableConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .apollo.planning.IpoptSolverConfig ipopt_config = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ipopt_config_);
    }

    // optional double min_safety_distance = 4 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional .apollo.planning.DualVariableMode qp_format = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_qp_format());
    }

    // optional bool debug_osqp = 5 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional double weight_d = 1 [default = 1];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double beta = 6 [default = 1];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DualVariableConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DualVariableConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DualVariableConfig::GetClassData() const { return &_class_data_; }

void DualVariableConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DualVariableConfig *>(to)->MergeFrom(
      static_cast<const DualVariableConfig &>(from));
}


void DualVariableConfig::MergeFrom(const DualVariableConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.DualVariableConfig)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_ipopt_config()->::apollo::planning::IpoptSolverConfig::MergeFrom(from._internal_ipopt_config());
    }
    if (cached_has_bits & 0x00000002u) {
      min_safety_distance_ = from.min_safety_distance_;
    }
    if (cached_has_bits & 0x00000004u) {
      qp_format_ = from.qp_format_;
    }
    if (cached_has_bits & 0x00000008u) {
      debug_osqp_ = from.debug_osqp_;
    }
    if (cached_has_bits & 0x00000010u) {
      weight_d_ = from.weight_d_;
    }
    if (cached_has_bits & 0x00000020u) {
      beta_ = from.beta_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DualVariableConfig::CopyFrom(const DualVariableConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.DualVariableConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DualVariableConfig::IsInitialized() const {
  return true;
}

void DualVariableConfig::InternalSwap(DualVariableConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DualVariableConfig, debug_osqp_)
      + sizeof(DualVariableConfig::debug_osqp_)
      - PROTOBUF_FIELD_OFFSET(DualVariableConfig, ipopt_config_)>(
          reinterpret_cast<char*>(&ipopt_config_),
          reinterpret_cast<char*>(&other->ipopt_config_));
  swap(weight_d_, other->weight_d_);
  swap(beta_, other->beta_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DualVariableConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto[7]);
}

// ===================================================================

class DistanceApproachTrajectorySmootherConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<DistanceApproachTrajectorySmootherConfig>()._has_bits_);
  static void set_has_weight_steer(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_weight_a(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_weight_steer_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_weight_a_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_weight_x(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_weight_y(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_weight_phi(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_weight_v(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_weight_steer_stitching(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_weight_a_stitching(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_weight_first_order_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_weight_second_order_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_min_safety_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_max_speed_forward(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_max_speed_reverse(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_max_acceleration_forward(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_max_acceleration_reverse(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_min_time_sample_scaling(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_max_time_sample_scaling(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_use_fix_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::apollo::planning::IpoptSolverConfig& ipopt_config(const DistanceApproachTrajectorySmootherConfig* msg);
  static void set_has_ipopt_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_enable_constraint_check(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_enable_hand_derivative(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_enable_derivative_check(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_enable_initial_final_check(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
};

const ::apollo::planning::IpoptSolverConfig&
DistanceApproachTrajectorySmootherConfig::_Internal::ipopt_config(const DistanceApproachTrajectorySmootherConfig* msg) {
  return *msg->ipopt_config_;
}
DistanceApproachTrajectorySmootherConfig::DistanceApproachTrajectorySmootherConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.planning.DistanceApproachTrajectorySmootherConfig)
}
DistanceApproachTrajectorySmootherConfig::DistanceApproachTrajectorySmootherConfig(const DistanceApproachTrajectorySmootherConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ipopt_config()) {
    ipopt_config_ = new ::apollo::planning::IpoptSolverConfig(*from.ipopt_config_);
  } else {
    ipopt_config_ = nullptr;
  }
  ::memcpy(&weight_steer_, &from.weight_steer_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_time_sample_scaling_) -
    reinterpret_cast<char*>(&weight_steer_)) + sizeof(max_time_sample_scaling_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.DistanceApproachTrajectorySmootherConfig)
}

void DistanceApproachTrajectorySmootherConfig::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ipopt_config_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&enable_initial_final_check_) -
    reinterpret_cast<char*>(&ipopt_config_)) + sizeof(enable_initial_final_check_));
max_speed_forward_ = 3;
max_speed_reverse_ = 2;
max_acceleration_forward_ = 2;
max_acceleration_reverse_ = 2;
min_time_sample_scaling_ = 0.1;
max_time_sample_scaling_ = 10;
}

DistanceApproachTrajectorySmootherConfig::~DistanceApproachTrajectorySmootherConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.DistanceApproachTrajectorySmootherConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DistanceApproachTrajectorySmootherConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete ipopt_config_;
}

void DistanceApproachTrajectorySmootherConfig::ArenaDtor(void* object) {
  DistanceApproachTrajectorySmootherConfig* _this = reinterpret_cast< DistanceApproachTrajectorySmootherConfig* >(object);
  (void)_this;
}
void DistanceApproachTrajectorySmootherConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DistanceApproachTrajectorySmootherConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DistanceApproachTrajectorySmootherConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.DistanceApproachTrajectorySmootherConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(ipopt_config_ != nullptr);
    ipopt_config_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&weight_steer_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&weight_phi_) -
        reinterpret_cast<char*>(&weight_steer_)) + sizeof(weight_phi_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&weight_v_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&enable_constraint_check_) -
        reinterpret_cast<char*>(&weight_v_)) + sizeof(enable_constraint_check_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&enable_hand_derivative_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&enable_initial_final_check_) -
        reinterpret_cast<char*>(&enable_hand_derivative_)) + sizeof(enable_initial_final_check_));
    max_speed_forward_ = 3;
    max_speed_reverse_ = 2;
    max_acceleration_forward_ = 2;
    max_acceleration_reverse_ = 2;
    min_time_sample_scaling_ = 0.1;
  }
  max_time_sample_scaling_ = 10;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DistanceApproachTrajectorySmootherConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double weight_steer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_weight_steer(&has_bits);
          weight_steer_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double weight_a = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_weight_a(&has_bits);
          weight_a_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double weight_steer_rate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_weight_steer_rate(&has_bits);
          weight_steer_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double weight_a_rate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_weight_a_rate(&has_bits);
          weight_a_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double weight_x = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_weight_x(&has_bits);
          weight_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double weight_y = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_weight_y(&has_bits);
          weight_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double weight_phi = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_weight_phi(&has_bits);
          weight_phi_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double weight_v = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_weight_v(&has_bits);
          weight_v_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double weight_steer_stitching = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_weight_steer_stitching(&has_bits);
          weight_steer_stitching_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double weight_a_stitching = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_weight_a_stitching(&has_bits);
          weight_a_stitching_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double weight_first_order_time = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_weight_first_order_time(&has_bits);
          weight_first_order_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double weight_second_order_time = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          _Internal::set_has_weight_second_order_time(&has_bits);
          weight_second_order_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double min_safety_distance = 13 [default = 0];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          _Internal::set_has_min_safety_distance(&has_bits);
          min_safety_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double max_speed_forward = 14 [default = 3];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          _Internal::set_has_max_speed_forward(&has_bits);
          max_speed_forward_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double max_speed_reverse = 15 [default = 2];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          _Internal::set_has_max_speed_reverse(&has_bits);
          max_speed_reverse_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double max_acceleration_forward = 16 [default = 2];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          _Internal::set_has_max_acceleration_forward(&has_bits);
          max_acceleration_forward_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double max_acceleration_reverse = 17 [default = 2];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 137)) {
          _Internal::set_has_max_acceleration_reverse(&has_bits);
          max_acceleration_reverse_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double min_time_sample_scaling = 18 [default = 0.1];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 145)) {
          _Internal::set_has_min_time_sample_scaling(&has_bits);
          min_time_sample_scaling_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double max_time_sample_scaling = 19 [default = 10];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 153)) {
          _Internal::set_has_max_time_sample_scaling(&has_bits);
          max_time_sample_scaling_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool use_fix_time = 20 [default = false];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_use_fix_time(&has_bits);
          use_fix_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.IpoptSolverConfig ipopt_config = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_ipopt_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_constraint_check = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_enable_constraint_check(&has_bits);
          enable_constraint_check_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_hand_derivative = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_enable_hand_derivative(&has_bits);
          enable_hand_derivative_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_derivative_check = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_enable_derivative_check(&has_bits);
          enable_derivative_check_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_initial_final_check = 25 [default = false];
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_enable_initial_final_check(&has_bits);
          enable_initial_final_check_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DistanceApproachTrajectorySmootherConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.DistanceApproachTrajectorySmootherConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double weight_steer = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_weight_steer(), target);
  }

  // optional double weight_a = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_weight_a(), target);
  }

  // optional double weight_steer_rate = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_weight_steer_rate(), target);
  }

  // optional double weight_a_rate = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_weight_a_rate(), target);
  }

  // optional double weight_x = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_weight_x(), target);
  }

  // optional double weight_y = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_weight_y(), target);
  }

  // optional double weight_phi = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_weight_phi(), target);
  }

  // optional double weight_v = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_weight_v(), target);
  }

  // optional double weight_steer_stitching = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_weight_steer_stitching(), target);
  }

  // optional double weight_a_stitching = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_weight_a_stitching(), target);
  }

  // optional double weight_first_order_time = 11;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_weight_first_order_time(), target);
  }

  // optional double weight_second_order_time = 12;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_weight_second_order_time(), target);
  }

  // optional double min_safety_distance = 13 [default = 0];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_min_safety_distance(), target);
  }

  // optional double max_speed_forward = 14 [default = 3];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_max_speed_forward(), target);
  }

  // optional double max_speed_reverse = 15 [default = 2];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_max_speed_reverse(), target);
  }

  // optional double max_acceleration_forward = 16 [default = 2];
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->_internal_max_acceleration_forward(), target);
  }

  // optional double max_acceleration_reverse = 17 [default = 2];
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(17, this->_internal_max_acceleration_reverse(), target);
  }

  // optional double min_time_sample_scaling = 18 [default = 0.1];
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(18, this->_internal_min_time_sample_scaling(), target);
  }

  // optional double max_time_sample_scaling = 19 [default = 10];
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(19, this->_internal_max_time_sample_scaling(), target);
  }

  // optional bool use_fix_time = 20 [default = false];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20, this->_internal_use_fix_time(), target);
  }

  // optional .apollo.planning.IpoptSolverConfig ipopt_config = 21;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::ipopt_config(this), target, stream);
  }

  // optional bool enable_constraint_check = 22;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(22, this->_internal_enable_constraint_check(), target);
  }

  // optional bool enable_hand_derivative = 23;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(23, this->_internal_enable_hand_derivative(), target);
  }

  // optional bool enable_derivative_check = 24;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(24, this->_internal_enable_derivative_check(), target);
  }

  // optional bool enable_initial_final_check = 25 [default = false];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(25, this->_internal_enable_initial_final_check(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.DistanceApproachTrajectorySmootherConfig)
  return target;
}

size_t DistanceApproachTrajectorySmootherConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.DistanceApproachTrajectorySmootherConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.planning.IpoptSolverConfig ipopt_config = 21;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ipopt_config_);
    }

    // optional double weight_steer = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double weight_a = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double weight_steer_rate = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double weight_a_rate = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double weight_x = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double weight_y = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double weight_phi = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional double weight_v = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double weight_steer_stitching = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double weight_a_stitching = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional double weight_first_order_time = 11;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

    // optional double weight_second_order_time = 12;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 8;
    }

    // optional double min_safety_distance = 13 [default = 0];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 8;
    }

    // optional bool use_fix_time = 20 [default = false];
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 1;
    }

    // optional bool enable_constraint_check = 22;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional bool enable_hand_derivative = 23;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional bool enable_derivative_check = 24;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional bool enable_initial_final_check = 25 [default = false];
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

    // optional double max_speed_forward = 14 [default = 3];
    if (cached_has_bits & 0x00080000u) {
      total_size += 1 + 8;
    }

    // optional double max_speed_reverse = 15 [default = 2];
    if (cached_has_bits & 0x00100000u) {
      total_size += 1 + 8;
    }

    // optional double max_acceleration_forward = 16 [default = 2];
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 8;
    }

    // optional double max_acceleration_reverse = 17 [default = 2];
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 8;
    }

    // optional double min_time_sample_scaling = 18 [default = 0.1];
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 8;
    }

  }
  // optional double max_time_sample_scaling = 19 [default = 10];
  if (cached_has_bits & 0x01000000u) {
    total_size += 2 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DistanceApproachTrajectorySmootherConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DistanceApproachTrajectorySmootherConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DistanceApproachTrajectorySmootherConfig::GetClassData() const { return &_class_data_; }

void DistanceApproachTrajectorySmootherConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DistanceApproachTrajectorySmootherConfig *>(to)->MergeFrom(
      static_cast<const DistanceApproachTrajectorySmootherConfig &>(from));
}


void DistanceApproachTrajectorySmootherConfig::MergeFrom(const DistanceApproachTrajectorySmootherConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.DistanceApproachTrajectorySmootherConfig)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_ipopt_config()->::apollo::planning::IpoptSolverConfig::MergeFrom(from._internal_ipopt_config());
    }
    if (cached_has_bits & 0x00000002u) {
      weight_steer_ = from.weight_steer_;
    }
    if (cached_has_bits & 0x00000004u) {
      weight_a_ = from.weight_a_;
    }
    if (cached_has_bits & 0x00000008u) {
      weight_steer_rate_ = from.weight_steer_rate_;
    }
    if (cached_has_bits & 0x00000010u) {
      weight_a_rate_ = from.weight_a_rate_;
    }
    if (cached_has_bits & 0x00000020u) {
      weight_x_ = from.weight_x_;
    }
    if (cached_has_bits & 0x00000040u) {
      weight_y_ = from.weight_y_;
    }
    if (cached_has_bits & 0x00000080u) {
      weight_phi_ = from.weight_phi_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      weight_v_ = from.weight_v_;
    }
    if (cached_has_bits & 0x00000200u) {
      weight_steer_stitching_ = from.weight_steer_stitching_;
    }
    if (cached_has_bits & 0x00000400u) {
      weight_a_stitching_ = from.weight_a_stitching_;
    }
    if (cached_has_bits & 0x00000800u) {
      weight_first_order_time_ = from.weight_first_order_time_;
    }
    if (cached_has_bits & 0x00001000u) {
      weight_second_order_time_ = from.weight_second_order_time_;
    }
    if (cached_has_bits & 0x00002000u) {
      min_safety_distance_ = from.min_safety_distance_;
    }
    if (cached_has_bits & 0x00004000u) {
      use_fix_time_ = from.use_fix_time_;
    }
    if (cached_has_bits & 0x00008000u) {
      enable_constraint_check_ = from.enable_constraint_check_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      enable_hand_derivative_ = from.enable_hand_derivative_;
    }
    if (cached_has_bits & 0x00020000u) {
      enable_derivative_check_ = from.enable_derivative_check_;
    }
    if (cached_has_bits & 0x00040000u) {
      enable_initial_final_check_ = from.enable_initial_final_check_;
    }
    if (cached_has_bits & 0x00080000u) {
      max_speed_forward_ = from.max_speed_forward_;
    }
    if (cached_has_bits & 0x00100000u) {
      max_speed_reverse_ = from.max_speed_reverse_;
    }
    if (cached_has_bits & 0x00200000u) {
      max_acceleration_forward_ = from.max_acceleration_forward_;
    }
    if (cached_has_bits & 0x00400000u) {
      max_acceleration_reverse_ = from.max_acceleration_reverse_;
    }
    if (cached_has_bits & 0x00800000u) {
      min_time_sample_scaling_ = from.min_time_sample_scaling_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x01000000u) {
    _internal_set_max_time_sample_scaling(from._internal_max_time_sample_scaling());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DistanceApproachTrajectorySmootherConfig::CopyFrom(const DistanceApproachTrajectorySmootherConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.DistanceApproachTrajectorySmootherConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DistanceApproachTrajectorySmootherConfig::IsInitialized() const {
  return true;
}

void DistanceApproachTrajectorySmootherConfig::InternalSwap(DistanceApproachTrajectorySmootherConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DistanceApproachTrajectorySmootherConfig, enable_initial_final_check_)
      + sizeof(DistanceApproachTrajectorySmootherConfig::enable_initial_final_check_)
      - PROTOBUF_FIELD_OFFSET(DistanceApproachTrajectorySmootherConfig, ipopt_config_)>(
          reinterpret_cast<char*>(&ipopt_config_),
          reinterpret_cast<char*>(&other->ipopt_config_));
  swap(max_speed_forward_, other->max_speed_forward_);
  swap(max_speed_reverse_, other->max_speed_reverse_);
  swap(max_acceleration_forward_, other->max_acceleration_forward_);
  swap(max_acceleration_reverse_, other->max_acceleration_reverse_);
  swap(min_time_sample_scaling_, other->min_time_sample_scaling_);
  swap(max_time_sample_scaling_, other->max_time_sample_scaling_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DistanceApproachTrajectorySmootherConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto[8]);
}

// ===================================================================

class IpoptSolverConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<IpoptSolverConfig>()._has_bits_);
  static void set_has_ipopt_print_level(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_mumps_mem_percent(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_mumps_pivtol(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_ipopt_max_iter(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_ipopt_tol(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_ipopt_acceptable_constr_viol_tol(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_ipopt_min_hessian_perturbation(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_ipopt_jacobian_regularization_value(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_ipopt_print_timing_statistics(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ipopt_alpha_for_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ipopt_recalc_y(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ipopt_mu_init(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

IpoptSolverConfig::IpoptSolverConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.planning.IpoptSolverConfig)
}
IpoptSolverConfig::IpoptSolverConfig(const IpoptSolverConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ipopt_print_timing_statistics_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ipopt_print_timing_statistics()) {
    ipopt_print_timing_statistics_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ipopt_print_timing_statistics(), 
      GetArenaForAllocation());
  }
  ipopt_alpha_for_y_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ipopt_alpha_for_y()) {
    ipopt_alpha_for_y_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ipopt_alpha_for_y(), 
      GetArenaForAllocation());
  }
  ipopt_recalc_y_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ipopt_recalc_y()) {
    ipopt_recalc_y_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ipopt_recalc_y(), 
      GetArenaForAllocation());
  }
  ::memcpy(&ipopt_print_level_, &from.ipopt_print_level_,
    static_cast<size_t>(reinterpret_cast<char*>(&ipopt_mu_init_) -
    reinterpret_cast<char*>(&ipopt_print_level_)) + sizeof(ipopt_mu_init_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.IpoptSolverConfig)
}

void IpoptSolverConfig::SharedCtor() {
ipopt_print_timing_statistics_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
ipopt_alpha_for_y_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
ipopt_recalc_y_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ipopt_print_level_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ipopt_max_iter_) -
    reinterpret_cast<char*>(&ipopt_print_level_)) + sizeof(ipopt_max_iter_));
ipopt_mu_init_ = 0.1;
}

IpoptSolverConfig::~IpoptSolverConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.IpoptSolverConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void IpoptSolverConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ipopt_print_timing_statistics_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ipopt_alpha_for_y_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ipopt_recalc_y_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IpoptSolverConfig::ArenaDtor(void* object) {
  IpoptSolverConfig* _this = reinterpret_cast< IpoptSolverConfig* >(object);
  (void)_this;
}
void IpoptSolverConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IpoptSolverConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IpoptSolverConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.IpoptSolverConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ipopt_print_timing_statistics_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ipopt_alpha_for_y_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      ipopt_recalc_y_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&ipopt_print_level_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ipopt_acceptable_constr_viol_tol_) -
        reinterpret_cast<char*>(&ipopt_print_level_)) + sizeof(ipopt_acceptable_constr_viol_tol_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&ipopt_min_hessian_perturbation_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ipopt_max_iter_) -
        reinterpret_cast<char*>(&ipopt_min_hessian_perturbation_)) + sizeof(ipopt_max_iter_));
    ipopt_mu_init_ = 0.1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IpoptSolverConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 ipopt_print_level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ipopt_print_level(&has_bits);
          ipopt_print_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 mumps_mem_percent = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_mumps_mem_percent(&has_bits);
          mumps_mem_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double mumps_pivtol = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_mumps_pivtol(&has_bits);
          mumps_pivtol_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional int32 ipopt_max_iter = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_ipopt_max_iter(&has_bits);
          ipopt_max_iter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double ipopt_tol = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_ipopt_tol(&has_bits);
          ipopt_tol_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double ipopt_acceptable_constr_viol_tol = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_ipopt_acceptable_constr_viol_tol(&has_bits);
          ipopt_acceptable_constr_viol_tol_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double ipopt_min_hessian_perturbation = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_ipopt_min_hessian_perturbation(&has_bits);
          ipopt_min_hessian_perturbation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double ipopt_jacobian_regularization_value = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_ipopt_jacobian_regularization_value(&has_bits);
          ipopt_jacobian_regularization_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional string ipopt_print_timing_statistics = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_ipopt_print_timing_statistics();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.planning.IpoptSolverConfig.ipopt_print_timing_statistics");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string ipopt_alpha_for_y = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_ipopt_alpha_for_y();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.planning.IpoptSolverConfig.ipopt_alpha_for_y");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string ipopt_recalc_y = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_ipopt_recalc_y();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.planning.IpoptSolverConfig.ipopt_recalc_y");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double ipopt_mu_init = 12 [default = 0.1];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          _Internal::set_has_ipopt_mu_init(&has_bits);
          ipopt_mu_init_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IpoptSolverConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.IpoptSolverConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ipopt_print_level = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ipopt_print_level(), target);
  }

  // optional int32 mumps_mem_percent = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_mumps_mem_percent(), target);
  }

  // optional double mumps_pivtol = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_mumps_pivtol(), target);
  }

  // optional int32 ipopt_max_iter = 4;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_ipopt_max_iter(), target);
  }

  // optional double ipopt_tol = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_ipopt_tol(), target);
  }

  // optional double ipopt_acceptable_constr_viol_tol = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_ipopt_acceptable_constr_viol_tol(), target);
  }

  // optional double ipopt_min_hessian_perturbation = 7;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_ipopt_min_hessian_perturbation(), target);
  }

  // optional double ipopt_jacobian_regularization_value = 8;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_ipopt_jacobian_regularization_value(), target);
  }

  // optional string ipopt_print_timing_statistics = 9;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ipopt_print_timing_statistics().data(), static_cast<int>(this->_internal_ipopt_print_timing_statistics().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.planning.IpoptSolverConfig.ipopt_print_timing_statistics");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_ipopt_print_timing_statistics(), target);
  }

  // optional string ipopt_alpha_for_y = 10;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ipopt_alpha_for_y().data(), static_cast<int>(this->_internal_ipopt_alpha_for_y().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.planning.IpoptSolverConfig.ipopt_alpha_for_y");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_ipopt_alpha_for_y(), target);
  }

  // optional string ipopt_recalc_y = 11;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ipopt_recalc_y().data(), static_cast<int>(this->_internal_ipopt_recalc_y().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.planning.IpoptSolverConfig.ipopt_recalc_y");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_ipopt_recalc_y(), target);
  }

  // optional double ipopt_mu_init = 12 [default = 0.1];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_ipopt_mu_init(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.IpoptSolverConfig)
  return target;
}

size_t IpoptSolverConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.IpoptSolverConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string ipopt_print_timing_statistics = 9;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ipopt_print_timing_statistics());
    }

    // optional string ipopt_alpha_for_y = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ipopt_alpha_for_y());
    }

    // optional string ipopt_recalc_y = 11;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ipopt_recalc_y());
    }

    // optional int32 ipopt_print_level = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_ipopt_print_level());
    }

    // optional int32 mumps_mem_percent = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_mumps_mem_percent());
    }

    // optional double mumps_pivtol = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double ipopt_tol = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double ipopt_acceptable_constr_viol_tol = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional double ipopt_min_hessian_perturbation = 7;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double ipopt_jacobian_regularization_value = 8;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional int32 ipopt_max_iter = 4;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_ipopt_max_iter());
    }

    // optional double ipopt_mu_init = 12 [default = 0.1];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IpoptSolverConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IpoptSolverConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IpoptSolverConfig::GetClassData() const { return &_class_data_; }

void IpoptSolverConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IpoptSolverConfig *>(to)->MergeFrom(
      static_cast<const IpoptSolverConfig &>(from));
}


void IpoptSolverConfig::MergeFrom(const IpoptSolverConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.IpoptSolverConfig)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_ipopt_print_timing_statistics(from._internal_ipopt_print_timing_statistics());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_ipopt_alpha_for_y(from._internal_ipopt_alpha_for_y());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_ipopt_recalc_y(from._internal_ipopt_recalc_y());
    }
    if (cached_has_bits & 0x00000008u) {
      ipopt_print_level_ = from.ipopt_print_level_;
    }
    if (cached_has_bits & 0x00000010u) {
      mumps_mem_percent_ = from.mumps_mem_percent_;
    }
    if (cached_has_bits & 0x00000020u) {
      mumps_pivtol_ = from.mumps_pivtol_;
    }
    if (cached_has_bits & 0x00000040u) {
      ipopt_tol_ = from.ipopt_tol_;
    }
    if (cached_has_bits & 0x00000080u) {
      ipopt_acceptable_constr_viol_tol_ = from.ipopt_acceptable_constr_viol_tol_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      ipopt_min_hessian_perturbation_ = from.ipopt_min_hessian_perturbation_;
    }
    if (cached_has_bits & 0x00000200u) {
      ipopt_jacobian_regularization_value_ = from.ipopt_jacobian_regularization_value_;
    }
    if (cached_has_bits & 0x00000400u) {
      ipopt_max_iter_ = from.ipopt_max_iter_;
    }
    if (cached_has_bits & 0x00000800u) {
      ipopt_mu_init_ = from.ipopt_mu_init_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IpoptSolverConfig::CopyFrom(const IpoptSolverConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.IpoptSolverConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IpoptSolverConfig::IsInitialized() const {
  return true;
}

void IpoptSolverConfig::InternalSwap(IpoptSolverConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ipopt_print_timing_statistics_, lhs_arena,
      &other->ipopt_print_timing_statistics_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ipopt_alpha_for_y_, lhs_arena,
      &other->ipopt_alpha_for_y_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ipopt_recalc_y_, lhs_arena,
      &other->ipopt_recalc_y_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IpoptSolverConfig, ipopt_max_iter_)
      + sizeof(IpoptSolverConfig::ipopt_max_iter_)
      - PROTOBUF_FIELD_OFFSET(IpoptSolverConfig, ipopt_print_level_)>(
          reinterpret_cast<char*>(&ipopt_print_level_),
          reinterpret_cast<char*>(&other->ipopt_print_level_));
  swap(ipopt_mu_init_, other->ipopt_mu_init_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IpoptSolverConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto[9]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace planning
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::planning::OpenSpaceFallBackDeciderConfig* Arena::CreateMaybeMessage< ::apollo::planning::OpenSpaceFallBackDeciderConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::OpenSpaceFallBackDeciderConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::OpenSpacePreStopDeciderConfig* Arena::CreateMaybeMessage< ::apollo::planning::OpenSpacePreStopDeciderConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::OpenSpacePreStopDeciderConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::OpenSpaceRoiDeciderConfig* Arena::CreateMaybeMessage< ::apollo::planning::OpenSpaceRoiDeciderConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::OpenSpaceRoiDeciderConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::OpenSpaceTrajectoryPartitionConfig* Arena::CreateMaybeMessage< ::apollo::planning::OpenSpaceTrajectoryPartitionConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::OpenSpaceTrajectoryPartitionConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::OpenSpaceTrajectoryProviderConfig* Arena::CreateMaybeMessage< ::apollo::planning::OpenSpaceTrajectoryProviderConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::OpenSpaceTrajectoryProviderConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::OpenSpaceTrajectoryOptimizerConfig* Arena::CreateMaybeMessage< ::apollo::planning::OpenSpaceTrajectoryOptimizerConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::OpenSpaceTrajectoryOptimizerConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::HybridAStarConfig* Arena::CreateMaybeMessage< ::apollo::planning::HybridAStarConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::HybridAStarConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::DualVariableConfig* Arena::CreateMaybeMessage< ::apollo::planning::DualVariableConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::DualVariableConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::DistanceApproachTrajectorySmootherConfig* Arena::CreateMaybeMessage< ::apollo::planning::DistanceApproachTrajectorySmootherConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::DistanceApproachTrajectorySmootherConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::IpoptSolverConfig* Arena::CreateMaybeMessage< ::apollo::planning::IpoptSolverConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::IpoptSolverConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
