// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/prediction/proto/fnn_vehicle_model.proto

#include "modules/prediction/proto/fnn_vehicle_model.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace apollo {
namespace prediction {
constexpr FnnVehicleModel::FnnVehicleModel(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : layer_()
  , samples_mean_(nullptr)
  , samples_std_(nullptr)
  , dim_input_(0)
  , num_layer_(0)
  , dim_output_(0){}
struct FnnVehicleModelDefaultTypeInternal {
  constexpr FnnVehicleModelDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FnnVehicleModelDefaultTypeInternal() {}
  union {
    FnnVehicleModel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FnnVehicleModelDefaultTypeInternal _FnnVehicleModel_default_instance_;
}  // namespace prediction
}  // namespace apollo
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fprediction_2fproto_2ffnn_5fvehicle_5fmodel_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_modules_2fprediction_2fproto_2ffnn_5fvehicle_5fmodel_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fprediction_2fproto_2ffnn_5fvehicle_5fmodel_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fprediction_2fproto_2ffnn_5fvehicle_5fmodel_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::FnnVehicleModel, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::FnnVehicleModel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::FnnVehicleModel, dim_input_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::FnnVehicleModel, samples_mean_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::FnnVehicleModel, samples_std_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::FnnVehicleModel, num_layer_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::FnnVehicleModel, layer_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::FnnVehicleModel, dim_output_),
  2,
  0,
  1,
  3,
  ~0u,
  4,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, -1, sizeof(::apollo::prediction::FnnVehicleModel)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::prediction::_FnnVehicleModel_default_instance_),
};

const char descriptor_table_protodef_modules_2fprediction_2fproto_2ffnn_5fvehicle_5fmodel_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n0modules/prediction/proto/fnn_vehicle_m"
  "odel.proto\022\021apollo.prediction\032-modules/p"
  "rediction/proto/fnn_model_base.proto\"\325\001\n"
  "\017FnnVehicleModel\022\021\n\tdim_input\030\001 \001(\005\022/\n\014s"
  "amples_mean\030\002 \001(\0132\031.apollo.prediction.Ve"
  "ctor\022.\n\013samples_std\030\003 \001(\0132\031.apollo.predi"
  "ction.Vector\022\021\n\tnum_layer\030\004 \001(\005\022\'\n\005layer"
  "\030\005 \003(\0132\030.apollo.prediction.Layer\022\022\n\ndim_"
  "output\030\006 \001(\005"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fprediction_2fproto_2ffnn_5fvehicle_5fmodel_2eproto_deps[1] = {
  &::descriptor_table_modules_2fprediction_2fproto_2ffnn_5fmodel_5fbase_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fprediction_2fproto_2ffnn_5fvehicle_5fmodel_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fprediction_2fproto_2ffnn_5fvehicle_5fmodel_2eproto = {
  false, false, 332, descriptor_table_protodef_modules_2fprediction_2fproto_2ffnn_5fvehicle_5fmodel_2eproto, "modules/prediction/proto/fnn_vehicle_model.proto", 
  &descriptor_table_modules_2fprediction_2fproto_2ffnn_5fvehicle_5fmodel_2eproto_once, descriptor_table_modules_2fprediction_2fproto_2ffnn_5fvehicle_5fmodel_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_modules_2fprediction_2fproto_2ffnn_5fvehicle_5fmodel_2eproto::offsets,
  file_level_metadata_modules_2fprediction_2fproto_2ffnn_5fvehicle_5fmodel_2eproto, file_level_enum_descriptors_modules_2fprediction_2fproto_2ffnn_5fvehicle_5fmodel_2eproto, file_level_service_descriptors_modules_2fprediction_2fproto_2ffnn_5fvehicle_5fmodel_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_modules_2fprediction_2fproto_2ffnn_5fvehicle_5fmodel_2eproto_getter() {
  return &descriptor_table_modules_2fprediction_2fproto_2ffnn_5fvehicle_5fmodel_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_modules_2fprediction_2fproto_2ffnn_5fvehicle_5fmodel_2eproto(&descriptor_table_modules_2fprediction_2fproto_2ffnn_5fvehicle_5fmodel_2eproto);
namespace apollo {
namespace prediction {

// ===================================================================

class FnnVehicleModel::_Internal {
 public:
  using HasBits = decltype(std::declval<FnnVehicleModel>()._has_bits_);
  static void set_has_dim_input(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::prediction::Vector& samples_mean(const FnnVehicleModel* msg);
  static void set_has_samples_mean(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::prediction::Vector& samples_std(const FnnVehicleModel* msg);
  static void set_has_samples_std(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_num_layer(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_dim_output(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::apollo::prediction::Vector&
FnnVehicleModel::_Internal::samples_mean(const FnnVehicleModel* msg) {
  return *msg->samples_mean_;
}
const ::apollo::prediction::Vector&
FnnVehicleModel::_Internal::samples_std(const FnnVehicleModel* msg) {
  return *msg->samples_std_;
}
void FnnVehicleModel::clear_samples_mean() {
  if (samples_mean_ != nullptr) samples_mean_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void FnnVehicleModel::clear_samples_std() {
  if (samples_std_ != nullptr) samples_std_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void FnnVehicleModel::clear_layer() {
  layer_.Clear();
}
FnnVehicleModel::FnnVehicleModel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  layer_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.prediction.FnnVehicleModel)
}
FnnVehicleModel::FnnVehicleModel(const FnnVehicleModel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      layer_(from.layer_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_samples_mean()) {
    samples_mean_ = new ::apollo::prediction::Vector(*from.samples_mean_);
  } else {
    samples_mean_ = nullptr;
  }
  if (from._internal_has_samples_std()) {
    samples_std_ = new ::apollo::prediction::Vector(*from.samples_std_);
  } else {
    samples_std_ = nullptr;
  }
  ::memcpy(&dim_input_, &from.dim_input_,
    static_cast<size_t>(reinterpret_cast<char*>(&dim_output_) -
    reinterpret_cast<char*>(&dim_input_)) + sizeof(dim_output_));
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.FnnVehicleModel)
}

void FnnVehicleModel::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&samples_mean_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&dim_output_) -
    reinterpret_cast<char*>(&samples_mean_)) + sizeof(dim_output_));
}

FnnVehicleModel::~FnnVehicleModel() {
  // @@protoc_insertion_point(destructor:apollo.prediction.FnnVehicleModel)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FnnVehicleModel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete samples_mean_;
  if (this != internal_default_instance()) delete samples_std_;
}

void FnnVehicleModel::ArenaDtor(void* object) {
  FnnVehicleModel* _this = reinterpret_cast< FnnVehicleModel* >(object);
  (void)_this;
}
void FnnVehicleModel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FnnVehicleModel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FnnVehicleModel::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.FnnVehicleModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  layer_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(samples_mean_ != nullptr);
      samples_mean_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(samples_std_ != nullptr);
      samples_std_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&dim_input_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dim_output_) -
        reinterpret_cast<char*>(&dim_input_)) + sizeof(dim_output_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FnnVehicleModel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 dim_input = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_dim_input(&has_bits);
          dim_input_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.prediction.Vector samples_mean = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_samples_mean(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.prediction.Vector samples_std = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_samples_std(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 num_layer = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_num_layer(&has_bits);
          num_layer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.prediction.Layer layer = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_layer(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int32 dim_output = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_dim_output(&has_bits);
          dim_output_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FnnVehicleModel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.FnnVehicleModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 dim_input = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_dim_input(), target);
  }

  // optional .apollo.prediction.Vector samples_mean = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::samples_mean(this), target, stream);
  }

  // optional .apollo.prediction.Vector samples_std = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::samples_std(this), target, stream);
  }

  // optional int32 num_layer = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_num_layer(), target);
  }

  // repeated .apollo.prediction.Layer layer = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_layer_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_layer(i), target, stream);
  }

  // optional int32 dim_output = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_dim_output(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.FnnVehicleModel)
  return target;
}

size_t FnnVehicleModel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.FnnVehicleModel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.prediction.Layer layer = 5;
  total_size += 1UL * this->_internal_layer_size();
  for (const auto& msg : this->layer_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .apollo.prediction.Vector samples_mean = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *samples_mean_);
    }

    // optional .apollo.prediction.Vector samples_std = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *samples_std_);
    }

    // optional int32 dim_input = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_dim_input());
    }

    // optional int32 num_layer = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_num_layer());
    }

    // optional int32 dim_output = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_dim_output());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FnnVehicleModel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FnnVehicleModel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FnnVehicleModel::GetClassData() const { return &_class_data_; }

void FnnVehicleModel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FnnVehicleModel *>(to)->MergeFrom(
      static_cast<const FnnVehicleModel &>(from));
}


void FnnVehicleModel::MergeFrom(const FnnVehicleModel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.FnnVehicleModel)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  layer_.MergeFrom(from.layer_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_samples_mean()->::apollo::prediction::Vector::MergeFrom(from._internal_samples_mean());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_samples_std()->::apollo::prediction::Vector::MergeFrom(from._internal_samples_std());
    }
    if (cached_has_bits & 0x00000004u) {
      dim_input_ = from.dim_input_;
    }
    if (cached_has_bits & 0x00000008u) {
      num_layer_ = from.num_layer_;
    }
    if (cached_has_bits & 0x00000010u) {
      dim_output_ = from.dim_output_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FnnVehicleModel::CopyFrom(const FnnVehicleModel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.FnnVehicleModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FnnVehicleModel::IsInitialized() const {
  return true;
}

void FnnVehicleModel::InternalSwap(FnnVehicleModel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  layer_.InternalSwap(&other->layer_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FnnVehicleModel, dim_output_)
      + sizeof(FnnVehicleModel::dim_output_)
      - PROTOBUF_FIELD_OFFSET(FnnVehicleModel, samples_mean_)>(
          reinterpret_cast<char*>(&samples_mean_),
          reinterpret_cast<char*>(&other->samples_mean_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FnnVehicleModel::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fprediction_2fproto_2ffnn_5fvehicle_5fmodel_2eproto_getter, &descriptor_table_modules_2fprediction_2fproto_2ffnn_5fvehicle_5fmodel_2eproto_once,
      file_level_metadata_modules_2fprediction_2fproto_2ffnn_5fvehicle_5fmodel_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace prediction
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::prediction::FnnVehicleModel* Arena::CreateMaybeMessage< ::apollo::prediction::FnnVehicleModel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::prediction::FnnVehicleModel >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
