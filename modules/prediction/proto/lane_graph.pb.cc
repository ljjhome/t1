// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/prediction/proto/lane_graph.proto

#include "modules/prediction/proto/lane_graph.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace apollo {
namespace prediction {
constexpr LanePoint::LanePoint(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : position_(nullptr)
  , heading_(0)
  , width_(0)
  , relative_s_(0)
  , relative_l_(0)
  , angle_diff_(0)
  , kappa_(0)
  , speed_limit_(0)
  , scenario_type_(0)
{}
struct LanePointDefaultTypeInternal {
  constexpr LanePointDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LanePointDefaultTypeInternal() {}
  union {
    LanePoint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LanePointDefaultTypeInternal _LanePoint_default_instance_;
constexpr LaneSegment::LaneSegment(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : lane_point_()
  , lane_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , start_s_(0)
  , end_s_(0)
  , total_length_(0)
  , lane_turn_type_(0u)
  , adc_lane_point_idx_(0)
  , adc_s_(0){}
struct LaneSegmentDefaultTypeInternal {
  constexpr LaneSegmentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LaneSegmentDefaultTypeInternal() {}
  union {
    LaneSegment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LaneSegmentDefaultTypeInternal _LaneSegment_default_instance_;
constexpr NearbyObstacle::NearbyObstacle(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : s_(0)
  , l_(0)
  , id_(0){}
struct NearbyObstacleDefaultTypeInternal {
  constexpr NearbyObstacleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NearbyObstacleDefaultTypeInternal() {}
  union {
    NearbyObstacle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NearbyObstacleDefaultTypeInternal _NearbyObstacle_default_instance_;
constexpr StopSign::StopSign(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stop_sign_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , lane_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , lane_s_(0)
  , lane_sequence_s_(0){}
struct StopSignDefaultTypeInternal {
  constexpr StopSignDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StopSignDefaultTypeInternal() {}
  union {
    StopSign _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StopSignDefaultTypeInternal _StopSign_default_instance_;
constexpr LaneSequence_Features::LaneSequence_Features(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mlp_features_(){}
struct LaneSequence_FeaturesDefaultTypeInternal {
  constexpr LaneSequence_FeaturesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LaneSequence_FeaturesDefaultTypeInternal() {}
  union {
    LaneSequence_Features _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LaneSequence_FeaturesDefaultTypeInternal _LaneSequence_Features_default_instance_;
constexpr LaneSequence::LaneSequence(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : lane_segment_()
  , nearby_obstacle_()
  , path_point_()
  , curr_lane_point_()
  , left_neighbor_point_()
  , right_neighbor_point_()
  , left_nearby_obstacle_()
  , right_nearby_obstacle_()
  , features_(nullptr)
  , stop_sign_(nullptr)
  , lane_sequence_id_(0)
  , label_(0)
  , probability_(0)
  , acceleration_(0)
  , vehicle_on_lane_(false)
  , right_of_way_(0)
  , time_to_lane_center_(0)
  , lane_s_(0)
  , lane_l_(0)
  , time_to_lane_edge_(0)
  , adc_lane_segment_idx_(0)
  , behavior_type_(1)

  , lane_type_(1)
{}
struct LaneSequenceDefaultTypeInternal {
  constexpr LaneSequenceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LaneSequenceDefaultTypeInternal() {}
  union {
    LaneSequence _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LaneSequenceDefaultTypeInternal _LaneSequence_default_instance_;
constexpr LaneGraph::LaneGraph(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : lane_sequence_(){}
struct LaneGraphDefaultTypeInternal {
  constexpr LaneGraphDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LaneGraphDefaultTypeInternal() {}
  union {
    LaneGraph _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LaneGraphDefaultTypeInternal _LaneGraph_default_instance_;
constexpr LaneObstacle::LaneObstacle(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : lane_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , lane_s_(0)
  , lane_l_(0)
  , obstacle_id_(0){}
struct LaneObstacleDefaultTypeInternal {
  constexpr LaneObstacleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LaneObstacleDefaultTypeInternal() {}
  union {
    LaneObstacle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LaneObstacleDefaultTypeInternal _LaneObstacle_default_instance_;
}  // namespace prediction
}  // namespace apollo
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fprediction_2fproto_2flane_5fgraph_2eproto[8];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_modules_2fprediction_2fproto_2flane_5fgraph_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fprediction_2fproto_2flane_5fgraph_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LanePoint, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LanePoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LanePoint, position_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LanePoint, heading_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LanePoint, width_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LanePoint, relative_s_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LanePoint, relative_l_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LanePoint, angle_diff_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LanePoint, kappa_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LanePoint, scenario_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LanePoint, speed_limit_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  8,
  7,
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LaneSegment, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LaneSegment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LaneSegment, lane_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LaneSegment, start_s_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LaneSegment, end_s_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LaneSegment, lane_turn_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LaneSegment, lane_point_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LaneSegment, adc_s_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LaneSegment, adc_lane_point_idx_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LaneSegment, total_length_),
  0,
  1,
  2,
  4,
  ~0u,
  6,
  5,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::NearbyObstacle, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::NearbyObstacle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::NearbyObstacle, id_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::NearbyObstacle, s_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::NearbyObstacle, l_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::StopSign, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::StopSign, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::StopSign, stop_sign_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::StopSign, lane_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::StopSign, lane_s_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::StopSign, lane_sequence_s_),
  0,
  1,
  2,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LaneSequence_Features, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LaneSequence_Features, mlp_features_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LaneSequence, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LaneSequence, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LaneSequence, lane_sequence_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LaneSequence, lane_segment_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LaneSequence, adc_lane_segment_idx_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LaneSequence, path_point_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LaneSequence, lane_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LaneSequence, lane_s_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LaneSequence, lane_l_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LaneSequence, vehicle_on_lane_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LaneSequence, nearby_obstacle_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LaneSequence, stop_sign_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LaneSequence, right_of_way_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LaneSequence, features_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LaneSequence, label_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LaneSequence, probability_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LaneSequence, acceleration_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LaneSequence, time_to_lane_center_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LaneSequence, time_to_lane_edge_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LaneSequence, behavior_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LaneSequence, curr_lane_point_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LaneSequence, left_neighbor_point_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LaneSequence, right_neighbor_point_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LaneSequence, left_nearby_obstacle_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LaneSequence, right_nearby_obstacle_),
  2,
  ~0u,
  12,
  ~0u,
  14,
  9,
  10,
  6,
  ~0u,
  1,
  7,
  0,
  3,
  4,
  5,
  8,
  11,
  13,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LaneGraph, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LaneGraph, lane_sequence_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LaneObstacle, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LaneObstacle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LaneObstacle, obstacle_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LaneObstacle, lane_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LaneObstacle, lane_s_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LaneObstacle, lane_l_),
  3,
  0,
  1,
  2,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 15, -1, sizeof(::apollo::prediction::LanePoint)},
  { 24, 38, -1, sizeof(::apollo::prediction::LaneSegment)},
  { 46, 55, -1, sizeof(::apollo::prediction::NearbyObstacle)},
  { 58, 68, -1, sizeof(::apollo::prediction::StopSign)},
  { 72, -1, -1, sizeof(::apollo::prediction::LaneSequence_Features)},
  { 79, 108, -1, sizeof(::apollo::prediction::LaneSequence)},
  { 131, -1, -1, sizeof(::apollo::prediction::LaneGraph)},
  { 138, 148, -1, sizeof(::apollo::prediction::LaneObstacle)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::prediction::_LanePoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::prediction::_LaneSegment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::prediction::_NearbyObstacle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::prediction::_StopSign_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::prediction::_LaneSequence_Features_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::prediction::_LaneSequence_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::prediction::_LaneGraph_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::prediction::_LaneObstacle_default_instance_),
};

const char descriptor_table_protodef_modules_2fprediction_2fproto_2flane_5fgraph_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n)modules/prediction/proto/lane_graph.pr"
  "oto\022\021apollo.prediction\032#modules/common/p"
  "roto/geometry.proto\032$modules/common/prot"
  "o/pnc_point.proto\032 modules/map/proto/map"
  "_lane.proto\"\304\002\n\tLanePoint\022(\n\010position\030\001 "
  "\001(\0132\026.apollo.common.Point3D\022\022\n\007heading\030\002"
  " \001(\001:\0010\022\020\n\005width\030\003 \001(\001:\0010\022\025\n\nrelative_s\030"
  "\004 \001(\001:\0010\022\025\n\nrelative_l\030\005 \001(\001:\0010\022\025\n\nangle"
  "_diff\030\006 \001(\001:\0010\022\020\n\005kappa\030\007 \001(\001:\0010\022@\n\rscen"
  "ario_type\030\010 \001(\0162).apollo.prediction.Lane"
  "Point.ScenarioType\022\023\n\013speed_limit\030\t \001(\001\""
  "9\n\014ScenarioType\022\016\n\nURBAN_ROAD\020\000\022\014\n\010JUNCT"
  "ION\020\001\022\013\n\007HIGHWAY\020\002\"\333\001\n\013LaneSegment\022\017\n\007la"
  "ne_id\030\001 \001(\t\022\022\n\007start_s\030\002 \001(\001:\0010\022\020\n\005end_s"
  "\030\003 \001(\001:\0010\022\031\n\016lane_turn_type\030\004 \001(\r:\0010\0220\n\n"
  "lane_point\030\005 \003(\0132\034.apollo.prediction.Lan"
  "ePoint\022\020\n\005adc_s\030\007 \001(\001:\0010\022\035\n\022adc_lane_poi"
  "nt_idx\030\010 \001(\005:\0010\022\027\n\014total_length\030\006 \001(\001:\0010"
  "\"2\n\016NearbyObstacle\022\n\n\002id\030\001 \001(\005\022\t\n\001s\030\002 \001("
  "\001\022\t\n\001l\030\003 \001(\001\"Z\n\010StopSign\022\024\n\014stop_sign_id"
  "\030\001 \001(\t\022\017\n\007lane_id\030\002 \001(\t\022\016\n\006lane_s\030\003 \001(\001\022"
  "\027\n\017lane_sequence_s\030\004 \001(\001\"\377\010\n\014LaneSequenc"
  "e\022\030\n\020lane_sequence_id\030\001 \001(\005\0224\n\014lane_segm"
  "ent\030\002 \003(\0132\036.apollo.prediction.LaneSegmen"
  "t\022\037\n\024adc_lane_segment_idx\030\027 \001(\005:\0010\022,\n\npa"
  "th_point\030\010 \003(\0132\030.apollo.common.PathPoint"
  "\022.\n\tlane_type\030\026 \001(\0162\033.apollo.hdmap.Lane."
  "LaneType\022\016\n\006lane_s\030\021 \001(\001\022\016\n\006lane_l\030\022 \001(\001"
  "\022\027\n\017vehicle_on_lane\030\n \001(\010\022:\n\017nearby_obst"
  "acle\030\003 \003(\0132!.apollo.prediction.NearbyObs"
  "tacle\022.\n\tstop_sign\030\024 \001(\0132\033.apollo.predic"
  "tion.StopSign\022\024\n\014right_of_way\030\025 \001(\005\022:\n\010f"
  "eatures\030\004 \001(\0132(.apollo.prediction.LaneSe"
  "quence.Features\022\020\n\005label\030\005 \001(\005:\0010\022\026\n\013pro"
  "bability\030\006 \001(\001:\0010\022\027\n\014acceleration\030\007 \001(\001:"
  "\0010\022\033\n\023time_to_lane_center\030\020 \001(\001\022\031\n\021time_"
  "to_lane_edge\030\023 \001(\001\022C\n\rbehavior_type\030\t \001("
  "\0162,.apollo.prediction.LaneSequence.Behav"
  "iorType\0225\n\017curr_lane_point\030\013 \003(\0132\034.apoll"
  "o.prediction.LanePoint\0229\n\023left_neighbor_"
  "point\030\014 \003(\0132\034.apollo.prediction.LanePoin"
  "t\022:\n\024right_neighbor_point\030\r \003(\0132\034.apollo"
  ".prediction.LanePoint\022\?\n\024left_nearby_obs"
  "tacle\030\016 \003(\0132!.apollo.prediction.NearbyOb"
  "stacle\022@\n\025right_nearby_obstacle\030\017 \003(\0132!."
  "apollo.prediction.NearbyObstacle\032 \n\010Feat"
  "ures\022\024\n\014mlp_features\030\001 \003(\001\"\225\001\n\014BehaviorT"
  "ype\022\021\n\rNOT_GOTO_LANE\020\001\022\022\n\016CONSTANT_SPEED"
  "\020\002\022\026\n\022SMALL_ACCELERATION\020\003\022\026\n\022LARGE_ACCE"
  "LERATION\020\004\022\026\n\022SMALL_DECELERATION\020\005\022\026\n\022LA"
  "RGE_DECELERATION\020\006\"C\n\tLaneGraph\0226\n\rlane_"
  "sequence\030\001 \003(\0132\037.apollo.prediction.LaneS"
  "equence\"T\n\014LaneObstacle\022\023\n\013obstacle_id\030\001"
  " \001(\005\022\017\n\007lane_id\030\002 \001(\t\022\016\n\006lane_s\030\003 \001(\001\022\016\n"
  "\006lane_l\030\004 \001(\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fprediction_2fproto_2flane_5fgraph_2eproto_deps[3] = {
  &::descriptor_table_modules_2fcommon_2fproto_2fgeometry_2eproto,
  &::descriptor_table_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto,
  &::descriptor_table_modules_2fmap_2fproto_2fmap_5flane_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fprediction_2fproto_2flane_5fgraph_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fprediction_2fproto_2flane_5fgraph_2eproto = {
  false, false, 2173, descriptor_table_protodef_modules_2fprediction_2fproto_2flane_5fgraph_2eproto, "modules/prediction/proto/lane_graph.proto", 
  &descriptor_table_modules_2fprediction_2fproto_2flane_5fgraph_2eproto_once, descriptor_table_modules_2fprediction_2fproto_2flane_5fgraph_2eproto_deps, 3, 8,
  schemas, file_default_instances, TableStruct_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::offsets,
  file_level_metadata_modules_2fprediction_2fproto_2flane_5fgraph_2eproto, file_level_enum_descriptors_modules_2fprediction_2fproto_2flane_5fgraph_2eproto, file_level_service_descriptors_modules_2fprediction_2fproto_2flane_5fgraph_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_modules_2fprediction_2fproto_2flane_5fgraph_2eproto_getter() {
  return &descriptor_table_modules_2fprediction_2fproto_2flane_5fgraph_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_modules_2fprediction_2fproto_2flane_5fgraph_2eproto(&descriptor_table_modules_2fprediction_2fproto_2flane_5fgraph_2eproto);
namespace apollo {
namespace prediction {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LanePoint_ScenarioType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fprediction_2fproto_2flane_5fgraph_2eproto);
  return file_level_enum_descriptors_modules_2fprediction_2fproto_2flane_5fgraph_2eproto[0];
}
bool LanePoint_ScenarioType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr LanePoint_ScenarioType LanePoint::URBAN_ROAD;
constexpr LanePoint_ScenarioType LanePoint::JUNCTION;
constexpr LanePoint_ScenarioType LanePoint::HIGHWAY;
constexpr LanePoint_ScenarioType LanePoint::ScenarioType_MIN;
constexpr LanePoint_ScenarioType LanePoint::ScenarioType_MAX;
constexpr int LanePoint::ScenarioType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LaneSequence_BehaviorType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fprediction_2fproto_2flane_5fgraph_2eproto);
  return file_level_enum_descriptors_modules_2fprediction_2fproto_2flane_5fgraph_2eproto[1];
}
bool LaneSequence_BehaviorType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr LaneSequence_BehaviorType LaneSequence::NOT_GOTO_LANE;
constexpr LaneSequence_BehaviorType LaneSequence::CONSTANT_SPEED;
constexpr LaneSequence_BehaviorType LaneSequence::SMALL_ACCELERATION;
constexpr LaneSequence_BehaviorType LaneSequence::LARGE_ACCELERATION;
constexpr LaneSequence_BehaviorType LaneSequence::SMALL_DECELERATION;
constexpr LaneSequence_BehaviorType LaneSequence::LARGE_DECELERATION;
constexpr LaneSequence_BehaviorType LaneSequence::BehaviorType_MIN;
constexpr LaneSequence_BehaviorType LaneSequence::BehaviorType_MAX;
constexpr int LaneSequence::BehaviorType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class LanePoint::_Internal {
 public:
  using HasBits = decltype(std::declval<LanePoint>()._has_bits_);
  static const ::apollo::common::Point3D& position(const LanePoint* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_heading(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_relative_s(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_relative_l(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_angle_diff(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_kappa(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_scenario_type(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_speed_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::apollo::common::Point3D&
LanePoint::_Internal::position(const LanePoint* msg) {
  return *msg->position_;
}
void LanePoint::clear_position() {
  if (position_ != nullptr) position_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
LanePoint::LanePoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.prediction.LanePoint)
}
LanePoint::LanePoint(const LanePoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    position_ = new ::apollo::common::Point3D(*from.position_);
  } else {
    position_ = nullptr;
  }
  ::memcpy(&heading_, &from.heading_,
    static_cast<size_t>(reinterpret_cast<char*>(&scenario_type_) -
    reinterpret_cast<char*>(&heading_)) + sizeof(scenario_type_));
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.LanePoint)
}

void LanePoint::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&position_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&scenario_type_) -
    reinterpret_cast<char*>(&position_)) + sizeof(scenario_type_));
}

LanePoint::~LanePoint() {
  // @@protoc_insertion_point(destructor:apollo.prediction.LanePoint)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LanePoint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete position_;
}

void LanePoint::ArenaDtor(void* object) {
  LanePoint* _this = reinterpret_cast< LanePoint* >(object);
  (void)_this;
}
void LanePoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LanePoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LanePoint::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.LanePoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(position_ != nullptr);
    position_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&heading_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&speed_limit_) -
        reinterpret_cast<char*>(&heading_)) + sizeof(speed_limit_));
  }
  scenario_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LanePoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.common.Point3D position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double heading = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_heading(&has_bits);
          heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double width = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double relative_s = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_relative_s(&has_bits);
          relative_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double relative_l = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_relative_l(&has_bits);
          relative_l_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double angle_diff = 6 [default = 0];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_angle_diff(&has_bits);
          angle_diff_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double kappa = 7 [default = 0];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_kappa(&has_bits);
          kappa_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.prediction.LanePoint.ScenarioType scenario_type = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::prediction::LanePoint_ScenarioType_IsValid(val))) {
            _internal_set_scenario_type(static_cast<::apollo::prediction::LanePoint_ScenarioType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional double speed_limit = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_speed_limit(&has_bits);
          speed_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LanePoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.LanePoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Point3D position = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::position(this), target, stream);
  }

  // optional double heading = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_heading(), target);
  }

  // optional double width = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_width(), target);
  }

  // optional double relative_s = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_relative_s(), target);
  }

  // optional double relative_l = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_relative_l(), target);
  }

  // optional double angle_diff = 6 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_angle_diff(), target);
  }

  // optional double kappa = 7 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_kappa(), target);
  }

  // optional .apollo.prediction.LanePoint.ScenarioType scenario_type = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_scenario_type(), target);
  }

  // optional double speed_limit = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_speed_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.LanePoint)
  return target;
}

size_t LanePoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.LanePoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.common.Point3D position = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *position_);
    }

    // optional double heading = 2 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double width = 3 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double relative_s = 4 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double relative_l = 5 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double angle_diff = 6 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double kappa = 7 [default = 0];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double speed_limit = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  // optional .apollo.prediction.LanePoint.ScenarioType scenario_type = 8;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_scenario_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LanePoint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LanePoint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LanePoint::GetClassData() const { return &_class_data_; }

void LanePoint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LanePoint *>(to)->MergeFrom(
      static_cast<const LanePoint &>(from));
}


void LanePoint::MergeFrom(const LanePoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.LanePoint)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_position()->::apollo::common::Point3D::MergeFrom(from._internal_position());
    }
    if (cached_has_bits & 0x00000002u) {
      heading_ = from.heading_;
    }
    if (cached_has_bits & 0x00000004u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000008u) {
      relative_s_ = from.relative_s_;
    }
    if (cached_has_bits & 0x00000010u) {
      relative_l_ = from.relative_l_;
    }
    if (cached_has_bits & 0x00000020u) {
      angle_diff_ = from.angle_diff_;
    }
    if (cached_has_bits & 0x00000040u) {
      kappa_ = from.kappa_;
    }
    if (cached_has_bits & 0x00000080u) {
      speed_limit_ = from.speed_limit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_scenario_type(from._internal_scenario_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LanePoint::CopyFrom(const LanePoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.LanePoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LanePoint::IsInitialized() const {
  return true;
}

void LanePoint::InternalSwap(LanePoint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LanePoint, scenario_type_)
      + sizeof(LanePoint::scenario_type_)
      - PROTOBUF_FIELD_OFFSET(LanePoint, position_)>(
          reinterpret_cast<char*>(&position_),
          reinterpret_cast<char*>(&other->position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LanePoint::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fprediction_2fproto_2flane_5fgraph_2eproto_getter, &descriptor_table_modules_2fprediction_2fproto_2flane_5fgraph_2eproto_once,
      file_level_metadata_modules_2fprediction_2fproto_2flane_5fgraph_2eproto[0]);
}

// ===================================================================

class LaneSegment::_Internal {
 public:
  using HasBits = decltype(std::declval<LaneSegment>()._has_bits_);
  static void set_has_lane_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_start_s(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_end_s(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_lane_turn_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_adc_s(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_adc_lane_point_idx(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_total_length(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

LaneSegment::LaneSegment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  lane_point_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.prediction.LaneSegment)
}
LaneSegment::LaneSegment(const LaneSegment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      lane_point_(from.lane_point_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  lane_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_lane_id()) {
    lane_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_lane_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&start_s_, &from.start_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&adc_s_) -
    reinterpret_cast<char*>(&start_s_)) + sizeof(adc_s_));
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.LaneSegment)
}

void LaneSegment::SharedCtor() {
lane_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&start_s_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&adc_s_) -
    reinterpret_cast<char*>(&start_s_)) + sizeof(adc_s_));
}

LaneSegment::~LaneSegment() {
  // @@protoc_insertion_point(destructor:apollo.prediction.LaneSegment)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LaneSegment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  lane_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LaneSegment::ArenaDtor(void* object) {
  LaneSegment* _this = reinterpret_cast< LaneSegment* >(object);
  (void)_this;
}
void LaneSegment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LaneSegment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LaneSegment::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.LaneSegment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lane_point_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    lane_id_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&start_s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&adc_s_) -
        reinterpret_cast<char*>(&start_s_)) + sizeof(adc_s_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LaneSegment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string lane_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_lane_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.prediction.LaneSegment.lane_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double start_s = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_start_s(&has_bits);
          start_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double end_s = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_end_s(&has_bits);
          end_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 lane_turn_type = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_lane_turn_type(&has_bits);
          lane_turn_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.prediction.LanePoint lane_point = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lane_point(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional double total_length = 6 [default = 0];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_total_length(&has_bits);
          total_length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double adc_s = 7 [default = 0];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_adc_s(&has_bits);
          adc_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional int32 adc_lane_point_idx = 8 [default = 0];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_adc_lane_point_idx(&has_bits);
          adc_lane_point_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LaneSegment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.LaneSegment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string lane_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_lane_id().data(), static_cast<int>(this->_internal_lane_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.prediction.LaneSegment.lane_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_lane_id(), target);
  }

  // optional double start_s = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_start_s(), target);
  }

  // optional double end_s = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_end_s(), target);
  }

  // optional uint32 lane_turn_type = 4 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_lane_turn_type(), target);
  }

  // repeated .apollo.prediction.LanePoint lane_point = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lane_point_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_lane_point(i), target, stream);
  }

  // optional double total_length = 6 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_total_length(), target);
  }

  // optional double adc_s = 7 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_adc_s(), target);
  }

  // optional int32 adc_lane_point_idx = 8 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_adc_lane_point_idx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.LaneSegment)
  return target;
}

size_t LaneSegment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.LaneSegment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.prediction.LanePoint lane_point = 5;
  total_size += 1UL * this->_internal_lane_point_size();
  for (const auto& msg : this->lane_point_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string lane_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_lane_id());
    }

    // optional double start_s = 2 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double end_s = 3 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double total_length = 6 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional uint32 lane_turn_type = 4 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_lane_turn_type());
    }

    // optional int32 adc_lane_point_idx = 8 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_adc_lane_point_idx());
    }

    // optional double adc_s = 7 [default = 0];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LaneSegment::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LaneSegment::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LaneSegment::GetClassData() const { return &_class_data_; }

void LaneSegment::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LaneSegment *>(to)->MergeFrom(
      static_cast<const LaneSegment &>(from));
}


void LaneSegment::MergeFrom(const LaneSegment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.LaneSegment)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lane_point_.MergeFrom(from.lane_point_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_lane_id(from._internal_lane_id());
    }
    if (cached_has_bits & 0x00000002u) {
      start_s_ = from.start_s_;
    }
    if (cached_has_bits & 0x00000004u) {
      end_s_ = from.end_s_;
    }
    if (cached_has_bits & 0x00000008u) {
      total_length_ = from.total_length_;
    }
    if (cached_has_bits & 0x00000010u) {
      lane_turn_type_ = from.lane_turn_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      adc_lane_point_idx_ = from.adc_lane_point_idx_;
    }
    if (cached_has_bits & 0x00000040u) {
      adc_s_ = from.adc_s_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LaneSegment::CopyFrom(const LaneSegment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.LaneSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneSegment::IsInitialized() const {
  return true;
}

void LaneSegment::InternalSwap(LaneSegment* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  lane_point_.InternalSwap(&other->lane_point_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &lane_id_, lhs_arena,
      &other->lane_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LaneSegment, adc_s_)
      + sizeof(LaneSegment::adc_s_)
      - PROTOBUF_FIELD_OFFSET(LaneSegment, start_s_)>(
          reinterpret_cast<char*>(&start_s_),
          reinterpret_cast<char*>(&other->start_s_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LaneSegment::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fprediction_2fproto_2flane_5fgraph_2eproto_getter, &descriptor_table_modules_2fprediction_2fproto_2flane_5fgraph_2eproto_once,
      file_level_metadata_modules_2fprediction_2fproto_2flane_5fgraph_2eproto[1]);
}

// ===================================================================

class NearbyObstacle::_Internal {
 public:
  using HasBits = decltype(std::declval<NearbyObstacle>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_s(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_l(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

NearbyObstacle::NearbyObstacle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.prediction.NearbyObstacle)
}
NearbyObstacle::NearbyObstacle(const NearbyObstacle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&s_, &from.s_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&s_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.NearbyObstacle)
}

void NearbyObstacle::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&s_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&s_)) + sizeof(id_));
}

NearbyObstacle::~NearbyObstacle() {
  // @@protoc_insertion_point(destructor:apollo.prediction.NearbyObstacle)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NearbyObstacle::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void NearbyObstacle::ArenaDtor(void* object) {
  NearbyObstacle* _this = reinterpret_cast< NearbyObstacle* >(object);
  (void)_this;
}
void NearbyObstacle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NearbyObstacle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NearbyObstacle::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.NearbyObstacle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&id_) -
        reinterpret_cast<char*>(&s_)) + sizeof(id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NearbyObstacle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double s = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_s(&has_bits);
          s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double l = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_l(&has_bits);
          l_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NearbyObstacle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.NearbyObstacle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // optional double s = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_s(), target);
  }

  // optional double l = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_l(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.NearbyObstacle)
  return target;
}

size_t NearbyObstacle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.NearbyObstacle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional double s = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double l = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional int32 id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NearbyObstacle::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NearbyObstacle::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NearbyObstacle::GetClassData() const { return &_class_data_; }

void NearbyObstacle::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NearbyObstacle *>(to)->MergeFrom(
      static_cast<const NearbyObstacle &>(from));
}


void NearbyObstacle::MergeFrom(const NearbyObstacle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.NearbyObstacle)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      s_ = from.s_;
    }
    if (cached_has_bits & 0x00000002u) {
      l_ = from.l_;
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NearbyObstacle::CopyFrom(const NearbyObstacle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.NearbyObstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NearbyObstacle::IsInitialized() const {
  return true;
}

void NearbyObstacle::InternalSwap(NearbyObstacle* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NearbyObstacle, id_)
      + sizeof(NearbyObstacle::id_)
      - PROTOBUF_FIELD_OFFSET(NearbyObstacle, s_)>(
          reinterpret_cast<char*>(&s_),
          reinterpret_cast<char*>(&other->s_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NearbyObstacle::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fprediction_2fproto_2flane_5fgraph_2eproto_getter, &descriptor_table_modules_2fprediction_2fproto_2flane_5fgraph_2eproto_once,
      file_level_metadata_modules_2fprediction_2fproto_2flane_5fgraph_2eproto[2]);
}

// ===================================================================

class StopSign::_Internal {
 public:
  using HasBits = decltype(std::declval<StopSign>()._has_bits_);
  static void set_has_stop_sign_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_lane_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_lane_s(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_lane_sequence_s(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

StopSign::StopSign(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.prediction.StopSign)
}
StopSign::StopSign(const StopSign& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  stop_sign_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_stop_sign_id()) {
    stop_sign_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_stop_sign_id(), 
      GetArenaForAllocation());
  }
  lane_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_lane_id()) {
    lane_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_lane_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&lane_s_, &from.lane_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&lane_sequence_s_) -
    reinterpret_cast<char*>(&lane_s_)) + sizeof(lane_sequence_s_));
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.StopSign)
}

void StopSign::SharedCtor() {
stop_sign_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
lane_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&lane_s_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&lane_sequence_s_) -
    reinterpret_cast<char*>(&lane_s_)) + sizeof(lane_sequence_s_));
}

StopSign::~StopSign() {
  // @@protoc_insertion_point(destructor:apollo.prediction.StopSign)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StopSign::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  stop_sign_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lane_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StopSign::ArenaDtor(void* object) {
  StopSign* _this = reinterpret_cast< StopSign* >(object);
  (void)_this;
}
void StopSign::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StopSign::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StopSign::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.StopSign)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      stop_sign_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      lane_id_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&lane_s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lane_sequence_s_) -
        reinterpret_cast<char*>(&lane_s_)) + sizeof(lane_sequence_s_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StopSign::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string stop_sign_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_stop_sign_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.prediction.StopSign.stop_sign_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string lane_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_lane_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.prediction.StopSign.lane_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double lane_s = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_lane_s(&has_bits);
          lane_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double lane_sequence_s = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_lane_sequence_s(&has_bits);
          lane_sequence_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StopSign::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.StopSign)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string stop_sign_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_stop_sign_id().data(), static_cast<int>(this->_internal_stop_sign_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.prediction.StopSign.stop_sign_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_stop_sign_id(), target);
  }

  // optional string lane_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_lane_id().data(), static_cast<int>(this->_internal_lane_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.prediction.StopSign.lane_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_lane_id(), target);
  }

  // optional double lane_s = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_lane_s(), target);
  }

  // optional double lane_sequence_s = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_lane_sequence_s(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.StopSign)
  return target;
}

size_t StopSign::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.StopSign)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string stop_sign_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_stop_sign_id());
    }

    // optional string lane_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_lane_id());
    }

    // optional double lane_s = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double lane_sequence_s = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StopSign::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StopSign::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StopSign::GetClassData() const { return &_class_data_; }

void StopSign::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StopSign *>(to)->MergeFrom(
      static_cast<const StopSign &>(from));
}


void StopSign::MergeFrom(const StopSign& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.StopSign)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_stop_sign_id(from._internal_stop_sign_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_lane_id(from._internal_lane_id());
    }
    if (cached_has_bits & 0x00000004u) {
      lane_s_ = from.lane_s_;
    }
    if (cached_has_bits & 0x00000008u) {
      lane_sequence_s_ = from.lane_sequence_s_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StopSign::CopyFrom(const StopSign& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.StopSign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopSign::IsInitialized() const {
  return true;
}

void StopSign::InternalSwap(StopSign* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &stop_sign_id_, lhs_arena,
      &other->stop_sign_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &lane_id_, lhs_arena,
      &other->lane_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StopSign, lane_sequence_s_)
      + sizeof(StopSign::lane_sequence_s_)
      - PROTOBUF_FIELD_OFFSET(StopSign, lane_s_)>(
          reinterpret_cast<char*>(&lane_s_),
          reinterpret_cast<char*>(&other->lane_s_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StopSign::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fprediction_2fproto_2flane_5fgraph_2eproto_getter, &descriptor_table_modules_2fprediction_2fproto_2flane_5fgraph_2eproto_once,
      file_level_metadata_modules_2fprediction_2fproto_2flane_5fgraph_2eproto[3]);
}

// ===================================================================

class LaneSequence_Features::_Internal {
 public:
};

LaneSequence_Features::LaneSequence_Features(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  mlp_features_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.prediction.LaneSequence.Features)
}
LaneSequence_Features::LaneSequence_Features(const LaneSequence_Features& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      mlp_features_(from.mlp_features_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.LaneSequence.Features)
}

void LaneSequence_Features::SharedCtor() {
}

LaneSequence_Features::~LaneSequence_Features() {
  // @@protoc_insertion_point(destructor:apollo.prediction.LaneSequence.Features)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LaneSequence_Features::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LaneSequence_Features::ArenaDtor(void* object) {
  LaneSequence_Features* _this = reinterpret_cast< LaneSequence_Features* >(object);
  (void)_this;
}
void LaneSequence_Features::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LaneSequence_Features::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LaneSequence_Features::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.LaneSequence.Features)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mlp_features_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LaneSequence_Features::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated double mlp_features = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_mlp_features(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<9>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_mlp_features(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LaneSequence_Features::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.LaneSequence.Features)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double mlp_features = 1;
  for (int i = 0, n = this->_internal_mlp_features_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_mlp_features(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.LaneSequence.Features)
  return target;
}

size_t LaneSequence_Features::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.LaneSequence.Features)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double mlp_features = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_mlp_features_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_mlp_features_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LaneSequence_Features::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LaneSequence_Features::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LaneSequence_Features::GetClassData() const { return &_class_data_; }

void LaneSequence_Features::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LaneSequence_Features *>(to)->MergeFrom(
      static_cast<const LaneSequence_Features &>(from));
}


void LaneSequence_Features::MergeFrom(const LaneSequence_Features& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.LaneSequence.Features)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mlp_features_.MergeFrom(from.mlp_features_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LaneSequence_Features::CopyFrom(const LaneSequence_Features& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.LaneSequence.Features)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneSequence_Features::IsInitialized() const {
  return true;
}

void LaneSequence_Features::InternalSwap(LaneSequence_Features* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  mlp_features_.InternalSwap(&other->mlp_features_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LaneSequence_Features::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fprediction_2fproto_2flane_5fgraph_2eproto_getter, &descriptor_table_modules_2fprediction_2fproto_2flane_5fgraph_2eproto_once,
      file_level_metadata_modules_2fprediction_2fproto_2flane_5fgraph_2eproto[4]);
}

// ===================================================================

class LaneSequence::_Internal {
 public:
  using HasBits = decltype(std::declval<LaneSequence>()._has_bits_);
  static void set_has_lane_sequence_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_adc_lane_segment_idx(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_lane_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_lane_s(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_lane_l(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_vehicle_on_lane(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::apollo::prediction::StopSign& stop_sign(const LaneSequence* msg);
  static void set_has_stop_sign(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_right_of_way(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::apollo::prediction::LaneSequence_Features& features(const LaneSequence* msg);
  static void set_has_features(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_label(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_probability(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_acceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_time_to_lane_center(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_time_to_lane_edge(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_behavior_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
};

const ::apollo::prediction::StopSign&
LaneSequence::_Internal::stop_sign(const LaneSequence* msg) {
  return *msg->stop_sign_;
}
const ::apollo::prediction::LaneSequence_Features&
LaneSequence::_Internal::features(const LaneSequence* msg) {
  return *msg->features_;
}
void LaneSequence::clear_path_point() {
  path_point_.Clear();
}
LaneSequence::LaneSequence(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  lane_segment_(arena),
  nearby_obstacle_(arena),
  path_point_(arena),
  curr_lane_point_(arena),
  left_neighbor_point_(arena),
  right_neighbor_point_(arena),
  left_nearby_obstacle_(arena),
  right_nearby_obstacle_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.prediction.LaneSequence)
}
LaneSequence::LaneSequence(const LaneSequence& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      lane_segment_(from.lane_segment_),
      nearby_obstacle_(from.nearby_obstacle_),
      path_point_(from.path_point_),
      curr_lane_point_(from.curr_lane_point_),
      left_neighbor_point_(from.left_neighbor_point_),
      right_neighbor_point_(from.right_neighbor_point_),
      left_nearby_obstacle_(from.left_nearby_obstacle_),
      right_nearby_obstacle_(from.right_nearby_obstacle_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_features()) {
    features_ = new ::apollo::prediction::LaneSequence_Features(*from.features_);
  } else {
    features_ = nullptr;
  }
  if (from._internal_has_stop_sign()) {
    stop_sign_ = new ::apollo::prediction::StopSign(*from.stop_sign_);
  } else {
    stop_sign_ = nullptr;
  }
  ::memcpy(&lane_sequence_id_, &from.lane_sequence_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&lane_type_) -
    reinterpret_cast<char*>(&lane_sequence_id_)) + sizeof(lane_type_));
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.LaneSequence)
}

void LaneSequence::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&features_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&adc_lane_segment_idx_) -
    reinterpret_cast<char*>(&features_)) + sizeof(adc_lane_segment_idx_));
behavior_type_ = 1;
lane_type_ = 1;
}

LaneSequence::~LaneSequence() {
  // @@protoc_insertion_point(destructor:apollo.prediction.LaneSequence)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LaneSequence::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete features_;
  if (this != internal_default_instance()) delete stop_sign_;
}

void LaneSequence::ArenaDtor(void* object) {
  LaneSequence* _this = reinterpret_cast< LaneSequence* >(object);
  (void)_this;
}
void LaneSequence::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LaneSequence::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LaneSequence::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.LaneSequence)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lane_segment_.Clear();
  nearby_obstacle_.Clear();
  path_point_.Clear();
  curr_lane_point_.Clear();
  left_neighbor_point_.Clear();
  right_neighbor_point_.Clear();
  left_nearby_obstacle_.Clear();
  right_nearby_obstacle_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(features_ != nullptr);
      features_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(stop_sign_ != nullptr);
      stop_sign_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&lane_sequence_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&right_of_way_) -
        reinterpret_cast<char*>(&lane_sequence_id_)) + sizeof(right_of_way_));
  }
  if (cached_has_bits & 0x00007f00u) {
    ::memset(&time_to_lane_center_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&adc_lane_segment_idx_) -
        reinterpret_cast<char*>(&time_to_lane_center_)) + sizeof(adc_lane_segment_idx_));
    behavior_type_ = 1;
    lane_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LaneSequence::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 lane_sequence_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_lane_sequence_id(&has_bits);
          lane_sequence_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.prediction.LaneSegment lane_segment = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lane_segment(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.prediction.NearbyObstacle nearby_obstacle = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nearby_obstacle(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.prediction.LaneSequence.Features features = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_features(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 label = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_label(&has_bits);
          label_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double probability = 6 [default = 0];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_probability(&has_bits);
          probability_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double acceleration = 7 [default = 0];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_acceleration(&has_bits);
          acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.common.PathPoint path_point = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_path_point(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.prediction.LaneSequence.BehaviorType behavior_type = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::prediction::LaneSequence_BehaviorType_IsValid(val))) {
            _internal_set_behavior_type(static_cast<::apollo::prediction::LaneSequence_BehaviorType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool vehicle_on_lane = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_vehicle_on_lane(&has_bits);
          vehicle_on_lane_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.prediction.LanePoint curr_lane_point = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_curr_lane_point(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.prediction.LanePoint left_neighbor_point = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_left_neighbor_point(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.prediction.LanePoint right_neighbor_point = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_right_neighbor_point(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.prediction.NearbyObstacle left_nearby_obstacle = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_left_nearby_obstacle(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.prediction.NearbyObstacle right_nearby_obstacle = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_right_nearby_obstacle(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional double time_to_lane_center = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          _Internal::set_has_time_to_lane_center(&has_bits);
          time_to_lane_center_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double lane_s = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 137)) {
          _Internal::set_has_lane_s(&has_bits);
          lane_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double lane_l = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 145)) {
          _Internal::set_has_lane_l(&has_bits);
          lane_l_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double time_to_lane_edge = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 153)) {
          _Internal::set_has_time_to_lane_edge(&has_bits);
          time_to_lane_edge_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.prediction.StopSign stop_sign = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_stop_sign(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 right_of_way = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_right_of_way(&has_bits);
          right_of_way_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.hdmap.Lane.LaneType lane_type = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::hdmap::Lane_LaneType_IsValid(val))) {
            _internal_set_lane_type(static_cast<::apollo::hdmap::Lane_LaneType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(22, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int32 adc_lane_segment_idx = 23 [default = 0];
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_adc_lane_segment_idx(&has_bits);
          adc_lane_segment_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LaneSequence::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.LaneSequence)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 lane_sequence_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_lane_sequence_id(), target);
  }

  // repeated .apollo.prediction.LaneSegment lane_segment = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lane_segment_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_lane_segment(i), target, stream);
  }

  // repeated .apollo.prediction.NearbyObstacle nearby_obstacle = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_nearby_obstacle_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_nearby_obstacle(i), target, stream);
  }

  // optional .apollo.prediction.LaneSequence.Features features = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::features(this), target, stream);
  }

  // optional int32 label = 5 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_label(), target);
  }

  // optional double probability = 6 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_probability(), target);
  }

  // optional double acceleration = 7 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_acceleration(), target);
  }

  // repeated .apollo.common.PathPoint path_point = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_path_point_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_path_point(i), target, stream);
  }

  // optional .apollo.prediction.LaneSequence.BehaviorType behavior_type = 9;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_behavior_type(), target);
  }

  // optional bool vehicle_on_lane = 10;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_vehicle_on_lane(), target);
  }

  // repeated .apollo.prediction.LanePoint curr_lane_point = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_curr_lane_point_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_curr_lane_point(i), target, stream);
  }

  // repeated .apollo.prediction.LanePoint left_neighbor_point = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_left_neighbor_point_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_left_neighbor_point(i), target, stream);
  }

  // repeated .apollo.prediction.LanePoint right_neighbor_point = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_right_neighbor_point_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_right_neighbor_point(i), target, stream);
  }

  // repeated .apollo.prediction.NearbyObstacle left_nearby_obstacle = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_left_nearby_obstacle_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, this->_internal_left_nearby_obstacle(i), target, stream);
  }

  // repeated .apollo.prediction.NearbyObstacle right_nearby_obstacle = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_right_nearby_obstacle_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, this->_internal_right_nearby_obstacle(i), target, stream);
  }

  // optional double time_to_lane_center = 16;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->_internal_time_to_lane_center(), target);
  }

  // optional double lane_s = 17;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(17, this->_internal_lane_s(), target);
  }

  // optional double lane_l = 18;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(18, this->_internal_lane_l(), target);
  }

  // optional double time_to_lane_edge = 19;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(19, this->_internal_time_to_lane_edge(), target);
  }

  // optional .apollo.prediction.StopSign stop_sign = 20;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::stop_sign(this), target, stream);
  }

  // optional int32 right_of_way = 21;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(21, this->_internal_right_of_way(), target);
  }

  // optional .apollo.hdmap.Lane.LaneType lane_type = 22;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      22, this->_internal_lane_type(), target);
  }

  // optional int32 adc_lane_segment_idx = 23 [default = 0];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(23, this->_internal_adc_lane_segment_idx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.LaneSequence)
  return target;
}

size_t LaneSequence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.LaneSequence)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.prediction.LaneSegment lane_segment = 2;
  total_size += 1UL * this->_internal_lane_segment_size();
  for (const auto& msg : this->lane_segment_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.prediction.NearbyObstacle nearby_obstacle = 3;
  total_size += 1UL * this->_internal_nearby_obstacle_size();
  for (const auto& msg : this->nearby_obstacle_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.common.PathPoint path_point = 8;
  total_size += 1UL * this->_internal_path_point_size();
  for (const auto& msg : this->path_point_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.prediction.LanePoint curr_lane_point = 11;
  total_size += 1UL * this->_internal_curr_lane_point_size();
  for (const auto& msg : this->curr_lane_point_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.prediction.LanePoint left_neighbor_point = 12;
  total_size += 1UL * this->_internal_left_neighbor_point_size();
  for (const auto& msg : this->left_neighbor_point_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.prediction.LanePoint right_neighbor_point = 13;
  total_size += 1UL * this->_internal_right_neighbor_point_size();
  for (const auto& msg : this->right_neighbor_point_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.prediction.NearbyObstacle left_nearby_obstacle = 14;
  total_size += 1UL * this->_internal_left_nearby_obstacle_size();
  for (const auto& msg : this->left_nearby_obstacle_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.prediction.NearbyObstacle right_nearby_obstacle = 15;
  total_size += 1UL * this->_internal_right_nearby_obstacle_size();
  for (const auto& msg : this->right_nearby_obstacle_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.prediction.LaneSequence.Features features = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *features_);
    }

    // optional .apollo.prediction.StopSign stop_sign = 20;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stop_sign_);
    }

    // optional int32 lane_sequence_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_lane_sequence_id());
    }

    // optional int32 label = 5 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_label());
    }

    // optional double probability = 6 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double acceleration = 7 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional bool vehicle_on_lane = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional int32 right_of_way = 21;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_right_of_way());
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional double time_to_lane_center = 16;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 8;
    }

    // optional double lane_s = 17;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 8;
    }

    // optional double lane_l = 18;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 8;
    }

    // optional double time_to_lane_edge = 19;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 8;
    }

    // optional int32 adc_lane_segment_idx = 23 [default = 0];
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_adc_lane_segment_idx());
    }

    // optional .apollo.prediction.LaneSequence.BehaviorType behavior_type = 9;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_behavior_type());
    }

    // optional .apollo.hdmap.Lane.LaneType lane_type = 22;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_lane_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LaneSequence::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LaneSequence::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LaneSequence::GetClassData() const { return &_class_data_; }

void LaneSequence::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LaneSequence *>(to)->MergeFrom(
      static_cast<const LaneSequence &>(from));
}


void LaneSequence::MergeFrom(const LaneSequence& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.LaneSequence)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lane_segment_.MergeFrom(from.lane_segment_);
  nearby_obstacle_.MergeFrom(from.nearby_obstacle_);
  path_point_.MergeFrom(from.path_point_);
  curr_lane_point_.MergeFrom(from.curr_lane_point_);
  left_neighbor_point_.MergeFrom(from.left_neighbor_point_);
  right_neighbor_point_.MergeFrom(from.right_neighbor_point_);
  left_nearby_obstacle_.MergeFrom(from.left_nearby_obstacle_);
  right_nearby_obstacle_.MergeFrom(from.right_nearby_obstacle_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_features()->::apollo::prediction::LaneSequence_Features::MergeFrom(from._internal_features());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_stop_sign()->::apollo::prediction::StopSign::MergeFrom(from._internal_stop_sign());
    }
    if (cached_has_bits & 0x00000004u) {
      lane_sequence_id_ = from.lane_sequence_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      label_ = from.label_;
    }
    if (cached_has_bits & 0x00000010u) {
      probability_ = from.probability_;
    }
    if (cached_has_bits & 0x00000020u) {
      acceleration_ = from.acceleration_;
    }
    if (cached_has_bits & 0x00000040u) {
      vehicle_on_lane_ = from.vehicle_on_lane_;
    }
    if (cached_has_bits & 0x00000080u) {
      right_of_way_ = from.right_of_way_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      time_to_lane_center_ = from.time_to_lane_center_;
    }
    if (cached_has_bits & 0x00000200u) {
      lane_s_ = from.lane_s_;
    }
    if (cached_has_bits & 0x00000400u) {
      lane_l_ = from.lane_l_;
    }
    if (cached_has_bits & 0x00000800u) {
      time_to_lane_edge_ = from.time_to_lane_edge_;
    }
    if (cached_has_bits & 0x00001000u) {
      adc_lane_segment_idx_ = from.adc_lane_segment_idx_;
    }
    if (cached_has_bits & 0x00002000u) {
      behavior_type_ = from.behavior_type_;
    }
    if (cached_has_bits & 0x00004000u) {
      lane_type_ = from.lane_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LaneSequence::CopyFrom(const LaneSequence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.LaneSequence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneSequence::IsInitialized() const {
  return true;
}

void LaneSequence::InternalSwap(LaneSequence* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  lane_segment_.InternalSwap(&other->lane_segment_);
  nearby_obstacle_.InternalSwap(&other->nearby_obstacle_);
  path_point_.InternalSwap(&other->path_point_);
  curr_lane_point_.InternalSwap(&other->curr_lane_point_);
  left_neighbor_point_.InternalSwap(&other->left_neighbor_point_);
  right_neighbor_point_.InternalSwap(&other->right_neighbor_point_);
  left_nearby_obstacle_.InternalSwap(&other->left_nearby_obstacle_);
  right_nearby_obstacle_.InternalSwap(&other->right_nearby_obstacle_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LaneSequence, adc_lane_segment_idx_)
      + sizeof(LaneSequence::adc_lane_segment_idx_)
      - PROTOBUF_FIELD_OFFSET(LaneSequence, features_)>(
          reinterpret_cast<char*>(&features_),
          reinterpret_cast<char*>(&other->features_));
  swap(behavior_type_, other->behavior_type_);
  swap(lane_type_, other->lane_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LaneSequence::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fprediction_2fproto_2flane_5fgraph_2eproto_getter, &descriptor_table_modules_2fprediction_2fproto_2flane_5fgraph_2eproto_once,
      file_level_metadata_modules_2fprediction_2fproto_2flane_5fgraph_2eproto[5]);
}

// ===================================================================

class LaneGraph::_Internal {
 public:
};

LaneGraph::LaneGraph(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  lane_sequence_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.prediction.LaneGraph)
}
LaneGraph::LaneGraph(const LaneGraph& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      lane_sequence_(from.lane_sequence_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.LaneGraph)
}

void LaneGraph::SharedCtor() {
}

LaneGraph::~LaneGraph() {
  // @@protoc_insertion_point(destructor:apollo.prediction.LaneGraph)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LaneGraph::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LaneGraph::ArenaDtor(void* object) {
  LaneGraph* _this = reinterpret_cast< LaneGraph* >(object);
  (void)_this;
}
void LaneGraph::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LaneGraph::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LaneGraph::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.LaneGraph)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lane_sequence_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LaneGraph::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .apollo.prediction.LaneSequence lane_sequence = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lane_sequence(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LaneGraph::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.LaneGraph)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.prediction.LaneSequence lane_sequence = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lane_sequence_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_lane_sequence(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.LaneGraph)
  return target;
}

size_t LaneGraph::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.LaneGraph)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.prediction.LaneSequence lane_sequence = 1;
  total_size += 1UL * this->_internal_lane_sequence_size();
  for (const auto& msg : this->lane_sequence_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LaneGraph::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LaneGraph::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LaneGraph::GetClassData() const { return &_class_data_; }

void LaneGraph::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LaneGraph *>(to)->MergeFrom(
      static_cast<const LaneGraph &>(from));
}


void LaneGraph::MergeFrom(const LaneGraph& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.LaneGraph)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lane_sequence_.MergeFrom(from.lane_sequence_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LaneGraph::CopyFrom(const LaneGraph& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.LaneGraph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneGraph::IsInitialized() const {
  return true;
}

void LaneGraph::InternalSwap(LaneGraph* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  lane_sequence_.InternalSwap(&other->lane_sequence_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LaneGraph::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fprediction_2fproto_2flane_5fgraph_2eproto_getter, &descriptor_table_modules_2fprediction_2fproto_2flane_5fgraph_2eproto_once,
      file_level_metadata_modules_2fprediction_2fproto_2flane_5fgraph_2eproto[6]);
}

// ===================================================================

class LaneObstacle::_Internal {
 public:
  using HasBits = decltype(std::declval<LaneObstacle>()._has_bits_);
  static void set_has_obstacle_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_lane_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_lane_s(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_lane_l(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

LaneObstacle::LaneObstacle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.prediction.LaneObstacle)
}
LaneObstacle::LaneObstacle(const LaneObstacle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  lane_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_lane_id()) {
    lane_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_lane_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&lane_s_, &from.lane_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&obstacle_id_) -
    reinterpret_cast<char*>(&lane_s_)) + sizeof(obstacle_id_));
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.LaneObstacle)
}

void LaneObstacle::SharedCtor() {
lane_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&lane_s_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&obstacle_id_) -
    reinterpret_cast<char*>(&lane_s_)) + sizeof(obstacle_id_));
}

LaneObstacle::~LaneObstacle() {
  // @@protoc_insertion_point(destructor:apollo.prediction.LaneObstacle)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LaneObstacle::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  lane_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LaneObstacle::ArenaDtor(void* object) {
  LaneObstacle* _this = reinterpret_cast< LaneObstacle* >(object);
  (void)_this;
}
void LaneObstacle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LaneObstacle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LaneObstacle::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.LaneObstacle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    lane_id_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&lane_s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&obstacle_id_) -
        reinterpret_cast<char*>(&lane_s_)) + sizeof(obstacle_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LaneObstacle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 obstacle_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_obstacle_id(&has_bits);
          obstacle_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string lane_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_lane_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.prediction.LaneObstacle.lane_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double lane_s = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_lane_s(&has_bits);
          lane_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double lane_l = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_lane_l(&has_bits);
          lane_l_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LaneObstacle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.LaneObstacle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 obstacle_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_obstacle_id(), target);
  }

  // optional string lane_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_lane_id().data(), static_cast<int>(this->_internal_lane_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.prediction.LaneObstacle.lane_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_lane_id(), target);
  }

  // optional double lane_s = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_lane_s(), target);
  }

  // optional double lane_l = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_lane_l(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.LaneObstacle)
  return target;
}

size_t LaneObstacle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.LaneObstacle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string lane_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_lane_id());
    }

    // optional double lane_s = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double lane_l = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional int32 obstacle_id = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_obstacle_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LaneObstacle::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LaneObstacle::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LaneObstacle::GetClassData() const { return &_class_data_; }

void LaneObstacle::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LaneObstacle *>(to)->MergeFrom(
      static_cast<const LaneObstacle &>(from));
}


void LaneObstacle::MergeFrom(const LaneObstacle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.LaneObstacle)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_lane_id(from._internal_lane_id());
    }
    if (cached_has_bits & 0x00000002u) {
      lane_s_ = from.lane_s_;
    }
    if (cached_has_bits & 0x00000004u) {
      lane_l_ = from.lane_l_;
    }
    if (cached_has_bits & 0x00000008u) {
      obstacle_id_ = from.obstacle_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LaneObstacle::CopyFrom(const LaneObstacle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.LaneObstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneObstacle::IsInitialized() const {
  return true;
}

void LaneObstacle::InternalSwap(LaneObstacle* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &lane_id_, lhs_arena,
      &other->lane_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LaneObstacle, obstacle_id_)
      + sizeof(LaneObstacle::obstacle_id_)
      - PROTOBUF_FIELD_OFFSET(LaneObstacle, lane_s_)>(
          reinterpret_cast<char*>(&lane_s_),
          reinterpret_cast<char*>(&other->lane_s_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LaneObstacle::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fprediction_2fproto_2flane_5fgraph_2eproto_getter, &descriptor_table_modules_2fprediction_2fproto_2flane_5fgraph_2eproto_once,
      file_level_metadata_modules_2fprediction_2fproto_2flane_5fgraph_2eproto[7]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace prediction
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::prediction::LanePoint* Arena::CreateMaybeMessage< ::apollo::prediction::LanePoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::prediction::LanePoint >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::prediction::LaneSegment* Arena::CreateMaybeMessage< ::apollo::prediction::LaneSegment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::prediction::LaneSegment >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::prediction::NearbyObstacle* Arena::CreateMaybeMessage< ::apollo::prediction::NearbyObstacle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::prediction::NearbyObstacle >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::prediction::StopSign* Arena::CreateMaybeMessage< ::apollo::prediction::StopSign >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::prediction::StopSign >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::prediction::LaneSequence_Features* Arena::CreateMaybeMessage< ::apollo::prediction::LaneSequence_Features >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::prediction::LaneSequence_Features >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::prediction::LaneSequence* Arena::CreateMaybeMessage< ::apollo::prediction::LaneSequence >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::prediction::LaneSequence >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::prediction::LaneGraph* Arena::CreateMaybeMessage< ::apollo::prediction::LaneGraph >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::prediction::LaneGraph >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::prediction::LaneObstacle* Arena::CreateMaybeMessage< ::apollo::prediction::LaneObstacle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::prediction::LaneObstacle >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
